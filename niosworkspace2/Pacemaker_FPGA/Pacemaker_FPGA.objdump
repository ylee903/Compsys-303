
Pacemaker_FPGA.elf:     file format elf32-littlenios2
Pacemaker_FPGA.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000b2a4 memsz 0x0000b2a4 flags r-x
    LOAD off    0x0000c2c4 vaddr 0x0080b2c4 paddr 0x0080cb08 align 2**12
         filesz 0x00001844 memsz 0x00001844 flags rw-
    LOAD off    0x0000e34c vaddr 0x0080e34c paddr 0x0080e34c align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000acb8  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003c8  0080aefc  0080aefc  0000befc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001844  0080b2c4  0080cb08  0000c2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  0080e34c  0080e34c  0000e34c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0080e470  0080e470  0000db08  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  0000db08  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000db08  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000828  00000000  00000000  0000db30  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000c77a  00000000  00000000  0000e358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003f6a  00000000  00000000  0001aad2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005b7d  00000000  00000000  0001ea3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000117c  00000000  00000000  000245bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002d30  00000000  00000000  00025738  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00003f40  00000000  00000000  00028468  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0002c3a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000810  00000000  00000000  0002c408  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0002eebd  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0002eec0  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0002eec3  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0002eec4  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0002eec5  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0002eece  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0002eed7  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  0002eee0  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000010  00000000  00000000  0002eeec  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000677b7  00000000  00000000  0002eefc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
0080aefc l    d  .rodata	00000000 .rodata
0080b2c4 l    d  .rwdata	00000000 .rwdata
0080e34c l    d  .bss	00000000 .bss
0080e470 l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Pacemaker_FPGA_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Pacemaker.c
00000000 l    df *ABS*	00000000 main.c
0080e34c l     O .bss	00000004 g_tick_flag
00805988 l     F .text	0000003c timer_isr
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
008073b4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080751c l     F .text	00000034 alt_dev_reg
0080b2c4 l     O .rwdata	00001060 jtag_uart
0080c324 l     O .rwdata	00000120 lcd
0080c444 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00807844 l     F .text	0000020c altera_avalon_jtag_uart_irq
00807a50 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0080cad8 l     O .rwdata	00000004 colstart
00808088 l     F .text	000000b8 lcd_write_command
00808140 l     F .text	000000d8 lcd_write_data
00808218 l     F .text	000000d0 lcd_clear_screen
008082e8 l     F .text	000001ec lcd_repaint_screen
008084d4 l     F .text	000000cc lcd_scroll_up
008085a0 l     F .text	000002ac lcd_handle_escape
00808d24 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00808f64 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00809214 l     F .text	0000009c altera_avalon_uart_irq
008092b0 l     F .text	000000e4 altera_avalon_uart_rxirq
00809394 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00809530 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00809748 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00809a5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00809bb0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00809bdc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00809e4c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00809f8c l     F .text	0000003c alt_get_errno
00809fc8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0080b13f l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0080c6b0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0080e360 g     O .bss	00000004 alt_instruction_exception_handler
008074a0 g     F .text	0000007c alt_main
0080e370 g     O .bss	00000100 alt_irq
0080cb08 g       *ABS*	00000000 __flash_rwdata_start
00806508 g     F .text	000000dc .hidden __gtdf2
0080a418 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080e36c g     O .bss	00000004 errno
0080e358 g     O .bss	00000004 alt_argv
00814ad4 g       *ABS*	00000000 _gp
0080a3e8 g     F .text	00000030 usleep
0080545c g     F .text	000002d0 reset
0080c530 g     O .rwdata	00000180 alt_fd_list
0080a594 g     F .text	00000090 alt_find_dev
0080a928 g     F .text	00000148 memcpy
00806fd4 g     F .text	000000dc .hidden __floatsidf
00809f10 g     F .text	0000007c alt_io_redirect
008065e4 g     F .text	000000f4 .hidden __ltdf2
0080aefc g       *ABS*	00000000 __DTOR_END__
00809db0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00807c48 g     F .text	0000021c altera_avalon_jtag_uart_read
00805ba0 g     F .text	00000064 .hidden __udivsi3
0080a7d0 g     F .text	00000090 alt_icache_flush
0080caec g     O .rwdata	00000004 alt_max_fd
00805c5c g     F .text	000008ac .hidden __adddf3
0080cb00 g     O .rwdata	00000004 _global_impure_ptr
0080e470 g       *ABS*	00000000 __bss_end
008072c4 g     F .text	000000f0 alt_iic_isr_register
0080a2e0 g     F .text	00000108 alt_tick
00809168 g     F .text	000000ac altera_avalon_uart_init
00807278 g     F .text	0000004c alt_ic_irq_enabled
0080a244 g     F .text	0000009c alt_alarm_stop
0080e350 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
0080c508 g     O .rwdata	00000028 alt_dev_null
00809b68 g     F .text	00000048 alt_dcache_flush_all
0080cb08 g       *ABS*	00000000 __ram_rwdata_end
0080cae4 g     O .rwdata	00000008 alt_dev_list
0080b2c4 g       *ABS*	00000000 __ram_rodata_end
008065e4 g     F .text	000000f4 .hidden __ledf2
00805c04 g     F .text	00000058 .hidden __umodsi3
0080e470 g       *ABS*	00000000 end
0080884c g     F .text	000004d8 altera_avalon_lcd_16207_write
00809784 g     F .text	000001ac altera_avalon_uart_write
00807784 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0080aefc g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00808fdc g     F .text	0000007c alt_avalon_timer_sc_init
008090b8 g     F .text	00000060 altera_avalon_uart_write_fd
008070b0 g     F .text	00000064 .hidden __clzsi2
00809118 g     F .text	00000050 altera_avalon_uart_close_fd
00807e64 g     F .text	00000224 altera_avalon_jtag_uart_write
0080ad48 g     F .text	00000180 __call_exitprocs
00800244 g     F .text	0000004c _start
0080e364 g     O .bss	00000004 _alt_tick_rate
0080e368 g     O .bss	00000004 _alt_nticks
00807588 g     F .text	00000098 alt_sys_init
0080ac30 g     F .text	00000118 __register_exitproc
00807af0 g     F .text	00000068 altera_avalon_jtag_uart_close
0080b2c4 g       *ABS*	00000000 __ram_rwdata_start
0080aefc g       *ABS*	00000000 __ram_rodata_start
00807620 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0080a72c g     F .text	000000a4 alt_get_fd
0080a43c g     F .text	00000158 alt_busy_sleep
0080a8ac g     F .text	0000007c memcmp
008076e0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0080e470 g       *ABS*	00000000 __alt_stack_base
00807730 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0080572c g     F .text	0000025c tick
0080a624 g     F .text	00000108 alt_find_file
00809c18 g     F .text	000000a4 alt_dev_llist_insert
0080e34c g       *ABS*	00000000 __bss_start
0080aa70 g     F .text	00000128 memset
008059c4 g     F .text	000000e4 main
0080e35c g     O .bss	00000004 alt_envp
00807680 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00808dd0 g     F .text	00000134 altera_avalon_lcd_16207_init
0080caf0 g     O .rwdata	00000004 alt_errno
00805aa8 g     F .text	00000084 .hidden __divsi3
0080aefc g       *ABS*	00000000 __CTOR_END__
0080aefc g       *ABS*	00000000 __flash_rodata_start
0080aefc g       *ABS*	00000000 __DTOR_LIST__
00807550 g     F .text	00000038 alt_irq_init
0080a1e0 g     F .text	00000064 alt_release_fd
0080aefc g     O .rodata	00000100 .hidden __clz_tab
0080a860 g     F .text	00000014 atexit
0080cb04 g     O .rwdata	00000004 _impure_ptr
0080e354 g     O .bss	00000004 alt_argc
00809d1c g     F .text	00000060 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
00808f04 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
0080cadc g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00807114 g     F .text	00000050 alt_ic_isr_register
0080cb08 g       *ABS*	00000000 _edata
00809058 g     F .text	00000060 altera_avalon_uart_read_fd
0080e470 g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
00807b58 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
008071ec g     F .text	0000008c alt_ic_irq_disable
0080a874 g     F .text	00000038 exit
00805b2c g     F .text	00000074 .hidden __modsi3
00800290 g     F .text	000051cc logic
0080cafc g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080b03e g     O .rodata	00000101 _ctype_
008094dc g     F .text	00000054 altera_avalon_uart_close
0080aec8 g     F .text	00000034 _exit
00809930 g     F .text	0000012c alt_alarm_start
0080ab98 g     F .text	00000098 strlen
0080a08c g     F .text	00000154 open
00806508 g     F .text	000000dc .hidden __gedf2
00809d7c g     F .text	00000034 alt_icache_flush_all
0080cad4 g     O .rwdata	00000004 alt_priority_mask
00807164 g     F .text	00000088 alt_ic_irq_enable
0080956c g     F .text	000001dc altera_avalon_uart_read
008066d8 g     F .text	000008fc .hidden __subdf3
0080caf4 g     O .rwdata	00000008 alt_alarm_list
00809cbc g     F .text	00000060 _do_ctors
00809a98 g     F .text	000000d0 close
0080741c g     F .text	00000084 alt_load



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	10b8dc04 	addi	r2,r2,-7312
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10b8dc04 	addi	r2,r2,-7312
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a62317 	ldw	r2,-26484(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a62317 	ldw	r2,-26484(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d692b514 	ori	gp,gp,19156
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800268:	10b8d314 	ori	r2,r2,58188

    movhi r3, %hi(__bss_end)
  80026c:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  800270:	18f91c14 	ori	r3,r3,58480

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080741c0 	call	80741c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	08074a00 	call	8074a0 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <logic>:

#include "timing.h"

#include "Pacemaker.h"

void logic(TickData* d) {
  800290:	defffa04 	addi	sp,sp,-24
  800294:	dfc00515 	stw	ra,20(sp)
  800298:	df000415 	stw	fp,16(sp)
  80029c:	dc800315 	stw	r18,12(sp)
  8002a0:	dc400215 	stw	r17,8(sp)
  8002a4:	dc000115 	stw	r16,4(sp)
  8002a8:	df000404 	addi	fp,sp,16
  8002ac:	e13ffc15 	stw	r4,-16(fp)
  d->_g16 = d->_pg8;
  8002b0:	e0bffc17 	ldw	r2,-16(fp)
  8002b4:	10c06ac3 	ldbu	r3,427(r2)
  8002b8:	e0bffc17 	ldw	r2,-16(fp)
  8002bc:	10c03945 	stb	r3,229(r2)
  d->_g10 = d->_pg29;
  8002c0:	e0bffc17 	ldw	r2,-16(fp)
  8002c4:	10c06b03 	ldbu	r3,428(r2)
  8002c8:	e0bffc17 	ldw	r2,-16(fp)
  8002cc:	10c03805 	stb	r3,224(r2)
  d->_g13_e1 = !(d->_g16 || d->_g10);
  8002d0:	e0bffc17 	ldw	r2,-16(fp)
  8002d4:	10803943 	ldbu	r2,229(r2)
  8002d8:	10803fcc 	andi	r2,r2,255
  8002dc:	1080201c 	xori	r2,r2,128
  8002e0:	10bfe004 	addi	r2,r2,-128
  8002e4:	1000081e 	bne	r2,zero,800308 <logic+0x78>
  8002e8:	e0bffc17 	ldw	r2,-16(fp)
  8002ec:	10803803 	ldbu	r2,224(r2)
  8002f0:	10803fcc 	andi	r2,r2,255
  8002f4:	1080201c 	xori	r2,r2,128
  8002f8:	10bfe004 	addi	r2,r2,-128
  8002fc:	1000021e 	bne	r2,zero,800308 <logic+0x78>
  800300:	00800044 	movi	r2,1
  800304:	00000106 	br	80030c <logic+0x7c>
  800308:	0005883a 	mov	r2,zero
  80030c:	1007883a 	mov	r3,r2
  800310:	e0bffc17 	ldw	r2,-16(fp)
  800314:	10c06785 	stb	r3,414(r2)
  d->_g20 = d->_pg17;
  800318:	e0bffc17 	ldw	r2,-16(fp)
  80031c:	10c06b43 	ldbu	r3,429(r2)
  800320:	e0bffc17 	ldw	r2,-16(fp)
  800324:	10c039c5 	stb	r3,231(r2)
  d->_g21 = d->_g20 && d->VS;
  800328:	e0bffc17 	ldw	r2,-16(fp)
  80032c:	108039c3 	ldbu	r2,231(r2)
  800330:	10803fcc 	andi	r2,r2,255
  800334:	1080201c 	xori	r2,r2,128
  800338:	10bfe004 	addi	r2,r2,-128
  80033c:	10000826 	beq	r2,zero,800360 <logic+0xd0>
  800340:	e0bffc17 	ldw	r2,-16(fp)
  800344:	10803143 	ldbu	r2,197(r2)
  800348:	10803fcc 	andi	r2,r2,255
  80034c:	1080201c 	xori	r2,r2,128
  800350:	10bfe004 	addi	r2,r2,-128
  800354:	10000226 	beq	r2,zero,800360 <logic+0xd0>
  800358:	00800044 	movi	r2,1
  80035c:	00000106 	br	800364 <logic+0xd4>
  800360:	0005883a 	mov	r2,zero
  800364:	1007883a 	mov	r3,r2
  800368:	e0bffc17 	ldw	r2,-16(fp)
  80036c:	10c03a05 	stb	r3,232(r2)
  if (d->_g21) {
  800370:	e0bffc17 	ldw	r2,-16(fp)
  800374:	10803a03 	ldbu	r2,232(r2)
  800378:	10803fcc 	andi	r2,r2,255
  80037c:	1080201c 	xori	r2,r2,128
  800380:	10bfe004 	addi	r2,r2,-128
  800384:	10000326 	beq	r2,zero,800394 <logic+0x104>
    d->_Pacemaker_local__Atrig = 1;
  800388:	e0bffc17 	ldw	r2,-16(fp)
  80038c:	00c00044 	movi	r3,1
  800390:	10c03405 	stb	r3,208(r2)
  }
  d->_g181 = d->_pg151;
  800394:	e0bffc17 	ldw	r2,-16(fp)
  800398:	10c06b83 	ldbu	r3,430(r2)
  80039c:	e0bffc17 	ldw	r2,-16(fp)
  8003a0:	10c056c5 	stb	r3,347(r2)
  if (d->_g181) {
  8003a4:	e0bffc17 	ldw	r2,-16(fp)
  8003a8:	108056c3 	ldbu	r2,347(r2)
  8003ac:	10803fcc 	andi	r2,r2,255
  8003b0:	1080201c 	xori	r2,r2,128
  8003b4:	10bfe004 	addi	r2,r2,-128
  8003b8:	10001226 	beq	r2,zero,800404 <logic+0x174>
    d->_region0_VRefrac_t += d->deltaT;
  8003bc:	e13ffc17 	ldw	r4,-16(fp)
  8003c0:	20802117 	ldw	r2,132(r4)
  8003c4:	20c02217 	ldw	r3,136(r4)
  8003c8:	e1bffc17 	ldw	r6,-16(fp)
  8003cc:	31002d17 	ldw	r4,180(r6)
  8003d0:	31402e17 	ldw	r5,184(r6)
  8003d4:	200d883a 	mov	r6,r4
  8003d8:	280f883a 	mov	r7,r5
  8003dc:	1009883a 	mov	r4,r2
  8003e0:	180b883a 	mov	r5,r3
  8003e4:	0805c5c0 	call	805c5c <__adddf3>
  8003e8:	1009883a 	mov	r4,r2
  8003ec:	180b883a 	mov	r5,r3
  8003f0:	2005883a 	mov	r2,r4
  8003f4:	2807883a 	mov	r3,r5
  8003f8:	e13ffc17 	ldw	r4,-16(fp)
  8003fc:	20802115 	stw	r2,132(r4)
  800400:	20c02215 	stw	r3,136(r4)
  }
  d->_g23 = d->_g20 && !d->VS;
  800404:	e0bffc17 	ldw	r2,-16(fp)
  800408:	108039c3 	ldbu	r2,231(r2)
  80040c:	10803fcc 	andi	r2,r2,255
  800410:	1080201c 	xori	r2,r2,128
  800414:	10bfe004 	addi	r2,r2,-128
  800418:	10000826 	beq	r2,zero,80043c <logic+0x1ac>
  80041c:	e0bffc17 	ldw	r2,-16(fp)
  800420:	10803143 	ldbu	r2,197(r2)
  800424:	10803fcc 	andi	r2,r2,255
  800428:	1080201c 	xori	r2,r2,128
  80042c:	10bfe004 	addi	r2,r2,-128
  800430:	1000021e 	bne	r2,zero,80043c <logic+0x1ac>
  800434:	00800044 	movi	r2,1
  800438:	00000106 	br	800440 <logic+0x1b0>
  80043c:	0005883a 	mov	r2,zero
  800440:	1007883a 	mov	r3,r2
  800444:	e0bffc17 	ldw	r2,-16(fp)
  800448:	10c03a85 	stb	r3,234(r2)
  d->_cg23 = d->_region0_VRefrac_t >= d->T_VRP;
  80044c:	e0bffc17 	ldw	r2,-16(fp)
  800450:	14002117 	ldw	r16,132(r2)
  800454:	14402217 	ldw	r17,136(r2)
  800458:	e0bffc17 	ldw	r2,-16(fp)
  80045c:	10800417 	ldw	r2,16(r2)
  800460:	1009883a 	mov	r4,r2
  800464:	0806fd40 	call	806fd4 <__floatsidf>
  800468:	1009883a 	mov	r4,r2
  80046c:	180b883a 	mov	r5,r3
  800470:	04800044 	movi	r18,1
  800474:	200d883a 	mov	r6,r4
  800478:	280f883a 	mov	r7,r5
  80047c:	8009883a 	mov	r4,r16
  800480:	880b883a 	mov	r5,r17
  800484:	08065080 	call	806508 <__gedf2>
  800488:	1000010e 	bge	r2,zero,800490 <logic+0x200>
  80048c:	0025883a 	mov	r18,zero
  800490:	9007883a 	mov	r3,r18
  800494:	e0bffc17 	ldw	r2,-16(fp)
  800498:	10c05a45 	stb	r3,361(r2)
  d->_g24 = d->_g23 && d->_cg23;
  80049c:	e0bffc17 	ldw	r2,-16(fp)
  8004a0:	10803a83 	ldbu	r2,234(r2)
  8004a4:	10803fcc 	andi	r2,r2,255
  8004a8:	1080201c 	xori	r2,r2,128
  8004ac:	10bfe004 	addi	r2,r2,-128
  8004b0:	10000826 	beq	r2,zero,8004d4 <logic+0x244>
  8004b4:	e0bffc17 	ldw	r2,-16(fp)
  8004b8:	10805a43 	ldbu	r2,361(r2)
  8004bc:	10803fcc 	andi	r2,r2,255
  8004c0:	1080201c 	xori	r2,r2,128
  8004c4:	10bfe004 	addi	r2,r2,-128
  8004c8:	10000226 	beq	r2,zero,8004d4 <logic+0x244>
  8004cc:	00800044 	movi	r2,1
  8004d0:	00000106 	br	8004d8 <logic+0x248>
  8004d4:	0005883a 	mov	r2,zero
  8004d8:	1007883a 	mov	r3,r2
  8004dc:	e0bffc17 	ldw	r2,-16(fp)
  8004e0:	10c03ac5 	stb	r3,235(r2)
  if (d->_g24) {
  8004e4:	e0bffc17 	ldw	r2,-16(fp)
  8004e8:	10803ac3 	ldbu	r2,235(r2)
  8004ec:	10803fcc 	andi	r2,r2,255
  8004f0:	1080201c 	xori	r2,r2,128
  8004f4:	10bfe004 	addi	r2,r2,-128
  8004f8:	10000326 	beq	r2,zero,800508 <logic+0x278>
    d->_Pacemaker_local__Atrig1 = 1;
  8004fc:	e0bffc17 	ldw	r2,-16(fp)
  800500:	00c00044 	movi	r3,1
  800504:	10c03445 	stb	r3,209(r2)
  }
  d->sleepT = 1000.0;
  800508:	e0fffc17 	ldw	r3,-16(fp)
  80050c:	18002f15 	stw	zero,188(r3)
  800510:	009023f4 	movhi	r2,16527
  800514:	10900004 	addi	r2,r2,16384
  800518:	18803015 	stw	r2,192(r3)
  d->_g16 = d->_g10 || d->_g16;
  80051c:	e0bffc17 	ldw	r2,-16(fp)
  800520:	10803803 	ldbu	r2,224(r2)
  800524:	10803fcc 	andi	r2,r2,255
  800528:	1080201c 	xori	r2,r2,128
  80052c:	10bfe004 	addi	r2,r2,-128
  800530:	1000061e 	bne	r2,zero,80054c <logic+0x2bc>
  800534:	e0bffc17 	ldw	r2,-16(fp)
  800538:	10803943 	ldbu	r2,229(r2)
  80053c:	10803fcc 	andi	r2,r2,255
  800540:	1080201c 	xori	r2,r2,128
  800544:	10bfe004 	addi	r2,r2,-128
  800548:	10000226 	beq	r2,zero,800554 <logic+0x2c4>
  80054c:	00800044 	movi	r2,1
  800550:	00000106 	br	800558 <logic+0x2c8>
  800554:	0005883a 	mov	r2,zero
  800558:	1007883a 	mov	r3,r2
  80055c:	e0bffc17 	ldw	r2,-16(fp)
  800560:	10c03945 	stb	r3,229(r2)
  d->_cg11 = d->_region0_VRefrac_t < d->T_VRP;
  800564:	e0bffc17 	ldw	r2,-16(fp)
  800568:	14002117 	ldw	r16,132(r2)
  80056c:	14402217 	ldw	r17,136(r2)
  800570:	e0bffc17 	ldw	r2,-16(fp)
  800574:	10800417 	ldw	r2,16(r2)
  800578:	1009883a 	mov	r4,r2
  80057c:	0806fd40 	call	806fd4 <__floatsidf>
  800580:	1009883a 	mov	r4,r2
  800584:	180b883a 	mov	r5,r3
  800588:	04800044 	movi	r18,1
  80058c:	200d883a 	mov	r6,r4
  800590:	280f883a 	mov	r7,r5
  800594:	8009883a 	mov	r4,r16
  800598:	880b883a 	mov	r5,r17
  80059c:	08065e40 	call	8065e4 <__ledf2>
  8005a0:	10000116 	blt	r2,zero,8005a8 <logic+0x318>
  8005a4:	0025883a 	mov	r18,zero
  8005a8:	9007883a 	mov	r3,r18
  8005ac:	e0bffc17 	ldw	r2,-16(fp)
  8005b0:	10c05985 	stb	r3,358(r2)
  d->_g10 = d->_g16 && d->_cg11;
  8005b4:	e0bffc17 	ldw	r2,-16(fp)
  8005b8:	10803943 	ldbu	r2,229(r2)
  8005bc:	10803fcc 	andi	r2,r2,255
  8005c0:	1080201c 	xori	r2,r2,128
  8005c4:	10bfe004 	addi	r2,r2,-128
  8005c8:	10000826 	beq	r2,zero,8005ec <logic+0x35c>
  8005cc:	e0bffc17 	ldw	r2,-16(fp)
  8005d0:	10805983 	ldbu	r2,358(r2)
  8005d4:	10803fcc 	andi	r2,r2,255
  8005d8:	1080201c 	xori	r2,r2,128
  8005dc:	10bfe004 	addi	r2,r2,-128
  8005e0:	10000226 	beq	r2,zero,8005ec <logic+0x35c>
  8005e4:	00800044 	movi	r2,1
  8005e8:	00000106 	br	8005f0 <logic+0x360>
  8005ec:	0005883a 	mov	r2,zero
  8005f0:	1007883a 	mov	r3,r2
  8005f4:	e0bffc17 	ldw	r2,-16(fp)
  8005f8:	10c03805 	stb	r3,224(r2)
  if (d->_g10) {
  8005fc:	e0bffc17 	ldw	r2,-16(fp)
  800600:	10803803 	ldbu	r2,224(r2)
  800604:	10803fcc 	andi	r2,r2,255
  800608:	1080201c 	xori	r2,r2,128
  80060c:	10bfe004 	addi	r2,r2,-128
  800610:	10003426 	beq	r2,zero,8006e4 <logic+0x454>
    d->sleepT = (d->sleepT < (d->T_VRP - d->_region0_VRefrac_t)) ? d->sleepT : (d->T_VRP - d->_region0_VRefrac_t);
  800614:	e0bffc17 	ldw	r2,-16(fp)
  800618:	14002f17 	ldw	r16,188(r2)
  80061c:	14403017 	ldw	r17,192(r2)
  800620:	e0bffc17 	ldw	r2,-16(fp)
  800624:	10800417 	ldw	r2,16(r2)
  800628:	1009883a 	mov	r4,r2
  80062c:	0806fd40 	call	806fd4 <__floatsidf>
  800630:	1011883a 	mov	r8,r2
  800634:	1813883a 	mov	r9,r3
  800638:	e13ffc17 	ldw	r4,-16(fp)
  80063c:	20802117 	ldw	r2,132(r4)
  800640:	20c02217 	ldw	r3,136(r4)
  800644:	100d883a 	mov	r6,r2
  800648:	180f883a 	mov	r7,r3
  80064c:	4009883a 	mov	r4,r8
  800650:	480b883a 	mov	r5,r9
  800654:	08066d80 	call	8066d8 <__subdf3>
  800658:	1009883a 	mov	r4,r2
  80065c:	180b883a 	mov	r5,r3
  800660:	2005883a 	mov	r2,r4
  800664:	2807883a 	mov	r3,r5
  800668:	100d883a 	mov	r6,r2
  80066c:	180f883a 	mov	r7,r3
  800670:	8009883a 	mov	r4,r16
  800674:	880b883a 	mov	r5,r17
  800678:	08065e40 	call	8065e4 <__ledf2>
  80067c:	1000040e 	bge	r2,zero,800690 <logic+0x400>
  800680:	e13ffc17 	ldw	r4,-16(fp)
  800684:	20802f17 	ldw	r2,188(r4)
  800688:	20c03017 	ldw	r3,192(r4)
  80068c:	00001206 	br	8006d8 <logic+0x448>
  800690:	e0bffc17 	ldw	r2,-16(fp)
  800694:	10800417 	ldw	r2,16(r2)
  800698:	1009883a 	mov	r4,r2
  80069c:	0806fd40 	call	806fd4 <__floatsidf>
  8006a0:	1011883a 	mov	r8,r2
  8006a4:	1813883a 	mov	r9,r3
  8006a8:	e13ffc17 	ldw	r4,-16(fp)
  8006ac:	20802117 	ldw	r2,132(r4)
  8006b0:	20c02217 	ldw	r3,136(r4)
  8006b4:	100d883a 	mov	r6,r2
  8006b8:	180f883a 	mov	r7,r3
  8006bc:	4009883a 	mov	r4,r8
  8006c0:	480b883a 	mov	r5,r9
  8006c4:	08066d80 	call	8066d8 <__subdf3>
  8006c8:	1009883a 	mov	r4,r2
  8006cc:	180b883a 	mov	r5,r3
  8006d0:	2005883a 	mov	r2,r4
  8006d4:	2807883a 	mov	r3,r5
  8006d8:	e13ffc17 	ldw	r4,-16(fp)
  8006dc:	20802f15 	stw	r2,188(r4)
  8006e0:	20c03015 	stw	r3,192(r4)
  }
  d->_cg12 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  8006e4:	e0bffc17 	ldw	r2,-16(fp)
  8006e8:	10803403 	ldbu	r2,208(r2)
  8006ec:	10803fcc 	andi	r2,r2,255
  8006f0:	1080201c 	xori	r2,r2,128
  8006f4:	10bfe004 	addi	r2,r2,-128
  8006f8:	1000061e 	bne	r2,zero,800714 <logic+0x484>
  8006fc:	e0bffc17 	ldw	r2,-16(fp)
  800700:	10803443 	ldbu	r2,209(r2)
  800704:	10803fcc 	andi	r2,r2,255
  800708:	1080201c 	xori	r2,r2,128
  80070c:	10bfe004 	addi	r2,r2,-128
  800710:	10000226 	beq	r2,zero,80071c <logic+0x48c>
  800714:	00800044 	movi	r2,1
  800718:	00000106 	br	800720 <logic+0x490>
  80071c:	0005883a 	mov	r2,zero
  800720:	1007883a 	mov	r3,r2
  800724:	e0bffc17 	ldw	r2,-16(fp)
  800728:	10c05945 	stb	r3,357(r2)
  d->_g11 = d->_g16 && !d->_cg11;
  80072c:	e0bffc17 	ldw	r2,-16(fp)
  800730:	10803943 	ldbu	r2,229(r2)
  800734:	10803fcc 	andi	r2,r2,255
  800738:	1080201c 	xori	r2,r2,128
  80073c:	10bfe004 	addi	r2,r2,-128
  800740:	10000826 	beq	r2,zero,800764 <logic+0x4d4>
  800744:	e0bffc17 	ldw	r2,-16(fp)
  800748:	10805983 	ldbu	r2,358(r2)
  80074c:	10803fcc 	andi	r2,r2,255
  800750:	1080201c 	xori	r2,r2,128
  800754:	10bfe004 	addi	r2,r2,-128
  800758:	1000021e 	bne	r2,zero,800764 <logic+0x4d4>
  80075c:	00800044 	movi	r2,1
  800760:	00000106 	br	800768 <logic+0x4d8>
  800764:	0005883a 	mov	r2,zero
  800768:	1007883a 	mov	r3,r2
  80076c:	e0bffc17 	ldw	r2,-16(fp)
  800770:	10c03845 	stb	r3,225(r2)
  d->_cg14 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  800774:	e0bffc17 	ldw	r2,-16(fp)
  800778:	10803403 	ldbu	r2,208(r2)
  80077c:	10803fcc 	andi	r2,r2,255
  800780:	1080201c 	xori	r2,r2,128
  800784:	10bfe004 	addi	r2,r2,-128
  800788:	1000061e 	bne	r2,zero,8007a4 <logic+0x514>
  80078c:	e0bffc17 	ldw	r2,-16(fp)
  800790:	10803443 	ldbu	r2,209(r2)
  800794:	10803fcc 	andi	r2,r2,255
  800798:	1080201c 	xori	r2,r2,128
  80079c:	10bfe004 	addi	r2,r2,-128
  8007a0:	10000226 	beq	r2,zero,8007ac <logic+0x51c>
  8007a4:	00800044 	movi	r2,1
  8007a8:	00000106 	br	8007b0 <logic+0x520>
  8007ac:	0005883a 	mov	r2,zero
  8007b0:	1007883a 	mov	r3,r2
  8007b4:	e0bffc17 	ldw	r2,-16(fp)
  8007b8:	10c059c5 	stb	r3,359(r2)
  d->_g13 = d->_g10 && d->_cg12 || d->_g11 && d->_cg14;
  8007bc:	e0bffc17 	ldw	r2,-16(fp)
  8007c0:	10803803 	ldbu	r2,224(r2)
  8007c4:	10803fcc 	andi	r2,r2,255
  8007c8:	1080201c 	xori	r2,r2,128
  8007cc:	10bfe004 	addi	r2,r2,-128
  8007d0:	10000626 	beq	r2,zero,8007ec <logic+0x55c>
  8007d4:	e0bffc17 	ldw	r2,-16(fp)
  8007d8:	10805943 	ldbu	r2,357(r2)
  8007dc:	10803fcc 	andi	r2,r2,255
  8007e0:	1080201c 	xori	r2,r2,128
  8007e4:	10bfe004 	addi	r2,r2,-128
  8007e8:	10000c1e 	bne	r2,zero,80081c <logic+0x58c>
  8007ec:	e0bffc17 	ldw	r2,-16(fp)
  8007f0:	10803843 	ldbu	r2,225(r2)
  8007f4:	10803fcc 	andi	r2,r2,255
  8007f8:	1080201c 	xori	r2,r2,128
  8007fc:	10bfe004 	addi	r2,r2,-128
  800800:	10000826 	beq	r2,zero,800824 <logic+0x594>
  800804:	e0bffc17 	ldw	r2,-16(fp)
  800808:	108059c3 	ldbu	r2,359(r2)
  80080c:	10803fcc 	andi	r2,r2,255
  800810:	1080201c 	xori	r2,r2,128
  800814:	10bfe004 	addi	r2,r2,-128
  800818:	10000226 	beq	r2,zero,800824 <logic+0x594>
  80081c:	00800044 	movi	r2,1
  800820:	00000106 	br	800828 <logic+0x598>
  800824:	0005883a 	mov	r2,zero
  800828:	1007883a 	mov	r3,r2
  80082c:	e0bffc17 	ldw	r2,-16(fp)
  800830:	10c038c5 	stb	r3,227(r2)
  d->_g20 = !d->_g20;
  800834:	e0bffc17 	ldw	r2,-16(fp)
  800838:	108039c3 	ldbu	r2,231(r2)
  80083c:	10803fcc 	andi	r2,r2,255
  800840:	1080201c 	xori	r2,r2,128
  800844:	10bfe004 	addi	r2,r2,-128
  800848:	1005003a 	cmpeq	r2,r2,zero
  80084c:	1007883a 	mov	r3,r2
  800850:	e0bffc17 	ldw	r2,-16(fp)
  800854:	10c039c5 	stb	r3,231(r2)
  d->_g24 = d->_g21 || d->_g24;
  800858:	e0bffc17 	ldw	r2,-16(fp)
  80085c:	10803a03 	ldbu	r2,232(r2)
  800860:	10803fcc 	andi	r2,r2,255
  800864:	1080201c 	xori	r2,r2,128
  800868:	10bfe004 	addi	r2,r2,-128
  80086c:	1000061e 	bne	r2,zero,800888 <logic+0x5f8>
  800870:	e0bffc17 	ldw	r2,-16(fp)
  800874:	10803ac3 	ldbu	r2,235(r2)
  800878:	10803fcc 	andi	r2,r2,255
  80087c:	1080201c 	xori	r2,r2,128
  800880:	10bfe004 	addi	r2,r2,-128
  800884:	10000226 	beq	r2,zero,800890 <logic+0x600>
  800888:	00800044 	movi	r2,1
  80088c:	00000106 	br	800894 <logic+0x604>
  800890:	0005883a 	mov	r2,zero
  800894:	1007883a 	mov	r3,r2
  800898:	e0bffc17 	ldw	r2,-16(fp)
  80089c:	10c03ac5 	stb	r3,235(r2)
  d->_g21 = (d->_g13_e1 || d->_g13) && (d->_g20 || d->_g24) && (d->_g13 || d->_g24);
  8008a0:	e0bffc17 	ldw	r2,-16(fp)
  8008a4:	10806783 	ldbu	r2,414(r2)
  8008a8:	10803fcc 	andi	r2,r2,255
  8008ac:	1080201c 	xori	r2,r2,128
  8008b0:	10bfe004 	addi	r2,r2,-128
  8008b4:	1000061e 	bne	r2,zero,8008d0 <logic+0x640>
  8008b8:	e0bffc17 	ldw	r2,-16(fp)
  8008bc:	108038c3 	ldbu	r2,227(r2)
  8008c0:	10803fcc 	andi	r2,r2,255
  8008c4:	1080201c 	xori	r2,r2,128
  8008c8:	10bfe004 	addi	r2,r2,-128
  8008cc:	10001a26 	beq	r2,zero,800938 <logic+0x6a8>
  8008d0:	e0bffc17 	ldw	r2,-16(fp)
  8008d4:	108039c3 	ldbu	r2,231(r2)
  8008d8:	10803fcc 	andi	r2,r2,255
  8008dc:	1080201c 	xori	r2,r2,128
  8008e0:	10bfe004 	addi	r2,r2,-128
  8008e4:	1000061e 	bne	r2,zero,800900 <logic+0x670>
  8008e8:	e0bffc17 	ldw	r2,-16(fp)
  8008ec:	10803ac3 	ldbu	r2,235(r2)
  8008f0:	10803fcc 	andi	r2,r2,255
  8008f4:	1080201c 	xori	r2,r2,128
  8008f8:	10bfe004 	addi	r2,r2,-128
  8008fc:	10000e26 	beq	r2,zero,800938 <logic+0x6a8>
  800900:	e0bffc17 	ldw	r2,-16(fp)
  800904:	108038c3 	ldbu	r2,227(r2)
  800908:	10803fcc 	andi	r2,r2,255
  80090c:	1080201c 	xori	r2,r2,128
  800910:	10bfe004 	addi	r2,r2,-128
  800914:	1000061e 	bne	r2,zero,800930 <logic+0x6a0>
  800918:	e0bffc17 	ldw	r2,-16(fp)
  80091c:	10803ac3 	ldbu	r2,235(r2)
  800920:	10803fcc 	andi	r2,r2,255
  800924:	1080201c 	xori	r2,r2,128
  800928:	10bfe004 	addi	r2,r2,-128
  80092c:	10000226 	beq	r2,zero,800938 <logic+0x6a8>
  800930:	00800044 	movi	r2,1
  800934:	00000106 	br	80093c <logic+0x6ac>
  800938:	0005883a 	mov	r2,zero
  80093c:	1007883a 	mov	r3,r2
  800940:	e0bffc17 	ldw	r2,-16(fp)
  800944:	10c03a05 	stb	r3,232(r2)
  d->_cg25 = d->_Pacemaker_local__Atrig;
  800948:	e0bffc17 	ldw	r2,-16(fp)
  80094c:	10c03403 	ldbu	r3,208(r2)
  800950:	e0bffc17 	ldw	r2,-16(fp)
  800954:	10c05ac5 	stb	r3,363(r2)
  d->_g22 = d->_g21 && !d->_cg25;
  800958:	e0bffc17 	ldw	r2,-16(fp)
  80095c:	10803a03 	ldbu	r2,232(r2)
  800960:	10803fcc 	andi	r2,r2,255
  800964:	1080201c 	xori	r2,r2,128
  800968:	10bfe004 	addi	r2,r2,-128
  80096c:	10000826 	beq	r2,zero,800990 <logic+0x700>
  800970:	e0bffc17 	ldw	r2,-16(fp)
  800974:	10805ac3 	ldbu	r2,363(r2)
  800978:	10803fcc 	andi	r2,r2,255
  80097c:	1080201c 	xori	r2,r2,128
  800980:	10bfe004 	addi	r2,r2,-128
  800984:	1000021e 	bne	r2,zero,800990 <logic+0x700>
  800988:	00800044 	movi	r2,1
  80098c:	00000106 	br	800994 <logic+0x704>
  800990:	0005883a 	mov	r2,zero
  800994:	1007883a 	mov	r3,r2
  800998:	e0bffc17 	ldw	r2,-16(fp)
  80099c:	10c03a45 	stb	r3,233(r2)
  if (d->_g22) {
  8009a0:	e0bffc17 	ldw	r2,-16(fp)
  8009a4:	10803a43 	ldbu	r2,233(r2)
  8009a8:	10803fcc 	andi	r2,r2,255
  8009ac:	1080201c 	xori	r2,r2,128
  8009b0:	10bfe004 	addi	r2,r2,-128
  8009b4:	10000526 	beq	r2,zero,8009cc <logic+0x73c>
    d->_taken_transitions[3] += 1;
  8009b8:	e0bffc17 	ldw	r2,-16(fp)
  8009bc:	10800a17 	ldw	r2,40(r2)
  8009c0:	10c00044 	addi	r3,r2,1
  8009c4:	e0bffc17 	ldw	r2,-16(fp)
  8009c8:	10c00a15 	stw	r3,40(r2)
  }
  d->_g13 = d->_pg13_e1;
  8009cc:	e0bffc17 	ldw	r2,-16(fp)
  8009d0:	10c06bc3 	ldbu	r3,431(r2)
  8009d4:	e0bffc17 	ldw	r2,-16(fp)
  8009d8:	10c038c5 	stb	r3,227(r2)
  d->_g13_e1 = d->_GO || d->_g13;
  8009dc:	e0bffc17 	ldw	r2,-16(fp)
  8009e0:	10805803 	ldbu	r2,352(r2)
  8009e4:	10803fcc 	andi	r2,r2,255
  8009e8:	1080201c 	xori	r2,r2,128
  8009ec:	10bfe004 	addi	r2,r2,-128
  8009f0:	1000061e 	bne	r2,zero,800a0c <logic+0x77c>
  8009f4:	e0bffc17 	ldw	r2,-16(fp)
  8009f8:	108038c3 	ldbu	r2,227(r2)
  8009fc:	10803fcc 	andi	r2,r2,255
  800a00:	1080201c 	xori	r2,r2,128
  800a04:	10bfe004 	addi	r2,r2,-128
  800a08:	10000226 	beq	r2,zero,800a14 <logic+0x784>
  800a0c:	00800044 	movi	r2,1
  800a10:	00000106 	br	800a18 <logic+0x788>
  800a14:	0005883a 	mov	r2,zero
  800a18:	1007883a 	mov	r3,r2
  800a1c:	e0bffc17 	ldw	r2,-16(fp)
  800a20:	10c06785 	stb	r3,414(r2)
  if (d->_g13_e1) {
  800a24:	e0bffc17 	ldw	r2,-16(fp)
  800a28:	10806783 	ldbu	r2,414(r2)
  800a2c:	10803fcc 	andi	r2,r2,255
  800a30:	1080201c 	xori	r2,r2,128
  800a34:	10bfe004 	addi	r2,r2,-128
  800a38:	10000426 	beq	r2,zero,800a4c <logic+0x7bc>
    d->_pre_VP = d->_reg_VP;
  800a3c:	e0bffc17 	ldw	r2,-16(fp)
  800a40:	10c03383 	ldbu	r3,206(r2)
  800a44:	e0bffc17 	ldw	r2,-16(fp)
  800a48:	10c033c5 	stb	r3,207(r2)
  }
  d->_g22_e2 = d->_pg27;
  800a4c:	e0bffc17 	ldw	r2,-16(fp)
  800a50:	10c06c03 	ldbu	r3,432(r2)
  800a54:	e0bffc17 	ldw	r2,-16(fp)
  800a58:	10c067c5 	stb	r3,415(r2)
  d->_g217 = d->_g22_e2 && !d->VS;
  800a5c:	e0bffc17 	ldw	r2,-16(fp)
  800a60:	108067c3 	ldbu	r2,415(r2)
  800a64:	10803fcc 	andi	r2,r2,255
  800a68:	1080201c 	xori	r2,r2,128
  800a6c:	10bfe004 	addi	r2,r2,-128
  800a70:	10000826 	beq	r2,zero,800a94 <logic+0x804>
  800a74:	e0bffc17 	ldw	r2,-16(fp)
  800a78:	10803143 	ldbu	r2,197(r2)
  800a7c:	10803fcc 	andi	r2,r2,255
  800a80:	1080201c 	xori	r2,r2,128
  800a84:	10bfe004 	addi	r2,r2,-128
  800a88:	1000021e 	bne	r2,zero,800a94 <logic+0x804>
  800a8c:	00800044 	movi	r2,1
  800a90:	00000106 	br	800a98 <logic+0x808>
  800a94:	0005883a 	mov	r2,zero
  800a98:	1007883a 	mov	r3,r2
  800a9c:	e0bffc17 	ldw	r2,-16(fp)
  800aa0:	10c057c5 	stb	r3,351(r2)
  d->_cg28 = d->_pre_VP;
  800aa4:	e0bffc17 	ldw	r2,-16(fp)
  800aa8:	10c033c3 	ldbu	r3,207(r2)
  800aac:	e0bffc17 	ldw	r2,-16(fp)
  800ab0:	10c05845 	stb	r3,353(r2)
  d->_g27 = d->_GO || d->_g22 || d->_g217 && !d->_cg28;
  800ab4:	e0bffc17 	ldw	r2,-16(fp)
  800ab8:	10805803 	ldbu	r2,352(r2)
  800abc:	10803fcc 	andi	r2,r2,255
  800ac0:	1080201c 	xori	r2,r2,128
  800ac4:	10bfe004 	addi	r2,r2,-128
  800ac8:	1000121e 	bne	r2,zero,800b14 <logic+0x884>
  800acc:	e0bffc17 	ldw	r2,-16(fp)
  800ad0:	10803a43 	ldbu	r2,233(r2)
  800ad4:	10803fcc 	andi	r2,r2,255
  800ad8:	1080201c 	xori	r2,r2,128
  800adc:	10bfe004 	addi	r2,r2,-128
  800ae0:	10000c1e 	bne	r2,zero,800b14 <logic+0x884>
  800ae4:	e0bffc17 	ldw	r2,-16(fp)
  800ae8:	108057c3 	ldbu	r2,351(r2)
  800aec:	10803fcc 	andi	r2,r2,255
  800af0:	1080201c 	xori	r2,r2,128
  800af4:	10bfe004 	addi	r2,r2,-128
  800af8:	10000826 	beq	r2,zero,800b1c <logic+0x88c>
  800afc:	e0bffc17 	ldw	r2,-16(fp)
  800b00:	10805843 	ldbu	r2,353(r2)
  800b04:	10803fcc 	andi	r2,r2,255
  800b08:	1080201c 	xori	r2,r2,128
  800b0c:	10bfe004 	addi	r2,r2,-128
  800b10:	1000021e 	bne	r2,zero,800b1c <logic+0x88c>
  800b14:	00800044 	movi	r2,1
  800b18:	00000106 	br	800b20 <logic+0x890>
  800b1c:	0005883a 	mov	r2,zero
  800b20:	1007883a 	mov	r3,r2
  800b24:	e0bffc17 	ldw	r2,-16(fp)
  800b28:	10c03b85 	stb	r3,238(r2)
  d->AP = 0;
  800b2c:	e0bffc17 	ldw	r2,-16(fp)
  800b30:	10003185 	stb	zero,198(r2)
  d->VP = 0;
  800b34:	e0bffc17 	ldw	r2,-16(fp)
  800b38:	100031c5 	stb	zero,199(r2)
  d->A_EVT = 0;
  800b3c:	e0bffc17 	ldw	r2,-16(fp)
  800b40:	10003205 	stb	zero,200(r2)
  d->V_EVT = 0;
  800b44:	e0bffc17 	ldw	r2,-16(fp)
  800b48:	10003245 	stb	zero,201(r2)
  d->A_REFR = 0;
  800b4c:	e0bffc17 	ldw	r2,-16(fp)
  800b50:	10003285 	stb	zero,202(r2)
  d->V_REFR = 0;
  800b54:	e0bffc17 	ldw	r2,-16(fp)
  800b58:	100032c5 	stb	zero,203(r2)
  d->_g4 = d->_g22_e2 && d->VS;
  800b5c:	e0bffc17 	ldw	r2,-16(fp)
  800b60:	108067c3 	ldbu	r2,415(r2)
  800b64:	10803fcc 	andi	r2,r2,255
  800b68:	1080201c 	xori	r2,r2,128
  800b6c:	10bfe004 	addi	r2,r2,-128
  800b70:	10000826 	beq	r2,zero,800b94 <logic+0x904>
  800b74:	e0bffc17 	ldw	r2,-16(fp)
  800b78:	10803143 	ldbu	r2,197(r2)
  800b7c:	10803fcc 	andi	r2,r2,255
  800b80:	1080201c 	xori	r2,r2,128
  800b84:	10bfe004 	addi	r2,r2,-128
  800b88:	10000226 	beq	r2,zero,800b94 <logic+0x904>
  800b8c:	00800044 	movi	r2,1
  800b90:	00000106 	br	800b98 <logic+0x908>
  800b94:	0005883a 	mov	r2,zero
  800b98:	1007883a 	mov	r3,r2
  800b9c:	e0bffc17 	ldw	r2,-16(fp)
  800ba0:	10c03705 	stb	r3,220(r2)
  if (d->_g4) {
  800ba4:	e0bffc17 	ldw	r2,-16(fp)
  800ba8:	10803703 	ldbu	r2,220(r2)
  800bac:	10803fcc 	andi	r2,r2,255
  800bb0:	1080201c 	xori	r2,r2,128
  800bb4:	10bfe004 	addi	r2,r2,-128
  800bb8:	10000e26 	beq	r2,zero,800bf4 <logic+0x964>
    d->V_EVT |= 1;
  800bbc:	e0bffc17 	ldw	r2,-16(fp)
  800bc0:	10803243 	ldbu	r2,201(r2)
  800bc4:	10800054 	ori	r2,r2,1
  800bc8:	1007883a 	mov	r3,r2
  800bcc:	e0bffc17 	ldw	r2,-16(fp)
  800bd0:	10c03245 	stb	r3,201(r2)
    d->_region0_VRefrac_t = 0;
  800bd4:	e0bffc17 	ldw	r2,-16(fp)
  800bd8:	10002115 	stw	zero,132(r2)
  800bdc:	10002215 	stw	zero,136(r2)
    d->_taken_transitions[0] += 1;
  800be0:	e0bffc17 	ldw	r2,-16(fp)
  800be4:	10800717 	ldw	r2,28(r2)
  800be8:	10c00044 	addi	r3,r2,1
  800bec:	e0bffc17 	ldw	r2,-16(fp)
  800bf0:	10c00715 	stw	r3,28(r2)
  }
  d->_g25 = d->_g21 && d->_cg25;
  800bf4:	e0bffc17 	ldw	r2,-16(fp)
  800bf8:	10803a03 	ldbu	r2,232(r2)
  800bfc:	10803fcc 	andi	r2,r2,255
  800c00:	1080201c 	xori	r2,r2,128
  800c04:	10bfe004 	addi	r2,r2,-128
  800c08:	10000826 	beq	r2,zero,800c2c <logic+0x99c>
  800c0c:	e0bffc17 	ldw	r2,-16(fp)
  800c10:	10805ac3 	ldbu	r2,363(r2)
  800c14:	10803fcc 	andi	r2,r2,255
  800c18:	1080201c 	xori	r2,r2,128
  800c1c:	10bfe004 	addi	r2,r2,-128
  800c20:	10000226 	beq	r2,zero,800c2c <logic+0x99c>
  800c24:	00800044 	movi	r2,1
  800c28:	00000106 	br	800c30 <logic+0x9a0>
  800c2c:	0005883a 	mov	r2,zero
  800c30:	1007883a 	mov	r3,r2
  800c34:	e0bffc17 	ldw	r2,-16(fp)
  800c38:	10c03b05 	stb	r3,236(r2)
  if (d->_g25) {
  800c3c:	e0bffc17 	ldw	r2,-16(fp)
  800c40:	10803b03 	ldbu	r2,236(r2)
  800c44:	10803fcc 	andi	r2,r2,255
  800c48:	1080201c 	xori	r2,r2,128
  800c4c:	10bfe004 	addi	r2,r2,-128
  800c50:	10000b26 	beq	r2,zero,800c80 <logic+0x9f0>
    d->V_REFR |= 1;
  800c54:	e0bffc17 	ldw	r2,-16(fp)
  800c58:	108032c3 	ldbu	r2,203(r2)
  800c5c:	10800054 	ori	r2,r2,1
  800c60:	1007883a 	mov	r3,r2
  800c64:	e0bffc17 	ldw	r2,-16(fp)
  800c68:	10c032c5 	stb	r3,203(r2)
    d->_taken_transitions[2] += 1;
  800c6c:	e0bffc17 	ldw	r2,-16(fp)
  800c70:	10800917 	ldw	r2,36(r2)
  800c74:	10c00044 	addi	r3,r2,1
  800c78:	e0bffc17 	ldw	r2,-16(fp)
  800c7c:	10c00915 	stw	r3,36(r2)
  }
  d->_g28 = d->_g217 && d->_cg28;
  800c80:	e0bffc17 	ldw	r2,-16(fp)
  800c84:	108057c3 	ldbu	r2,351(r2)
  800c88:	10803fcc 	andi	r2,r2,255
  800c8c:	1080201c 	xori	r2,r2,128
  800c90:	10bfe004 	addi	r2,r2,-128
  800c94:	10000826 	beq	r2,zero,800cb8 <logic+0xa28>
  800c98:	e0bffc17 	ldw	r2,-16(fp)
  800c9c:	10805843 	ldbu	r2,353(r2)
  800ca0:	10803fcc 	andi	r2,r2,255
  800ca4:	1080201c 	xori	r2,r2,128
  800ca8:	10bfe004 	addi	r2,r2,-128
  800cac:	10000226 	beq	r2,zero,800cb8 <logic+0xa28>
  800cb0:	00800044 	movi	r2,1
  800cb4:	00000106 	br	800cbc <logic+0xa2c>
  800cb8:	0005883a 	mov	r2,zero
  800cbc:	1007883a 	mov	r3,r2
  800cc0:	e0bffc17 	ldw	r2,-16(fp)
  800cc4:	10c03bc5 	stb	r3,239(r2)
  if (d->_g28) {
  800cc8:	e0bffc17 	ldw	r2,-16(fp)
  800ccc:	10803bc3 	ldbu	r2,239(r2)
  800cd0:	10803fcc 	andi	r2,r2,255
  800cd4:	1080201c 	xori	r2,r2,128
  800cd8:	10bfe004 	addi	r2,r2,-128
  800cdc:	10000e26 	beq	r2,zero,800d18 <logic+0xa88>
    d->V_EVT |= 1;
  800ce0:	e0bffc17 	ldw	r2,-16(fp)
  800ce4:	10803243 	ldbu	r2,201(r2)
  800ce8:	10800054 	ori	r2,r2,1
  800cec:	1007883a 	mov	r3,r2
  800cf0:	e0bffc17 	ldw	r2,-16(fp)
  800cf4:	10c03245 	stb	r3,201(r2)
    d->_region0_VRefrac_t = 0;
  800cf8:	e0bffc17 	ldw	r2,-16(fp)
  800cfc:	10002115 	stw	zero,132(r2)
  800d00:	10002215 	stw	zero,136(r2)
    d->_taken_transitions[1] += 1;
  800d04:	e0bffc17 	ldw	r2,-16(fp)
  800d08:	10800817 	ldw	r2,32(r2)
  800d0c:	10c00044 	addi	r3,r2,1
  800d10:	e0bffc17 	ldw	r2,-16(fp)
  800d14:	10c00815 	stw	r3,32(r2)
  }
  d->_g26 = d->_g4 || d->_g25 || d->_g28;
  800d18:	e0bffc17 	ldw	r2,-16(fp)
  800d1c:	10803703 	ldbu	r2,220(r2)
  800d20:	10803fcc 	andi	r2,r2,255
  800d24:	1080201c 	xori	r2,r2,128
  800d28:	10bfe004 	addi	r2,r2,-128
  800d2c:	10000c1e 	bne	r2,zero,800d60 <logic+0xad0>
  800d30:	e0bffc17 	ldw	r2,-16(fp)
  800d34:	10803b03 	ldbu	r2,236(r2)
  800d38:	10803fcc 	andi	r2,r2,255
  800d3c:	1080201c 	xori	r2,r2,128
  800d40:	10bfe004 	addi	r2,r2,-128
  800d44:	1000061e 	bne	r2,zero,800d60 <logic+0xad0>
  800d48:	e0bffc17 	ldw	r2,-16(fp)
  800d4c:	10803bc3 	ldbu	r2,239(r2)
  800d50:	10803fcc 	andi	r2,r2,255
  800d54:	1080201c 	xori	r2,r2,128
  800d58:	10bfe004 	addi	r2,r2,-128
  800d5c:	10000226 	beq	r2,zero,800d68 <logic+0xad8>
  800d60:	00800044 	movi	r2,1
  800d64:	00000106 	br	800d6c <logic+0xadc>
  800d68:	0005883a 	mov	r2,zero
  800d6c:	1007883a 	mov	r3,r2
  800d70:	e0bffc17 	ldw	r2,-16(fp)
  800d74:	10c03b45 	stb	r3,237(r2)
  if (d->_g26) {
  800d78:	e0bffc17 	ldw	r2,-16(fp)
  800d7c:	10803b43 	ldbu	r2,237(r2)
  800d80:	10803fcc 	andi	r2,r2,255
  800d84:	1080201c 	xori	r2,r2,128
  800d88:	10bfe004 	addi	r2,r2,-128
  800d8c:	10000426 	beq	r2,zero,800da0 <logic+0xb10>
    d->_Pacemaker_local__Atrig = 0;
  800d90:	e0bffc17 	ldw	r2,-16(fp)
  800d94:	10003405 	stb	zero,208(r2)
    d->_Pacemaker_local__Atrig1 = 0;
  800d98:	e0bffc17 	ldw	r2,-16(fp)
  800d9c:	10003445 	stb	zero,209(r2)
  }
  d->_cg7 = d->_region0_VRefrac_t < d->T_VRP;
  800da0:	e0bffc17 	ldw	r2,-16(fp)
  800da4:	14002117 	ldw	r16,132(r2)
  800da8:	14402217 	ldw	r17,136(r2)
  800dac:	e0bffc17 	ldw	r2,-16(fp)
  800db0:	10800417 	ldw	r2,16(r2)
  800db4:	1009883a 	mov	r4,r2
  800db8:	0806fd40 	call	806fd4 <__floatsidf>
  800dbc:	1009883a 	mov	r4,r2
  800dc0:	180b883a 	mov	r5,r3
  800dc4:	04800044 	movi	r18,1
  800dc8:	200d883a 	mov	r6,r4
  800dcc:	280f883a 	mov	r7,r5
  800dd0:	8009883a 	mov	r4,r16
  800dd4:	880b883a 	mov	r5,r17
  800dd8:	08065e40 	call	8065e4 <__ledf2>
  800ddc:	10000116 	blt	r2,zero,800de4 <logic+0xb54>
  800de0:	0025883a 	mov	r18,zero
  800de4:	9007883a 	mov	r3,r18
  800de8:	e0bffc17 	ldw	r2,-16(fp)
  800dec:	10c058c5 	stb	r3,355(r2)
  d->_g5 = d->_g26 && d->_cg7;
  800df0:	e0bffc17 	ldw	r2,-16(fp)
  800df4:	10803b43 	ldbu	r2,237(r2)
  800df8:	10803fcc 	andi	r2,r2,255
  800dfc:	1080201c 	xori	r2,r2,128
  800e00:	10bfe004 	addi	r2,r2,-128
  800e04:	10000826 	beq	r2,zero,800e28 <logic+0xb98>
  800e08:	e0bffc17 	ldw	r2,-16(fp)
  800e0c:	108058c3 	ldbu	r2,355(r2)
  800e10:	10803fcc 	andi	r2,r2,255
  800e14:	1080201c 	xori	r2,r2,128
  800e18:	10bfe004 	addi	r2,r2,-128
  800e1c:	10000226 	beq	r2,zero,800e28 <logic+0xb98>
  800e20:	00800044 	movi	r2,1
  800e24:	00000106 	br	800e2c <logic+0xb9c>
  800e28:	0005883a 	mov	r2,zero
  800e2c:	1007883a 	mov	r3,r2
  800e30:	e0bffc17 	ldw	r2,-16(fp)
  800e34:	10c03745 	stb	r3,221(r2)
  if (d->_g5) {
  800e38:	e0bffc17 	ldw	r2,-16(fp)
  800e3c:	10803743 	ldbu	r2,221(r2)
  800e40:	10803fcc 	andi	r2,r2,255
  800e44:	1080201c 	xori	r2,r2,128
  800e48:	10bfe004 	addi	r2,r2,-128
  800e4c:	10003426 	beq	r2,zero,800f20 <logic+0xc90>
    d->sleepT = (d->sleepT < (d->T_VRP - d->_region0_VRefrac_t)) ? d->sleepT : (d->T_VRP - d->_region0_VRefrac_t);
  800e50:	e0bffc17 	ldw	r2,-16(fp)
  800e54:	14002f17 	ldw	r16,188(r2)
  800e58:	14403017 	ldw	r17,192(r2)
  800e5c:	e0bffc17 	ldw	r2,-16(fp)
  800e60:	10800417 	ldw	r2,16(r2)
  800e64:	1009883a 	mov	r4,r2
  800e68:	0806fd40 	call	806fd4 <__floatsidf>
  800e6c:	1011883a 	mov	r8,r2
  800e70:	1813883a 	mov	r9,r3
  800e74:	e13ffc17 	ldw	r4,-16(fp)
  800e78:	20802117 	ldw	r2,132(r4)
  800e7c:	20c02217 	ldw	r3,136(r4)
  800e80:	100d883a 	mov	r6,r2
  800e84:	180f883a 	mov	r7,r3
  800e88:	4009883a 	mov	r4,r8
  800e8c:	480b883a 	mov	r5,r9
  800e90:	08066d80 	call	8066d8 <__subdf3>
  800e94:	1009883a 	mov	r4,r2
  800e98:	180b883a 	mov	r5,r3
  800e9c:	2005883a 	mov	r2,r4
  800ea0:	2807883a 	mov	r3,r5
  800ea4:	100d883a 	mov	r6,r2
  800ea8:	180f883a 	mov	r7,r3
  800eac:	8009883a 	mov	r4,r16
  800eb0:	880b883a 	mov	r5,r17
  800eb4:	08065e40 	call	8065e4 <__ledf2>
  800eb8:	1000040e 	bge	r2,zero,800ecc <logic+0xc3c>
  800ebc:	e13ffc17 	ldw	r4,-16(fp)
  800ec0:	20802f17 	ldw	r2,188(r4)
  800ec4:	20c03017 	ldw	r3,192(r4)
  800ec8:	00001206 	br	800f14 <logic+0xc84>
  800ecc:	e0bffc17 	ldw	r2,-16(fp)
  800ed0:	10800417 	ldw	r2,16(r2)
  800ed4:	1009883a 	mov	r4,r2
  800ed8:	0806fd40 	call	806fd4 <__floatsidf>
  800edc:	1011883a 	mov	r8,r2
  800ee0:	1813883a 	mov	r9,r3
  800ee4:	e13ffc17 	ldw	r4,-16(fp)
  800ee8:	20802117 	ldw	r2,132(r4)
  800eec:	20c02217 	ldw	r3,136(r4)
  800ef0:	100d883a 	mov	r6,r2
  800ef4:	180f883a 	mov	r7,r3
  800ef8:	4009883a 	mov	r4,r8
  800efc:	480b883a 	mov	r5,r9
  800f00:	08066d80 	call	8066d8 <__subdf3>
  800f04:	1009883a 	mov	r4,r2
  800f08:	180b883a 	mov	r5,r3
  800f0c:	2005883a 	mov	r2,r4
  800f10:	2807883a 	mov	r3,r5
  800f14:	e13ffc17 	ldw	r4,-16(fp)
  800f18:	20802f15 	stw	r2,188(r4)
  800f1c:	20c03015 	stw	r3,192(r4)
  }
  d->_cg8 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  800f20:	e0bffc17 	ldw	r2,-16(fp)
  800f24:	10803403 	ldbu	r2,208(r2)
  800f28:	10803fcc 	andi	r2,r2,255
  800f2c:	1080201c 	xori	r2,r2,128
  800f30:	10bfe004 	addi	r2,r2,-128
  800f34:	1000061e 	bne	r2,zero,800f50 <logic+0xcc0>
  800f38:	e0bffc17 	ldw	r2,-16(fp)
  800f3c:	10803443 	ldbu	r2,209(r2)
  800f40:	10803fcc 	andi	r2,r2,255
  800f44:	1080201c 	xori	r2,r2,128
  800f48:	10bfe004 	addi	r2,r2,-128
  800f4c:	10000226 	beq	r2,zero,800f58 <logic+0xcc8>
  800f50:	00800044 	movi	r2,1
  800f54:	00000106 	br	800f5c <logic+0xccc>
  800f58:	0005883a 	mov	r2,zero
  800f5c:	1007883a 	mov	r3,r2
  800f60:	e0bffc17 	ldw	r2,-16(fp)
  800f64:	10c05905 	stb	r3,356(r2)
  d->_g29 = d->_g5 && !d->_cg8 || d->_g10 && !d->_cg12;
  800f68:	e0bffc17 	ldw	r2,-16(fp)
  800f6c:	10803743 	ldbu	r2,221(r2)
  800f70:	10803fcc 	andi	r2,r2,255
  800f74:	1080201c 	xori	r2,r2,128
  800f78:	10bfe004 	addi	r2,r2,-128
  800f7c:	10000626 	beq	r2,zero,800f98 <logic+0xd08>
  800f80:	e0bffc17 	ldw	r2,-16(fp)
  800f84:	10805903 	ldbu	r2,356(r2)
  800f88:	10803fcc 	andi	r2,r2,255
  800f8c:	1080201c 	xori	r2,r2,128
  800f90:	10bfe004 	addi	r2,r2,-128
  800f94:	10000c26 	beq	r2,zero,800fc8 <logic+0xd38>
  800f98:	e0bffc17 	ldw	r2,-16(fp)
  800f9c:	10803803 	ldbu	r2,224(r2)
  800fa0:	10803fcc 	andi	r2,r2,255
  800fa4:	1080201c 	xori	r2,r2,128
  800fa8:	10bfe004 	addi	r2,r2,-128
  800fac:	10000826 	beq	r2,zero,800fd0 <logic+0xd40>
  800fb0:	e0bffc17 	ldw	r2,-16(fp)
  800fb4:	10805943 	ldbu	r2,357(r2)
  800fb8:	10803fcc 	andi	r2,r2,255
  800fbc:	1080201c 	xori	r2,r2,128
  800fc0:	10bfe004 	addi	r2,r2,-128
  800fc4:	1000021e 	bne	r2,zero,800fd0 <logic+0xd40>
  800fc8:	00800044 	movi	r2,1
  800fcc:	00000106 	br	800fd4 <logic+0xd44>
  800fd0:	0005883a 	mov	r2,zero
  800fd4:	1007883a 	mov	r3,r2
  800fd8:	e0bffc17 	ldw	r2,-16(fp)
  800fdc:	10c03c05 	stb	r3,240(r2)
  d->_g12 = d->_g26 && !d->_cg7;
  800fe0:	e0bffc17 	ldw	r2,-16(fp)
  800fe4:	10803b43 	ldbu	r2,237(r2)
  800fe8:	10803fcc 	andi	r2,r2,255
  800fec:	1080201c 	xori	r2,r2,128
  800ff0:	10bfe004 	addi	r2,r2,-128
  800ff4:	10000826 	beq	r2,zero,801018 <logic+0xd88>
  800ff8:	e0bffc17 	ldw	r2,-16(fp)
  800ffc:	108058c3 	ldbu	r2,355(r2)
  801000:	10803fcc 	andi	r2,r2,255
  801004:	1080201c 	xori	r2,r2,128
  801008:	10bfe004 	addi	r2,r2,-128
  80100c:	1000021e 	bne	r2,zero,801018 <logic+0xd88>
  801010:	00800044 	movi	r2,1
  801014:	00000106 	br	80101c <logic+0xd8c>
  801018:	0005883a 	mov	r2,zero
  80101c:	1007883a 	mov	r3,r2
  801020:	e0bffc17 	ldw	r2,-16(fp)
  801024:	10c03885 	stb	r3,226(r2)
  d->_cg17 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  801028:	e0bffc17 	ldw	r2,-16(fp)
  80102c:	10803403 	ldbu	r2,208(r2)
  801030:	10803fcc 	andi	r2,r2,255
  801034:	1080201c 	xori	r2,r2,128
  801038:	10bfe004 	addi	r2,r2,-128
  80103c:	1000061e 	bne	r2,zero,801058 <logic+0xdc8>
  801040:	e0bffc17 	ldw	r2,-16(fp)
  801044:	10803443 	ldbu	r2,209(r2)
  801048:	10803fcc 	andi	r2,r2,255
  80104c:	1080201c 	xori	r2,r2,128
  801050:	10bfe004 	addi	r2,r2,-128
  801054:	10000226 	beq	r2,zero,801060 <logic+0xdd0>
  801058:	00800044 	movi	r2,1
  80105c:	00000106 	br	801064 <logic+0xdd4>
  801060:	0005883a 	mov	r2,zero
  801064:	1007883a 	mov	r3,r2
  801068:	e0bffc17 	ldw	r2,-16(fp)
  80106c:	10c05a05 	stb	r3,360(r2)
  d->_g8 = d->_g11 && !d->_cg14 || d->_g12 && !d->_cg17;
  801070:	e0bffc17 	ldw	r2,-16(fp)
  801074:	10803843 	ldbu	r2,225(r2)
  801078:	10803fcc 	andi	r2,r2,255
  80107c:	1080201c 	xori	r2,r2,128
  801080:	10bfe004 	addi	r2,r2,-128
  801084:	10000626 	beq	r2,zero,8010a0 <logic+0xe10>
  801088:	e0bffc17 	ldw	r2,-16(fp)
  80108c:	108059c3 	ldbu	r2,359(r2)
  801090:	10803fcc 	andi	r2,r2,255
  801094:	1080201c 	xori	r2,r2,128
  801098:	10bfe004 	addi	r2,r2,-128
  80109c:	10000c26 	beq	r2,zero,8010d0 <logic+0xe40>
  8010a0:	e0bffc17 	ldw	r2,-16(fp)
  8010a4:	10803883 	ldbu	r2,226(r2)
  8010a8:	10803fcc 	andi	r2,r2,255
  8010ac:	1080201c 	xori	r2,r2,128
  8010b0:	10bfe004 	addi	r2,r2,-128
  8010b4:	10000826 	beq	r2,zero,8010d8 <logic+0xe48>
  8010b8:	e0bffc17 	ldw	r2,-16(fp)
  8010bc:	10805a03 	ldbu	r2,360(r2)
  8010c0:	10803fcc 	andi	r2,r2,255
  8010c4:	1080201c 	xori	r2,r2,128
  8010c8:	10bfe004 	addi	r2,r2,-128
  8010cc:	1000021e 	bne	r2,zero,8010d8 <logic+0xe48>
  8010d0:	00800044 	movi	r2,1
  8010d4:	00000106 	br	8010dc <logic+0xe4c>
  8010d8:	0005883a 	mov	r2,zero
  8010dc:	1007883a 	mov	r3,r2
  8010e0:	e0bffc17 	ldw	r2,-16(fp)
  8010e4:	10c037c5 	stb	r3,223(r2)
  d->_g17 = d->_g26 || d->_g23 && !d->_cg23;
  8010e8:	e0bffc17 	ldw	r2,-16(fp)
  8010ec:	10803b43 	ldbu	r2,237(r2)
  8010f0:	10803fcc 	andi	r2,r2,255
  8010f4:	1080201c 	xori	r2,r2,128
  8010f8:	10bfe004 	addi	r2,r2,-128
  8010fc:	10000c1e 	bne	r2,zero,801130 <logic+0xea0>
  801100:	e0bffc17 	ldw	r2,-16(fp)
  801104:	10803a83 	ldbu	r2,234(r2)
  801108:	10803fcc 	andi	r2,r2,255
  80110c:	1080201c 	xori	r2,r2,128
  801110:	10bfe004 	addi	r2,r2,-128
  801114:	10000826 	beq	r2,zero,801138 <logic+0xea8>
  801118:	e0bffc17 	ldw	r2,-16(fp)
  80111c:	10805a43 	ldbu	r2,361(r2)
  801120:	10803fcc 	andi	r2,r2,255
  801124:	1080201c 	xori	r2,r2,128
  801128:	10bfe004 	addi	r2,r2,-128
  80112c:	1000021e 	bne	r2,zero,801138 <logic+0xea8>
  801130:	00800044 	movi	r2,1
  801134:	00000106 	br	80113c <logic+0xeac>
  801138:	0005883a 	mov	r2,zero
  80113c:	1007883a 	mov	r3,r2
  801140:	e0bffc17 	ldw	r2,-16(fp)
  801144:	10c03985 	stb	r3,230(r2)
  d->_g14 = d->_pg37;
  801148:	e0bffc17 	ldw	r2,-16(fp)
  80114c:	10c06c43 	ldbu	r3,433(r2)
  801150:	e0bffc17 	ldw	r2,-16(fp)
  801154:	10c03905 	stb	r3,228(r2)
  d->_g23 = d->_pg34;
  801158:	e0bffc17 	ldw	r2,-16(fp)
  80115c:	10c06c83 	ldbu	r3,434(r2)
  801160:	e0bffc17 	ldw	r2,-16(fp)
  801164:	10c03a85 	stb	r3,234(r2)
  d->_g6 = !(d->_g14 || d->_g23);
  801168:	e0bffc17 	ldw	r2,-16(fp)
  80116c:	10803903 	ldbu	r2,228(r2)
  801170:	10803fcc 	andi	r2,r2,255
  801174:	1080201c 	xori	r2,r2,128
  801178:	10bfe004 	addi	r2,r2,-128
  80117c:	1000081e 	bne	r2,zero,8011a0 <logic+0xf10>
  801180:	e0bffc17 	ldw	r2,-16(fp)
  801184:	10803a83 	ldbu	r2,234(r2)
  801188:	10803fcc 	andi	r2,r2,255
  80118c:	1080201c 	xori	r2,r2,128
  801190:	10bfe004 	addi	r2,r2,-128
  801194:	1000021e 	bne	r2,zero,8011a0 <logic+0xf10>
  801198:	00800044 	movi	r2,1
  80119c:	00000106 	br	8011a4 <logic+0xf14>
  8011a0:	0005883a 	mov	r2,zero
  8011a4:	1007883a 	mov	r3,r2
  8011a8:	e0bffc17 	ldw	r2,-16(fp)
  8011ac:	10c03785 	stb	r3,222(r2)
  d->_g49 = d->_pg41;
  8011b0:	e0bffc17 	ldw	r2,-16(fp)
  8011b4:	10c06cc3 	ldbu	r3,435(r2)
  8011b8:	e0bffc17 	ldw	r2,-16(fp)
  8011bc:	10c03f05 	stb	r3,252(r2)
  d->_g50 = d->_g49 && d->AS;
  8011c0:	e0bffc17 	ldw	r2,-16(fp)
  8011c4:	10803f03 	ldbu	r2,252(r2)
  8011c8:	10803fcc 	andi	r2,r2,255
  8011cc:	1080201c 	xori	r2,r2,128
  8011d0:	10bfe004 	addi	r2,r2,-128
  8011d4:	10000826 	beq	r2,zero,8011f8 <logic+0xf68>
  8011d8:	e0bffc17 	ldw	r2,-16(fp)
  8011dc:	10803103 	ldbu	r2,196(r2)
  8011e0:	10803fcc 	andi	r2,r2,255
  8011e4:	1080201c 	xori	r2,r2,128
  8011e8:	10bfe004 	addi	r2,r2,-128
  8011ec:	10000226 	beq	r2,zero,8011f8 <logic+0xf68>
  8011f0:	00800044 	movi	r2,1
  8011f4:	00000106 	br	8011fc <logic+0xf6c>
  8011f8:	0005883a 	mov	r2,zero
  8011fc:	1007883a 	mov	r3,r2
  801200:	e0bffc17 	ldw	r2,-16(fp)
  801204:	10c03f45 	stb	r3,253(r2)
  if (d->_g50) {
  801208:	e0bffc17 	ldw	r2,-16(fp)
  80120c:	10803f43 	ldbu	r2,253(r2)
  801210:	10803fcc 	andi	r2,r2,255
  801214:	1080201c 	xori	r2,r2,128
  801218:	10bfe004 	addi	r2,r2,-128
  80121c:	10000326 	beq	r2,zero,80122c <logic+0xf9c>
    d->_Pacemaker_local__Atrig2 = 1;
  801220:	e0bffc17 	ldw	r2,-16(fp)
  801224:	00c00044 	movi	r3,1
  801228:	10c03485 	stb	r3,210(r2)
  }
  d->_g185 = d->_pg154;
  80122c:	e0bffc17 	ldw	r2,-16(fp)
  801230:	10c06d03 	ldbu	r3,436(r2)
  801234:	e0bffc17 	ldw	r2,-16(fp)
  801238:	10c05705 	stb	r3,348(r2)
  if (d->_g185) {
  80123c:	e0bffc17 	ldw	r2,-16(fp)
  801240:	10805703 	ldbu	r2,348(r2)
  801244:	10803fcc 	andi	r2,r2,255
  801248:	1080201c 	xori	r2,r2,128
  80124c:	10bfe004 	addi	r2,r2,-128
  801250:	10001226 	beq	r2,zero,80129c <logic+0x100c>
    d->_region1_ARefrac_t += d->deltaT;
  801254:	e13ffc17 	ldw	r4,-16(fp)
  801258:	20802317 	ldw	r2,140(r4)
  80125c:	20c02417 	ldw	r3,144(r4)
  801260:	e1bffc17 	ldw	r6,-16(fp)
  801264:	31002d17 	ldw	r4,180(r6)
  801268:	31402e17 	ldw	r5,184(r6)
  80126c:	200d883a 	mov	r6,r4
  801270:	280f883a 	mov	r7,r5
  801274:	1009883a 	mov	r4,r2
  801278:	180b883a 	mov	r5,r3
  80127c:	0805c5c0 	call	805c5c <__adddf3>
  801280:	1009883a 	mov	r4,r2
  801284:	180b883a 	mov	r5,r3
  801288:	2005883a 	mov	r2,r4
  80128c:	2807883a 	mov	r3,r5
  801290:	e13ffc17 	ldw	r4,-16(fp)
  801294:	20802315 	stw	r2,140(r4)
  801298:	20c02415 	stw	r3,144(r4)
  }
  d->_g52 = d->_g49 && !d->AS;
  80129c:	e0bffc17 	ldw	r2,-16(fp)
  8012a0:	10803f03 	ldbu	r2,252(r2)
  8012a4:	10803fcc 	andi	r2,r2,255
  8012a8:	1080201c 	xori	r2,r2,128
  8012ac:	10bfe004 	addi	r2,r2,-128
  8012b0:	10000826 	beq	r2,zero,8012d4 <logic+0x1044>
  8012b4:	e0bffc17 	ldw	r2,-16(fp)
  8012b8:	10803103 	ldbu	r2,196(r2)
  8012bc:	10803fcc 	andi	r2,r2,255
  8012c0:	1080201c 	xori	r2,r2,128
  8012c4:	10bfe004 	addi	r2,r2,-128
  8012c8:	1000021e 	bne	r2,zero,8012d4 <logic+0x1044>
  8012cc:	00800044 	movi	r2,1
  8012d0:	00000106 	br	8012d8 <logic+0x1048>
  8012d4:	0005883a 	mov	r2,zero
  8012d8:	1007883a 	mov	r3,r2
  8012dc:	e0bffc17 	ldw	r2,-16(fp)
  8012e0:	10c03fc5 	stb	r3,255(r2)
  d->_cg52 = d->_region1_ARefrac_t >= d->T_PVAR;
  8012e4:	e0bffc17 	ldw	r2,-16(fp)
  8012e8:	14002317 	ldw	r16,140(r2)
  8012ec:	14402417 	ldw	r17,144(r2)
  8012f0:	e0bffc17 	ldw	r2,-16(fp)
  8012f4:	10800317 	ldw	r2,12(r2)
  8012f8:	1009883a 	mov	r4,r2
  8012fc:	0806fd40 	call	806fd4 <__floatsidf>
  801300:	1009883a 	mov	r4,r2
  801304:	180b883a 	mov	r5,r3
  801308:	04800044 	movi	r18,1
  80130c:	200d883a 	mov	r6,r4
  801310:	280f883a 	mov	r7,r5
  801314:	8009883a 	mov	r4,r16
  801318:	880b883a 	mov	r5,r17
  80131c:	08065080 	call	806508 <__gedf2>
  801320:	1000010e 	bge	r2,zero,801328 <logic+0x1098>
  801324:	0025883a 	mov	r18,zero
  801328:	9007883a 	mov	r3,r18
  80132c:	e0bffc17 	ldw	r2,-16(fp)
  801330:	10c05d05 	stb	r3,372(r2)
  d->_g53 = d->_g52 && d->_cg52;
  801334:	e0bffc17 	ldw	r2,-16(fp)
  801338:	10803fc3 	ldbu	r2,255(r2)
  80133c:	10803fcc 	andi	r2,r2,255
  801340:	1080201c 	xori	r2,r2,128
  801344:	10bfe004 	addi	r2,r2,-128
  801348:	10000826 	beq	r2,zero,80136c <logic+0x10dc>
  80134c:	e0bffc17 	ldw	r2,-16(fp)
  801350:	10805d03 	ldbu	r2,372(r2)
  801354:	10803fcc 	andi	r2,r2,255
  801358:	1080201c 	xori	r2,r2,128
  80135c:	10bfe004 	addi	r2,r2,-128
  801360:	10000226 	beq	r2,zero,80136c <logic+0x10dc>
  801364:	00800044 	movi	r2,1
  801368:	00000106 	br	801370 <logic+0x10e0>
  80136c:	0005883a 	mov	r2,zero
  801370:	1007883a 	mov	r3,r2
  801374:	e0bffc17 	ldw	r2,-16(fp)
  801378:	10c04005 	stb	r3,256(r2)
  if (d->_g53) {
  80137c:	e0bffc17 	ldw	r2,-16(fp)
  801380:	10804003 	ldbu	r2,256(r2)
  801384:	10803fcc 	andi	r2,r2,255
  801388:	1080201c 	xori	r2,r2,128
  80138c:	10bfe004 	addi	r2,r2,-128
  801390:	10000326 	beq	r2,zero,8013a0 <logic+0x1110>
    d->_Pacemaker_local__Atrig3 = 1;
  801394:	e0bffc17 	ldw	r2,-16(fp)
  801398:	00c00044 	movi	r3,1
  80139c:	10c034c5 	stb	r3,211(r2)
  }
  d->_g45 = d->_g23 || d->_g14;
  8013a0:	e0bffc17 	ldw	r2,-16(fp)
  8013a4:	10803a83 	ldbu	r2,234(r2)
  8013a8:	10803fcc 	andi	r2,r2,255
  8013ac:	1080201c 	xori	r2,r2,128
  8013b0:	10bfe004 	addi	r2,r2,-128
  8013b4:	1000061e 	bne	r2,zero,8013d0 <logic+0x1140>
  8013b8:	e0bffc17 	ldw	r2,-16(fp)
  8013bc:	10803903 	ldbu	r2,228(r2)
  8013c0:	10803fcc 	andi	r2,r2,255
  8013c4:	1080201c 	xori	r2,r2,128
  8013c8:	10bfe004 	addi	r2,r2,-128
  8013cc:	10000226 	beq	r2,zero,8013d8 <logic+0x1148>
  8013d0:	00800044 	movi	r2,1
  8013d4:	00000106 	br	8013dc <logic+0x114c>
  8013d8:	0005883a 	mov	r2,zero
  8013dc:	1007883a 	mov	r3,r2
  8013e0:	e0bffc17 	ldw	r2,-16(fp)
  8013e4:	10c03e85 	stb	r3,250(r2)
  d->_cg40 = d->_region1_ARefrac_t < d->T_PVAR;
  8013e8:	e0bffc17 	ldw	r2,-16(fp)
  8013ec:	14002317 	ldw	r16,140(r2)
  8013f0:	14402417 	ldw	r17,144(r2)
  8013f4:	e0bffc17 	ldw	r2,-16(fp)
  8013f8:	10800317 	ldw	r2,12(r2)
  8013fc:	1009883a 	mov	r4,r2
  801400:	0806fd40 	call	806fd4 <__floatsidf>
  801404:	1009883a 	mov	r4,r2
  801408:	180b883a 	mov	r5,r3
  80140c:	04800044 	movi	r18,1
  801410:	200d883a 	mov	r6,r4
  801414:	280f883a 	mov	r7,r5
  801418:	8009883a 	mov	r4,r16
  80141c:	880b883a 	mov	r5,r17
  801420:	08065e40 	call	8065e4 <__ledf2>
  801424:	10000116 	blt	r2,zero,80142c <logic+0x119c>
  801428:	0025883a 	mov	r18,zero
  80142c:	9007883a 	mov	r3,r18
  801430:	e0bffc17 	ldw	r2,-16(fp)
  801434:	10c05c45 	stb	r3,369(r2)
  d->_g39 = d->_g45 && d->_cg40;
  801438:	e0bffc17 	ldw	r2,-16(fp)
  80143c:	10803e83 	ldbu	r2,250(r2)
  801440:	10803fcc 	andi	r2,r2,255
  801444:	1080201c 	xori	r2,r2,128
  801448:	10bfe004 	addi	r2,r2,-128
  80144c:	10000826 	beq	r2,zero,801470 <logic+0x11e0>
  801450:	e0bffc17 	ldw	r2,-16(fp)
  801454:	10805c43 	ldbu	r2,369(r2)
  801458:	10803fcc 	andi	r2,r2,255
  80145c:	1080201c 	xori	r2,r2,128
  801460:	10bfe004 	addi	r2,r2,-128
  801464:	10000226 	beq	r2,zero,801470 <logic+0x11e0>
  801468:	00800044 	movi	r2,1
  80146c:	00000106 	br	801474 <logic+0x11e4>
  801470:	0005883a 	mov	r2,zero
  801474:	1007883a 	mov	r3,r2
  801478:	e0bffc17 	ldw	r2,-16(fp)
  80147c:	10c03d45 	stb	r3,245(r2)
  if (d->_g39) {
  801480:	e0bffc17 	ldw	r2,-16(fp)
  801484:	10803d43 	ldbu	r2,245(r2)
  801488:	10803fcc 	andi	r2,r2,255
  80148c:	1080201c 	xori	r2,r2,128
  801490:	10bfe004 	addi	r2,r2,-128
  801494:	10003426 	beq	r2,zero,801568 <logic+0x12d8>
    d->sleepT = (d->sleepT < (d->T_PVAR - d->_region1_ARefrac_t)) ? d->sleepT : (d->T_PVAR - d->_region1_ARefrac_t);
  801498:	e0bffc17 	ldw	r2,-16(fp)
  80149c:	14002f17 	ldw	r16,188(r2)
  8014a0:	14403017 	ldw	r17,192(r2)
  8014a4:	e0bffc17 	ldw	r2,-16(fp)
  8014a8:	10800317 	ldw	r2,12(r2)
  8014ac:	1009883a 	mov	r4,r2
  8014b0:	0806fd40 	call	806fd4 <__floatsidf>
  8014b4:	1011883a 	mov	r8,r2
  8014b8:	1813883a 	mov	r9,r3
  8014bc:	e13ffc17 	ldw	r4,-16(fp)
  8014c0:	20802317 	ldw	r2,140(r4)
  8014c4:	20c02417 	ldw	r3,144(r4)
  8014c8:	100d883a 	mov	r6,r2
  8014cc:	180f883a 	mov	r7,r3
  8014d0:	4009883a 	mov	r4,r8
  8014d4:	480b883a 	mov	r5,r9
  8014d8:	08066d80 	call	8066d8 <__subdf3>
  8014dc:	1009883a 	mov	r4,r2
  8014e0:	180b883a 	mov	r5,r3
  8014e4:	2005883a 	mov	r2,r4
  8014e8:	2807883a 	mov	r3,r5
  8014ec:	100d883a 	mov	r6,r2
  8014f0:	180f883a 	mov	r7,r3
  8014f4:	8009883a 	mov	r4,r16
  8014f8:	880b883a 	mov	r5,r17
  8014fc:	08065e40 	call	8065e4 <__ledf2>
  801500:	1000040e 	bge	r2,zero,801514 <logic+0x1284>
  801504:	e13ffc17 	ldw	r4,-16(fp)
  801508:	20802f17 	ldw	r2,188(r4)
  80150c:	20c03017 	ldw	r3,192(r4)
  801510:	00001206 	br	80155c <logic+0x12cc>
  801514:	e0bffc17 	ldw	r2,-16(fp)
  801518:	10800317 	ldw	r2,12(r2)
  80151c:	1009883a 	mov	r4,r2
  801520:	0806fd40 	call	806fd4 <__floatsidf>
  801524:	1011883a 	mov	r8,r2
  801528:	1813883a 	mov	r9,r3
  80152c:	e13ffc17 	ldw	r4,-16(fp)
  801530:	20802317 	ldw	r2,140(r4)
  801534:	20c02417 	ldw	r3,144(r4)
  801538:	100d883a 	mov	r6,r2
  80153c:	180f883a 	mov	r7,r3
  801540:	4009883a 	mov	r4,r8
  801544:	480b883a 	mov	r5,r9
  801548:	08066d80 	call	8066d8 <__subdf3>
  80154c:	1009883a 	mov	r4,r2
  801550:	180b883a 	mov	r5,r3
  801554:	2005883a 	mov	r2,r4
  801558:	2807883a 	mov	r3,r5
  80155c:	e13ffc17 	ldw	r4,-16(fp)
  801560:	20802f15 	stw	r2,188(r4)
  801564:	20c03015 	stw	r3,192(r4)
  }
  d->_cg41 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  801568:	e0bffc17 	ldw	r2,-16(fp)
  80156c:	10803483 	ldbu	r2,210(r2)
  801570:	10803fcc 	andi	r2,r2,255
  801574:	1080201c 	xori	r2,r2,128
  801578:	10bfe004 	addi	r2,r2,-128
  80157c:	1000061e 	bne	r2,zero,801598 <logic+0x1308>
  801580:	e0bffc17 	ldw	r2,-16(fp)
  801584:	108034c3 	ldbu	r2,211(r2)
  801588:	10803fcc 	andi	r2,r2,255
  80158c:	1080201c 	xori	r2,r2,128
  801590:	10bfe004 	addi	r2,r2,-128
  801594:	10000226 	beq	r2,zero,8015a0 <logic+0x1310>
  801598:	00800044 	movi	r2,1
  80159c:	00000106 	br	8015a4 <logic+0x1314>
  8015a0:	0005883a 	mov	r2,zero
  8015a4:	1007883a 	mov	r3,r2
  8015a8:	e0bffc17 	ldw	r2,-16(fp)
  8015ac:	10c05c05 	stb	r3,368(r2)
  d->_g40 = d->_g45 && !d->_cg40;
  8015b0:	e0bffc17 	ldw	r2,-16(fp)
  8015b4:	10803e83 	ldbu	r2,250(r2)
  8015b8:	10803fcc 	andi	r2,r2,255
  8015bc:	1080201c 	xori	r2,r2,128
  8015c0:	10bfe004 	addi	r2,r2,-128
  8015c4:	10000826 	beq	r2,zero,8015e8 <logic+0x1358>
  8015c8:	e0bffc17 	ldw	r2,-16(fp)
  8015cc:	10805c43 	ldbu	r2,369(r2)
  8015d0:	10803fcc 	andi	r2,r2,255
  8015d4:	1080201c 	xori	r2,r2,128
  8015d8:	10bfe004 	addi	r2,r2,-128
  8015dc:	1000021e 	bne	r2,zero,8015e8 <logic+0x1358>
  8015e0:	00800044 	movi	r2,1
  8015e4:	00000106 	br	8015ec <logic+0x135c>
  8015e8:	0005883a 	mov	r2,zero
  8015ec:	1007883a 	mov	r3,r2
  8015f0:	e0bffc17 	ldw	r2,-16(fp)
  8015f4:	10c03d85 	stb	r3,246(r2)
  d->_cg43 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  8015f8:	e0bffc17 	ldw	r2,-16(fp)
  8015fc:	10803483 	ldbu	r2,210(r2)
  801600:	10803fcc 	andi	r2,r2,255
  801604:	1080201c 	xori	r2,r2,128
  801608:	10bfe004 	addi	r2,r2,-128
  80160c:	1000061e 	bne	r2,zero,801628 <logic+0x1398>
  801610:	e0bffc17 	ldw	r2,-16(fp)
  801614:	108034c3 	ldbu	r2,211(r2)
  801618:	10803fcc 	andi	r2,r2,255
  80161c:	1080201c 	xori	r2,r2,128
  801620:	10bfe004 	addi	r2,r2,-128
  801624:	10000226 	beq	r2,zero,801630 <logic+0x13a0>
  801628:	00800044 	movi	r2,1
  80162c:	00000106 	br	801634 <logic+0x13a4>
  801630:	0005883a 	mov	r2,zero
  801634:	1007883a 	mov	r3,r2
  801638:	e0bffc17 	ldw	r2,-16(fp)
  80163c:	10c05c85 	stb	r3,370(r2)
  d->_g42 = d->_g39 && d->_cg41 || d->_g40 && d->_cg43;
  801640:	e0bffc17 	ldw	r2,-16(fp)
  801644:	10803d43 	ldbu	r2,245(r2)
  801648:	10803fcc 	andi	r2,r2,255
  80164c:	1080201c 	xori	r2,r2,128
  801650:	10bfe004 	addi	r2,r2,-128
  801654:	10000626 	beq	r2,zero,801670 <logic+0x13e0>
  801658:	e0bffc17 	ldw	r2,-16(fp)
  80165c:	10805c03 	ldbu	r2,368(r2)
  801660:	10803fcc 	andi	r2,r2,255
  801664:	1080201c 	xori	r2,r2,128
  801668:	10bfe004 	addi	r2,r2,-128
  80166c:	10000c1e 	bne	r2,zero,8016a0 <logic+0x1410>
  801670:	e0bffc17 	ldw	r2,-16(fp)
  801674:	10803d83 	ldbu	r2,246(r2)
  801678:	10803fcc 	andi	r2,r2,255
  80167c:	1080201c 	xori	r2,r2,128
  801680:	10bfe004 	addi	r2,r2,-128
  801684:	10000826 	beq	r2,zero,8016a8 <logic+0x1418>
  801688:	e0bffc17 	ldw	r2,-16(fp)
  80168c:	10805c83 	ldbu	r2,370(r2)
  801690:	10803fcc 	andi	r2,r2,255
  801694:	1080201c 	xori	r2,r2,128
  801698:	10bfe004 	addi	r2,r2,-128
  80169c:	10000226 	beq	r2,zero,8016a8 <logic+0x1418>
  8016a0:	00800044 	movi	r2,1
  8016a4:	00000106 	br	8016ac <logic+0x141c>
  8016a8:	0005883a 	mov	r2,zero
  8016ac:	1007883a 	mov	r3,r2
  8016b0:	e0bffc17 	ldw	r2,-16(fp)
  8016b4:	10c03e05 	stb	r3,248(r2)
  d->_g49 = !d->_g49;
  8016b8:	e0bffc17 	ldw	r2,-16(fp)
  8016bc:	10803f03 	ldbu	r2,252(r2)
  8016c0:	10803fcc 	andi	r2,r2,255
  8016c4:	1080201c 	xori	r2,r2,128
  8016c8:	10bfe004 	addi	r2,r2,-128
  8016cc:	1005003a 	cmpeq	r2,r2,zero
  8016d0:	1007883a 	mov	r3,r2
  8016d4:	e0bffc17 	ldw	r2,-16(fp)
  8016d8:	10c03f05 	stb	r3,252(r2)
  d->_g53 = d->_g50 || d->_g53;
  8016dc:	e0bffc17 	ldw	r2,-16(fp)
  8016e0:	10803f43 	ldbu	r2,253(r2)
  8016e4:	10803fcc 	andi	r2,r2,255
  8016e8:	1080201c 	xori	r2,r2,128
  8016ec:	10bfe004 	addi	r2,r2,-128
  8016f0:	1000061e 	bne	r2,zero,80170c <logic+0x147c>
  8016f4:	e0bffc17 	ldw	r2,-16(fp)
  8016f8:	10804003 	ldbu	r2,256(r2)
  8016fc:	10803fcc 	andi	r2,r2,255
  801700:	1080201c 	xori	r2,r2,128
  801704:	10bfe004 	addi	r2,r2,-128
  801708:	10000226 	beq	r2,zero,801714 <logic+0x1484>
  80170c:	00800044 	movi	r2,1
  801710:	00000106 	br	801718 <logic+0x1488>
  801714:	0005883a 	mov	r2,zero
  801718:	1007883a 	mov	r3,r2
  80171c:	e0bffc17 	ldw	r2,-16(fp)
  801720:	10c04005 	stb	r3,256(r2)
  d->_g50 = (d->_g6 || d->_g42) && (d->_g49 || d->_g53) && (d->_g42 || d->_g53);
  801724:	e0bffc17 	ldw	r2,-16(fp)
  801728:	10803783 	ldbu	r2,222(r2)
  80172c:	10803fcc 	andi	r2,r2,255
  801730:	1080201c 	xori	r2,r2,128
  801734:	10bfe004 	addi	r2,r2,-128
  801738:	1000061e 	bne	r2,zero,801754 <logic+0x14c4>
  80173c:	e0bffc17 	ldw	r2,-16(fp)
  801740:	10803e03 	ldbu	r2,248(r2)
  801744:	10803fcc 	andi	r2,r2,255
  801748:	1080201c 	xori	r2,r2,128
  80174c:	10bfe004 	addi	r2,r2,-128
  801750:	10001a26 	beq	r2,zero,8017bc <logic+0x152c>
  801754:	e0bffc17 	ldw	r2,-16(fp)
  801758:	10803f03 	ldbu	r2,252(r2)
  80175c:	10803fcc 	andi	r2,r2,255
  801760:	1080201c 	xori	r2,r2,128
  801764:	10bfe004 	addi	r2,r2,-128
  801768:	1000061e 	bne	r2,zero,801784 <logic+0x14f4>
  80176c:	e0bffc17 	ldw	r2,-16(fp)
  801770:	10804003 	ldbu	r2,256(r2)
  801774:	10803fcc 	andi	r2,r2,255
  801778:	1080201c 	xori	r2,r2,128
  80177c:	10bfe004 	addi	r2,r2,-128
  801780:	10000e26 	beq	r2,zero,8017bc <logic+0x152c>
  801784:	e0bffc17 	ldw	r2,-16(fp)
  801788:	10803e03 	ldbu	r2,248(r2)
  80178c:	10803fcc 	andi	r2,r2,255
  801790:	1080201c 	xori	r2,r2,128
  801794:	10bfe004 	addi	r2,r2,-128
  801798:	1000061e 	bne	r2,zero,8017b4 <logic+0x1524>
  80179c:	e0bffc17 	ldw	r2,-16(fp)
  8017a0:	10804003 	ldbu	r2,256(r2)
  8017a4:	10803fcc 	andi	r2,r2,255
  8017a8:	1080201c 	xori	r2,r2,128
  8017ac:	10bfe004 	addi	r2,r2,-128
  8017b0:	10000226 	beq	r2,zero,8017bc <logic+0x152c>
  8017b4:	00800044 	movi	r2,1
  8017b8:	00000106 	br	8017c0 <logic+0x1530>
  8017bc:	0005883a 	mov	r2,zero
  8017c0:	1007883a 	mov	r3,r2
  8017c4:	e0bffc17 	ldw	r2,-16(fp)
  8017c8:	10c03f45 	stb	r3,253(r2)
  d->_cg54 = d->_Pacemaker_local__Atrig2;
  8017cc:	e0bffc17 	ldw	r2,-16(fp)
  8017d0:	10c03483 	ldbu	r3,210(r2)
  8017d4:	e0bffc17 	ldw	r2,-16(fp)
  8017d8:	10c05d85 	stb	r3,374(r2)
  d->_g51 = d->_g50 && !d->_cg54;
  8017dc:	e0bffc17 	ldw	r2,-16(fp)
  8017e0:	10803f43 	ldbu	r2,253(r2)
  8017e4:	10803fcc 	andi	r2,r2,255
  8017e8:	1080201c 	xori	r2,r2,128
  8017ec:	10bfe004 	addi	r2,r2,-128
  8017f0:	10000826 	beq	r2,zero,801814 <logic+0x1584>
  8017f4:	e0bffc17 	ldw	r2,-16(fp)
  8017f8:	10805d83 	ldbu	r2,374(r2)
  8017fc:	10803fcc 	andi	r2,r2,255
  801800:	1080201c 	xori	r2,r2,128
  801804:	10bfe004 	addi	r2,r2,-128
  801808:	1000021e 	bne	r2,zero,801814 <logic+0x1584>
  80180c:	00800044 	movi	r2,1
  801810:	00000106 	br	801818 <logic+0x1588>
  801814:	0005883a 	mov	r2,zero
  801818:	1007883a 	mov	r3,r2
  80181c:	e0bffc17 	ldw	r2,-16(fp)
  801820:	10c03f85 	stb	r3,254(r2)
  if (d->_g51) {
  801824:	e0bffc17 	ldw	r2,-16(fp)
  801828:	10803f83 	ldbu	r2,254(r2)
  80182c:	10803fcc 	andi	r2,r2,255
  801830:	1080201c 	xori	r2,r2,128
  801834:	10bfe004 	addi	r2,r2,-128
  801838:	10000526 	beq	r2,zero,801850 <logic+0x15c0>
    d->_taken_transitions[9] += 1;
  80183c:	e0bffc17 	ldw	r2,-16(fp)
  801840:	10801017 	ldw	r2,64(r2)
  801844:	10c00044 	addi	r3,r2,1
  801848:	e0bffc17 	ldw	r2,-16(fp)
  80184c:	10c01015 	stw	r3,64(r2)
  }
  d->_g42 = d->_pg52;
  801850:	e0bffc17 	ldw	r2,-16(fp)
  801854:	10c06d43 	ldbu	r3,437(r2)
  801858:	e0bffc17 	ldw	r2,-16(fp)
  80185c:	10c03e05 	stb	r3,248(r2)
  if (d->_g42) {
  801860:	e0bffc17 	ldw	r2,-16(fp)
  801864:	10803e03 	ldbu	r2,248(r2)
  801868:	10803fcc 	andi	r2,r2,255
  80186c:	1080201c 	xori	r2,r2,128
  801870:	10bfe004 	addi	r2,r2,-128
  801874:	10000b26 	beq	r2,zero,8018a4 <logic+0x1614>
    d->A_EVT |= 1;
  801878:	e0bffc17 	ldw	r2,-16(fp)
  80187c:	10803203 	ldbu	r2,200(r2)
  801880:	10800054 	ori	r2,r2,1
  801884:	1007883a 	mov	r3,r2
  801888:	e0bffc17 	ldw	r2,-16(fp)
  80188c:	10c03205 	stb	r3,200(r2)
    d->_taken_transitions[10] += 1;
  801890:	e0bffc17 	ldw	r2,-16(fp)
  801894:	10801117 	ldw	r2,68(r2)
  801898:	10c00044 	addi	r3,r2,1
  80189c:	e0bffc17 	ldw	r2,-16(fp)
  8018a0:	10c01115 	stw	r3,68(r2)
  }
  d->_g51_e2 = d->_pg42_e1;
  8018a4:	e0bffc17 	ldw	r2,-16(fp)
  8018a8:	10c06d83 	ldbu	r3,438(r2)
  8018ac:	e0bffc17 	ldw	r2,-16(fp)
  8018b0:	10c06845 	stb	r3,417(r2)
  d->_g42_e1 = d->_GO || d->_g51_e2;
  8018b4:	e0bffc17 	ldw	r2,-16(fp)
  8018b8:	10805803 	ldbu	r2,352(r2)
  8018bc:	10803fcc 	andi	r2,r2,255
  8018c0:	1080201c 	xori	r2,r2,128
  8018c4:	10bfe004 	addi	r2,r2,-128
  8018c8:	1000061e 	bne	r2,zero,8018e4 <logic+0x1654>
  8018cc:	e0bffc17 	ldw	r2,-16(fp)
  8018d0:	10806843 	ldbu	r2,417(r2)
  8018d4:	10803fcc 	andi	r2,r2,255
  8018d8:	1080201c 	xori	r2,r2,128
  8018dc:	10bfe004 	addi	r2,r2,-128
  8018e0:	10000226 	beq	r2,zero,8018ec <logic+0x165c>
  8018e4:	00800044 	movi	r2,1
  8018e8:	00000106 	br	8018f0 <logic+0x1660>
  8018ec:	0005883a 	mov	r2,zero
  8018f0:	1007883a 	mov	r3,r2
  8018f4:	e0bffc17 	ldw	r2,-16(fp)
  8018f8:	10c06805 	stb	r3,416(r2)
  if (d->_g42_e1) {
  8018fc:	e0bffc17 	ldw	r2,-16(fp)
  801900:	10806803 	ldbu	r2,416(r2)
  801904:	10803fcc 	andi	r2,r2,255
  801908:	1080201c 	xori	r2,r2,128
  80190c:	10bfe004 	addi	r2,r2,-128
  801910:	10000426 	beq	r2,zero,801924 <logic+0x1694>
    d->_pre_AP = d->_reg_AP;
  801914:	e0bffc17 	ldw	r2,-16(fp)
  801918:	10c03303 	ldbu	r3,204(r2)
  80191c:	e0bffc17 	ldw	r2,-16(fp)
  801920:	10c03345 	stb	r3,205(r2)
  }
  d->_g213 = d->_pg62;
  801924:	e0bffc17 	ldw	r2,-16(fp)
  801928:	10c06dc3 	ldbu	r3,439(r2)
  80192c:	e0bffc17 	ldw	r2,-16(fp)
  801930:	10c05785 	stb	r3,350(r2)
  d->_g57 = d->_g213 && !d->VS;
  801934:	e0bffc17 	ldw	r2,-16(fp)
  801938:	10805783 	ldbu	r2,350(r2)
  80193c:	10803fcc 	andi	r2,r2,255
  801940:	1080201c 	xori	r2,r2,128
  801944:	10bfe004 	addi	r2,r2,-128
  801948:	10000826 	beq	r2,zero,80196c <logic+0x16dc>
  80194c:	e0bffc17 	ldw	r2,-16(fp)
  801950:	10803143 	ldbu	r2,197(r2)
  801954:	10803fcc 	andi	r2,r2,255
  801958:	1080201c 	xori	r2,r2,128
  80195c:	10bfe004 	addi	r2,r2,-128
  801960:	1000021e 	bne	r2,zero,80196c <logic+0x16dc>
  801964:	00800044 	movi	r2,1
  801968:	00000106 	br	801970 <logic+0x16e0>
  80196c:	0005883a 	mov	r2,zero
  801970:	1007883a 	mov	r3,r2
  801974:	e0bffc17 	ldw	r2,-16(fp)
  801978:	10c04105 	stb	r3,260(r2)
  d->_cg57 = d->_pre_VP;
  80197c:	e0bffc17 	ldw	r2,-16(fp)
  801980:	10c033c3 	ldbu	r3,207(r2)
  801984:	e0bffc17 	ldw	r2,-16(fp)
  801988:	10c05dc5 	stb	r3,375(r2)
  d->_g59 = d->_g57 && !d->_cg57;
  80198c:	e0bffc17 	ldw	r2,-16(fp)
  801990:	10804103 	ldbu	r2,260(r2)
  801994:	10803fcc 	andi	r2,r2,255
  801998:	1080201c 	xori	r2,r2,128
  80199c:	10bfe004 	addi	r2,r2,-128
  8019a0:	10000826 	beq	r2,zero,8019c4 <logic+0x1734>
  8019a4:	e0bffc17 	ldw	r2,-16(fp)
  8019a8:	10805dc3 	ldbu	r2,375(r2)
  8019ac:	10803fcc 	andi	r2,r2,255
  8019b0:	1080201c 	xori	r2,r2,128
  8019b4:	10bfe004 	addi	r2,r2,-128
  8019b8:	1000021e 	bne	r2,zero,8019c4 <logic+0x1734>
  8019bc:	00800044 	movi	r2,1
  8019c0:	00000106 	br	8019c8 <logic+0x1738>
  8019c4:	0005883a 	mov	r2,zero
  8019c8:	1007883a 	mov	r3,r2
  8019cc:	e0bffc17 	ldw	r2,-16(fp)
  8019d0:	10c04185 	stb	r3,262(r2)
  d->_g63 = d->_g59 && !d->AS;
  8019d4:	e0bffc17 	ldw	r2,-16(fp)
  8019d8:	10804183 	ldbu	r2,262(r2)
  8019dc:	10803fcc 	andi	r2,r2,255
  8019e0:	1080201c 	xori	r2,r2,128
  8019e4:	10bfe004 	addi	r2,r2,-128
  8019e8:	10000826 	beq	r2,zero,801a0c <logic+0x177c>
  8019ec:	e0bffc17 	ldw	r2,-16(fp)
  8019f0:	10803103 	ldbu	r2,196(r2)
  8019f4:	10803fcc 	andi	r2,r2,255
  8019f8:	1080201c 	xori	r2,r2,128
  8019fc:	10bfe004 	addi	r2,r2,-128
  801a00:	1000021e 	bne	r2,zero,801a0c <logic+0x177c>
  801a04:	00800044 	movi	r2,1
  801a08:	00000106 	br	801a10 <logic+0x1780>
  801a0c:	0005883a 	mov	r2,zero
  801a10:	1007883a 	mov	r3,r2
  801a14:	e0bffc17 	ldw	r2,-16(fp)
  801a18:	10c04245 	stb	r3,265(r2)
  d->_cg63 = d->_pre_AP;
  801a1c:	e0bffc17 	ldw	r2,-16(fp)
  801a20:	10c03343 	ldbu	r3,205(r2)
  801a24:	e0bffc17 	ldw	r2,-16(fp)
  801a28:	10c05b05 	stb	r3,364(r2)
  d->_g62 = d->_GO || d->_g51 || d->_g42 || d->_g63 && !d->_cg63;
  801a2c:	e0bffc17 	ldw	r2,-16(fp)
  801a30:	10805803 	ldbu	r2,352(r2)
  801a34:	10803fcc 	andi	r2,r2,255
  801a38:	1080201c 	xori	r2,r2,128
  801a3c:	10bfe004 	addi	r2,r2,-128
  801a40:	1000181e 	bne	r2,zero,801aa4 <logic+0x1814>
  801a44:	e0bffc17 	ldw	r2,-16(fp)
  801a48:	10803f83 	ldbu	r2,254(r2)
  801a4c:	10803fcc 	andi	r2,r2,255
  801a50:	1080201c 	xori	r2,r2,128
  801a54:	10bfe004 	addi	r2,r2,-128
  801a58:	1000121e 	bne	r2,zero,801aa4 <logic+0x1814>
  801a5c:	e0bffc17 	ldw	r2,-16(fp)
  801a60:	10803e03 	ldbu	r2,248(r2)
  801a64:	10803fcc 	andi	r2,r2,255
  801a68:	1080201c 	xori	r2,r2,128
  801a6c:	10bfe004 	addi	r2,r2,-128
  801a70:	10000c1e 	bne	r2,zero,801aa4 <logic+0x1814>
  801a74:	e0bffc17 	ldw	r2,-16(fp)
  801a78:	10804243 	ldbu	r2,265(r2)
  801a7c:	10803fcc 	andi	r2,r2,255
  801a80:	1080201c 	xori	r2,r2,128
  801a84:	10bfe004 	addi	r2,r2,-128
  801a88:	10000826 	beq	r2,zero,801aac <logic+0x181c>
  801a8c:	e0bffc17 	ldw	r2,-16(fp)
  801a90:	10805b03 	ldbu	r2,364(r2)
  801a94:	10803fcc 	andi	r2,r2,255
  801a98:	1080201c 	xori	r2,r2,128
  801a9c:	10bfe004 	addi	r2,r2,-128
  801aa0:	1000021e 	bne	r2,zero,801aac <logic+0x181c>
  801aa4:	00800044 	movi	r2,1
  801aa8:	00000106 	br	801ab0 <logic+0x1820>
  801aac:	0005883a 	mov	r2,zero
  801ab0:	1007883a 	mov	r3,r2
  801ab4:	e0bffc17 	ldw	r2,-16(fp)
  801ab8:	10c04205 	stb	r3,264(r2)
  d->_g56 = d->_g213 && d->VS;
  801abc:	e0bffc17 	ldw	r2,-16(fp)
  801ac0:	10805783 	ldbu	r2,350(r2)
  801ac4:	10803fcc 	andi	r2,r2,255
  801ac8:	1080201c 	xori	r2,r2,128
  801acc:	10bfe004 	addi	r2,r2,-128
  801ad0:	10000826 	beq	r2,zero,801af4 <logic+0x1864>
  801ad4:	e0bffc17 	ldw	r2,-16(fp)
  801ad8:	10803143 	ldbu	r2,197(r2)
  801adc:	10803fcc 	andi	r2,r2,255
  801ae0:	1080201c 	xori	r2,r2,128
  801ae4:	10bfe004 	addi	r2,r2,-128
  801ae8:	10000226 	beq	r2,zero,801af4 <logic+0x1864>
  801aec:	00800044 	movi	r2,1
  801af0:	00000106 	br	801af8 <logic+0x1868>
  801af4:	0005883a 	mov	r2,zero
  801af8:	1007883a 	mov	r3,r2
  801afc:	e0bffc17 	ldw	r2,-16(fp)
  801b00:	10c040c5 	stb	r3,259(r2)
  if (d->_g56) {
  801b04:	e0bffc17 	ldw	r2,-16(fp)
  801b08:	108040c3 	ldbu	r2,259(r2)
  801b0c:	10803fcc 	andi	r2,r2,255
  801b10:	1080201c 	xori	r2,r2,128
  801b14:	10bfe004 	addi	r2,r2,-128
  801b18:	10000826 	beq	r2,zero,801b3c <logic+0x18ac>
    d->_region1_ARefrac_t = 0;
  801b1c:	e0bffc17 	ldw	r2,-16(fp)
  801b20:	10002315 	stw	zero,140(r2)
  801b24:	10002415 	stw	zero,144(r2)
    d->_taken_transitions[4] += 1;
  801b28:	e0bffc17 	ldw	r2,-16(fp)
  801b2c:	10800b17 	ldw	r2,44(r2)
  801b30:	10c00044 	addi	r3,r2,1
  801b34:	e0bffc17 	ldw	r2,-16(fp)
  801b38:	10c00b15 	stw	r3,44(r2)
  }
  d->_g33 = d->_g50 && d->_cg54;
  801b3c:	e0bffc17 	ldw	r2,-16(fp)
  801b40:	10803f43 	ldbu	r2,253(r2)
  801b44:	10803fcc 	andi	r2,r2,255
  801b48:	1080201c 	xori	r2,r2,128
  801b4c:	10bfe004 	addi	r2,r2,-128
  801b50:	10000826 	beq	r2,zero,801b74 <logic+0x18e4>
  801b54:	e0bffc17 	ldw	r2,-16(fp)
  801b58:	10805d83 	ldbu	r2,374(r2)
  801b5c:	10803fcc 	andi	r2,r2,255
  801b60:	1080201c 	xori	r2,r2,128
  801b64:	10bfe004 	addi	r2,r2,-128
  801b68:	10000226 	beq	r2,zero,801b74 <logic+0x18e4>
  801b6c:	00800044 	movi	r2,1
  801b70:	00000106 	br	801b78 <logic+0x18e8>
  801b74:	0005883a 	mov	r2,zero
  801b78:	1007883a 	mov	r3,r2
  801b7c:	e0bffc17 	ldw	r2,-16(fp)
  801b80:	10c03c45 	stb	r3,241(r2)
  if (d->_g33) {
  801b84:	e0bffc17 	ldw	r2,-16(fp)
  801b88:	10803c43 	ldbu	r2,241(r2)
  801b8c:	10803fcc 	andi	r2,r2,255
  801b90:	1080201c 	xori	r2,r2,128
  801b94:	10bfe004 	addi	r2,r2,-128
  801b98:	10000b26 	beq	r2,zero,801bc8 <logic+0x1938>
    d->A_REFR |= 1;
  801b9c:	e0bffc17 	ldw	r2,-16(fp)
  801ba0:	10803283 	ldbu	r2,202(r2)
  801ba4:	10800054 	ori	r2,r2,1
  801ba8:	1007883a 	mov	r3,r2
  801bac:	e0bffc17 	ldw	r2,-16(fp)
  801bb0:	10c03285 	stb	r3,202(r2)
    d->_taken_transitions[8] += 1;
  801bb4:	e0bffc17 	ldw	r2,-16(fp)
  801bb8:	10800f17 	ldw	r2,60(r2)
  801bbc:	10c00044 	addi	r3,r2,1
  801bc0:	e0bffc17 	ldw	r2,-16(fp)
  801bc4:	10c00f15 	stw	r3,60(r2)
  }
  d->_g54 = d->_g57 && d->_cg57;
  801bc8:	e0bffc17 	ldw	r2,-16(fp)
  801bcc:	10804103 	ldbu	r2,260(r2)
  801bd0:	10803fcc 	andi	r2,r2,255
  801bd4:	1080201c 	xori	r2,r2,128
  801bd8:	10bfe004 	addi	r2,r2,-128
  801bdc:	10000826 	beq	r2,zero,801c00 <logic+0x1970>
  801be0:	e0bffc17 	ldw	r2,-16(fp)
  801be4:	10805dc3 	ldbu	r2,375(r2)
  801be8:	10803fcc 	andi	r2,r2,255
  801bec:	1080201c 	xori	r2,r2,128
  801bf0:	10bfe004 	addi	r2,r2,-128
  801bf4:	10000226 	beq	r2,zero,801c00 <logic+0x1970>
  801bf8:	00800044 	movi	r2,1
  801bfc:	00000106 	br	801c04 <logic+0x1974>
  801c00:	0005883a 	mov	r2,zero
  801c04:	1007883a 	mov	r3,r2
  801c08:	e0bffc17 	ldw	r2,-16(fp)
  801c0c:	10c04045 	stb	r3,257(r2)
  if (d->_g54) {
  801c10:	e0bffc17 	ldw	r2,-16(fp)
  801c14:	10804043 	ldbu	r2,257(r2)
  801c18:	10803fcc 	andi	r2,r2,255
  801c1c:	1080201c 	xori	r2,r2,128
  801c20:	10bfe004 	addi	r2,r2,-128
  801c24:	10000826 	beq	r2,zero,801c48 <logic+0x19b8>
    d->_region1_ARefrac_t = 0;
  801c28:	e0bffc17 	ldw	r2,-16(fp)
  801c2c:	10002315 	stw	zero,140(r2)
  801c30:	10002415 	stw	zero,144(r2)
    d->_taken_transitions[5] += 1;
  801c34:	e0bffc17 	ldw	r2,-16(fp)
  801c38:	10800c17 	ldw	r2,48(r2)
  801c3c:	10c00044 	addi	r3,r2,1
  801c40:	e0bffc17 	ldw	r2,-16(fp)
  801c44:	10c00c15 	stw	r3,48(r2)
  }
  d->_g57 = d->_g56 || d->_g33 || d->_g54;
  801c48:	e0bffc17 	ldw	r2,-16(fp)
  801c4c:	108040c3 	ldbu	r2,259(r2)
  801c50:	10803fcc 	andi	r2,r2,255
  801c54:	1080201c 	xori	r2,r2,128
  801c58:	10bfe004 	addi	r2,r2,-128
  801c5c:	10000c1e 	bne	r2,zero,801c90 <logic+0x1a00>
  801c60:	e0bffc17 	ldw	r2,-16(fp)
  801c64:	10803c43 	ldbu	r2,241(r2)
  801c68:	10803fcc 	andi	r2,r2,255
  801c6c:	1080201c 	xori	r2,r2,128
  801c70:	10bfe004 	addi	r2,r2,-128
  801c74:	1000061e 	bne	r2,zero,801c90 <logic+0x1a00>
  801c78:	e0bffc17 	ldw	r2,-16(fp)
  801c7c:	10804043 	ldbu	r2,257(r2)
  801c80:	10803fcc 	andi	r2,r2,255
  801c84:	1080201c 	xori	r2,r2,128
  801c88:	10bfe004 	addi	r2,r2,-128
  801c8c:	10000226 	beq	r2,zero,801c98 <logic+0x1a08>
  801c90:	00800044 	movi	r2,1
  801c94:	00000106 	br	801c9c <logic+0x1a0c>
  801c98:	0005883a 	mov	r2,zero
  801c9c:	1007883a 	mov	r3,r2
  801ca0:	e0bffc17 	ldw	r2,-16(fp)
  801ca4:	10c04105 	stb	r3,260(r2)
  if (d->_g57) {
  801ca8:	e0bffc17 	ldw	r2,-16(fp)
  801cac:	10804103 	ldbu	r2,260(r2)
  801cb0:	10803fcc 	andi	r2,r2,255
  801cb4:	1080201c 	xori	r2,r2,128
  801cb8:	10bfe004 	addi	r2,r2,-128
  801cbc:	10000426 	beq	r2,zero,801cd0 <logic+0x1a40>
    d->_Pacemaker_local__Atrig2 = 0;
  801cc0:	e0bffc17 	ldw	r2,-16(fp)
  801cc4:	10003485 	stb	zero,210(r2)
    d->_Pacemaker_local__Atrig3 = 0;
  801cc8:	e0bffc17 	ldw	r2,-16(fp)
  801ccc:	100034c5 	stb	zero,211(r2)
  }
  d->_cg36 = d->_region1_ARefrac_t < d->T_PVAR;
  801cd0:	e0bffc17 	ldw	r2,-16(fp)
  801cd4:	14002317 	ldw	r16,140(r2)
  801cd8:	14402417 	ldw	r17,144(r2)
  801cdc:	e0bffc17 	ldw	r2,-16(fp)
  801ce0:	10800317 	ldw	r2,12(r2)
  801ce4:	1009883a 	mov	r4,r2
  801ce8:	0806fd40 	call	806fd4 <__floatsidf>
  801cec:	1009883a 	mov	r4,r2
  801cf0:	180b883a 	mov	r5,r3
  801cf4:	04800044 	movi	r18,1
  801cf8:	200d883a 	mov	r6,r4
  801cfc:	280f883a 	mov	r7,r5
  801d00:	8009883a 	mov	r4,r16
  801d04:	880b883a 	mov	r5,r17
  801d08:	08065e40 	call	8065e4 <__ledf2>
  801d0c:	10000116 	blt	r2,zero,801d14 <logic+0x1a84>
  801d10:	0025883a 	mov	r18,zero
  801d14:	9007883a 	mov	r3,r18
  801d18:	e0bffc17 	ldw	r2,-16(fp)
  801d1c:	10c05b85 	stb	r3,366(r2)
  d->_g55 = d->_g57 && d->_cg36;
  801d20:	e0bffc17 	ldw	r2,-16(fp)
  801d24:	10804103 	ldbu	r2,260(r2)
  801d28:	10803fcc 	andi	r2,r2,255
  801d2c:	1080201c 	xori	r2,r2,128
  801d30:	10bfe004 	addi	r2,r2,-128
  801d34:	10000826 	beq	r2,zero,801d58 <logic+0x1ac8>
  801d38:	e0bffc17 	ldw	r2,-16(fp)
  801d3c:	10805b83 	ldbu	r2,366(r2)
  801d40:	10803fcc 	andi	r2,r2,255
  801d44:	1080201c 	xori	r2,r2,128
  801d48:	10bfe004 	addi	r2,r2,-128
  801d4c:	10000226 	beq	r2,zero,801d58 <logic+0x1ac8>
  801d50:	00800044 	movi	r2,1
  801d54:	00000106 	br	801d5c <logic+0x1acc>
  801d58:	0005883a 	mov	r2,zero
  801d5c:	1007883a 	mov	r3,r2
  801d60:	e0bffc17 	ldw	r2,-16(fp)
  801d64:	10c04085 	stb	r3,258(r2)
  if (d->_g55) {
  801d68:	e0bffc17 	ldw	r2,-16(fp)
  801d6c:	10804083 	ldbu	r2,258(r2)
  801d70:	10803fcc 	andi	r2,r2,255
  801d74:	1080201c 	xori	r2,r2,128
  801d78:	10bfe004 	addi	r2,r2,-128
  801d7c:	10003426 	beq	r2,zero,801e50 <logic+0x1bc0>
    d->sleepT = (d->sleepT < (d->T_PVAR - d->_region1_ARefrac_t)) ? d->sleepT : (d->T_PVAR - d->_region1_ARefrac_t);
  801d80:	e0bffc17 	ldw	r2,-16(fp)
  801d84:	14002f17 	ldw	r16,188(r2)
  801d88:	14403017 	ldw	r17,192(r2)
  801d8c:	e0bffc17 	ldw	r2,-16(fp)
  801d90:	10800317 	ldw	r2,12(r2)
  801d94:	1009883a 	mov	r4,r2
  801d98:	0806fd40 	call	806fd4 <__floatsidf>
  801d9c:	1011883a 	mov	r8,r2
  801da0:	1813883a 	mov	r9,r3
  801da4:	e13ffc17 	ldw	r4,-16(fp)
  801da8:	20802317 	ldw	r2,140(r4)
  801dac:	20c02417 	ldw	r3,144(r4)
  801db0:	100d883a 	mov	r6,r2
  801db4:	180f883a 	mov	r7,r3
  801db8:	4009883a 	mov	r4,r8
  801dbc:	480b883a 	mov	r5,r9
  801dc0:	08066d80 	call	8066d8 <__subdf3>
  801dc4:	1009883a 	mov	r4,r2
  801dc8:	180b883a 	mov	r5,r3
  801dcc:	2005883a 	mov	r2,r4
  801dd0:	2807883a 	mov	r3,r5
  801dd4:	100d883a 	mov	r6,r2
  801dd8:	180f883a 	mov	r7,r3
  801ddc:	8009883a 	mov	r4,r16
  801de0:	880b883a 	mov	r5,r17
  801de4:	08065e40 	call	8065e4 <__ledf2>
  801de8:	1000040e 	bge	r2,zero,801dfc <logic+0x1b6c>
  801dec:	e13ffc17 	ldw	r4,-16(fp)
  801df0:	20802f17 	ldw	r2,188(r4)
  801df4:	20c03017 	ldw	r3,192(r4)
  801df8:	00001206 	br	801e44 <logic+0x1bb4>
  801dfc:	e0bffc17 	ldw	r2,-16(fp)
  801e00:	10800317 	ldw	r2,12(r2)
  801e04:	1009883a 	mov	r4,r2
  801e08:	0806fd40 	call	806fd4 <__floatsidf>
  801e0c:	1011883a 	mov	r8,r2
  801e10:	1813883a 	mov	r9,r3
  801e14:	e13ffc17 	ldw	r4,-16(fp)
  801e18:	20802317 	ldw	r2,140(r4)
  801e1c:	20c02417 	ldw	r3,144(r4)
  801e20:	100d883a 	mov	r6,r2
  801e24:	180f883a 	mov	r7,r3
  801e28:	4009883a 	mov	r4,r8
  801e2c:	480b883a 	mov	r5,r9
  801e30:	08066d80 	call	8066d8 <__subdf3>
  801e34:	1009883a 	mov	r4,r2
  801e38:	180b883a 	mov	r5,r3
  801e3c:	2005883a 	mov	r2,r4
  801e40:	2807883a 	mov	r3,r5
  801e44:	e13ffc17 	ldw	r4,-16(fp)
  801e48:	20802f15 	stw	r2,188(r4)
  801e4c:	20c03015 	stw	r3,192(r4)
  }
  d->_cg37 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  801e50:	e0bffc17 	ldw	r2,-16(fp)
  801e54:	10803483 	ldbu	r2,210(r2)
  801e58:	10803fcc 	andi	r2,r2,255
  801e5c:	1080201c 	xori	r2,r2,128
  801e60:	10bfe004 	addi	r2,r2,-128
  801e64:	1000061e 	bne	r2,zero,801e80 <logic+0x1bf0>
  801e68:	e0bffc17 	ldw	r2,-16(fp)
  801e6c:	108034c3 	ldbu	r2,211(r2)
  801e70:	10803fcc 	andi	r2,r2,255
  801e74:	1080201c 	xori	r2,r2,128
  801e78:	10bfe004 	addi	r2,r2,-128
  801e7c:	10000226 	beq	r2,zero,801e88 <logic+0x1bf8>
  801e80:	00800044 	movi	r2,1
  801e84:	00000106 	br	801e8c <logic+0x1bfc>
  801e88:	0005883a 	mov	r2,zero
  801e8c:	1007883a 	mov	r3,r2
  801e90:	e0bffc17 	ldw	r2,-16(fp)
  801e94:	10c05bc5 	stb	r3,367(r2)
  d->_g34 = d->_g55 && !d->_cg37 || d->_g39 && !d->_cg41;
  801e98:	e0bffc17 	ldw	r2,-16(fp)
  801e9c:	10804083 	ldbu	r2,258(r2)
  801ea0:	10803fcc 	andi	r2,r2,255
  801ea4:	1080201c 	xori	r2,r2,128
  801ea8:	10bfe004 	addi	r2,r2,-128
  801eac:	10000626 	beq	r2,zero,801ec8 <logic+0x1c38>
  801eb0:	e0bffc17 	ldw	r2,-16(fp)
  801eb4:	10805bc3 	ldbu	r2,367(r2)
  801eb8:	10803fcc 	andi	r2,r2,255
  801ebc:	1080201c 	xori	r2,r2,128
  801ec0:	10bfe004 	addi	r2,r2,-128
  801ec4:	10000c26 	beq	r2,zero,801ef8 <logic+0x1c68>
  801ec8:	e0bffc17 	ldw	r2,-16(fp)
  801ecc:	10803d43 	ldbu	r2,245(r2)
  801ed0:	10803fcc 	andi	r2,r2,255
  801ed4:	1080201c 	xori	r2,r2,128
  801ed8:	10bfe004 	addi	r2,r2,-128
  801edc:	10000826 	beq	r2,zero,801f00 <logic+0x1c70>
  801ee0:	e0bffc17 	ldw	r2,-16(fp)
  801ee4:	10805c03 	ldbu	r2,368(r2)
  801ee8:	10803fcc 	andi	r2,r2,255
  801eec:	1080201c 	xori	r2,r2,128
  801ef0:	10bfe004 	addi	r2,r2,-128
  801ef4:	1000021e 	bne	r2,zero,801f00 <logic+0x1c70>
  801ef8:	00800044 	movi	r2,1
  801efc:	00000106 	br	801f04 <logic+0x1c74>
  801f00:	0005883a 	mov	r2,zero
  801f04:	1007883a 	mov	r3,r2
  801f08:	e0bffc17 	ldw	r2,-16(fp)
  801f0c:	10c03c85 	stb	r3,242(r2)
  d->_g58 = d->_g57 && !d->_cg36;
  801f10:	e0bffc17 	ldw	r2,-16(fp)
  801f14:	10804103 	ldbu	r2,260(r2)
  801f18:	10803fcc 	andi	r2,r2,255
  801f1c:	1080201c 	xori	r2,r2,128
  801f20:	10bfe004 	addi	r2,r2,-128
  801f24:	10000826 	beq	r2,zero,801f48 <logic+0x1cb8>
  801f28:	e0bffc17 	ldw	r2,-16(fp)
  801f2c:	10805b83 	ldbu	r2,366(r2)
  801f30:	10803fcc 	andi	r2,r2,255
  801f34:	1080201c 	xori	r2,r2,128
  801f38:	10bfe004 	addi	r2,r2,-128
  801f3c:	1000021e 	bne	r2,zero,801f48 <logic+0x1cb8>
  801f40:	00800044 	movi	r2,1
  801f44:	00000106 	br	801f4c <logic+0x1cbc>
  801f48:	0005883a 	mov	r2,zero
  801f4c:	1007883a 	mov	r3,r2
  801f50:	e0bffc17 	ldw	r2,-16(fp)
  801f54:	10c04145 	stb	r3,261(r2)
  d->_cg46 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  801f58:	e0bffc17 	ldw	r2,-16(fp)
  801f5c:	10803483 	ldbu	r2,210(r2)
  801f60:	10803fcc 	andi	r2,r2,255
  801f64:	1080201c 	xori	r2,r2,128
  801f68:	10bfe004 	addi	r2,r2,-128
  801f6c:	1000061e 	bne	r2,zero,801f88 <logic+0x1cf8>
  801f70:	e0bffc17 	ldw	r2,-16(fp)
  801f74:	108034c3 	ldbu	r2,211(r2)
  801f78:	10803fcc 	andi	r2,r2,255
  801f7c:	1080201c 	xori	r2,r2,128
  801f80:	10bfe004 	addi	r2,r2,-128
  801f84:	10000226 	beq	r2,zero,801f90 <logic+0x1d00>
  801f88:	00800044 	movi	r2,1
  801f8c:	00000106 	br	801f94 <logic+0x1d04>
  801f90:	0005883a 	mov	r2,zero
  801f94:	1007883a 	mov	r3,r2
  801f98:	e0bffc17 	ldw	r2,-16(fp)
  801f9c:	10c05cc5 	stb	r3,371(r2)
  d->_g37 = d->_g40 && !d->_cg43 || d->_g58 && !d->_cg46;
  801fa0:	e0bffc17 	ldw	r2,-16(fp)
  801fa4:	10803d83 	ldbu	r2,246(r2)
  801fa8:	10803fcc 	andi	r2,r2,255
  801fac:	1080201c 	xori	r2,r2,128
  801fb0:	10bfe004 	addi	r2,r2,-128
  801fb4:	10000626 	beq	r2,zero,801fd0 <logic+0x1d40>
  801fb8:	e0bffc17 	ldw	r2,-16(fp)
  801fbc:	10805c83 	ldbu	r2,370(r2)
  801fc0:	10803fcc 	andi	r2,r2,255
  801fc4:	1080201c 	xori	r2,r2,128
  801fc8:	10bfe004 	addi	r2,r2,-128
  801fcc:	10000c26 	beq	r2,zero,802000 <logic+0x1d70>
  801fd0:	e0bffc17 	ldw	r2,-16(fp)
  801fd4:	10804143 	ldbu	r2,261(r2)
  801fd8:	10803fcc 	andi	r2,r2,255
  801fdc:	1080201c 	xori	r2,r2,128
  801fe0:	10bfe004 	addi	r2,r2,-128
  801fe4:	10000826 	beq	r2,zero,802008 <logic+0x1d78>
  801fe8:	e0bffc17 	ldw	r2,-16(fp)
  801fec:	10805cc3 	ldbu	r2,371(r2)
  801ff0:	10803fcc 	andi	r2,r2,255
  801ff4:	1080201c 	xori	r2,r2,128
  801ff8:	10bfe004 	addi	r2,r2,-128
  801ffc:	1000021e 	bne	r2,zero,802008 <logic+0x1d78>
  802000:	00800044 	movi	r2,1
  802004:	00000106 	br	80200c <logic+0x1d7c>
  802008:	0005883a 	mov	r2,zero
  80200c:	1007883a 	mov	r3,r2
  802010:	e0bffc17 	ldw	r2,-16(fp)
  802014:	10c03d05 	stb	r3,244(r2)
  d->_g41 = d->_g57 || d->_g52 && !d->_cg52;
  802018:	e0bffc17 	ldw	r2,-16(fp)
  80201c:	10804103 	ldbu	r2,260(r2)
  802020:	10803fcc 	andi	r2,r2,255
  802024:	1080201c 	xori	r2,r2,128
  802028:	10bfe004 	addi	r2,r2,-128
  80202c:	10000c1e 	bne	r2,zero,802060 <logic+0x1dd0>
  802030:	e0bffc17 	ldw	r2,-16(fp)
  802034:	10803fc3 	ldbu	r2,255(r2)
  802038:	10803fcc 	andi	r2,r2,255
  80203c:	1080201c 	xori	r2,r2,128
  802040:	10bfe004 	addi	r2,r2,-128
  802044:	10000826 	beq	r2,zero,802068 <logic+0x1dd8>
  802048:	e0bffc17 	ldw	r2,-16(fp)
  80204c:	10805d03 	ldbu	r2,372(r2)
  802050:	10803fcc 	andi	r2,r2,255
  802054:	1080201c 	xori	r2,r2,128
  802058:	10bfe004 	addi	r2,r2,-128
  80205c:	1000021e 	bne	r2,zero,802068 <logic+0x1dd8>
  802060:	00800044 	movi	r2,1
  802064:	00000106 	br	80206c <logic+0x1ddc>
  802068:	0005883a 	mov	r2,zero
  80206c:	1007883a 	mov	r3,r2
  802070:	e0bffc17 	ldw	r2,-16(fp)
  802074:	10c03dc5 	stb	r3,247(r2)
  d->_g46 = d->_g59 && d->AS;
  802078:	e0bffc17 	ldw	r2,-16(fp)
  80207c:	10804183 	ldbu	r2,262(r2)
  802080:	10803fcc 	andi	r2,r2,255
  802084:	1080201c 	xori	r2,r2,128
  802088:	10bfe004 	addi	r2,r2,-128
  80208c:	10000826 	beq	r2,zero,8020b0 <logic+0x1e20>
  802090:	e0bffc17 	ldw	r2,-16(fp)
  802094:	10803103 	ldbu	r2,196(r2)
  802098:	10803fcc 	andi	r2,r2,255
  80209c:	1080201c 	xori	r2,r2,128
  8020a0:	10bfe004 	addi	r2,r2,-128
  8020a4:	10000226 	beq	r2,zero,8020b0 <logic+0x1e20>
  8020a8:	00800044 	movi	r2,1
  8020ac:	00000106 	br	8020b4 <logic+0x1e24>
  8020b0:	0005883a 	mov	r2,zero
  8020b4:	1007883a 	mov	r3,r2
  8020b8:	e0bffc17 	ldw	r2,-16(fp)
  8020bc:	10c03ec5 	stb	r3,251(r2)
  if (d->_g46) {
  8020c0:	e0bffc17 	ldw	r2,-16(fp)
  8020c4:	10803ec3 	ldbu	r2,251(r2)
  8020c8:	10803fcc 	andi	r2,r2,255
  8020cc:	1080201c 	xori	r2,r2,128
  8020d0:	10bfe004 	addi	r2,r2,-128
  8020d4:	10000526 	beq	r2,zero,8020ec <logic+0x1e5c>
    d->_taken_transitions[6] += 1;
  8020d8:	e0bffc17 	ldw	r2,-16(fp)
  8020dc:	10800d17 	ldw	r2,52(r2)
  8020e0:	10c00044 	addi	r3,r2,1
  8020e4:	e0bffc17 	ldw	r2,-16(fp)
  8020e8:	10c00d15 	stw	r3,52(r2)
  }
  d->_g43 = d->_g63 && d->_cg63;
  8020ec:	e0bffc17 	ldw	r2,-16(fp)
  8020f0:	10804243 	ldbu	r2,265(r2)
  8020f4:	10803fcc 	andi	r2,r2,255
  8020f8:	1080201c 	xori	r2,r2,128
  8020fc:	10bfe004 	addi	r2,r2,-128
  802100:	10000826 	beq	r2,zero,802124 <logic+0x1e94>
  802104:	e0bffc17 	ldw	r2,-16(fp)
  802108:	10805b03 	ldbu	r2,364(r2)
  80210c:	10803fcc 	andi	r2,r2,255
  802110:	1080201c 	xori	r2,r2,128
  802114:	10bfe004 	addi	r2,r2,-128
  802118:	10000226 	beq	r2,zero,802124 <logic+0x1e94>
  80211c:	00800044 	movi	r2,1
  802120:	00000106 	br	802128 <logic+0x1e98>
  802124:	0005883a 	mov	r2,zero
  802128:	1007883a 	mov	r3,r2
  80212c:	e0bffc17 	ldw	r2,-16(fp)
  802130:	10c03e45 	stb	r3,249(r2)
  if (d->_g43) {
  802134:	e0bffc17 	ldw	r2,-16(fp)
  802138:	10803e43 	ldbu	r2,249(r2)
  80213c:	10803fcc 	andi	r2,r2,255
  802140:	1080201c 	xori	r2,r2,128
  802144:	10bfe004 	addi	r2,r2,-128
  802148:	10000526 	beq	r2,zero,802160 <logic+0x1ed0>
    d->_taken_transitions[7] += 1;
  80214c:	e0bffc17 	ldw	r2,-16(fp)
  802150:	10800e17 	ldw	r2,56(r2)
  802154:	10c00044 	addi	r3,r2,1
  802158:	e0bffc17 	ldw	r2,-16(fp)
  80215c:	10c00e15 	stw	r3,56(r2)
  }
  d->_g52 = d->_g46 || d->_g43;
  802160:	e0bffc17 	ldw	r2,-16(fp)
  802164:	10803ec3 	ldbu	r2,251(r2)
  802168:	10803fcc 	andi	r2,r2,255
  80216c:	1080201c 	xori	r2,r2,128
  802170:	10bfe004 	addi	r2,r2,-128
  802174:	1000061e 	bne	r2,zero,802190 <logic+0x1f00>
  802178:	e0bffc17 	ldw	r2,-16(fp)
  80217c:	10803e43 	ldbu	r2,249(r2)
  802180:	10803fcc 	andi	r2,r2,255
  802184:	1080201c 	xori	r2,r2,128
  802188:	10bfe004 	addi	r2,r2,-128
  80218c:	10000226 	beq	r2,zero,802198 <logic+0x1f08>
  802190:	00800044 	movi	r2,1
  802194:	00000106 	br	80219c <logic+0x1f0c>
  802198:	0005883a 	mov	r2,zero
  80219c:	1007883a 	mov	r3,r2
  8021a0:	e0bffc17 	ldw	r2,-16(fp)
  8021a4:	10c03fc5 	stb	r3,255(r2)
  d->_g35 = d->_pg72;
  8021a8:	e0bffc17 	ldw	r2,-16(fp)
  8021ac:	10c06e03 	ldbu	r3,440(r2)
  8021b0:	e0bffc17 	ldw	r2,-16(fp)
  8021b4:	10c03cc5 	stb	r3,243(r2)
  d->_cg81 = d->A_EVT;
  8021b8:	e0bffc17 	ldw	r2,-16(fp)
  8021bc:	10c03203 	ldbu	r3,200(r2)
  8021c0:	e0bffc17 	ldw	r2,-16(fp)
  8021c4:	10c05f85 	stb	r3,382(r2)
  d->_g59 = d->_g35 && d->_cg81;
  8021c8:	e0bffc17 	ldw	r2,-16(fp)
  8021cc:	10803cc3 	ldbu	r2,243(r2)
  8021d0:	10803fcc 	andi	r2,r2,255
  8021d4:	1080201c 	xori	r2,r2,128
  8021d8:	10bfe004 	addi	r2,r2,-128
  8021dc:	10000826 	beq	r2,zero,802200 <logic+0x1f70>
  8021e0:	e0bffc17 	ldw	r2,-16(fp)
  8021e4:	10805f83 	ldbu	r2,382(r2)
  8021e8:	10803fcc 	andi	r2,r2,255
  8021ec:	1080201c 	xori	r2,r2,128
  8021f0:	10bfe004 	addi	r2,r2,-128
  8021f4:	10000226 	beq	r2,zero,802200 <logic+0x1f70>
  8021f8:	00800044 	movi	r2,1
  8021fc:	00000106 	br	802204 <logic+0x1f74>
  802200:	0005883a 	mov	r2,zero
  802204:	1007883a 	mov	r3,r2
  802208:	e0bffc17 	ldw	r2,-16(fp)
  80220c:	10c04185 	stb	r3,262(r2)
  if (d->_g59) {
  802210:	e0bffc17 	ldw	r2,-16(fp)
  802214:	10804183 	ldbu	r2,262(r2)
  802218:	10803fcc 	andi	r2,r2,255
  80221c:	1080201c 	xori	r2,r2,128
  802220:	10bfe004 	addi	r2,r2,-128
  802224:	10000326 	beq	r2,zero,802234 <logic+0x1fa4>
    d->_Pacemaker_local__Atrig4 = 1;
  802228:	e0bffc17 	ldw	r2,-16(fp)
  80222c:	00c00044 	movi	r3,1
  802230:	10c03505 	stb	r3,212(r2)
  }
  d->_g63 = d->_pg158;
  802234:	e0bffc17 	ldw	r2,-16(fp)
  802238:	10c06e43 	ldbu	r3,441(r2)
  80223c:	e0bffc17 	ldw	r2,-16(fp)
  802240:	10c04245 	stb	r3,265(r2)
  if (d->_g63) {
  802244:	e0bffc17 	ldw	r2,-16(fp)
  802248:	10804243 	ldbu	r2,265(r2)
  80224c:	10803fcc 	andi	r2,r2,255
  802250:	1080201c 	xori	r2,r2,128
  802254:	10bfe004 	addi	r2,r2,-128
  802258:	10001226 	beq	r2,zero,8022a4 <logic+0x2014>
    d->_region2_AEI_t += d->deltaT;
  80225c:	e13ffc17 	ldw	r4,-16(fp)
  802260:	20802517 	ldw	r2,148(r4)
  802264:	20c02617 	ldw	r3,152(r4)
  802268:	e1bffc17 	ldw	r6,-16(fp)
  80226c:	31002d17 	ldw	r4,180(r6)
  802270:	31402e17 	ldw	r5,184(r6)
  802274:	200d883a 	mov	r6,r4
  802278:	280f883a 	mov	r7,r5
  80227c:	1009883a 	mov	r4,r2
  802280:	180b883a 	mov	r5,r3
  802284:	0805c5c0 	call	805c5c <__adddf3>
  802288:	1009883a 	mov	r4,r2
  80228c:	180b883a 	mov	r5,r3
  802290:	2005883a 	mov	r2,r4
  802294:	2807883a 	mov	r3,r5
  802298:	e13ffc17 	ldw	r4,-16(fp)
  80229c:	20802515 	stw	r2,148(r4)
  8022a0:	20c02615 	stw	r3,152(r4)
  }
  d->_g64 = d->_g35 && !d->_cg81;
  8022a4:	e0bffc17 	ldw	r2,-16(fp)
  8022a8:	10803cc3 	ldbu	r2,243(r2)
  8022ac:	10803fcc 	andi	r2,r2,255
  8022b0:	1080201c 	xori	r2,r2,128
  8022b4:	10bfe004 	addi	r2,r2,-128
  8022b8:	10000826 	beq	r2,zero,8022dc <logic+0x204c>
  8022bc:	e0bffc17 	ldw	r2,-16(fp)
  8022c0:	10805f83 	ldbu	r2,382(r2)
  8022c4:	10803fcc 	andi	r2,r2,255
  8022c8:	1080201c 	xori	r2,r2,128
  8022cc:	10bfe004 	addi	r2,r2,-128
  8022d0:	1000021e 	bne	r2,zero,8022dc <logic+0x204c>
  8022d4:	00800044 	movi	r2,1
  8022d8:	00000106 	br	8022e0 <logic+0x2050>
  8022dc:	0005883a 	mov	r2,zero
  8022e0:	1007883a 	mov	r3,r2
  8022e4:	e0bffc17 	ldw	r2,-16(fp)
  8022e8:	10c04285 	stb	r3,266(r2)
  d->_cg84 = d->_region2_AEI_t >= d->T_AEI;
  8022ec:	e0bffc17 	ldw	r2,-16(fp)
  8022f0:	14002517 	ldw	r16,148(r2)
  8022f4:	14402617 	ldw	r17,152(r2)
  8022f8:	e0bffc17 	ldw	r2,-16(fp)
  8022fc:	10800217 	ldw	r2,8(r2)
  802300:	1009883a 	mov	r4,r2
  802304:	0806fd40 	call	806fd4 <__floatsidf>
  802308:	1009883a 	mov	r4,r2
  80230c:	180b883a 	mov	r5,r3
  802310:	04800044 	movi	r18,1
  802314:	200d883a 	mov	r6,r4
  802318:	280f883a 	mov	r7,r5
  80231c:	8009883a 	mov	r4,r16
  802320:	880b883a 	mov	r5,r17
  802324:	08065080 	call	806508 <__gedf2>
  802328:	1000010e 	bge	r2,zero,802330 <logic+0x20a0>
  80232c:	0025883a 	mov	r18,zero
  802330:	9007883a 	mov	r3,r18
  802334:	e0bffc17 	ldw	r2,-16(fp)
  802338:	10c05f45 	stb	r3,381(r2)
  d->_g60 = d->_g64 && d->_cg84;
  80233c:	e0bffc17 	ldw	r2,-16(fp)
  802340:	10804283 	ldbu	r2,266(r2)
  802344:	10803fcc 	andi	r2,r2,255
  802348:	1080201c 	xori	r2,r2,128
  80234c:	10bfe004 	addi	r2,r2,-128
  802350:	10000826 	beq	r2,zero,802374 <logic+0x20e4>
  802354:	e0bffc17 	ldw	r2,-16(fp)
  802358:	10805f43 	ldbu	r2,381(r2)
  80235c:	10803fcc 	andi	r2,r2,255
  802360:	1080201c 	xori	r2,r2,128
  802364:	10bfe004 	addi	r2,r2,-128
  802368:	10000226 	beq	r2,zero,802374 <logic+0x20e4>
  80236c:	00800044 	movi	r2,1
  802370:	00000106 	br	802378 <logic+0x20e8>
  802374:	0005883a 	mov	r2,zero
  802378:	1007883a 	mov	r3,r2
  80237c:	e0bffc17 	ldw	r2,-16(fp)
  802380:	10c041c5 	stb	r3,263(r2)
  if (d->_g60) {
  802384:	e0bffc17 	ldw	r2,-16(fp)
  802388:	108041c3 	ldbu	r2,263(r2)
  80238c:	10803fcc 	andi	r2,r2,255
  802390:	1080201c 	xori	r2,r2,128
  802394:	10bfe004 	addi	r2,r2,-128
  802398:	10000326 	beq	r2,zero,8023a8 <logic+0x2118>
    d->_Pacemaker_local__Atrig5 = 1;
  80239c:	e0bffc17 	ldw	r2,-16(fp)
  8023a0:	00c00044 	movi	r3,1
  8023a4:	10c03545 	stb	r3,213(r2)
  }
  d->_g81 = d->_pg83_e2;
  8023a8:	e0bffc17 	ldw	r2,-16(fp)
  8023ac:	10c06e83 	ldbu	r3,442(r2)
  8023b0:	e0bffc17 	ldw	r2,-16(fp)
  8023b4:	10c04545 	stb	r3,277(r2)
  d->_cg68 = d->V_EVT;
  8023b8:	e0bffc17 	ldw	r2,-16(fp)
  8023bc:	10c03243 	ldbu	r3,201(r2)
  8023c0:	e0bffc17 	ldw	r2,-16(fp)
  8023c4:	10c05e45 	stb	r3,377(r2)
  d->_g69 = d->_g81 && d->_cg68;
  8023c8:	e0bffc17 	ldw	r2,-16(fp)
  8023cc:	10804543 	ldbu	r2,277(r2)
  8023d0:	10803fcc 	andi	r2,r2,255
  8023d4:	1080201c 	xori	r2,r2,128
  8023d8:	10bfe004 	addi	r2,r2,-128
  8023dc:	10000826 	beq	r2,zero,802400 <logic+0x2170>
  8023e0:	e0bffc17 	ldw	r2,-16(fp)
  8023e4:	10805e43 	ldbu	r2,377(r2)
  8023e8:	10803fcc 	andi	r2,r2,255
  8023ec:	1080201c 	xori	r2,r2,128
  8023f0:	10bfe004 	addi	r2,r2,-128
  8023f4:	10000226 	beq	r2,zero,802400 <logic+0x2170>
  8023f8:	00800044 	movi	r2,1
  8023fc:	00000106 	br	802404 <logic+0x2174>
  802400:	0005883a 	mov	r2,zero
  802404:	1007883a 	mov	r3,r2
  802408:	e0bffc17 	ldw	r2,-16(fp)
  80240c:	10c04305 	stb	r3,268(r2)
  if (d->_g69) {
  802410:	e0bffc17 	ldw	r2,-16(fp)
  802414:	10804303 	ldbu	r2,268(r2)
  802418:	10803fcc 	andi	r2,r2,255
  80241c:	1080201c 	xori	r2,r2,128
  802420:	10bfe004 	addi	r2,r2,-128
  802424:	10000c26 	beq	r2,zero,802458 <logic+0x21c8>
    d->_region2_AEI_t = 0;
  802428:	e0bffc17 	ldw	r2,-16(fp)
  80242c:	10002515 	stw	zero,148(r2)
  802430:	10002615 	stw	zero,152(r2)
    d->_taken_transitions[11] += 1;
  802434:	e0bffc17 	ldw	r2,-16(fp)
  802438:	10801217 	ldw	r2,72(r2)
  80243c:	10c00044 	addi	r3,r2,1
  802440:	e0bffc17 	ldw	r2,-16(fp)
  802444:	10c01215 	stw	r3,72(r2)
    d->_Pacemaker_local__Atrig4 = 0;
  802448:	e0bffc17 	ldw	r2,-16(fp)
  80244c:	10003505 	stb	zero,212(r2)
    d->_Pacemaker_local__Atrig5 = 0;
  802450:	e0bffc17 	ldw	r2,-16(fp)
  802454:	10003545 	stb	zero,213(r2)
  }
  d->_g75 = d->_pg74;
  802458:	e0bffc17 	ldw	r2,-16(fp)
  80245c:	10c06ec3 	ldbu	r3,443(r2)
  802460:	e0bffc17 	ldw	r2,-16(fp)
  802464:	10c04445 	stb	r3,273(r2)
  d->_g78 = d->_pg77;
  802468:	e0bffc17 	ldw	r2,-16(fp)
  80246c:	10c06f03 	ldbu	r3,444(r2)
  802470:	e0bffc17 	ldw	r2,-16(fp)
  802474:	10c04505 	stb	r3,276(r2)
  d->_g78 = d->_g69 || d->_g75 || d->_g78;
  802478:	e0bffc17 	ldw	r2,-16(fp)
  80247c:	10804303 	ldbu	r2,268(r2)
  802480:	10803fcc 	andi	r2,r2,255
  802484:	1080201c 	xori	r2,r2,128
  802488:	10bfe004 	addi	r2,r2,-128
  80248c:	10000c1e 	bne	r2,zero,8024c0 <logic+0x2230>
  802490:	e0bffc17 	ldw	r2,-16(fp)
  802494:	10804443 	ldbu	r2,273(r2)
  802498:	10803fcc 	andi	r2,r2,255
  80249c:	1080201c 	xori	r2,r2,128
  8024a0:	10bfe004 	addi	r2,r2,-128
  8024a4:	1000061e 	bne	r2,zero,8024c0 <logic+0x2230>
  8024a8:	e0bffc17 	ldw	r2,-16(fp)
  8024ac:	10804503 	ldbu	r2,276(r2)
  8024b0:	10803fcc 	andi	r2,r2,255
  8024b4:	1080201c 	xori	r2,r2,128
  8024b8:	10bfe004 	addi	r2,r2,-128
  8024bc:	10000226 	beq	r2,zero,8024c8 <logic+0x2238>
  8024c0:	00800044 	movi	r2,1
  8024c4:	00000106 	br	8024cc <logic+0x223c>
  8024c8:	0005883a 	mov	r2,zero
  8024cc:	1007883a 	mov	r3,r2
  8024d0:	e0bffc17 	ldw	r2,-16(fp)
  8024d4:	10c04505 	stb	r3,276(r2)
  d->_cg71 = d->_region2_AEI_t < d->T_AEI;
  8024d8:	e0bffc17 	ldw	r2,-16(fp)
  8024dc:	14002517 	ldw	r16,148(r2)
  8024e0:	14402617 	ldw	r17,152(r2)
  8024e4:	e0bffc17 	ldw	r2,-16(fp)
  8024e8:	10800217 	ldw	r2,8(r2)
  8024ec:	1009883a 	mov	r4,r2
  8024f0:	0806fd40 	call	806fd4 <__floatsidf>
  8024f4:	1009883a 	mov	r4,r2
  8024f8:	180b883a 	mov	r5,r3
  8024fc:	04800044 	movi	r18,1
  802500:	200d883a 	mov	r6,r4
  802504:	280f883a 	mov	r7,r5
  802508:	8009883a 	mov	r4,r16
  80250c:	880b883a 	mov	r5,r17
  802510:	08065e40 	call	8065e4 <__ledf2>
  802514:	10000116 	blt	r2,zero,80251c <logic+0x228c>
  802518:	0025883a 	mov	r18,zero
  80251c:	9007883a 	mov	r3,r18
  802520:	e0bffc17 	ldw	r2,-16(fp)
  802524:	10c05e85 	stb	r3,378(r2)
  d->_g75 = d->_g78 && !d->_cg71;
  802528:	e0bffc17 	ldw	r2,-16(fp)
  80252c:	10804503 	ldbu	r2,276(r2)
  802530:	10803fcc 	andi	r2,r2,255
  802534:	1080201c 	xori	r2,r2,128
  802538:	10bfe004 	addi	r2,r2,-128
  80253c:	10000826 	beq	r2,zero,802560 <logic+0x22d0>
  802540:	e0bffc17 	ldw	r2,-16(fp)
  802544:	10805e83 	ldbu	r2,378(r2)
  802548:	10803fcc 	andi	r2,r2,255
  80254c:	1080201c 	xori	r2,r2,128
  802550:	10bfe004 	addi	r2,r2,-128
  802554:	1000021e 	bne	r2,zero,802560 <logic+0x22d0>
  802558:	00800044 	movi	r2,1
  80255c:	00000106 	br	802564 <logic+0x22d4>
  802560:	0005883a 	mov	r2,zero
  802564:	1007883a 	mov	r3,r2
  802568:	e0bffc17 	ldw	r2,-16(fp)
  80256c:	10c04445 	stb	r3,273(r2)
  d->_cg76 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  802570:	e0bffc17 	ldw	r2,-16(fp)
  802574:	10803503 	ldbu	r2,212(r2)
  802578:	10803fcc 	andi	r2,r2,255
  80257c:	1080201c 	xori	r2,r2,128
  802580:	10bfe004 	addi	r2,r2,-128
  802584:	1000061e 	bne	r2,zero,8025a0 <logic+0x2310>
  802588:	e0bffc17 	ldw	r2,-16(fp)
  80258c:	10803543 	ldbu	r2,213(r2)
  802590:	10803fcc 	andi	r2,r2,255
  802594:	1080201c 	xori	r2,r2,128
  802598:	10bfe004 	addi	r2,r2,-128
  80259c:	10000226 	beq	r2,zero,8025a8 <logic+0x2318>
  8025a0:	00800044 	movi	r2,1
  8025a4:	00000106 	br	8025ac <logic+0x231c>
  8025a8:	0005883a 	mov	r2,zero
  8025ac:	1007883a 	mov	r3,r2
  8025b0:	e0bffc17 	ldw	r2,-16(fp)
  8025b4:	10c05f05 	stb	r3,380(r2)
  d->_g77 = d->_g75 && !d->_cg76;
  8025b8:	e0bffc17 	ldw	r2,-16(fp)
  8025bc:	10804443 	ldbu	r2,273(r2)
  8025c0:	10803fcc 	andi	r2,r2,255
  8025c4:	1080201c 	xori	r2,r2,128
  8025c8:	10bfe004 	addi	r2,r2,-128
  8025cc:	10000826 	beq	r2,zero,8025f0 <logic+0x2360>
  8025d0:	e0bffc17 	ldw	r2,-16(fp)
  8025d4:	10805f03 	ldbu	r2,380(r2)
  8025d8:	10803fcc 	andi	r2,r2,255
  8025dc:	1080201c 	xori	r2,r2,128
  8025e0:	10bfe004 	addi	r2,r2,-128
  8025e4:	1000021e 	bne	r2,zero,8025f0 <logic+0x2360>
  8025e8:	00800044 	movi	r2,1
  8025ec:	00000106 	br	8025f4 <logic+0x2364>
  8025f0:	0005883a 	mov	r2,zero
  8025f4:	1007883a 	mov	r3,r2
  8025f8:	e0bffc17 	ldw	r2,-16(fp)
  8025fc:	10c044c5 	stb	r3,275(r2)
  d->_g71 = d->_g78 && d->_cg71;
  802600:	e0bffc17 	ldw	r2,-16(fp)
  802604:	10804503 	ldbu	r2,276(r2)
  802608:	10803fcc 	andi	r2,r2,255
  80260c:	1080201c 	xori	r2,r2,128
  802610:	10bfe004 	addi	r2,r2,-128
  802614:	10000826 	beq	r2,zero,802638 <logic+0x23a8>
  802618:	e0bffc17 	ldw	r2,-16(fp)
  80261c:	10805e83 	ldbu	r2,378(r2)
  802620:	10803fcc 	andi	r2,r2,255
  802624:	1080201c 	xori	r2,r2,128
  802628:	10bfe004 	addi	r2,r2,-128
  80262c:	10000226 	beq	r2,zero,802638 <logic+0x23a8>
  802630:	00800044 	movi	r2,1
  802634:	00000106 	br	80263c <logic+0x23ac>
  802638:	0005883a 	mov	r2,zero
  80263c:	1007883a 	mov	r3,r2
  802640:	e0bffc17 	ldw	r2,-16(fp)
  802644:	10c04345 	stb	r3,269(r2)
  if (d->_g71) {
  802648:	e0bffc17 	ldw	r2,-16(fp)
  80264c:	10804343 	ldbu	r2,269(r2)
  802650:	10803fcc 	andi	r2,r2,255
  802654:	1080201c 	xori	r2,r2,128
  802658:	10bfe004 	addi	r2,r2,-128
  80265c:	10003426 	beq	r2,zero,802730 <logic+0x24a0>
    d->sleepT = (d->sleepT < (d->T_AEI - d->_region2_AEI_t)) ? d->sleepT : (d->T_AEI - d->_region2_AEI_t);
  802660:	e0bffc17 	ldw	r2,-16(fp)
  802664:	14002f17 	ldw	r16,188(r2)
  802668:	14403017 	ldw	r17,192(r2)
  80266c:	e0bffc17 	ldw	r2,-16(fp)
  802670:	10800217 	ldw	r2,8(r2)
  802674:	1009883a 	mov	r4,r2
  802678:	0806fd40 	call	806fd4 <__floatsidf>
  80267c:	1011883a 	mov	r8,r2
  802680:	1813883a 	mov	r9,r3
  802684:	e13ffc17 	ldw	r4,-16(fp)
  802688:	20802517 	ldw	r2,148(r4)
  80268c:	20c02617 	ldw	r3,152(r4)
  802690:	100d883a 	mov	r6,r2
  802694:	180f883a 	mov	r7,r3
  802698:	4009883a 	mov	r4,r8
  80269c:	480b883a 	mov	r5,r9
  8026a0:	08066d80 	call	8066d8 <__subdf3>
  8026a4:	1009883a 	mov	r4,r2
  8026a8:	180b883a 	mov	r5,r3
  8026ac:	2005883a 	mov	r2,r4
  8026b0:	2807883a 	mov	r3,r5
  8026b4:	100d883a 	mov	r6,r2
  8026b8:	180f883a 	mov	r7,r3
  8026bc:	8009883a 	mov	r4,r16
  8026c0:	880b883a 	mov	r5,r17
  8026c4:	08065e40 	call	8065e4 <__ledf2>
  8026c8:	1000040e 	bge	r2,zero,8026dc <logic+0x244c>
  8026cc:	e13ffc17 	ldw	r4,-16(fp)
  8026d0:	20802f17 	ldw	r2,188(r4)
  8026d4:	20c03017 	ldw	r3,192(r4)
  8026d8:	00001206 	br	802724 <logic+0x2494>
  8026dc:	e0bffc17 	ldw	r2,-16(fp)
  8026e0:	10800217 	ldw	r2,8(r2)
  8026e4:	1009883a 	mov	r4,r2
  8026e8:	0806fd40 	call	806fd4 <__floatsidf>
  8026ec:	1011883a 	mov	r8,r2
  8026f0:	1813883a 	mov	r9,r3
  8026f4:	e13ffc17 	ldw	r4,-16(fp)
  8026f8:	20802517 	ldw	r2,148(r4)
  8026fc:	20c02617 	ldw	r3,152(r4)
  802700:	100d883a 	mov	r6,r2
  802704:	180f883a 	mov	r7,r3
  802708:	4009883a 	mov	r4,r8
  80270c:	480b883a 	mov	r5,r9
  802710:	08066d80 	call	8066d8 <__subdf3>
  802714:	1009883a 	mov	r4,r2
  802718:	180b883a 	mov	r5,r3
  80271c:	2005883a 	mov	r2,r4
  802720:	2807883a 	mov	r3,r5
  802724:	e13ffc17 	ldw	r4,-16(fp)
  802728:	20802f15 	stw	r2,188(r4)
  80272c:	20c03015 	stw	r3,192(r4)
  }
  d->_cg72 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  802730:	e0bffc17 	ldw	r2,-16(fp)
  802734:	10803503 	ldbu	r2,212(r2)
  802738:	10803fcc 	andi	r2,r2,255
  80273c:	1080201c 	xori	r2,r2,128
  802740:	10bfe004 	addi	r2,r2,-128
  802744:	1000061e 	bne	r2,zero,802760 <logic+0x24d0>
  802748:	e0bffc17 	ldw	r2,-16(fp)
  80274c:	10803543 	ldbu	r2,213(r2)
  802750:	10803fcc 	andi	r2,r2,255
  802754:	1080201c 	xori	r2,r2,128
  802758:	10bfe004 	addi	r2,r2,-128
  80275c:	10000226 	beq	r2,zero,802768 <logic+0x24d8>
  802760:	00800044 	movi	r2,1
  802764:	00000106 	br	80276c <logic+0x24dc>
  802768:	0005883a 	mov	r2,zero
  80276c:	1007883a 	mov	r3,r2
  802770:	e0bffc17 	ldw	r2,-16(fp)
  802774:	10c05ec5 	stb	r3,379(r2)
  d->_g74 = d->_g71 && !d->_cg72;
  802778:	e0bffc17 	ldw	r2,-16(fp)
  80277c:	10804343 	ldbu	r2,269(r2)
  802780:	10803fcc 	andi	r2,r2,255
  802784:	1080201c 	xori	r2,r2,128
  802788:	10bfe004 	addi	r2,r2,-128
  80278c:	10000826 	beq	r2,zero,8027b0 <logic+0x2520>
  802790:	e0bffc17 	ldw	r2,-16(fp)
  802794:	10805ec3 	ldbu	r2,379(r2)
  802798:	10803fcc 	andi	r2,r2,255
  80279c:	1080201c 	xori	r2,r2,128
  8027a0:	10bfe004 	addi	r2,r2,-128
  8027a4:	1000021e 	bne	r2,zero,8027b0 <logic+0x2520>
  8027a8:	00800044 	movi	r2,1
  8027ac:	00000106 	br	8027b4 <logic+0x2524>
  8027b0:	0005883a 	mov	r2,zero
  8027b4:	1007883a 	mov	r3,r2
  8027b8:	e0bffc17 	ldw	r2,-16(fp)
  8027bc:	10c04405 	stb	r3,272(r2)
  d->_g73_e1 = !(d->_g77 || d->_g74);
  8027c0:	e0bffc17 	ldw	r2,-16(fp)
  8027c4:	108044c3 	ldbu	r2,275(r2)
  8027c8:	10803fcc 	andi	r2,r2,255
  8027cc:	1080201c 	xori	r2,r2,128
  8027d0:	10bfe004 	addi	r2,r2,-128
  8027d4:	1000081e 	bne	r2,zero,8027f8 <logic+0x2568>
  8027d8:	e0bffc17 	ldw	r2,-16(fp)
  8027dc:	10804403 	ldbu	r2,272(r2)
  8027e0:	10803fcc 	andi	r2,r2,255
  8027e4:	1080201c 	xori	r2,r2,128
  8027e8:	10bfe004 	addi	r2,r2,-128
  8027ec:	1000021e 	bne	r2,zero,8027f8 <logic+0x2568>
  8027f0:	00800044 	movi	r2,1
  8027f4:	00000106 	br	8027fc <logic+0x256c>
  8027f8:	0005883a 	mov	r2,zero
  8027fc:	1007883a 	mov	r3,r2
  802800:	e0bffc17 	ldw	r2,-16(fp)
  802804:	10c06885 	stb	r3,418(r2)
  d->_g76 = d->_g71 && d->_cg72 || d->_g75 && d->_cg76;
  802808:	e0bffc17 	ldw	r2,-16(fp)
  80280c:	10804343 	ldbu	r2,269(r2)
  802810:	10803fcc 	andi	r2,r2,255
  802814:	1080201c 	xori	r2,r2,128
  802818:	10bfe004 	addi	r2,r2,-128
  80281c:	10000626 	beq	r2,zero,802838 <logic+0x25a8>
  802820:	e0bffc17 	ldw	r2,-16(fp)
  802824:	10805ec3 	ldbu	r2,379(r2)
  802828:	10803fcc 	andi	r2,r2,255
  80282c:	1080201c 	xori	r2,r2,128
  802830:	10bfe004 	addi	r2,r2,-128
  802834:	10000c1e 	bne	r2,zero,802868 <logic+0x25d8>
  802838:	e0bffc17 	ldw	r2,-16(fp)
  80283c:	10804443 	ldbu	r2,273(r2)
  802840:	10803fcc 	andi	r2,r2,255
  802844:	1080201c 	xori	r2,r2,128
  802848:	10bfe004 	addi	r2,r2,-128
  80284c:	10000826 	beq	r2,zero,802870 <logic+0x25e0>
  802850:	e0bffc17 	ldw	r2,-16(fp)
  802854:	10805f03 	ldbu	r2,380(r2)
  802858:	10803fcc 	andi	r2,r2,255
  80285c:	1080201c 	xori	r2,r2,128
  802860:	10bfe004 	addi	r2,r2,-128
  802864:	10000226 	beq	r2,zero,802870 <logic+0x25e0>
  802868:	00800044 	movi	r2,1
  80286c:	00000106 	br	802874 <logic+0x25e4>
  802870:	0005883a 	mov	r2,zero
  802874:	1007883a 	mov	r3,r2
  802878:	e0bffc17 	ldw	r2,-16(fp)
  80287c:	10c04485 	stb	r3,274(r2)
  d->_g72 = d->_g69 || d->_g64 && !d->_cg84;
  802880:	e0bffc17 	ldw	r2,-16(fp)
  802884:	10804303 	ldbu	r2,268(r2)
  802888:	10803fcc 	andi	r2,r2,255
  80288c:	1080201c 	xori	r2,r2,128
  802890:	10bfe004 	addi	r2,r2,-128
  802894:	10000c1e 	bne	r2,zero,8028c8 <logic+0x2638>
  802898:	e0bffc17 	ldw	r2,-16(fp)
  80289c:	10804283 	ldbu	r2,266(r2)
  8028a0:	10803fcc 	andi	r2,r2,255
  8028a4:	1080201c 	xori	r2,r2,128
  8028a8:	10bfe004 	addi	r2,r2,-128
  8028ac:	10000826 	beq	r2,zero,8028d0 <logic+0x2640>
  8028b0:	e0bffc17 	ldw	r2,-16(fp)
  8028b4:	10805f43 	ldbu	r2,381(r2)
  8028b8:	10803fcc 	andi	r2,r2,255
  8028bc:	1080201c 	xori	r2,r2,128
  8028c0:	10bfe004 	addi	r2,r2,-128
  8028c4:	1000021e 	bne	r2,zero,8028d0 <logic+0x2640>
  8028c8:	00800044 	movi	r2,1
  8028cc:	00000106 	br	8028d4 <logic+0x2644>
  8028d0:	0005883a 	mov	r2,zero
  8028d4:	1007883a 	mov	r3,r2
  8028d8:	e0bffc17 	ldw	r2,-16(fp)
  8028dc:	10c04385 	stb	r3,270(r2)
  d->_g84 = !d->_g72;
  8028e0:	e0bffc17 	ldw	r2,-16(fp)
  8028e4:	10804383 	ldbu	r2,270(r2)
  8028e8:	10803fcc 	andi	r2,r2,255
  8028ec:	1080201c 	xori	r2,r2,128
  8028f0:	10bfe004 	addi	r2,r2,-128
  8028f4:	1005003a 	cmpeq	r2,r2,zero
  8028f8:	1007883a 	mov	r3,r2
  8028fc:	e0bffc17 	ldw	r2,-16(fp)
  802900:	10c04605 	stb	r3,280(r2)
  d->_g69 = d->_g59 || d->_g60;
  802904:	e0bffc17 	ldw	r2,-16(fp)
  802908:	10804183 	ldbu	r2,262(r2)
  80290c:	10803fcc 	andi	r2,r2,255
  802910:	1080201c 	xori	r2,r2,128
  802914:	10bfe004 	addi	r2,r2,-128
  802918:	1000061e 	bne	r2,zero,802934 <logic+0x26a4>
  80291c:	e0bffc17 	ldw	r2,-16(fp)
  802920:	108041c3 	ldbu	r2,263(r2)
  802924:	10803fcc 	andi	r2,r2,255
  802928:	1080201c 	xori	r2,r2,128
  80292c:	10bfe004 	addi	r2,r2,-128
  802930:	10000226 	beq	r2,zero,80293c <logic+0x26ac>
  802934:	00800044 	movi	r2,1
  802938:	00000106 	br	802940 <logic+0x26b0>
  80293c:	0005883a 	mov	r2,zero
  802940:	1007883a 	mov	r3,r2
  802944:	e0bffc17 	ldw	r2,-16(fp)
  802948:	10c04305 	stb	r3,268(r2)
  d->_g85 = (d->_g73_e1 || d->_g76) && (d->_g84 || d->_g69) && (d->_g76 || d->_g69);
  80294c:	e0bffc17 	ldw	r2,-16(fp)
  802950:	10806883 	ldbu	r2,418(r2)
  802954:	10803fcc 	andi	r2,r2,255
  802958:	1080201c 	xori	r2,r2,128
  80295c:	10bfe004 	addi	r2,r2,-128
  802960:	1000061e 	bne	r2,zero,80297c <logic+0x26ec>
  802964:	e0bffc17 	ldw	r2,-16(fp)
  802968:	10804483 	ldbu	r2,274(r2)
  80296c:	10803fcc 	andi	r2,r2,255
  802970:	1080201c 	xori	r2,r2,128
  802974:	10bfe004 	addi	r2,r2,-128
  802978:	10001a26 	beq	r2,zero,8029e4 <logic+0x2754>
  80297c:	e0bffc17 	ldw	r2,-16(fp)
  802980:	10804603 	ldbu	r2,280(r2)
  802984:	10803fcc 	andi	r2,r2,255
  802988:	1080201c 	xori	r2,r2,128
  80298c:	10bfe004 	addi	r2,r2,-128
  802990:	1000061e 	bne	r2,zero,8029ac <logic+0x271c>
  802994:	e0bffc17 	ldw	r2,-16(fp)
  802998:	10804303 	ldbu	r2,268(r2)
  80299c:	10803fcc 	andi	r2,r2,255
  8029a0:	1080201c 	xori	r2,r2,128
  8029a4:	10bfe004 	addi	r2,r2,-128
  8029a8:	10000e26 	beq	r2,zero,8029e4 <logic+0x2754>
  8029ac:	e0bffc17 	ldw	r2,-16(fp)
  8029b0:	10804483 	ldbu	r2,274(r2)
  8029b4:	10803fcc 	andi	r2,r2,255
  8029b8:	1080201c 	xori	r2,r2,128
  8029bc:	10bfe004 	addi	r2,r2,-128
  8029c0:	1000061e 	bne	r2,zero,8029dc <logic+0x274c>
  8029c4:	e0bffc17 	ldw	r2,-16(fp)
  8029c8:	10804303 	ldbu	r2,268(r2)
  8029cc:	10803fcc 	andi	r2,r2,255
  8029d0:	1080201c 	xori	r2,r2,128
  8029d4:	10bfe004 	addi	r2,r2,-128
  8029d8:	10000226 	beq	r2,zero,8029e4 <logic+0x2754>
  8029dc:	00800044 	movi	r2,1
  8029e0:	00000106 	br	8029e8 <logic+0x2758>
  8029e4:	0005883a 	mov	r2,zero
  8029e8:	1007883a 	mov	r3,r2
  8029ec:	e0bffc17 	ldw	r2,-16(fp)
  8029f0:	10c04645 	stb	r3,281(r2)
  d->_cg86 = d->_Pacemaker_local__Atrig4;
  8029f4:	e0bffc17 	ldw	r2,-16(fp)
  8029f8:	10c03503 	ldbu	r3,212(r2)
  8029fc:	e0bffc17 	ldw	r2,-16(fp)
  802a00:	10c05fc5 	stb	r3,383(r2)
  d->_g82 = d->_g85 && d->_cg86;
  802a04:	e0bffc17 	ldw	r2,-16(fp)
  802a08:	10804643 	ldbu	r2,281(r2)
  802a0c:	10803fcc 	andi	r2,r2,255
  802a10:	1080201c 	xori	r2,r2,128
  802a14:	10bfe004 	addi	r2,r2,-128
  802a18:	10000826 	beq	r2,zero,802a3c <logic+0x27ac>
  802a1c:	e0bffc17 	ldw	r2,-16(fp)
  802a20:	10805fc3 	ldbu	r2,383(r2)
  802a24:	10803fcc 	andi	r2,r2,255
  802a28:	1080201c 	xori	r2,r2,128
  802a2c:	10bfe004 	addi	r2,r2,-128
  802a30:	10000226 	beq	r2,zero,802a3c <logic+0x27ac>
  802a34:	00800044 	movi	r2,1
  802a38:	00000106 	br	802a40 <logic+0x27b0>
  802a3c:	0005883a 	mov	r2,zero
  802a40:	1007883a 	mov	r3,r2
  802a44:	e0bffc17 	ldw	r2,-16(fp)
  802a48:	10c04585 	stb	r3,278(r2)
  if (d->_g82) {
  802a4c:	e0bffc17 	ldw	r2,-16(fp)
  802a50:	10804583 	ldbu	r2,278(r2)
  802a54:	10803fcc 	andi	r2,r2,255
  802a58:	1080201c 	xori	r2,r2,128
  802a5c:	10bfe004 	addi	r2,r2,-128
  802a60:	10000526 	beq	r2,zero,802a78 <logic+0x27e8>
    d->_taken_transitions[12] += 1;
  802a64:	e0bffc17 	ldw	r2,-16(fp)
  802a68:	10801317 	ldw	r2,76(r2)
  802a6c:	10c00044 	addi	r3,r2,1
  802a70:	e0bffc17 	ldw	r2,-16(fp)
  802a74:	10c01315 	stw	r3,76(r2)
  }
  d->_g73 = d->_g85 && !d->_cg86;
  802a78:	e0bffc17 	ldw	r2,-16(fp)
  802a7c:	10804643 	ldbu	r2,281(r2)
  802a80:	10803fcc 	andi	r2,r2,255
  802a84:	1080201c 	xori	r2,r2,128
  802a88:	10bfe004 	addi	r2,r2,-128
  802a8c:	10000826 	beq	r2,zero,802ab0 <logic+0x2820>
  802a90:	e0bffc17 	ldw	r2,-16(fp)
  802a94:	10805fc3 	ldbu	r2,383(r2)
  802a98:	10803fcc 	andi	r2,r2,255
  802a9c:	1080201c 	xori	r2,r2,128
  802aa0:	10bfe004 	addi	r2,r2,-128
  802aa4:	1000021e 	bne	r2,zero,802ab0 <logic+0x2820>
  802aa8:	00800044 	movi	r2,1
  802aac:	00000106 	br	802ab4 <logic+0x2824>
  802ab0:	0005883a 	mov	r2,zero
  802ab4:	1007883a 	mov	r3,r2
  802ab8:	e0bffc17 	ldw	r2,-16(fp)
  802abc:	10c043c5 	stb	r3,271(r2)
  if (d->_g73) {
  802ac0:	e0bffc17 	ldw	r2,-16(fp)
  802ac4:	108043c3 	ldbu	r2,271(r2)
  802ac8:	10803fcc 	andi	r2,r2,255
  802acc:	1080201c 	xori	r2,r2,128
  802ad0:	10bfe004 	addi	r2,r2,-128
  802ad4:	10000b26 	beq	r2,zero,802b04 <logic+0x2874>
    d->AP |= 1;
  802ad8:	e0bffc17 	ldw	r2,-16(fp)
  802adc:	10803183 	ldbu	r2,198(r2)
  802ae0:	10800054 	ori	r2,r2,1
  802ae4:	1007883a 	mov	r3,r2
  802ae8:	e0bffc17 	ldw	r2,-16(fp)
  802aec:	10c03185 	stb	r3,198(r2)
    d->_taken_transitions[13] += 1;
  802af0:	e0bffc17 	ldw	r2,-16(fp)
  802af4:	10801417 	ldw	r2,80(r2)
  802af8:	10c00044 	addi	r3,r2,1
  802afc:	e0bffc17 	ldw	r2,-16(fp)
  802b00:	10c01415 	stw	r3,80(r2)
  }
  d->_g83_e2 = d->_GO || d->_g82 || d->_g73 || d->_g81 && !d->_cg68;
  802b04:	e0bffc17 	ldw	r2,-16(fp)
  802b08:	10805803 	ldbu	r2,352(r2)
  802b0c:	10803fcc 	andi	r2,r2,255
  802b10:	1080201c 	xori	r2,r2,128
  802b14:	10bfe004 	addi	r2,r2,-128
  802b18:	1000181e 	bne	r2,zero,802b7c <logic+0x28ec>
  802b1c:	e0bffc17 	ldw	r2,-16(fp)
  802b20:	10804583 	ldbu	r2,278(r2)
  802b24:	10803fcc 	andi	r2,r2,255
  802b28:	1080201c 	xori	r2,r2,128
  802b2c:	10bfe004 	addi	r2,r2,-128
  802b30:	1000121e 	bne	r2,zero,802b7c <logic+0x28ec>
  802b34:	e0bffc17 	ldw	r2,-16(fp)
  802b38:	108043c3 	ldbu	r2,271(r2)
  802b3c:	10803fcc 	andi	r2,r2,255
  802b40:	1080201c 	xori	r2,r2,128
  802b44:	10bfe004 	addi	r2,r2,-128
  802b48:	10000c1e 	bne	r2,zero,802b7c <logic+0x28ec>
  802b4c:	e0bffc17 	ldw	r2,-16(fp)
  802b50:	10804543 	ldbu	r2,277(r2)
  802b54:	10803fcc 	andi	r2,r2,255
  802b58:	1080201c 	xori	r2,r2,128
  802b5c:	10bfe004 	addi	r2,r2,-128
  802b60:	10000826 	beq	r2,zero,802b84 <logic+0x28f4>
  802b64:	e0bffc17 	ldw	r2,-16(fp)
  802b68:	10805e43 	ldbu	r2,377(r2)
  802b6c:	10803fcc 	andi	r2,r2,255
  802b70:	1080201c 	xori	r2,r2,128
  802b74:	10bfe004 	addi	r2,r2,-128
  802b78:	1000021e 	bne	r2,zero,802b84 <logic+0x28f4>
  802b7c:	00800044 	movi	r2,1
  802b80:	00000106 	br	802b88 <logic+0x28f8>
  802b84:	0005883a 	mov	r2,zero
  802b88:	1007883a 	mov	r3,r2
  802b8c:	e0bffc17 	ldw	r2,-16(fp)
  802b90:	10c068c5 	stb	r3,419(r2)
  d->_g73_e1 = d->_pg100;
  802b94:	e0bffc17 	ldw	r2,-16(fp)
  802b98:	10c06f43 	ldbu	r3,445(r2)
  802b9c:	e0bffc17 	ldw	r2,-16(fp)
  802ba0:	10c06885 	stb	r3,418(r2)
  d->_cg105 = d->V_EVT;
  802ba4:	e0bffc17 	ldw	r2,-16(fp)
  802ba8:	10c03243 	ldbu	r3,201(r2)
  802bac:	e0bffc17 	ldw	r2,-16(fp)
  802bb0:	10c06145 	stb	r3,389(r2)
  d->_g83 = d->_g73_e1 && d->_cg105;
  802bb4:	e0bffc17 	ldw	r2,-16(fp)
  802bb8:	10806883 	ldbu	r2,418(r2)
  802bbc:	10803fcc 	andi	r2,r2,255
  802bc0:	1080201c 	xori	r2,r2,128
  802bc4:	10bfe004 	addi	r2,r2,-128
  802bc8:	10000826 	beq	r2,zero,802bec <logic+0x295c>
  802bcc:	e0bffc17 	ldw	r2,-16(fp)
  802bd0:	10806143 	ldbu	r2,389(r2)
  802bd4:	10803fcc 	andi	r2,r2,255
  802bd8:	1080201c 	xori	r2,r2,128
  802bdc:	10bfe004 	addi	r2,r2,-128
  802be0:	10000226 	beq	r2,zero,802bec <logic+0x295c>
  802be4:	00800044 	movi	r2,1
  802be8:	00000106 	br	802bf0 <logic+0x2960>
  802bec:	0005883a 	mov	r2,zero
  802bf0:	1007883a 	mov	r3,r2
  802bf4:	e0bffc17 	ldw	r2,-16(fp)
  802bf8:	10c045c5 	stb	r3,279(r2)
  if (d->_g83) {
  802bfc:	e0bffc17 	ldw	r2,-16(fp)
  802c00:	108045c3 	ldbu	r2,279(r2)
  802c04:	10803fcc 	andi	r2,r2,255
  802c08:	1080201c 	xori	r2,r2,128
  802c0c:	10bfe004 	addi	r2,r2,-128
  802c10:	10000326 	beq	r2,zero,802c20 <logic+0x2990>
    d->_Pacemaker_local__Atrig6 = 1;
  802c14:	e0bffc17 	ldw	r2,-16(fp)
  802c18:	00c00044 	movi	r3,1
  802c1c:	10c03585 	stb	r3,214(r2)
  }
  d->_g86 = d->_pg163;
  802c20:	e0bffc17 	ldw	r2,-16(fp)
  802c24:	10c06f83 	ldbu	r3,446(r2)
  802c28:	e0bffc17 	ldw	r2,-16(fp)
  802c2c:	10c04685 	stb	r3,282(r2)
  if (d->_g86) {
  802c30:	e0bffc17 	ldw	r2,-16(fp)
  802c34:	10804683 	ldbu	r2,282(r2)
  802c38:	10803fcc 	andi	r2,r2,255
  802c3c:	1080201c 	xori	r2,r2,128
  802c40:	10bfe004 	addi	r2,r2,-128
  802c44:	10001226 	beq	r2,zero,802c90 <logic+0x2a00>
    d->_region3_AVI_t += d->deltaT;
  802c48:	e13ffc17 	ldw	r4,-16(fp)
  802c4c:	20802717 	ldw	r2,156(r4)
  802c50:	20c02817 	ldw	r3,160(r4)
  802c54:	e1bffc17 	ldw	r6,-16(fp)
  802c58:	31002d17 	ldw	r4,180(r6)
  802c5c:	31402e17 	ldw	r5,184(r6)
  802c60:	200d883a 	mov	r6,r4
  802c64:	280f883a 	mov	r7,r5
  802c68:	1009883a 	mov	r4,r2
  802c6c:	180b883a 	mov	r5,r3
  802c70:	0805c5c0 	call	805c5c <__adddf3>
  802c74:	1009883a 	mov	r4,r2
  802c78:	180b883a 	mov	r5,r3
  802c7c:	2005883a 	mov	r2,r4
  802c80:	2807883a 	mov	r3,r5
  802c84:	e13ffc17 	ldw	r4,-16(fp)
  802c88:	20802715 	stw	r2,156(r4)
  802c8c:	20c02815 	stw	r3,160(r4)
  }
  d->_g88 = d->_g73_e1 && !d->_cg105;
  802c90:	e0bffc17 	ldw	r2,-16(fp)
  802c94:	10806883 	ldbu	r2,418(r2)
  802c98:	10803fcc 	andi	r2,r2,255
  802c9c:	1080201c 	xori	r2,r2,128
  802ca0:	10bfe004 	addi	r2,r2,-128
  802ca4:	10000826 	beq	r2,zero,802cc8 <logic+0x2a38>
  802ca8:	e0bffc17 	ldw	r2,-16(fp)
  802cac:	10806143 	ldbu	r2,389(r2)
  802cb0:	10803fcc 	andi	r2,r2,255
  802cb4:	1080201c 	xori	r2,r2,128
  802cb8:	10bfe004 	addi	r2,r2,-128
  802cbc:	1000021e 	bne	r2,zero,802cc8 <logic+0x2a38>
  802cc0:	00800044 	movi	r2,1
  802cc4:	00000106 	br	802ccc <logic+0x2a3c>
  802cc8:	0005883a 	mov	r2,zero
  802ccc:	1007883a 	mov	r3,r2
  802cd0:	e0bffc17 	ldw	r2,-16(fp)
  802cd4:	10c04705 	stb	r3,284(r2)
  d->_cg108 = d->_region3_AVI_t >= d->T_AVI;
  802cd8:	e0bffc17 	ldw	r2,-16(fp)
  802cdc:	14002717 	ldw	r16,156(r2)
  802ce0:	14402817 	ldw	r17,160(r2)
  802ce4:	e0bffc17 	ldw	r2,-16(fp)
  802ce8:	10800117 	ldw	r2,4(r2)
  802cec:	1009883a 	mov	r4,r2
  802cf0:	0806fd40 	call	806fd4 <__floatsidf>
  802cf4:	1009883a 	mov	r4,r2
  802cf8:	180b883a 	mov	r5,r3
  802cfc:	04800044 	movi	r18,1
  802d00:	200d883a 	mov	r6,r4
  802d04:	280f883a 	mov	r7,r5
  802d08:	8009883a 	mov	r4,r16
  802d0c:	880b883a 	mov	r5,r17
  802d10:	08065080 	call	806508 <__gedf2>
  802d14:	1000010e 	bge	r2,zero,802d1c <logic+0x2a8c>
  802d18:	0025883a 	mov	r18,zero
  802d1c:	9007883a 	mov	r3,r18
  802d20:	e0bffc17 	ldw	r2,-16(fp)
  802d24:	10c06105 	stb	r3,388(r2)
  d->_g68 = d->_g88 && d->_cg108;
  802d28:	e0bffc17 	ldw	r2,-16(fp)
  802d2c:	10804703 	ldbu	r2,284(r2)
  802d30:	10803fcc 	andi	r2,r2,255
  802d34:	1080201c 	xori	r2,r2,128
  802d38:	10bfe004 	addi	r2,r2,-128
  802d3c:	10000826 	beq	r2,zero,802d60 <logic+0x2ad0>
  802d40:	e0bffc17 	ldw	r2,-16(fp)
  802d44:	10806103 	ldbu	r2,388(r2)
  802d48:	10803fcc 	andi	r2,r2,255
  802d4c:	1080201c 	xori	r2,r2,128
  802d50:	10bfe004 	addi	r2,r2,-128
  802d54:	10000226 	beq	r2,zero,802d60 <logic+0x2ad0>
  802d58:	00800044 	movi	r2,1
  802d5c:	00000106 	br	802d64 <logic+0x2ad4>
  802d60:	0005883a 	mov	r2,zero
  802d64:	1007883a 	mov	r3,r2
  802d68:	e0bffc17 	ldw	r2,-16(fp)
  802d6c:	10c042c5 	stb	r3,267(r2)
  if (d->_g68) {
  802d70:	e0bffc17 	ldw	r2,-16(fp)
  802d74:	108042c3 	ldbu	r2,267(r2)
  802d78:	10803fcc 	andi	r2,r2,255
  802d7c:	1080201c 	xori	r2,r2,128
  802d80:	10bfe004 	addi	r2,r2,-128
  802d84:	10000326 	beq	r2,zero,802d94 <logic+0x2b04>
    d->_Pacemaker_local__Atrig7 = 1;
  802d88:	e0bffc17 	ldw	r2,-16(fp)
  802d8c:	00c00044 	movi	r3,1
  802d90:	10c035c5 	stb	r3,215(r2)
  }
  d->_g87 = d->_pg159;
  802d94:	e0bffc17 	ldw	r2,-16(fp)
  802d98:	10c06fc3 	ldbu	r3,447(r2)
  802d9c:	e0bffc17 	ldw	r2,-16(fp)
  802da0:	10c046c5 	stb	r3,283(r2)
  d->_cg92 = d->A_EVT;
  802da4:	e0bffc17 	ldw	r2,-16(fp)
  802da8:	10c03203 	ldbu	r3,200(r2)
  802dac:	e0bffc17 	ldw	r2,-16(fp)
  802db0:	10c06005 	stb	r3,384(r2)
  d->_g105 = d->_g87 && d->_cg92;
  802db4:	e0bffc17 	ldw	r2,-16(fp)
  802db8:	108046c3 	ldbu	r2,283(r2)
  802dbc:	10803fcc 	andi	r2,r2,255
  802dc0:	1080201c 	xori	r2,r2,128
  802dc4:	10bfe004 	addi	r2,r2,-128
  802dc8:	10000826 	beq	r2,zero,802dec <logic+0x2b5c>
  802dcc:	e0bffc17 	ldw	r2,-16(fp)
  802dd0:	10806003 	ldbu	r2,384(r2)
  802dd4:	10803fcc 	andi	r2,r2,255
  802dd8:	1080201c 	xori	r2,r2,128
  802ddc:	10bfe004 	addi	r2,r2,-128
  802de0:	10000226 	beq	r2,zero,802dec <logic+0x2b5c>
  802de4:	00800044 	movi	r2,1
  802de8:	00000106 	br	802df0 <logic+0x2b60>
  802dec:	0005883a 	mov	r2,zero
  802df0:	1007883a 	mov	r3,r2
  802df4:	e0bffc17 	ldw	r2,-16(fp)
  802df8:	10c049c5 	stb	r3,295(r2)
  if (d->_g105) {
  802dfc:	e0bffc17 	ldw	r2,-16(fp)
  802e00:	108049c3 	ldbu	r2,295(r2)
  802e04:	10803fcc 	andi	r2,r2,255
  802e08:	1080201c 	xori	r2,r2,128
  802e0c:	10bfe004 	addi	r2,r2,-128
  802e10:	10000c26 	beq	r2,zero,802e44 <logic+0x2bb4>
    d->_region3_AVI_t = 0;
  802e14:	e0bffc17 	ldw	r2,-16(fp)
  802e18:	10002715 	stw	zero,156(r2)
  802e1c:	10002815 	stw	zero,160(r2)
    d->_taken_transitions[14] += 1;
  802e20:	e0bffc17 	ldw	r2,-16(fp)
  802e24:	10801517 	ldw	r2,84(r2)
  802e28:	10c00044 	addi	r3,r2,1
  802e2c:	e0bffc17 	ldw	r2,-16(fp)
  802e30:	10c01515 	stw	r3,84(r2)
    d->_Pacemaker_local__Atrig6 = 0;
  802e34:	e0bffc17 	ldw	r2,-16(fp)
  802e38:	10003585 	stb	zero,214(r2)
    d->_Pacemaker_local__Atrig7 = 0;
  802e3c:	e0bffc17 	ldw	r2,-16(fp)
  802e40:	100035c5 	stb	zero,215(r2)
  }
  d->_g99 = d->_pg98;
  802e44:	e0bffc17 	ldw	r2,-16(fp)
  802e48:	10c07003 	ldbu	r3,448(r2)
  802e4c:	e0bffc17 	ldw	r2,-16(fp)
  802e50:	10c048c5 	stb	r3,291(r2)
  d->_g102 = d->_pg101;
  802e54:	e0bffc17 	ldw	r2,-16(fp)
  802e58:	10c07043 	ldbu	r3,449(r2)
  802e5c:	e0bffc17 	ldw	r2,-16(fp)
  802e60:	10c04985 	stb	r3,294(r2)
  d->_g99 = d->_g105 || d->_g99 || d->_g102;
  802e64:	e0bffc17 	ldw	r2,-16(fp)
  802e68:	108049c3 	ldbu	r2,295(r2)
  802e6c:	10803fcc 	andi	r2,r2,255
  802e70:	1080201c 	xori	r2,r2,128
  802e74:	10bfe004 	addi	r2,r2,-128
  802e78:	10000c1e 	bne	r2,zero,802eac <logic+0x2c1c>
  802e7c:	e0bffc17 	ldw	r2,-16(fp)
  802e80:	108048c3 	ldbu	r2,291(r2)
  802e84:	10803fcc 	andi	r2,r2,255
  802e88:	1080201c 	xori	r2,r2,128
  802e8c:	10bfe004 	addi	r2,r2,-128
  802e90:	1000061e 	bne	r2,zero,802eac <logic+0x2c1c>
  802e94:	e0bffc17 	ldw	r2,-16(fp)
  802e98:	10804983 	ldbu	r2,294(r2)
  802e9c:	10803fcc 	andi	r2,r2,255
  802ea0:	1080201c 	xori	r2,r2,128
  802ea4:	10bfe004 	addi	r2,r2,-128
  802ea8:	10000226 	beq	r2,zero,802eb4 <logic+0x2c24>
  802eac:	00800044 	movi	r2,1
  802eb0:	00000106 	br	802eb8 <logic+0x2c28>
  802eb4:	0005883a 	mov	r2,zero
  802eb8:	1007883a 	mov	r3,r2
  802ebc:	e0bffc17 	ldw	r2,-16(fp)
  802ec0:	10c048c5 	stb	r3,291(r2)
  d->_cg95 = d->_region3_AVI_t < d->T_AVI;
  802ec4:	e0bffc17 	ldw	r2,-16(fp)
  802ec8:	14002717 	ldw	r16,156(r2)
  802ecc:	14402817 	ldw	r17,160(r2)
  802ed0:	e0bffc17 	ldw	r2,-16(fp)
  802ed4:	10800117 	ldw	r2,4(r2)
  802ed8:	1009883a 	mov	r4,r2
  802edc:	0806fd40 	call	806fd4 <__floatsidf>
  802ee0:	1009883a 	mov	r4,r2
  802ee4:	180b883a 	mov	r5,r3
  802ee8:	04800044 	movi	r18,1
  802eec:	200d883a 	mov	r6,r4
  802ef0:	280f883a 	mov	r7,r5
  802ef4:	8009883a 	mov	r4,r16
  802ef8:	880b883a 	mov	r5,r17
  802efc:	08065e40 	call	8065e4 <__ledf2>
  802f00:	10000116 	blt	r2,zero,802f08 <logic+0x2c78>
  802f04:	0025883a 	mov	r18,zero
  802f08:	9007883a 	mov	r3,r18
  802f0c:	e0bffc17 	ldw	r2,-16(fp)
  802f10:	10c06045 	stb	r3,385(r2)
  d->_g102 = d->_g99 && !d->_cg95;
  802f14:	e0bffc17 	ldw	r2,-16(fp)
  802f18:	108048c3 	ldbu	r2,291(r2)
  802f1c:	10803fcc 	andi	r2,r2,255
  802f20:	1080201c 	xori	r2,r2,128
  802f24:	10bfe004 	addi	r2,r2,-128
  802f28:	10000826 	beq	r2,zero,802f4c <logic+0x2cbc>
  802f2c:	e0bffc17 	ldw	r2,-16(fp)
  802f30:	10806043 	ldbu	r2,385(r2)
  802f34:	10803fcc 	andi	r2,r2,255
  802f38:	1080201c 	xori	r2,r2,128
  802f3c:	10bfe004 	addi	r2,r2,-128
  802f40:	1000021e 	bne	r2,zero,802f4c <logic+0x2cbc>
  802f44:	00800044 	movi	r2,1
  802f48:	00000106 	br	802f50 <logic+0x2cc0>
  802f4c:	0005883a 	mov	r2,zero
  802f50:	1007883a 	mov	r3,r2
  802f54:	e0bffc17 	ldw	r2,-16(fp)
  802f58:	10c04985 	stb	r3,294(r2)
  d->_cg100 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  802f5c:	e0bffc17 	ldw	r2,-16(fp)
  802f60:	10803583 	ldbu	r2,214(r2)
  802f64:	10803fcc 	andi	r2,r2,255
  802f68:	1080201c 	xori	r2,r2,128
  802f6c:	10bfe004 	addi	r2,r2,-128
  802f70:	1000061e 	bne	r2,zero,802f8c <logic+0x2cfc>
  802f74:	e0bffc17 	ldw	r2,-16(fp)
  802f78:	108035c3 	ldbu	r2,215(r2)
  802f7c:	10803fcc 	andi	r2,r2,255
  802f80:	1080201c 	xori	r2,r2,128
  802f84:	10bfe004 	addi	r2,r2,-128
  802f88:	10000226 	beq	r2,zero,802f94 <logic+0x2d04>
  802f8c:	00800044 	movi	r2,1
  802f90:	00000106 	br	802f98 <logic+0x2d08>
  802f94:	0005883a 	mov	r2,zero
  802f98:	1007883a 	mov	r3,r2
  802f9c:	e0bffc17 	ldw	r2,-16(fp)
  802fa0:	10c060c5 	stb	r3,387(r2)
  d->_g101 = d->_g102 && !d->_cg100;
  802fa4:	e0bffc17 	ldw	r2,-16(fp)
  802fa8:	10804983 	ldbu	r2,294(r2)
  802fac:	10803fcc 	andi	r2,r2,255
  802fb0:	1080201c 	xori	r2,r2,128
  802fb4:	10bfe004 	addi	r2,r2,-128
  802fb8:	10000826 	beq	r2,zero,802fdc <logic+0x2d4c>
  802fbc:	e0bffc17 	ldw	r2,-16(fp)
  802fc0:	108060c3 	ldbu	r2,387(r2)
  802fc4:	10803fcc 	andi	r2,r2,255
  802fc8:	1080201c 	xori	r2,r2,128
  802fcc:	10bfe004 	addi	r2,r2,-128
  802fd0:	1000021e 	bne	r2,zero,802fdc <logic+0x2d4c>
  802fd4:	00800044 	movi	r2,1
  802fd8:	00000106 	br	802fe0 <logic+0x2d50>
  802fdc:	0005883a 	mov	r2,zero
  802fe0:	1007883a 	mov	r3,r2
  802fe4:	e0bffc17 	ldw	r2,-16(fp)
  802fe8:	10c04945 	stb	r3,293(r2)
  d->_g95 = d->_g99 && d->_cg95;
  802fec:	e0bffc17 	ldw	r2,-16(fp)
  802ff0:	108048c3 	ldbu	r2,291(r2)
  802ff4:	10803fcc 	andi	r2,r2,255
  802ff8:	1080201c 	xori	r2,r2,128
  802ffc:	10bfe004 	addi	r2,r2,-128
  803000:	10000826 	beq	r2,zero,803024 <logic+0x2d94>
  803004:	e0bffc17 	ldw	r2,-16(fp)
  803008:	10806043 	ldbu	r2,385(r2)
  80300c:	10803fcc 	andi	r2,r2,255
  803010:	1080201c 	xori	r2,r2,128
  803014:	10bfe004 	addi	r2,r2,-128
  803018:	10000226 	beq	r2,zero,803024 <logic+0x2d94>
  80301c:	00800044 	movi	r2,1
  803020:	00000106 	br	803028 <logic+0x2d98>
  803024:	0005883a 	mov	r2,zero
  803028:	1007883a 	mov	r3,r2
  80302c:	e0bffc17 	ldw	r2,-16(fp)
  803030:	10c047c5 	stb	r3,287(r2)
  if (d->_g95) {
  803034:	e0bffc17 	ldw	r2,-16(fp)
  803038:	108047c3 	ldbu	r2,287(r2)
  80303c:	10803fcc 	andi	r2,r2,255
  803040:	1080201c 	xori	r2,r2,128
  803044:	10bfe004 	addi	r2,r2,-128
  803048:	10003426 	beq	r2,zero,80311c <logic+0x2e8c>
    d->sleepT = (d->sleepT < (d->T_AVI - d->_region3_AVI_t)) ? d->sleepT : (d->T_AVI - d->_region3_AVI_t);
  80304c:	e0bffc17 	ldw	r2,-16(fp)
  803050:	14002f17 	ldw	r16,188(r2)
  803054:	14403017 	ldw	r17,192(r2)
  803058:	e0bffc17 	ldw	r2,-16(fp)
  80305c:	10800117 	ldw	r2,4(r2)
  803060:	1009883a 	mov	r4,r2
  803064:	0806fd40 	call	806fd4 <__floatsidf>
  803068:	1011883a 	mov	r8,r2
  80306c:	1813883a 	mov	r9,r3
  803070:	e13ffc17 	ldw	r4,-16(fp)
  803074:	20802717 	ldw	r2,156(r4)
  803078:	20c02817 	ldw	r3,160(r4)
  80307c:	100d883a 	mov	r6,r2
  803080:	180f883a 	mov	r7,r3
  803084:	4009883a 	mov	r4,r8
  803088:	480b883a 	mov	r5,r9
  80308c:	08066d80 	call	8066d8 <__subdf3>
  803090:	1009883a 	mov	r4,r2
  803094:	180b883a 	mov	r5,r3
  803098:	2005883a 	mov	r2,r4
  80309c:	2807883a 	mov	r3,r5
  8030a0:	100d883a 	mov	r6,r2
  8030a4:	180f883a 	mov	r7,r3
  8030a8:	8009883a 	mov	r4,r16
  8030ac:	880b883a 	mov	r5,r17
  8030b0:	08065e40 	call	8065e4 <__ledf2>
  8030b4:	1000040e 	bge	r2,zero,8030c8 <logic+0x2e38>
  8030b8:	e13ffc17 	ldw	r4,-16(fp)
  8030bc:	20802f17 	ldw	r2,188(r4)
  8030c0:	20c03017 	ldw	r3,192(r4)
  8030c4:	00001206 	br	803110 <logic+0x2e80>
  8030c8:	e0bffc17 	ldw	r2,-16(fp)
  8030cc:	10800117 	ldw	r2,4(r2)
  8030d0:	1009883a 	mov	r4,r2
  8030d4:	0806fd40 	call	806fd4 <__floatsidf>
  8030d8:	1011883a 	mov	r8,r2
  8030dc:	1813883a 	mov	r9,r3
  8030e0:	e13ffc17 	ldw	r4,-16(fp)
  8030e4:	20802717 	ldw	r2,156(r4)
  8030e8:	20c02817 	ldw	r3,160(r4)
  8030ec:	100d883a 	mov	r6,r2
  8030f0:	180f883a 	mov	r7,r3
  8030f4:	4009883a 	mov	r4,r8
  8030f8:	480b883a 	mov	r5,r9
  8030fc:	08066d80 	call	8066d8 <__subdf3>
  803100:	1009883a 	mov	r4,r2
  803104:	180b883a 	mov	r5,r3
  803108:	2005883a 	mov	r2,r4
  80310c:	2807883a 	mov	r3,r5
  803110:	e13ffc17 	ldw	r4,-16(fp)
  803114:	20802f15 	stw	r2,188(r4)
  803118:	20c03015 	stw	r3,192(r4)
  }
  d->_cg96 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  80311c:	e0bffc17 	ldw	r2,-16(fp)
  803120:	10803583 	ldbu	r2,214(r2)
  803124:	10803fcc 	andi	r2,r2,255
  803128:	1080201c 	xori	r2,r2,128
  80312c:	10bfe004 	addi	r2,r2,-128
  803130:	1000061e 	bne	r2,zero,80314c <logic+0x2ebc>
  803134:	e0bffc17 	ldw	r2,-16(fp)
  803138:	108035c3 	ldbu	r2,215(r2)
  80313c:	10803fcc 	andi	r2,r2,255
  803140:	1080201c 	xori	r2,r2,128
  803144:	10bfe004 	addi	r2,r2,-128
  803148:	10000226 	beq	r2,zero,803154 <logic+0x2ec4>
  80314c:	00800044 	movi	r2,1
  803150:	00000106 	br	803158 <logic+0x2ec8>
  803154:	0005883a 	mov	r2,zero
  803158:	1007883a 	mov	r3,r2
  80315c:	e0bffc17 	ldw	r2,-16(fp)
  803160:	10c06085 	stb	r3,386(r2)
  d->_g98 = d->_g95 && !d->_cg96;
  803164:	e0bffc17 	ldw	r2,-16(fp)
  803168:	108047c3 	ldbu	r2,287(r2)
  80316c:	10803fcc 	andi	r2,r2,255
  803170:	1080201c 	xori	r2,r2,128
  803174:	10bfe004 	addi	r2,r2,-128
  803178:	10000826 	beq	r2,zero,80319c <logic+0x2f0c>
  80317c:	e0bffc17 	ldw	r2,-16(fp)
  803180:	10806083 	ldbu	r2,386(r2)
  803184:	10803fcc 	andi	r2,r2,255
  803188:	1080201c 	xori	r2,r2,128
  80318c:	10bfe004 	addi	r2,r2,-128
  803190:	1000021e 	bne	r2,zero,80319c <logic+0x2f0c>
  803194:	00800044 	movi	r2,1
  803198:	00000106 	br	8031a0 <logic+0x2f10>
  80319c:	0005883a 	mov	r2,zero
  8031a0:	1007883a 	mov	r3,r2
  8031a4:	e0bffc17 	ldw	r2,-16(fp)
  8031a8:	10c04885 	stb	r3,290(r2)
  d->_g97_e1 = !(d->_g101 || d->_g98);
  8031ac:	e0bffc17 	ldw	r2,-16(fp)
  8031b0:	10804943 	ldbu	r2,293(r2)
  8031b4:	10803fcc 	andi	r2,r2,255
  8031b8:	1080201c 	xori	r2,r2,128
  8031bc:	10bfe004 	addi	r2,r2,-128
  8031c0:	1000081e 	bne	r2,zero,8031e4 <logic+0x2f54>
  8031c4:	e0bffc17 	ldw	r2,-16(fp)
  8031c8:	10804883 	ldbu	r2,290(r2)
  8031cc:	10803fcc 	andi	r2,r2,255
  8031d0:	1080201c 	xori	r2,r2,128
  8031d4:	10bfe004 	addi	r2,r2,-128
  8031d8:	1000021e 	bne	r2,zero,8031e4 <logic+0x2f54>
  8031dc:	00800044 	movi	r2,1
  8031e0:	00000106 	br	8031e8 <logic+0x2f58>
  8031e4:	0005883a 	mov	r2,zero
  8031e8:	1007883a 	mov	r3,r2
  8031ec:	e0bffc17 	ldw	r2,-16(fp)
  8031f0:	10c06905 	stb	r3,420(r2)
  d->_g96 = d->_g95 && d->_cg96 || d->_g102 && d->_cg100;
  8031f4:	e0bffc17 	ldw	r2,-16(fp)
  8031f8:	108047c3 	ldbu	r2,287(r2)
  8031fc:	10803fcc 	andi	r2,r2,255
  803200:	1080201c 	xori	r2,r2,128
  803204:	10bfe004 	addi	r2,r2,-128
  803208:	10000626 	beq	r2,zero,803224 <logic+0x2f94>
  80320c:	e0bffc17 	ldw	r2,-16(fp)
  803210:	10806083 	ldbu	r2,386(r2)
  803214:	10803fcc 	andi	r2,r2,255
  803218:	1080201c 	xori	r2,r2,128
  80321c:	10bfe004 	addi	r2,r2,-128
  803220:	10000c1e 	bne	r2,zero,803254 <logic+0x2fc4>
  803224:	e0bffc17 	ldw	r2,-16(fp)
  803228:	10804983 	ldbu	r2,294(r2)
  80322c:	10803fcc 	andi	r2,r2,255
  803230:	1080201c 	xori	r2,r2,128
  803234:	10bfe004 	addi	r2,r2,-128
  803238:	10000826 	beq	r2,zero,80325c <logic+0x2fcc>
  80323c:	e0bffc17 	ldw	r2,-16(fp)
  803240:	108060c3 	ldbu	r2,387(r2)
  803244:	10803fcc 	andi	r2,r2,255
  803248:	1080201c 	xori	r2,r2,128
  80324c:	10bfe004 	addi	r2,r2,-128
  803250:	10000226 	beq	r2,zero,80325c <logic+0x2fcc>
  803254:	00800044 	movi	r2,1
  803258:	00000106 	br	803260 <logic+0x2fd0>
  80325c:	0005883a 	mov	r2,zero
  803260:	1007883a 	mov	r3,r2
  803264:	e0bffc17 	ldw	r2,-16(fp)
  803268:	10c04805 	stb	r3,288(r2)
  d->_g100 = d->_g105 || d->_g88 && !d->_cg108;
  80326c:	e0bffc17 	ldw	r2,-16(fp)
  803270:	108049c3 	ldbu	r2,295(r2)
  803274:	10803fcc 	andi	r2,r2,255
  803278:	1080201c 	xori	r2,r2,128
  80327c:	10bfe004 	addi	r2,r2,-128
  803280:	10000c1e 	bne	r2,zero,8032b4 <logic+0x3024>
  803284:	e0bffc17 	ldw	r2,-16(fp)
  803288:	10804703 	ldbu	r2,284(r2)
  80328c:	10803fcc 	andi	r2,r2,255
  803290:	1080201c 	xori	r2,r2,128
  803294:	10bfe004 	addi	r2,r2,-128
  803298:	10000826 	beq	r2,zero,8032bc <logic+0x302c>
  80329c:	e0bffc17 	ldw	r2,-16(fp)
  8032a0:	10806103 	ldbu	r2,388(r2)
  8032a4:	10803fcc 	andi	r2,r2,255
  8032a8:	1080201c 	xori	r2,r2,128
  8032ac:	10bfe004 	addi	r2,r2,-128
  8032b0:	1000021e 	bne	r2,zero,8032bc <logic+0x302c>
  8032b4:	00800044 	movi	r2,1
  8032b8:	00000106 	br	8032c0 <logic+0x3030>
  8032bc:	0005883a 	mov	r2,zero
  8032c0:	1007883a 	mov	r3,r2
  8032c4:	e0bffc17 	ldw	r2,-16(fp)
  8032c8:	10c04905 	stb	r3,292(r2)
  d->_g93 = !d->_g100;
  8032cc:	e0bffc17 	ldw	r2,-16(fp)
  8032d0:	10804903 	ldbu	r2,292(r2)
  8032d4:	10803fcc 	andi	r2,r2,255
  8032d8:	1080201c 	xori	r2,r2,128
  8032dc:	10bfe004 	addi	r2,r2,-128
  8032e0:	1005003a 	cmpeq	r2,r2,zero
  8032e4:	1007883a 	mov	r3,r2
  8032e8:	e0bffc17 	ldw	r2,-16(fp)
  8032ec:	10c04785 	stb	r3,286(r2)
  d->_g108 = d->_g83 || d->_g68;
  8032f0:	e0bffc17 	ldw	r2,-16(fp)
  8032f4:	108045c3 	ldbu	r2,279(r2)
  8032f8:	10803fcc 	andi	r2,r2,255
  8032fc:	1080201c 	xori	r2,r2,128
  803300:	10bfe004 	addi	r2,r2,-128
  803304:	1000061e 	bne	r2,zero,803320 <logic+0x3090>
  803308:	e0bffc17 	ldw	r2,-16(fp)
  80330c:	108042c3 	ldbu	r2,267(r2)
  803310:	10803fcc 	andi	r2,r2,255
  803314:	1080201c 	xori	r2,r2,128
  803318:	10bfe004 	addi	r2,r2,-128
  80331c:	10000226 	beq	r2,zero,803328 <logic+0x3098>
  803320:	00800044 	movi	r2,1
  803324:	00000106 	br	80332c <logic+0x309c>
  803328:	0005883a 	mov	r2,zero
  80332c:	1007883a 	mov	r3,r2
  803330:	e0bffc17 	ldw	r2,-16(fp)
  803334:	10c04a85 	stb	r3,298(r2)
  d->_g109 = (d->_g97_e1 || d->_g96) && (d->_g93 || d->_g108) && (d->_g96 || d->_g108);
  803338:	e0bffc17 	ldw	r2,-16(fp)
  80333c:	10806903 	ldbu	r2,420(r2)
  803340:	10803fcc 	andi	r2,r2,255
  803344:	1080201c 	xori	r2,r2,128
  803348:	10bfe004 	addi	r2,r2,-128
  80334c:	1000061e 	bne	r2,zero,803368 <logic+0x30d8>
  803350:	e0bffc17 	ldw	r2,-16(fp)
  803354:	10804803 	ldbu	r2,288(r2)
  803358:	10803fcc 	andi	r2,r2,255
  80335c:	1080201c 	xori	r2,r2,128
  803360:	10bfe004 	addi	r2,r2,-128
  803364:	10001a26 	beq	r2,zero,8033d0 <logic+0x3140>
  803368:	e0bffc17 	ldw	r2,-16(fp)
  80336c:	10804783 	ldbu	r2,286(r2)
  803370:	10803fcc 	andi	r2,r2,255
  803374:	1080201c 	xori	r2,r2,128
  803378:	10bfe004 	addi	r2,r2,-128
  80337c:	1000061e 	bne	r2,zero,803398 <logic+0x3108>
  803380:	e0bffc17 	ldw	r2,-16(fp)
  803384:	10804a83 	ldbu	r2,298(r2)
  803388:	10803fcc 	andi	r2,r2,255
  80338c:	1080201c 	xori	r2,r2,128
  803390:	10bfe004 	addi	r2,r2,-128
  803394:	10000e26 	beq	r2,zero,8033d0 <logic+0x3140>
  803398:	e0bffc17 	ldw	r2,-16(fp)
  80339c:	10804803 	ldbu	r2,288(r2)
  8033a0:	10803fcc 	andi	r2,r2,255
  8033a4:	1080201c 	xori	r2,r2,128
  8033a8:	10bfe004 	addi	r2,r2,-128
  8033ac:	1000061e 	bne	r2,zero,8033c8 <logic+0x3138>
  8033b0:	e0bffc17 	ldw	r2,-16(fp)
  8033b4:	10804a83 	ldbu	r2,298(r2)
  8033b8:	10803fcc 	andi	r2,r2,255
  8033bc:	1080201c 	xori	r2,r2,128
  8033c0:	10bfe004 	addi	r2,r2,-128
  8033c4:	10000226 	beq	r2,zero,8033d0 <logic+0x3140>
  8033c8:	00800044 	movi	r2,1
  8033cc:	00000106 	br	8033d4 <logic+0x3144>
  8033d0:	0005883a 	mov	r2,zero
  8033d4:	1007883a 	mov	r3,r2
  8033d8:	e0bffc17 	ldw	r2,-16(fp)
  8033dc:	10c04ac5 	stb	r3,299(r2)
  d->_cg110 = d->_Pacemaker_local__Atrig6;
  8033e0:	e0bffc17 	ldw	r2,-16(fp)
  8033e4:	10c03583 	ldbu	r3,214(r2)
  8033e8:	e0bffc17 	ldw	r2,-16(fp)
  8033ec:	10c06185 	stb	r3,390(r2)
  d->_g106 = d->_g109 && d->_cg110;
  8033f0:	e0bffc17 	ldw	r2,-16(fp)
  8033f4:	10804ac3 	ldbu	r2,299(r2)
  8033f8:	10803fcc 	andi	r2,r2,255
  8033fc:	1080201c 	xori	r2,r2,128
  803400:	10bfe004 	addi	r2,r2,-128
  803404:	10000826 	beq	r2,zero,803428 <logic+0x3198>
  803408:	e0bffc17 	ldw	r2,-16(fp)
  80340c:	10806183 	ldbu	r2,390(r2)
  803410:	10803fcc 	andi	r2,r2,255
  803414:	1080201c 	xori	r2,r2,128
  803418:	10bfe004 	addi	r2,r2,-128
  80341c:	10000226 	beq	r2,zero,803428 <logic+0x3198>
  803420:	00800044 	movi	r2,1
  803424:	00000106 	br	80342c <logic+0x319c>
  803428:	0005883a 	mov	r2,zero
  80342c:	1007883a 	mov	r3,r2
  803430:	e0bffc17 	ldw	r2,-16(fp)
  803434:	10c04a05 	stb	r3,296(r2)
  if (d->_g106) {
  803438:	e0bffc17 	ldw	r2,-16(fp)
  80343c:	10804a03 	ldbu	r2,296(r2)
  803440:	10803fcc 	andi	r2,r2,255
  803444:	1080201c 	xori	r2,r2,128
  803448:	10bfe004 	addi	r2,r2,-128
  80344c:	10000526 	beq	r2,zero,803464 <logic+0x31d4>
    d->_taken_transitions[15] += 1;
  803450:	e0bffc17 	ldw	r2,-16(fp)
  803454:	10801617 	ldw	r2,88(r2)
  803458:	10c00044 	addi	r3,r2,1
  80345c:	e0bffc17 	ldw	r2,-16(fp)
  803460:	10c01615 	stw	r3,88(r2)
  }
  d->_g107_e2 = d->_pg111;
  803464:	e0bffc17 	ldw	r2,-16(fp)
  803468:	10c07083 	ldbu	r3,450(r2)
  80346c:	e0bffc17 	ldw	r2,-16(fp)
  803470:	10c06945 	stb	r3,421(r2)
  d->_cg114 = d->V_EVT;
  803474:	e0bffc17 	ldw	r2,-16(fp)
  803478:	10c03243 	ldbu	r3,201(r2)
  80347c:	e0bffc17 	ldw	r2,-16(fp)
  803480:	10c06205 	stb	r3,392(r2)
  d->_g97 = d->_g107_e2 && d->_cg114;
  803484:	e0bffc17 	ldw	r2,-16(fp)
  803488:	10806943 	ldbu	r2,421(r2)
  80348c:	10803fcc 	andi	r2,r2,255
  803490:	1080201c 	xori	r2,r2,128
  803494:	10bfe004 	addi	r2,r2,-128
  803498:	10000826 	beq	r2,zero,8034bc <logic+0x322c>
  80349c:	e0bffc17 	ldw	r2,-16(fp)
  8034a0:	10806203 	ldbu	r2,392(r2)
  8034a4:	10803fcc 	andi	r2,r2,255
  8034a8:	1080201c 	xori	r2,r2,128
  8034ac:	10bfe004 	addi	r2,r2,-128
  8034b0:	10000226 	beq	r2,zero,8034bc <logic+0x322c>
  8034b4:	00800044 	movi	r2,1
  8034b8:	00000106 	br	8034c0 <logic+0x3230>
  8034bc:	0005883a 	mov	r2,zero
  8034c0:	1007883a 	mov	r3,r2
  8034c4:	e0bffc17 	ldw	r2,-16(fp)
  8034c8:	10c04845 	stb	r3,289(r2)
  if (d->_g97) {
  8034cc:	e0bffc17 	ldw	r2,-16(fp)
  8034d0:	10804843 	ldbu	r2,289(r2)
  8034d4:	10803fcc 	andi	r2,r2,255
  8034d8:	1080201c 	xori	r2,r2,128
  8034dc:	10bfe004 	addi	r2,r2,-128
  8034e0:	10000526 	beq	r2,zero,8034f8 <logic+0x3268>
    d->_taken_transitions[17] += 1;
  8034e4:	e0bffc17 	ldw	r2,-16(fp)
  8034e8:	10801817 	ldw	r2,96(r2)
  8034ec:	10c00044 	addi	r3,r2,1
  8034f0:	e0bffc17 	ldw	r2,-16(fp)
  8034f4:	10c01815 	stw	r3,96(r2)
  }
  d->_g107 = d->_pg137;
  8034f8:	e0bffc17 	ldw	r2,-16(fp)
  8034fc:	10c070c3 	ldbu	r3,451(r2)
  803500:	e0bffc17 	ldw	r2,-16(fp)
  803504:	10c04a45 	stb	r3,297(r2)
  d->_cg150 = d->V_EVT;
  803508:	e0bffc17 	ldw	r2,-16(fp)
  80350c:	10c03243 	ldbu	r3,201(r2)
  803510:	e0bffc17 	ldw	r2,-16(fp)
  803514:	10c06505 	stb	r3,404(r2)
  d->_g97_e1 = d->_g107 && d->_cg150;
  803518:	e0bffc17 	ldw	r2,-16(fp)
  80351c:	10804a43 	ldbu	r2,297(r2)
  803520:	10803fcc 	andi	r2,r2,255
  803524:	1080201c 	xori	r2,r2,128
  803528:	10bfe004 	addi	r2,r2,-128
  80352c:	10000826 	beq	r2,zero,803550 <logic+0x32c0>
  803530:	e0bffc17 	ldw	r2,-16(fp)
  803534:	10806503 	ldbu	r2,404(r2)
  803538:	10803fcc 	andi	r2,r2,255
  80353c:	1080201c 	xori	r2,r2,128
  803540:	10bfe004 	addi	r2,r2,-128
  803544:	10000226 	beq	r2,zero,803550 <logic+0x32c0>
  803548:	00800044 	movi	r2,1
  80354c:	00000106 	br	803554 <logic+0x32c4>
  803550:	0005883a 	mov	r2,zero
  803554:	1007883a 	mov	r3,r2
  803558:	e0bffc17 	ldw	r2,-16(fp)
  80355c:	10c06905 	stb	r3,420(r2)
  if (d->_g97_e1) {
  803560:	e0bffc17 	ldw	r2,-16(fp)
  803564:	10806903 	ldbu	r2,420(r2)
  803568:	10803fcc 	andi	r2,r2,255
  80356c:	1080201c 	xori	r2,r2,128
  803570:	10bfe004 	addi	r2,r2,-128
  803574:	10000326 	beq	r2,zero,803584 <logic+0x32f4>
    d->uri_active = 1;
  803578:	e0bffc17 	ldw	r2,-16(fp)
  80357c:	00c00044 	movi	r3,1
  803580:	10c00005 	stb	r3,0(r2)
  }
  d->_g162 = d->_pg171;
  803584:	e0bffc17 	ldw	r2,-16(fp)
  803588:	10c07103 	ldbu	r3,452(r2)
  80358c:	e0bffc17 	ldw	r2,-16(fp)
  803590:	10c05445 	stb	r3,337(r2)
  d->_g156 = d->_pg150;
  803594:	e0bffc17 	ldw	r2,-16(fp)
  803598:	10c07143 	ldbu	r3,453(r2)
  80359c:	e0bffc17 	ldw	r2,-16(fp)
  8035a0:	10c05305 	stb	r3,332(r2)
  d->_g159_e1 = !(d->_g162 || d->_g156);
  8035a4:	e0bffc17 	ldw	r2,-16(fp)
  8035a8:	10805443 	ldbu	r2,337(r2)
  8035ac:	10803fcc 	andi	r2,r2,255
  8035b0:	1080201c 	xori	r2,r2,128
  8035b4:	10bfe004 	addi	r2,r2,-128
  8035b8:	1000081e 	bne	r2,zero,8035dc <logic+0x334c>
  8035bc:	e0bffc17 	ldw	r2,-16(fp)
  8035c0:	10805303 	ldbu	r2,332(r2)
  8035c4:	10803fcc 	andi	r2,r2,255
  8035c8:	1080201c 	xori	r2,r2,128
  8035cc:	10bfe004 	addi	r2,r2,-128
  8035d0:	1000021e 	bne	r2,zero,8035dc <logic+0x334c>
  8035d4:	00800044 	movi	r2,1
  8035d8:	00000106 	br	8035e0 <logic+0x3350>
  8035dc:	0005883a 	mov	r2,zero
  8035e0:	1007883a 	mov	r3,r2
  8035e4:	e0bffc17 	ldw	r2,-16(fp)
  8035e8:	10c06a05 	stb	r3,424(r2)
  d->_g166 = d->_pg172;
  8035ec:	e0bffc17 	ldw	r2,-16(fp)
  8035f0:	10c07183 	ldbu	r3,454(r2)
  8035f4:	e0bffc17 	ldw	r2,-16(fp)
  8035f8:	10c054c5 	stb	r3,339(r2)
  d->_cg166 = d->V_EVT;
  8035fc:	e0bffc17 	ldw	r2,-16(fp)
  803600:	10c03243 	ldbu	r3,201(r2)
  803604:	e0bffc17 	ldw	r2,-16(fp)
  803608:	10c06705 	stb	r3,412(r2)
  d->_g167 = d->_g166 && d->_cg166;
  80360c:	e0bffc17 	ldw	r2,-16(fp)
  803610:	108054c3 	ldbu	r2,339(r2)
  803614:	10803fcc 	andi	r2,r2,255
  803618:	1080201c 	xori	r2,r2,128
  80361c:	10bfe004 	addi	r2,r2,-128
  803620:	10000826 	beq	r2,zero,803644 <logic+0x33b4>
  803624:	e0bffc17 	ldw	r2,-16(fp)
  803628:	10806703 	ldbu	r2,412(r2)
  80362c:	10803fcc 	andi	r2,r2,255
  803630:	1080201c 	xori	r2,r2,128
  803634:	10bfe004 	addi	r2,r2,-128
  803638:	10000226 	beq	r2,zero,803644 <logic+0x33b4>
  80363c:	00800044 	movi	r2,1
  803640:	00000106 	br	803648 <logic+0x33b8>
  803644:	0005883a 	mov	r2,zero
  803648:	1007883a 	mov	r3,r2
  80364c:	e0bffc17 	ldw	r2,-16(fp)
  803650:	10c05505 	stb	r3,340(r2)
  if (d->_g167) {
  803654:	e0bffc17 	ldw	r2,-16(fp)
  803658:	10805503 	ldbu	r2,340(r2)
  80365c:	10803fcc 	andi	r2,r2,255
  803660:	1080201c 	xori	r2,r2,128
  803664:	10bfe004 	addi	r2,r2,-128
  803668:	10000326 	beq	r2,zero,803678 <logic+0x33e8>
    d->_Pacemaker_local__Atrig10 = 1;
  80366c:	e0bffc17 	ldw	r2,-16(fp)
  803670:	00c00044 	movi	r3,1
  803674:	10c03685 	stb	r3,218(r2)
  }
  d->_g201 = d->_pg152;
  803678:	e0bffc17 	ldw	r2,-16(fp)
  80367c:	10c071c3 	ldbu	r3,455(r2)
  803680:	e0bffc17 	ldw	r2,-16(fp)
  803684:	10c05745 	stb	r3,349(r2)
  if (d->_g201) {
  803688:	e0bffc17 	ldw	r2,-16(fp)
  80368c:	10805743 	ldbu	r2,349(r2)
  803690:	10803fcc 	andi	r2,r2,255
  803694:	1080201c 	xori	r2,r2,128
  803698:	10bfe004 	addi	r2,r2,-128
  80369c:	10001226 	beq	r2,zero,8036e8 <logic+0x3458>
    d->_region5_URI_t += d->deltaT;
  8036a0:	e13ffc17 	ldw	r4,-16(fp)
  8036a4:	20802b17 	ldw	r2,172(r4)
  8036a8:	20c02c17 	ldw	r3,176(r4)
  8036ac:	e1bffc17 	ldw	r6,-16(fp)
  8036b0:	31002d17 	ldw	r4,180(r6)
  8036b4:	31402e17 	ldw	r5,184(r6)
  8036b8:	200d883a 	mov	r6,r4
  8036bc:	280f883a 	mov	r7,r5
  8036c0:	1009883a 	mov	r4,r2
  8036c4:	180b883a 	mov	r5,r3
  8036c8:	0805c5c0 	call	805c5c <__adddf3>
  8036cc:	1009883a 	mov	r4,r2
  8036d0:	180b883a 	mov	r5,r3
  8036d4:	2005883a 	mov	r2,r4
  8036d8:	2807883a 	mov	r3,r5
  8036dc:	e13ffc17 	ldw	r4,-16(fp)
  8036e0:	20802b15 	stw	r2,172(r4)
  8036e4:	20c02c15 	stw	r3,176(r4)
  }
  d->_g169 = d->_g166 && !d->_cg166;
  8036e8:	e0bffc17 	ldw	r2,-16(fp)
  8036ec:	108054c3 	ldbu	r2,339(r2)
  8036f0:	10803fcc 	andi	r2,r2,255
  8036f4:	1080201c 	xori	r2,r2,128
  8036f8:	10bfe004 	addi	r2,r2,-128
  8036fc:	10000826 	beq	r2,zero,803720 <logic+0x3490>
  803700:	e0bffc17 	ldw	r2,-16(fp)
  803704:	10806703 	ldbu	r2,412(r2)
  803708:	10803fcc 	andi	r2,r2,255
  80370c:	1080201c 	xori	r2,r2,128
  803710:	10bfe004 	addi	r2,r2,-128
  803714:	1000021e 	bne	r2,zero,803720 <logic+0x3490>
  803718:	00800044 	movi	r2,1
  80371c:	00000106 	br	803724 <logic+0x3494>
  803720:	0005883a 	mov	r2,zero
  803724:	1007883a 	mov	r3,r2
  803728:	e0bffc17 	ldw	r2,-16(fp)
  80372c:	10c05585 	stb	r3,342(r2)
  d->_cg169 = d->_region5_URI_t >= d->T_URI;
  803730:	e0bffc17 	ldw	r2,-16(fp)
  803734:	14002b17 	ldw	r16,172(r2)
  803738:	14402c17 	ldw	r17,176(r2)
  80373c:	e0bffc17 	ldw	r2,-16(fp)
  803740:	10800617 	ldw	r2,24(r2)
  803744:	1009883a 	mov	r4,r2
  803748:	0806fd40 	call	806fd4 <__floatsidf>
  80374c:	1009883a 	mov	r4,r2
  803750:	180b883a 	mov	r5,r3
  803754:	04800044 	movi	r18,1
  803758:	200d883a 	mov	r6,r4
  80375c:	280f883a 	mov	r7,r5
  803760:	8009883a 	mov	r4,r16
  803764:	880b883a 	mov	r5,r17
  803768:	08065080 	call	806508 <__gedf2>
  80376c:	1000010e 	bge	r2,zero,803774 <logic+0x34e4>
  803770:	0025883a 	mov	r18,zero
  803774:	9007883a 	mov	r3,r18
  803778:	e0bffc17 	ldw	r2,-16(fp)
  80377c:	10c066c5 	stb	r3,411(r2)
  d->_g170 = d->_g169 && d->_cg169;
  803780:	e0bffc17 	ldw	r2,-16(fp)
  803784:	10805583 	ldbu	r2,342(r2)
  803788:	10803fcc 	andi	r2,r2,255
  80378c:	1080201c 	xori	r2,r2,128
  803790:	10bfe004 	addi	r2,r2,-128
  803794:	10000826 	beq	r2,zero,8037b8 <logic+0x3528>
  803798:	e0bffc17 	ldw	r2,-16(fp)
  80379c:	108066c3 	ldbu	r2,411(r2)
  8037a0:	10803fcc 	andi	r2,r2,255
  8037a4:	1080201c 	xori	r2,r2,128
  8037a8:	10bfe004 	addi	r2,r2,-128
  8037ac:	10000226 	beq	r2,zero,8037b8 <logic+0x3528>
  8037b0:	00800044 	movi	r2,1
  8037b4:	00000106 	br	8037bc <logic+0x352c>
  8037b8:	0005883a 	mov	r2,zero
  8037bc:	1007883a 	mov	r3,r2
  8037c0:	e0bffc17 	ldw	r2,-16(fp)
  8037c4:	10c055c5 	stb	r3,343(r2)
  if (d->_g170) {
  8037c8:	e0bffc17 	ldw	r2,-16(fp)
  8037cc:	108055c3 	ldbu	r2,343(r2)
  8037d0:	10803fcc 	andi	r2,r2,255
  8037d4:	1080201c 	xori	r2,r2,128
  8037d8:	10bfe004 	addi	r2,r2,-128
  8037dc:	10000326 	beq	r2,zero,8037ec <logic+0x355c>
    d->_Pacemaker_local__Atrig11 = 1;
  8037e0:	e0bffc17 	ldw	r2,-16(fp)
  8037e4:	00c00044 	movi	r3,1
  8037e8:	10c036c5 	stb	r3,219(r2)
  }
  d->_g156 = d->_g156 || d->_g162;
  8037ec:	e0bffc17 	ldw	r2,-16(fp)
  8037f0:	10805303 	ldbu	r2,332(r2)
  8037f4:	10803fcc 	andi	r2,r2,255
  8037f8:	1080201c 	xori	r2,r2,128
  8037fc:	10bfe004 	addi	r2,r2,-128
  803800:	1000061e 	bne	r2,zero,80381c <logic+0x358c>
  803804:	e0bffc17 	ldw	r2,-16(fp)
  803808:	10805443 	ldbu	r2,337(r2)
  80380c:	10803fcc 	andi	r2,r2,255
  803810:	1080201c 	xori	r2,r2,128
  803814:	10bfe004 	addi	r2,r2,-128
  803818:	10000226 	beq	r2,zero,803824 <logic+0x3594>
  80381c:	00800044 	movi	r2,1
  803820:	00000106 	br	803828 <logic+0x3598>
  803824:	0005883a 	mov	r2,zero
  803828:	1007883a 	mov	r3,r2
  80382c:	e0bffc17 	ldw	r2,-16(fp)
  803830:	10c05305 	stb	r3,332(r2)
  d->_cg157 = d->_region5_URI_t < d->T_URI;
  803834:	e0bffc17 	ldw	r2,-16(fp)
  803838:	14002b17 	ldw	r16,172(r2)
  80383c:	14402c17 	ldw	r17,176(r2)
  803840:	e0bffc17 	ldw	r2,-16(fp)
  803844:	10800617 	ldw	r2,24(r2)
  803848:	1009883a 	mov	r4,r2
  80384c:	0806fd40 	call	806fd4 <__floatsidf>
  803850:	1009883a 	mov	r4,r2
  803854:	180b883a 	mov	r5,r3
  803858:	04800044 	movi	r18,1
  80385c:	200d883a 	mov	r6,r4
  803860:	280f883a 	mov	r7,r5
  803864:	8009883a 	mov	r4,r16
  803868:	880b883a 	mov	r5,r17
  80386c:	08065e40 	call	8065e4 <__ledf2>
  803870:	10000116 	blt	r2,zero,803878 <logic+0x35e8>
  803874:	0025883a 	mov	r18,zero
  803878:	9007883a 	mov	r3,r18
  80387c:	e0bffc17 	ldw	r2,-16(fp)
  803880:	10c06605 	stb	r3,408(r2)
  d->_g162 = d->_g156 && d->_cg157;
  803884:	e0bffc17 	ldw	r2,-16(fp)
  803888:	10805303 	ldbu	r2,332(r2)
  80388c:	10803fcc 	andi	r2,r2,255
  803890:	1080201c 	xori	r2,r2,128
  803894:	10bfe004 	addi	r2,r2,-128
  803898:	10000826 	beq	r2,zero,8038bc <logic+0x362c>
  80389c:	e0bffc17 	ldw	r2,-16(fp)
  8038a0:	10806603 	ldbu	r2,408(r2)
  8038a4:	10803fcc 	andi	r2,r2,255
  8038a8:	1080201c 	xori	r2,r2,128
  8038ac:	10bfe004 	addi	r2,r2,-128
  8038b0:	10000226 	beq	r2,zero,8038bc <logic+0x362c>
  8038b4:	00800044 	movi	r2,1
  8038b8:	00000106 	br	8038c0 <logic+0x3630>
  8038bc:	0005883a 	mov	r2,zero
  8038c0:	1007883a 	mov	r3,r2
  8038c4:	e0bffc17 	ldw	r2,-16(fp)
  8038c8:	10c05445 	stb	r3,337(r2)
  if (d->_g162) {
  8038cc:	e0bffc17 	ldw	r2,-16(fp)
  8038d0:	10805443 	ldbu	r2,337(r2)
  8038d4:	10803fcc 	andi	r2,r2,255
  8038d8:	1080201c 	xori	r2,r2,128
  8038dc:	10bfe004 	addi	r2,r2,-128
  8038e0:	10003426 	beq	r2,zero,8039b4 <logic+0x3724>
    d->sleepT = (d->sleepT < (d->T_URI - d->_region5_URI_t)) ? d->sleepT : (d->T_URI - d->_region5_URI_t);
  8038e4:	e0bffc17 	ldw	r2,-16(fp)
  8038e8:	14002f17 	ldw	r16,188(r2)
  8038ec:	14403017 	ldw	r17,192(r2)
  8038f0:	e0bffc17 	ldw	r2,-16(fp)
  8038f4:	10800617 	ldw	r2,24(r2)
  8038f8:	1009883a 	mov	r4,r2
  8038fc:	0806fd40 	call	806fd4 <__floatsidf>
  803900:	1011883a 	mov	r8,r2
  803904:	1813883a 	mov	r9,r3
  803908:	e13ffc17 	ldw	r4,-16(fp)
  80390c:	20802b17 	ldw	r2,172(r4)
  803910:	20c02c17 	ldw	r3,176(r4)
  803914:	100d883a 	mov	r6,r2
  803918:	180f883a 	mov	r7,r3
  80391c:	4009883a 	mov	r4,r8
  803920:	480b883a 	mov	r5,r9
  803924:	08066d80 	call	8066d8 <__subdf3>
  803928:	1009883a 	mov	r4,r2
  80392c:	180b883a 	mov	r5,r3
  803930:	2005883a 	mov	r2,r4
  803934:	2807883a 	mov	r3,r5
  803938:	100d883a 	mov	r6,r2
  80393c:	180f883a 	mov	r7,r3
  803940:	8009883a 	mov	r4,r16
  803944:	880b883a 	mov	r5,r17
  803948:	08065e40 	call	8065e4 <__ledf2>
  80394c:	1000040e 	bge	r2,zero,803960 <logic+0x36d0>
  803950:	e13ffc17 	ldw	r4,-16(fp)
  803954:	20802f17 	ldw	r2,188(r4)
  803958:	20c03017 	ldw	r3,192(r4)
  80395c:	00001206 	br	8039a8 <logic+0x3718>
  803960:	e0bffc17 	ldw	r2,-16(fp)
  803964:	10800617 	ldw	r2,24(r2)
  803968:	1009883a 	mov	r4,r2
  80396c:	0806fd40 	call	806fd4 <__floatsidf>
  803970:	1011883a 	mov	r8,r2
  803974:	1813883a 	mov	r9,r3
  803978:	e13ffc17 	ldw	r4,-16(fp)
  80397c:	20802b17 	ldw	r2,172(r4)
  803980:	20c02c17 	ldw	r3,176(r4)
  803984:	100d883a 	mov	r6,r2
  803988:	180f883a 	mov	r7,r3
  80398c:	4009883a 	mov	r4,r8
  803990:	480b883a 	mov	r5,r9
  803994:	08066d80 	call	8066d8 <__subdf3>
  803998:	1009883a 	mov	r4,r2
  80399c:	180b883a 	mov	r5,r3
  8039a0:	2005883a 	mov	r2,r4
  8039a4:	2807883a 	mov	r3,r5
  8039a8:	e13ffc17 	ldw	r4,-16(fp)
  8039ac:	20802f15 	stw	r2,188(r4)
  8039b0:	20c03015 	stw	r3,192(r4)
  }
  d->_cg158 = d->_Pacemaker_local__Atrig10 || d->_Pacemaker_local__Atrig11;
  8039b4:	e0bffc17 	ldw	r2,-16(fp)
  8039b8:	10803683 	ldbu	r2,218(r2)
  8039bc:	10803fcc 	andi	r2,r2,255
  8039c0:	1080201c 	xori	r2,r2,128
  8039c4:	10bfe004 	addi	r2,r2,-128
  8039c8:	1000061e 	bne	r2,zero,8039e4 <logic+0x3754>
  8039cc:	e0bffc17 	ldw	r2,-16(fp)
  8039d0:	108036c3 	ldbu	r2,219(r2)
  8039d4:	10803fcc 	andi	r2,r2,255
  8039d8:	1080201c 	xori	r2,r2,128
  8039dc:	10bfe004 	addi	r2,r2,-128
  8039e0:	10000226 	beq	r2,zero,8039ec <logic+0x375c>
  8039e4:	00800044 	movi	r2,1
  8039e8:	00000106 	br	8039f0 <logic+0x3760>
  8039ec:	0005883a 	mov	r2,zero
  8039f0:	1007883a 	mov	r3,r2
  8039f4:	e0bffc17 	ldw	r2,-16(fp)
  8039f8:	10c065c5 	stb	r3,407(r2)
  d->_g157 = d->_g156 && !d->_cg157;
  8039fc:	e0bffc17 	ldw	r2,-16(fp)
  803a00:	10805303 	ldbu	r2,332(r2)
  803a04:	10803fcc 	andi	r2,r2,255
  803a08:	1080201c 	xori	r2,r2,128
  803a0c:	10bfe004 	addi	r2,r2,-128
  803a10:	10000826 	beq	r2,zero,803a34 <logic+0x37a4>
  803a14:	e0bffc17 	ldw	r2,-16(fp)
  803a18:	10806603 	ldbu	r2,408(r2)
  803a1c:	10803fcc 	andi	r2,r2,255
  803a20:	1080201c 	xori	r2,r2,128
  803a24:	10bfe004 	addi	r2,r2,-128
  803a28:	1000021e 	bne	r2,zero,803a34 <logic+0x37a4>
  803a2c:	00800044 	movi	r2,1
  803a30:	00000106 	br	803a38 <logic+0x37a8>
  803a34:	0005883a 	mov	r2,zero
  803a38:	1007883a 	mov	r3,r2
  803a3c:	e0bffc17 	ldw	r2,-16(fp)
  803a40:	10c05345 	stb	r3,333(r2)
  d->_cg160 = d->_Pacemaker_local__Atrig10 || d->_Pacemaker_local__Atrig11;
  803a44:	e0bffc17 	ldw	r2,-16(fp)
  803a48:	10803683 	ldbu	r2,218(r2)
  803a4c:	10803fcc 	andi	r2,r2,255
  803a50:	1080201c 	xori	r2,r2,128
  803a54:	10bfe004 	addi	r2,r2,-128
  803a58:	1000061e 	bne	r2,zero,803a74 <logic+0x37e4>
  803a5c:	e0bffc17 	ldw	r2,-16(fp)
  803a60:	108036c3 	ldbu	r2,219(r2)
  803a64:	10803fcc 	andi	r2,r2,255
  803a68:	1080201c 	xori	r2,r2,128
  803a6c:	10bfe004 	addi	r2,r2,-128
  803a70:	10000226 	beq	r2,zero,803a7c <logic+0x37ec>
  803a74:	00800044 	movi	r2,1
  803a78:	00000106 	br	803a80 <logic+0x37f0>
  803a7c:	0005883a 	mov	r2,zero
  803a80:	1007883a 	mov	r3,r2
  803a84:	e0bffc17 	ldw	r2,-16(fp)
  803a88:	10c06645 	stb	r3,409(r2)
  d->_g159 = d->_g162 && d->_cg158 || d->_g157 && d->_cg160;
  803a8c:	e0bffc17 	ldw	r2,-16(fp)
  803a90:	10805443 	ldbu	r2,337(r2)
  803a94:	10803fcc 	andi	r2,r2,255
  803a98:	1080201c 	xori	r2,r2,128
  803a9c:	10bfe004 	addi	r2,r2,-128
  803aa0:	10000626 	beq	r2,zero,803abc <logic+0x382c>
  803aa4:	e0bffc17 	ldw	r2,-16(fp)
  803aa8:	108065c3 	ldbu	r2,407(r2)
  803aac:	10803fcc 	andi	r2,r2,255
  803ab0:	1080201c 	xori	r2,r2,128
  803ab4:	10bfe004 	addi	r2,r2,-128
  803ab8:	10000c1e 	bne	r2,zero,803aec <logic+0x385c>
  803abc:	e0bffc17 	ldw	r2,-16(fp)
  803ac0:	10805343 	ldbu	r2,333(r2)
  803ac4:	10803fcc 	andi	r2,r2,255
  803ac8:	1080201c 	xori	r2,r2,128
  803acc:	10bfe004 	addi	r2,r2,-128
  803ad0:	10000826 	beq	r2,zero,803af4 <logic+0x3864>
  803ad4:	e0bffc17 	ldw	r2,-16(fp)
  803ad8:	10806643 	ldbu	r2,409(r2)
  803adc:	10803fcc 	andi	r2,r2,255
  803ae0:	1080201c 	xori	r2,r2,128
  803ae4:	10bfe004 	addi	r2,r2,-128
  803ae8:	10000226 	beq	r2,zero,803af4 <logic+0x3864>
  803aec:	00800044 	movi	r2,1
  803af0:	00000106 	br	803af8 <logic+0x3868>
  803af4:	0005883a 	mov	r2,zero
  803af8:	1007883a 	mov	r3,r2
  803afc:	e0bffc17 	ldw	r2,-16(fp)
  803b00:	10c053c5 	stb	r3,335(r2)
  d->_g166 = !d->_g166;
  803b04:	e0bffc17 	ldw	r2,-16(fp)
  803b08:	108054c3 	ldbu	r2,339(r2)
  803b0c:	10803fcc 	andi	r2,r2,255
  803b10:	1080201c 	xori	r2,r2,128
  803b14:	10bfe004 	addi	r2,r2,-128
  803b18:	1005003a 	cmpeq	r2,r2,zero
  803b1c:	1007883a 	mov	r3,r2
  803b20:	e0bffc17 	ldw	r2,-16(fp)
  803b24:	10c054c5 	stb	r3,339(r2)
  d->_g170 = d->_g167 || d->_g170;
  803b28:	e0bffc17 	ldw	r2,-16(fp)
  803b2c:	10805503 	ldbu	r2,340(r2)
  803b30:	10803fcc 	andi	r2,r2,255
  803b34:	1080201c 	xori	r2,r2,128
  803b38:	10bfe004 	addi	r2,r2,-128
  803b3c:	1000061e 	bne	r2,zero,803b58 <logic+0x38c8>
  803b40:	e0bffc17 	ldw	r2,-16(fp)
  803b44:	108055c3 	ldbu	r2,343(r2)
  803b48:	10803fcc 	andi	r2,r2,255
  803b4c:	1080201c 	xori	r2,r2,128
  803b50:	10bfe004 	addi	r2,r2,-128
  803b54:	10000226 	beq	r2,zero,803b60 <logic+0x38d0>
  803b58:	00800044 	movi	r2,1
  803b5c:	00000106 	br	803b64 <logic+0x38d4>
  803b60:	0005883a 	mov	r2,zero
  803b64:	1007883a 	mov	r3,r2
  803b68:	e0bffc17 	ldw	r2,-16(fp)
  803b6c:	10c055c5 	stb	r3,343(r2)
  d->_g167 = (d->_g159_e1 || d->_g159) && (d->_g166 || d->_g170) && (d->_g159 || d->_g170);
  803b70:	e0bffc17 	ldw	r2,-16(fp)
  803b74:	10806a03 	ldbu	r2,424(r2)
  803b78:	10803fcc 	andi	r2,r2,255
  803b7c:	1080201c 	xori	r2,r2,128
  803b80:	10bfe004 	addi	r2,r2,-128
  803b84:	1000061e 	bne	r2,zero,803ba0 <logic+0x3910>
  803b88:	e0bffc17 	ldw	r2,-16(fp)
  803b8c:	108053c3 	ldbu	r2,335(r2)
  803b90:	10803fcc 	andi	r2,r2,255
  803b94:	1080201c 	xori	r2,r2,128
  803b98:	10bfe004 	addi	r2,r2,-128
  803b9c:	10001a26 	beq	r2,zero,803c08 <logic+0x3978>
  803ba0:	e0bffc17 	ldw	r2,-16(fp)
  803ba4:	108054c3 	ldbu	r2,339(r2)
  803ba8:	10803fcc 	andi	r2,r2,255
  803bac:	1080201c 	xori	r2,r2,128
  803bb0:	10bfe004 	addi	r2,r2,-128
  803bb4:	1000061e 	bne	r2,zero,803bd0 <logic+0x3940>
  803bb8:	e0bffc17 	ldw	r2,-16(fp)
  803bbc:	108055c3 	ldbu	r2,343(r2)
  803bc0:	10803fcc 	andi	r2,r2,255
  803bc4:	1080201c 	xori	r2,r2,128
  803bc8:	10bfe004 	addi	r2,r2,-128
  803bcc:	10000e26 	beq	r2,zero,803c08 <logic+0x3978>
  803bd0:	e0bffc17 	ldw	r2,-16(fp)
  803bd4:	108053c3 	ldbu	r2,335(r2)
  803bd8:	10803fcc 	andi	r2,r2,255
  803bdc:	1080201c 	xori	r2,r2,128
  803be0:	10bfe004 	addi	r2,r2,-128
  803be4:	1000061e 	bne	r2,zero,803c00 <logic+0x3970>
  803be8:	e0bffc17 	ldw	r2,-16(fp)
  803bec:	108055c3 	ldbu	r2,343(r2)
  803bf0:	10803fcc 	andi	r2,r2,255
  803bf4:	1080201c 	xori	r2,r2,128
  803bf8:	10bfe004 	addi	r2,r2,-128
  803bfc:	10000226 	beq	r2,zero,803c08 <logic+0x3978>
  803c00:	00800044 	movi	r2,1
  803c04:	00000106 	br	803c0c <logic+0x397c>
  803c08:	0005883a 	mov	r2,zero
  803c0c:	1007883a 	mov	r3,r2
  803c10:	e0bffc17 	ldw	r2,-16(fp)
  803c14:	10c05505 	stb	r3,340(r2)
  d->_cg171 = d->_Pacemaker_local__Atrig10;
  803c18:	e0bffc17 	ldw	r2,-16(fp)
  803c1c:	10c03683 	ldbu	r3,218(r2)
  803c20:	e0bffc17 	ldw	r2,-16(fp)
  803c24:	10c06745 	stb	r3,413(r2)
  d->_g168 = d->_g167 && !d->_cg171;
  803c28:	e0bffc17 	ldw	r2,-16(fp)
  803c2c:	10805503 	ldbu	r2,340(r2)
  803c30:	10803fcc 	andi	r2,r2,255
  803c34:	1080201c 	xori	r2,r2,128
  803c38:	10bfe004 	addi	r2,r2,-128
  803c3c:	10000826 	beq	r2,zero,803c60 <logic+0x39d0>
  803c40:	e0bffc17 	ldw	r2,-16(fp)
  803c44:	10806743 	ldbu	r2,413(r2)
  803c48:	10803fcc 	andi	r2,r2,255
  803c4c:	1080201c 	xori	r2,r2,128
  803c50:	10bfe004 	addi	r2,r2,-128
  803c54:	1000021e 	bne	r2,zero,803c60 <logic+0x39d0>
  803c58:	00800044 	movi	r2,1
  803c5c:	00000106 	br	803c64 <logic+0x39d4>
  803c60:	0005883a 	mov	r2,zero
  803c64:	1007883a 	mov	r3,r2
  803c68:	e0bffc17 	ldw	r2,-16(fp)
  803c6c:	10c05545 	stb	r3,341(r2)
  if (d->_g168) {
  803c70:	e0bffc17 	ldw	r2,-16(fp)
  803c74:	10805543 	ldbu	r2,341(r2)
  803c78:	10803fcc 	andi	r2,r2,255
  803c7c:	1080201c 	xori	r2,r2,128
  803c80:	10bfe004 	addi	r2,r2,-128
  803c84:	10000726 	beq	r2,zero,803ca4 <logic+0x3a14>
    d->uri_active = 0;
  803c88:	e0bffc17 	ldw	r2,-16(fp)
  803c8c:	10000005 	stb	zero,0(r2)
    d->_taken_transitions[25] += 1;
  803c90:	e0bffc17 	ldw	r2,-16(fp)
  803c94:	10802017 	ldw	r2,128(r2)
  803c98:	10c00044 	addi	r3,r2,1
  803c9c:	e0bffc17 	ldw	r2,-16(fp)
  803ca0:	10c02015 	stw	r3,128(r2)
  }
  d->_g168_e2 = d->_g107_e2 && !d->_cg114;
  803ca4:	e0bffc17 	ldw	r2,-16(fp)
  803ca8:	10806943 	ldbu	r2,421(r2)
  803cac:	10803fcc 	andi	r2,r2,255
  803cb0:	1080201c 	xori	r2,r2,128
  803cb4:	10bfe004 	addi	r2,r2,-128
  803cb8:	10000826 	beq	r2,zero,803cdc <logic+0x3a4c>
  803cbc:	e0bffc17 	ldw	r2,-16(fp)
  803cc0:	10806203 	ldbu	r2,392(r2)
  803cc4:	10803fcc 	andi	r2,r2,255
  803cc8:	1080201c 	xori	r2,r2,128
  803ccc:	10bfe004 	addi	r2,r2,-128
  803cd0:	1000021e 	bne	r2,zero,803cdc <logic+0x3a4c>
  803cd4:	00800044 	movi	r2,1
  803cd8:	00000106 	br	803ce0 <logic+0x3a50>
  803cdc:	0005883a 	mov	r2,zero
  803ce0:	1007883a 	mov	r3,r2
  803ce4:	e0bffc17 	ldw	r2,-16(fp)
  803ce8:	10c06a45 	stb	r3,425(r2)
  d->_cg116 = d->uri_active == 0;
  803cec:	e0bffc17 	ldw	r2,-16(fp)
  803cf0:	10800003 	ldbu	r2,0(r2)
  803cf4:	10803fcc 	andi	r2,r2,255
  803cf8:	1080201c 	xori	r2,r2,128
  803cfc:	10bfe004 	addi	r2,r2,-128
  803d00:	1005003a 	cmpeq	r2,r2,zero
  803d04:	1007883a 	mov	r3,r2
  803d08:	e0bffc17 	ldw	r2,-16(fp)
  803d0c:	10c061c5 	stb	r3,391(r2)
  d->_g159_e1 = d->_g168_e2 && d->_cg116;
  803d10:	e0bffc17 	ldw	r2,-16(fp)
  803d14:	10806a43 	ldbu	r2,425(r2)
  803d18:	10803fcc 	andi	r2,r2,255
  803d1c:	1080201c 	xori	r2,r2,128
  803d20:	10bfe004 	addi	r2,r2,-128
  803d24:	10000826 	beq	r2,zero,803d48 <logic+0x3ab8>
  803d28:	e0bffc17 	ldw	r2,-16(fp)
  803d2c:	108061c3 	ldbu	r2,391(r2)
  803d30:	10803fcc 	andi	r2,r2,255
  803d34:	1080201c 	xori	r2,r2,128
  803d38:	10bfe004 	addi	r2,r2,-128
  803d3c:	10000226 	beq	r2,zero,803d48 <logic+0x3ab8>
  803d40:	00800044 	movi	r2,1
  803d44:	00000106 	br	803d4c <logic+0x3abc>
  803d48:	0005883a 	mov	r2,zero
  803d4c:	1007883a 	mov	r3,r2
  803d50:	e0bffc17 	ldw	r2,-16(fp)
  803d54:	10c06a05 	stb	r3,424(r2)
  if (d->_g159_e1) {
  803d58:	e0bffc17 	ldw	r2,-16(fp)
  803d5c:	10806a03 	ldbu	r2,424(r2)
  803d60:	10803fcc 	andi	r2,r2,255
  803d64:	1080201c 	xori	r2,r2,128
  803d68:	10bfe004 	addi	r2,r2,-128
  803d6c:	10000b26 	beq	r2,zero,803d9c <logic+0x3b0c>
    d->VP |= 1;
  803d70:	e0bffc17 	ldw	r2,-16(fp)
  803d74:	108031c3 	ldbu	r2,199(r2)
  803d78:	10800054 	ori	r2,r2,1
  803d7c:	1007883a 	mov	r3,r2
  803d80:	e0bffc17 	ldw	r2,-16(fp)
  803d84:	10c031c5 	stb	r3,199(r2)
    d->_taken_transitions[18] += 1;
  803d88:	e0bffc17 	ldw	r2,-16(fp)
  803d8c:	10801917 	ldw	r2,100(r2)
  803d90:	10c00044 	addi	r3,r2,1
  803d94:	e0bffc17 	ldw	r2,-16(fp)
  803d98:	10c01915 	stw	r3,100(r2)
  }
  d->_g159 = d->_GO || d->_g106 || d->_g97 || d->_g159_e1 || d->_g87 && !d->_cg92;
  803d9c:	e0bffc17 	ldw	r2,-16(fp)
  803da0:	10805803 	ldbu	r2,352(r2)
  803da4:	10803fcc 	andi	r2,r2,255
  803da8:	1080201c 	xori	r2,r2,128
  803dac:	10bfe004 	addi	r2,r2,-128
  803db0:	10001e1e 	bne	r2,zero,803e2c <logic+0x3b9c>
  803db4:	e0bffc17 	ldw	r2,-16(fp)
  803db8:	10804a03 	ldbu	r2,296(r2)
  803dbc:	10803fcc 	andi	r2,r2,255
  803dc0:	1080201c 	xori	r2,r2,128
  803dc4:	10bfe004 	addi	r2,r2,-128
  803dc8:	1000181e 	bne	r2,zero,803e2c <logic+0x3b9c>
  803dcc:	e0bffc17 	ldw	r2,-16(fp)
  803dd0:	10804843 	ldbu	r2,289(r2)
  803dd4:	10803fcc 	andi	r2,r2,255
  803dd8:	1080201c 	xori	r2,r2,128
  803ddc:	10bfe004 	addi	r2,r2,-128
  803de0:	1000121e 	bne	r2,zero,803e2c <logic+0x3b9c>
  803de4:	e0bffc17 	ldw	r2,-16(fp)
  803de8:	10806a03 	ldbu	r2,424(r2)
  803dec:	10803fcc 	andi	r2,r2,255
  803df0:	1080201c 	xori	r2,r2,128
  803df4:	10bfe004 	addi	r2,r2,-128
  803df8:	10000c1e 	bne	r2,zero,803e2c <logic+0x3b9c>
  803dfc:	e0bffc17 	ldw	r2,-16(fp)
  803e00:	108046c3 	ldbu	r2,283(r2)
  803e04:	10803fcc 	andi	r2,r2,255
  803e08:	1080201c 	xori	r2,r2,128
  803e0c:	10bfe004 	addi	r2,r2,-128
  803e10:	10000826 	beq	r2,zero,803e34 <logic+0x3ba4>
  803e14:	e0bffc17 	ldw	r2,-16(fp)
  803e18:	10806003 	ldbu	r2,384(r2)
  803e1c:	10803fcc 	andi	r2,r2,255
  803e20:	1080201c 	xori	r2,r2,128
  803e24:	10bfe004 	addi	r2,r2,-128
  803e28:	1000021e 	bne	r2,zero,803e34 <logic+0x3ba4>
  803e2c:	00800044 	movi	r2,1
  803e30:	00000106 	br	803e38 <logic+0x3ba8>
  803e34:	0005883a 	mov	r2,zero
  803e38:	1007883a 	mov	r3,r2
  803e3c:	e0bffc17 	ldw	r2,-16(fp)
  803e40:	10c053c5 	stb	r3,335(r2)
  d->_g114 = d->_g109 && !d->_cg110;
  803e44:	e0bffc17 	ldw	r2,-16(fp)
  803e48:	10804ac3 	ldbu	r2,299(r2)
  803e4c:	10803fcc 	andi	r2,r2,255
  803e50:	1080201c 	xori	r2,r2,128
  803e54:	10bfe004 	addi	r2,r2,-128
  803e58:	10000826 	beq	r2,zero,803e7c <logic+0x3bec>
  803e5c:	e0bffc17 	ldw	r2,-16(fp)
  803e60:	10806183 	ldbu	r2,390(r2)
  803e64:	10803fcc 	andi	r2,r2,255
  803e68:	1080201c 	xori	r2,r2,128
  803e6c:	10bfe004 	addi	r2,r2,-128
  803e70:	1000021e 	bne	r2,zero,803e7c <logic+0x3bec>
  803e74:	00800044 	movi	r2,1
  803e78:	00000106 	br	803e80 <logic+0x3bf0>
  803e7c:	0005883a 	mov	r2,zero
  803e80:	1007883a 	mov	r3,r2
  803e84:	e0bffc17 	ldw	r2,-16(fp)
  803e88:	10c04bc5 	stb	r3,303(r2)
  if (d->_g114) {
  803e8c:	e0bffc17 	ldw	r2,-16(fp)
  803e90:	10804bc3 	ldbu	r2,303(r2)
  803e94:	10803fcc 	andi	r2,r2,255
  803e98:	1080201c 	xori	r2,r2,128
  803e9c:	10bfe004 	addi	r2,r2,-128
  803ea0:	10000526 	beq	r2,zero,803eb8 <logic+0x3c28>
    d->_taken_transitions[16] += 1;
  803ea4:	e0bffc17 	ldw	r2,-16(fp)
  803ea8:	10801717 	ldw	r2,92(r2)
  803eac:	10c00044 	addi	r3,r2,1
  803eb0:	e0bffc17 	ldw	r2,-16(fp)
  803eb4:	10c01715 	stw	r3,92(r2)
  }
  d->_g111 = d->_g114 || d->_g168_e2 && !d->_cg116;
  803eb8:	e0bffc17 	ldw	r2,-16(fp)
  803ebc:	10804bc3 	ldbu	r2,303(r2)
  803ec0:	10803fcc 	andi	r2,r2,255
  803ec4:	1080201c 	xori	r2,r2,128
  803ec8:	10bfe004 	addi	r2,r2,-128
  803ecc:	10000c1e 	bne	r2,zero,803f00 <logic+0x3c70>
  803ed0:	e0bffc17 	ldw	r2,-16(fp)
  803ed4:	10806a43 	ldbu	r2,425(r2)
  803ed8:	10803fcc 	andi	r2,r2,255
  803edc:	1080201c 	xori	r2,r2,128
  803ee0:	10bfe004 	addi	r2,r2,-128
  803ee4:	10000826 	beq	r2,zero,803f08 <logic+0x3c78>
  803ee8:	e0bffc17 	ldw	r2,-16(fp)
  803eec:	108061c3 	ldbu	r2,391(r2)
  803ef0:	10803fcc 	andi	r2,r2,255
  803ef4:	1080201c 	xori	r2,r2,128
  803ef8:	10bfe004 	addi	r2,r2,-128
  803efc:	1000021e 	bne	r2,zero,803f08 <logic+0x3c78>
  803f00:	00800044 	movi	r2,1
  803f04:	00000106 	br	803f0c <logic+0x3c7c>
  803f08:	0005883a 	mov	r2,zero
  803f0c:	1007883a 	mov	r3,r2
  803f10:	e0bffc17 	ldw	r2,-16(fp)
  803f14:	10c04b45 	stb	r3,301(r2)
  d->_g92 = d->_pg160;
  803f18:	e0bffc17 	ldw	r2,-16(fp)
  803f1c:	10c07203 	ldbu	r3,456(r2)
  803f20:	e0bffc17 	ldw	r2,-16(fp)
  803f24:	10c04745 	stb	r3,285(r2)
  if (d->_g92) {
  803f28:	e0bffc17 	ldw	r2,-16(fp)
  803f2c:	10804743 	ldbu	r2,285(r2)
  803f30:	10803fcc 	andi	r2,r2,255
  803f34:	1080201c 	xori	r2,r2,128
  803f38:	10bfe004 	addi	r2,r2,-128
  803f3c:	10001226 	beq	r2,zero,803f88 <logic+0x3cf8>
    d->_region4_LRI_t += d->deltaT;
  803f40:	e13ffc17 	ldw	r4,-16(fp)
  803f44:	20802917 	ldw	r2,164(r4)
  803f48:	20c02a17 	ldw	r3,168(r4)
  803f4c:	e1bffc17 	ldw	r6,-16(fp)
  803f50:	31002d17 	ldw	r4,180(r6)
  803f54:	31402e17 	ldw	r5,184(r6)
  803f58:	200d883a 	mov	r6,r4
  803f5c:	280f883a 	mov	r7,r5
  803f60:	1009883a 	mov	r4,r2
  803f64:	180b883a 	mov	r5,r3
  803f68:	0805c5c0 	call	805c5c <__adddf3>
  803f6c:	1009883a 	mov	r4,r2
  803f70:	180b883a 	mov	r5,r3
  803f74:	2005883a 	mov	r2,r4
  803f78:	2807883a 	mov	r3,r5
  803f7c:	e13ffc17 	ldw	r4,-16(fp)
  803f80:	20802915 	stw	r2,164(r4)
  803f84:	20c02a15 	stw	r3,168(r4)
  }
  d->_g117 = d->_pg126;
  803f88:	e0bffc17 	ldw	r2,-16(fp)
  803f8c:	10c07243 	ldbu	r3,457(r2)
  803f90:	e0bffc17 	ldw	r2,-16(fp)
  803f94:	10c04c85 	stb	r3,306(r2)
  d->_g115 = d->_pg140;
  803f98:	e0bffc17 	ldw	r2,-16(fp)
  803f9c:	10c07283 	ldbu	r3,458(r2)
  803fa0:	e0bffc17 	ldw	r2,-16(fp)
  803fa4:	10c04c05 	stb	r3,304(r2)
  d->_g110 = !(d->_g117 || d->_g115);
  803fa8:	e0bffc17 	ldw	r2,-16(fp)
  803fac:	10804c83 	ldbu	r2,306(r2)
  803fb0:	10803fcc 	andi	r2,r2,255
  803fb4:	1080201c 	xori	r2,r2,128
  803fb8:	10bfe004 	addi	r2,r2,-128
  803fbc:	1000081e 	bne	r2,zero,803fe0 <logic+0x3d50>
  803fc0:	e0bffc17 	ldw	r2,-16(fp)
  803fc4:	10804c03 	ldbu	r2,304(r2)
  803fc8:	10803fcc 	andi	r2,r2,255
  803fcc:	1080201c 	xori	r2,r2,128
  803fd0:	10bfe004 	addi	r2,r2,-128
  803fd4:	1000021e 	bne	r2,zero,803fe0 <logic+0x3d50>
  803fd8:	00800044 	movi	r2,1
  803fdc:	00000106 	br	803fe4 <logic+0x3d54>
  803fe0:	0005883a 	mov	r2,zero
  803fe4:	1007883a 	mov	r3,r2
  803fe8:	e0bffc17 	ldw	r2,-16(fp)
  803fec:	10c04b05 	stb	r3,300(r2)
  d->_g112 = d->_pg131;
  803ff0:	e0bffc17 	ldw	r2,-16(fp)
  803ff4:	10c072c3 	ldbu	r3,459(r2)
  803ff8:	e0bffc17 	ldw	r2,-16(fp)
  803ffc:	10c04b85 	stb	r3,302(r2)
  d->_cg134 = d->V_EVT;
  804000:	e0bffc17 	ldw	r2,-16(fp)
  804004:	10c03243 	ldbu	r3,201(r2)
  804008:	e0bffc17 	ldw	r2,-16(fp)
  80400c:	10c06405 	stb	r3,400(r2)
  d->_g116 = d->_g112 && d->_cg134;
  804010:	e0bffc17 	ldw	r2,-16(fp)
  804014:	10804b83 	ldbu	r2,302(r2)
  804018:	10803fcc 	andi	r2,r2,255
  80401c:	1080201c 	xori	r2,r2,128
  804020:	10bfe004 	addi	r2,r2,-128
  804024:	10000826 	beq	r2,zero,804048 <logic+0x3db8>
  804028:	e0bffc17 	ldw	r2,-16(fp)
  80402c:	10806403 	ldbu	r2,400(r2)
  804030:	10803fcc 	andi	r2,r2,255
  804034:	1080201c 	xori	r2,r2,128
  804038:	10bfe004 	addi	r2,r2,-128
  80403c:	10000226 	beq	r2,zero,804048 <logic+0x3db8>
  804040:	00800044 	movi	r2,1
  804044:	00000106 	br	80404c <logic+0x3dbc>
  804048:	0005883a 	mov	r2,zero
  80404c:	1007883a 	mov	r3,r2
  804050:	e0bffc17 	ldw	r2,-16(fp)
  804054:	10c04c45 	stb	r3,305(r2)
  if (d->_g116) {
  804058:	e0bffc17 	ldw	r2,-16(fp)
  80405c:	10804c43 	ldbu	r2,305(r2)
  804060:	10803fcc 	andi	r2,r2,255
  804064:	1080201c 	xori	r2,r2,128
  804068:	10bfe004 	addi	r2,r2,-128
  80406c:	10000326 	beq	r2,zero,80407c <logic+0x3dec>
    d->_Pacemaker_local__Atrig8 = 1;
  804070:	e0bffc17 	ldw	r2,-16(fp)
  804074:	00c00044 	movi	r3,1
  804078:	10c03605 	stb	r3,216(r2)
  }
  d->_g137 = d->_g112 && !d->_cg134;
  80407c:	e0bffc17 	ldw	r2,-16(fp)
  804080:	10804b83 	ldbu	r2,302(r2)
  804084:	10803fcc 	andi	r2,r2,255
  804088:	1080201c 	xori	r2,r2,128
  80408c:	10bfe004 	addi	r2,r2,-128
  804090:	10000826 	beq	r2,zero,8040b4 <logic+0x3e24>
  804094:	e0bffc17 	ldw	r2,-16(fp)
  804098:	10806403 	ldbu	r2,400(r2)
  80409c:	10803fcc 	andi	r2,r2,255
  8040a0:	1080201c 	xori	r2,r2,128
  8040a4:	10bfe004 	addi	r2,r2,-128
  8040a8:	1000021e 	bne	r2,zero,8040b4 <logic+0x3e24>
  8040ac:	00800044 	movi	r2,1
  8040b0:	00000106 	br	8040b8 <logic+0x3e28>
  8040b4:	0005883a 	mov	r2,zero
  8040b8:	1007883a 	mov	r3,r2
  8040bc:	e0bffc17 	ldw	r2,-16(fp)
  8040c0:	10c04fc5 	stb	r3,319(r2)
  d->_cg137 = d->_region4_LRI_t >= d->T_LRI;
  8040c4:	e0bffc17 	ldw	r2,-16(fp)
  8040c8:	14002917 	ldw	r16,164(r2)
  8040cc:	14402a17 	ldw	r17,168(r2)
  8040d0:	e0bffc17 	ldw	r2,-16(fp)
  8040d4:	10800517 	ldw	r2,20(r2)
  8040d8:	1009883a 	mov	r4,r2
  8040dc:	0806fd40 	call	806fd4 <__floatsidf>
  8040e0:	1009883a 	mov	r4,r2
  8040e4:	180b883a 	mov	r5,r3
  8040e8:	04800044 	movi	r18,1
  8040ec:	200d883a 	mov	r6,r4
  8040f0:	280f883a 	mov	r7,r5
  8040f4:	8009883a 	mov	r4,r16
  8040f8:	880b883a 	mov	r5,r17
  8040fc:	08065080 	call	806508 <__gedf2>
  804100:	1000010e 	bge	r2,zero,804108 <logic+0x3e78>
  804104:	0025883a 	mov	r18,zero
  804108:	9007883a 	mov	r3,r18
  80410c:	e0bffc17 	ldw	r2,-16(fp)
  804110:	10c063c5 	stb	r3,399(r2)
  d->_g138 = d->_g137 && d->_cg137;
  804114:	e0bffc17 	ldw	r2,-16(fp)
  804118:	10804fc3 	ldbu	r2,319(r2)
  80411c:	10803fcc 	andi	r2,r2,255
  804120:	1080201c 	xori	r2,r2,128
  804124:	10bfe004 	addi	r2,r2,-128
  804128:	10000826 	beq	r2,zero,80414c <logic+0x3ebc>
  80412c:	e0bffc17 	ldw	r2,-16(fp)
  804130:	108063c3 	ldbu	r2,399(r2)
  804134:	10803fcc 	andi	r2,r2,255
  804138:	1080201c 	xori	r2,r2,128
  80413c:	10bfe004 	addi	r2,r2,-128
  804140:	10000226 	beq	r2,zero,80414c <logic+0x3ebc>
  804144:	00800044 	movi	r2,1
  804148:	00000106 	br	804150 <logic+0x3ec0>
  80414c:	0005883a 	mov	r2,zero
  804150:	1007883a 	mov	r3,r2
  804154:	e0bffc17 	ldw	r2,-16(fp)
  804158:	10c05005 	stb	r3,320(r2)
  if (d->_g138) {
  80415c:	e0bffc17 	ldw	r2,-16(fp)
  804160:	10805003 	ldbu	r2,320(r2)
  804164:	10803fcc 	andi	r2,r2,255
  804168:	1080201c 	xori	r2,r2,128
  80416c:	10bfe004 	addi	r2,r2,-128
  804170:	10000326 	beq	r2,zero,804180 <logic+0x3ef0>
    d->_Pacemaker_local__Atrig9 = 1;
  804174:	e0bffc17 	ldw	r2,-16(fp)
  804178:	00c00044 	movi	r3,1
  80417c:	10c03645 	stb	r3,217(r2)
  }
  d->_g130 = d->_g115 || d->_g117;
  804180:	e0bffc17 	ldw	r2,-16(fp)
  804184:	10804c03 	ldbu	r2,304(r2)
  804188:	10803fcc 	andi	r2,r2,255
  80418c:	1080201c 	xori	r2,r2,128
  804190:	10bfe004 	addi	r2,r2,-128
  804194:	1000061e 	bne	r2,zero,8041b0 <logic+0x3f20>
  804198:	e0bffc17 	ldw	r2,-16(fp)
  80419c:	10804c83 	ldbu	r2,306(r2)
  8041a0:	10803fcc 	andi	r2,r2,255
  8041a4:	1080201c 	xori	r2,r2,128
  8041a8:	10bfe004 	addi	r2,r2,-128
  8041ac:	10000226 	beq	r2,zero,8041b8 <logic+0x3f28>
  8041b0:	00800044 	movi	r2,1
  8041b4:	00000106 	br	8041bc <logic+0x3f2c>
  8041b8:	0005883a 	mov	r2,zero
  8041bc:	1007883a 	mov	r3,r2
  8041c0:	e0bffc17 	ldw	r2,-16(fp)
  8041c4:	10c04e85 	stb	r3,314(r2)
  d->_cg125 = d->_region4_LRI_t < d->T_LRI;
  8041c8:	e0bffc17 	ldw	r2,-16(fp)
  8041cc:	14002917 	ldw	r16,164(r2)
  8041d0:	14402a17 	ldw	r17,168(r2)
  8041d4:	e0bffc17 	ldw	r2,-16(fp)
  8041d8:	10800517 	ldw	r2,20(r2)
  8041dc:	1009883a 	mov	r4,r2
  8041e0:	0806fd40 	call	806fd4 <__floatsidf>
  8041e4:	1009883a 	mov	r4,r2
  8041e8:	180b883a 	mov	r5,r3
  8041ec:	04800044 	movi	r18,1
  8041f0:	200d883a 	mov	r6,r4
  8041f4:	280f883a 	mov	r7,r5
  8041f8:	8009883a 	mov	r4,r16
  8041fc:	880b883a 	mov	r5,r17
  804200:	08065e40 	call	8065e4 <__ledf2>
  804204:	10000116 	blt	r2,zero,80420c <logic+0x3f7c>
  804208:	0025883a 	mov	r18,zero
  80420c:	9007883a 	mov	r3,r18
  804210:	e0bffc17 	ldw	r2,-16(fp)
  804214:	10c06305 	stb	r3,396(r2)
  d->_g124 = d->_g130 && d->_cg125;
  804218:	e0bffc17 	ldw	r2,-16(fp)
  80421c:	10804e83 	ldbu	r2,314(r2)
  804220:	10803fcc 	andi	r2,r2,255
  804224:	1080201c 	xori	r2,r2,128
  804228:	10bfe004 	addi	r2,r2,-128
  80422c:	10000826 	beq	r2,zero,804250 <logic+0x3fc0>
  804230:	e0bffc17 	ldw	r2,-16(fp)
  804234:	10806303 	ldbu	r2,396(r2)
  804238:	10803fcc 	andi	r2,r2,255
  80423c:	1080201c 	xori	r2,r2,128
  804240:	10bfe004 	addi	r2,r2,-128
  804244:	10000226 	beq	r2,zero,804250 <logic+0x3fc0>
  804248:	00800044 	movi	r2,1
  80424c:	00000106 	br	804254 <logic+0x3fc4>
  804250:	0005883a 	mov	r2,zero
  804254:	1007883a 	mov	r3,r2
  804258:	e0bffc17 	ldw	r2,-16(fp)
  80425c:	10c04d45 	stb	r3,309(r2)
  if (d->_g124) {
  804260:	e0bffc17 	ldw	r2,-16(fp)
  804264:	10804d43 	ldbu	r2,309(r2)
  804268:	10803fcc 	andi	r2,r2,255
  80426c:	1080201c 	xori	r2,r2,128
  804270:	10bfe004 	addi	r2,r2,-128
  804274:	10003426 	beq	r2,zero,804348 <logic+0x40b8>
    d->sleepT = (d->sleepT < (d->T_LRI - d->_region4_LRI_t)) ? d->sleepT : (d->T_LRI - d->_region4_LRI_t);
  804278:	e0bffc17 	ldw	r2,-16(fp)
  80427c:	14002f17 	ldw	r16,188(r2)
  804280:	14403017 	ldw	r17,192(r2)
  804284:	e0bffc17 	ldw	r2,-16(fp)
  804288:	10800517 	ldw	r2,20(r2)
  80428c:	1009883a 	mov	r4,r2
  804290:	0806fd40 	call	806fd4 <__floatsidf>
  804294:	1011883a 	mov	r8,r2
  804298:	1813883a 	mov	r9,r3
  80429c:	e13ffc17 	ldw	r4,-16(fp)
  8042a0:	20802917 	ldw	r2,164(r4)
  8042a4:	20c02a17 	ldw	r3,168(r4)
  8042a8:	100d883a 	mov	r6,r2
  8042ac:	180f883a 	mov	r7,r3
  8042b0:	4009883a 	mov	r4,r8
  8042b4:	480b883a 	mov	r5,r9
  8042b8:	08066d80 	call	8066d8 <__subdf3>
  8042bc:	1009883a 	mov	r4,r2
  8042c0:	180b883a 	mov	r5,r3
  8042c4:	2005883a 	mov	r2,r4
  8042c8:	2807883a 	mov	r3,r5
  8042cc:	100d883a 	mov	r6,r2
  8042d0:	180f883a 	mov	r7,r3
  8042d4:	8009883a 	mov	r4,r16
  8042d8:	880b883a 	mov	r5,r17
  8042dc:	08065e40 	call	8065e4 <__ledf2>
  8042e0:	1000040e 	bge	r2,zero,8042f4 <logic+0x4064>
  8042e4:	e13ffc17 	ldw	r4,-16(fp)
  8042e8:	20802f17 	ldw	r2,188(r4)
  8042ec:	20c03017 	ldw	r3,192(r4)
  8042f0:	00001206 	br	80433c <logic+0x40ac>
  8042f4:	e0bffc17 	ldw	r2,-16(fp)
  8042f8:	10800517 	ldw	r2,20(r2)
  8042fc:	1009883a 	mov	r4,r2
  804300:	0806fd40 	call	806fd4 <__floatsidf>
  804304:	1011883a 	mov	r8,r2
  804308:	1813883a 	mov	r9,r3
  80430c:	e13ffc17 	ldw	r4,-16(fp)
  804310:	20802917 	ldw	r2,164(r4)
  804314:	20c02a17 	ldw	r3,168(r4)
  804318:	100d883a 	mov	r6,r2
  80431c:	180f883a 	mov	r7,r3
  804320:	4009883a 	mov	r4,r8
  804324:	480b883a 	mov	r5,r9
  804328:	08066d80 	call	8066d8 <__subdf3>
  80432c:	1009883a 	mov	r4,r2
  804330:	180b883a 	mov	r5,r3
  804334:	2005883a 	mov	r2,r4
  804338:	2807883a 	mov	r3,r5
  80433c:	e13ffc17 	ldw	r4,-16(fp)
  804340:	20802f15 	stw	r2,188(r4)
  804344:	20c03015 	stw	r3,192(r4)
  }
  d->_cg126 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9;
  804348:	e0bffc17 	ldw	r2,-16(fp)
  80434c:	10803603 	ldbu	r2,216(r2)
  804350:	10803fcc 	andi	r2,r2,255
  804354:	1080201c 	xori	r2,r2,128
  804358:	10bfe004 	addi	r2,r2,-128
  80435c:	1000061e 	bne	r2,zero,804378 <logic+0x40e8>
  804360:	e0bffc17 	ldw	r2,-16(fp)
  804364:	10803643 	ldbu	r2,217(r2)
  804368:	10803fcc 	andi	r2,r2,255
  80436c:	1080201c 	xori	r2,r2,128
  804370:	10bfe004 	addi	r2,r2,-128
  804374:	10000226 	beq	r2,zero,804380 <logic+0x40f0>
  804378:	00800044 	movi	r2,1
  80437c:	00000106 	br	804384 <logic+0x40f4>
  804380:	0005883a 	mov	r2,zero
  804384:	1007883a 	mov	r3,r2
  804388:	e0bffc17 	ldw	r2,-16(fp)
  80438c:	10c062c5 	stb	r3,395(r2)
  d->_g125 = d->_g130 && !d->_cg125;
  804390:	e0bffc17 	ldw	r2,-16(fp)
  804394:	10804e83 	ldbu	r2,314(r2)
  804398:	10803fcc 	andi	r2,r2,255
  80439c:	1080201c 	xori	r2,r2,128
  8043a0:	10bfe004 	addi	r2,r2,-128
  8043a4:	10000826 	beq	r2,zero,8043c8 <logic+0x4138>
  8043a8:	e0bffc17 	ldw	r2,-16(fp)
  8043ac:	10806303 	ldbu	r2,396(r2)
  8043b0:	10803fcc 	andi	r2,r2,255
  8043b4:	1080201c 	xori	r2,r2,128
  8043b8:	10bfe004 	addi	r2,r2,-128
  8043bc:	1000021e 	bne	r2,zero,8043c8 <logic+0x4138>
  8043c0:	00800044 	movi	r2,1
  8043c4:	00000106 	br	8043cc <logic+0x413c>
  8043c8:	0005883a 	mov	r2,zero
  8043cc:	1007883a 	mov	r3,r2
  8043d0:	e0bffc17 	ldw	r2,-16(fp)
  8043d4:	10c04d85 	stb	r3,310(r2)
  d->_cg128 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9;
  8043d8:	e0bffc17 	ldw	r2,-16(fp)
  8043dc:	10803603 	ldbu	r2,216(r2)
  8043e0:	10803fcc 	andi	r2,r2,255
  8043e4:	1080201c 	xori	r2,r2,128
  8043e8:	10bfe004 	addi	r2,r2,-128
  8043ec:	1000061e 	bne	r2,zero,804408 <logic+0x4178>
  8043f0:	e0bffc17 	ldw	r2,-16(fp)
  8043f4:	10803643 	ldbu	r2,217(r2)
  8043f8:	10803fcc 	andi	r2,r2,255
  8043fc:	1080201c 	xori	r2,r2,128
  804400:	10bfe004 	addi	r2,r2,-128
  804404:	10000226 	beq	r2,zero,804410 <logic+0x4180>
  804408:	00800044 	movi	r2,1
  80440c:	00000106 	br	804414 <logic+0x4184>
  804410:	0005883a 	mov	r2,zero
  804414:	1007883a 	mov	r3,r2
  804418:	e0bffc17 	ldw	r2,-16(fp)
  80441c:	10c06345 	stb	r3,397(r2)
  d->_g127 = d->_g124 && d->_cg126 || d->_g125 && d->_cg128;
  804420:	e0bffc17 	ldw	r2,-16(fp)
  804424:	10804d43 	ldbu	r2,309(r2)
  804428:	10803fcc 	andi	r2,r2,255
  80442c:	1080201c 	xori	r2,r2,128
  804430:	10bfe004 	addi	r2,r2,-128
  804434:	10000626 	beq	r2,zero,804450 <logic+0x41c0>
  804438:	e0bffc17 	ldw	r2,-16(fp)
  80443c:	108062c3 	ldbu	r2,395(r2)
  804440:	10803fcc 	andi	r2,r2,255
  804444:	1080201c 	xori	r2,r2,128
  804448:	10bfe004 	addi	r2,r2,-128
  80444c:	10000c1e 	bne	r2,zero,804480 <logic+0x41f0>
  804450:	e0bffc17 	ldw	r2,-16(fp)
  804454:	10804d83 	ldbu	r2,310(r2)
  804458:	10803fcc 	andi	r2,r2,255
  80445c:	1080201c 	xori	r2,r2,128
  804460:	10bfe004 	addi	r2,r2,-128
  804464:	10000826 	beq	r2,zero,804488 <logic+0x41f8>
  804468:	e0bffc17 	ldw	r2,-16(fp)
  80446c:	10806343 	ldbu	r2,397(r2)
  804470:	10803fcc 	andi	r2,r2,255
  804474:	1080201c 	xori	r2,r2,128
  804478:	10bfe004 	addi	r2,r2,-128
  80447c:	10000226 	beq	r2,zero,804488 <logic+0x41f8>
  804480:	00800044 	movi	r2,1
  804484:	00000106 	br	80448c <logic+0x41fc>
  804488:	0005883a 	mov	r2,zero
  80448c:	1007883a 	mov	r3,r2
  804490:	e0bffc17 	ldw	r2,-16(fp)
  804494:	10c04e05 	stb	r3,312(r2)
  d->_g134 = !d->_g112;
  804498:	e0bffc17 	ldw	r2,-16(fp)
  80449c:	10804b83 	ldbu	r2,302(r2)
  8044a0:	10803fcc 	andi	r2,r2,255
  8044a4:	1080201c 	xori	r2,r2,128
  8044a8:	10bfe004 	addi	r2,r2,-128
  8044ac:	1005003a 	cmpeq	r2,r2,zero
  8044b0:	1007883a 	mov	r3,r2
  8044b4:	e0bffc17 	ldw	r2,-16(fp)
  8044b8:	10c04f05 	stb	r3,316(r2)
  d->_g138 = d->_g116 || d->_g138;
  8044bc:	e0bffc17 	ldw	r2,-16(fp)
  8044c0:	10804c43 	ldbu	r2,305(r2)
  8044c4:	10803fcc 	andi	r2,r2,255
  8044c8:	1080201c 	xori	r2,r2,128
  8044cc:	10bfe004 	addi	r2,r2,-128
  8044d0:	1000061e 	bne	r2,zero,8044ec <logic+0x425c>
  8044d4:	e0bffc17 	ldw	r2,-16(fp)
  8044d8:	10805003 	ldbu	r2,320(r2)
  8044dc:	10803fcc 	andi	r2,r2,255
  8044e0:	1080201c 	xori	r2,r2,128
  8044e4:	10bfe004 	addi	r2,r2,-128
  8044e8:	10000226 	beq	r2,zero,8044f4 <logic+0x4264>
  8044ec:	00800044 	movi	r2,1
  8044f0:	00000106 	br	8044f8 <logic+0x4268>
  8044f4:	0005883a 	mov	r2,zero
  8044f8:	1007883a 	mov	r3,r2
  8044fc:	e0bffc17 	ldw	r2,-16(fp)
  804500:	10c05005 	stb	r3,320(r2)
  d->_g135 = (d->_g110 || d->_g127) && (d->_g134 || d->_g138) && (d->_g127 || d->_g138);
  804504:	e0bffc17 	ldw	r2,-16(fp)
  804508:	10804b03 	ldbu	r2,300(r2)
  80450c:	10803fcc 	andi	r2,r2,255
  804510:	1080201c 	xori	r2,r2,128
  804514:	10bfe004 	addi	r2,r2,-128
  804518:	1000061e 	bne	r2,zero,804534 <logic+0x42a4>
  80451c:	e0bffc17 	ldw	r2,-16(fp)
  804520:	10804e03 	ldbu	r2,312(r2)
  804524:	10803fcc 	andi	r2,r2,255
  804528:	1080201c 	xori	r2,r2,128
  80452c:	10bfe004 	addi	r2,r2,-128
  804530:	10001a26 	beq	r2,zero,80459c <logic+0x430c>
  804534:	e0bffc17 	ldw	r2,-16(fp)
  804538:	10804f03 	ldbu	r2,316(r2)
  80453c:	10803fcc 	andi	r2,r2,255
  804540:	1080201c 	xori	r2,r2,128
  804544:	10bfe004 	addi	r2,r2,-128
  804548:	1000061e 	bne	r2,zero,804564 <logic+0x42d4>
  80454c:	e0bffc17 	ldw	r2,-16(fp)
  804550:	10805003 	ldbu	r2,320(r2)
  804554:	10803fcc 	andi	r2,r2,255
  804558:	1080201c 	xori	r2,r2,128
  80455c:	10bfe004 	addi	r2,r2,-128
  804560:	10000e26 	beq	r2,zero,80459c <logic+0x430c>
  804564:	e0bffc17 	ldw	r2,-16(fp)
  804568:	10804e03 	ldbu	r2,312(r2)
  80456c:	10803fcc 	andi	r2,r2,255
  804570:	1080201c 	xori	r2,r2,128
  804574:	10bfe004 	addi	r2,r2,-128
  804578:	1000061e 	bne	r2,zero,804594 <logic+0x4304>
  80457c:	e0bffc17 	ldw	r2,-16(fp)
  804580:	10805003 	ldbu	r2,320(r2)
  804584:	10803fcc 	andi	r2,r2,255
  804588:	1080201c 	xori	r2,r2,128
  80458c:	10bfe004 	addi	r2,r2,-128
  804590:	10000226 	beq	r2,zero,80459c <logic+0x430c>
  804594:	00800044 	movi	r2,1
  804598:	00000106 	br	8045a0 <logic+0x4310>
  80459c:	0005883a 	mov	r2,zero
  8045a0:	1007883a 	mov	r3,r2
  8045a4:	e0bffc17 	ldw	r2,-16(fp)
  8045a8:	10c04f45 	stb	r3,317(r2)
  d->_cg139 = d->_Pacemaker_local__Atrig8;
  8045ac:	e0bffc17 	ldw	r2,-16(fp)
  8045b0:	10c03603 	ldbu	r3,216(r2)
  8045b4:	e0bffc17 	ldw	r2,-16(fp)
  8045b8:	10c06445 	stb	r3,401(r2)
  d->_g127 = d->_g135 && d->_cg139;
  8045bc:	e0bffc17 	ldw	r2,-16(fp)
  8045c0:	10804f43 	ldbu	r2,317(r2)
  8045c4:	10803fcc 	andi	r2,r2,255
  8045c8:	1080201c 	xori	r2,r2,128
  8045cc:	10bfe004 	addi	r2,r2,-128
  8045d0:	10000826 	beq	r2,zero,8045f4 <logic+0x4364>
  8045d4:	e0bffc17 	ldw	r2,-16(fp)
  8045d8:	10806443 	ldbu	r2,401(r2)
  8045dc:	10803fcc 	andi	r2,r2,255
  8045e0:	1080201c 	xori	r2,r2,128
  8045e4:	10bfe004 	addi	r2,r2,-128
  8045e8:	10000226 	beq	r2,zero,8045f4 <logic+0x4364>
  8045ec:	00800044 	movi	r2,1
  8045f0:	00000106 	br	8045f8 <logic+0x4368>
  8045f4:	0005883a 	mov	r2,zero
  8045f8:	1007883a 	mov	r3,r2
  8045fc:	e0bffc17 	ldw	r2,-16(fp)
  804600:	10c04e05 	stb	r3,312(r2)
  if (d->_g127) {
  804604:	e0bffc17 	ldw	r2,-16(fp)
  804608:	10804e03 	ldbu	r2,312(r2)
  80460c:	10803fcc 	andi	r2,r2,255
  804610:	1080201c 	xori	r2,r2,128
  804614:	10bfe004 	addi	r2,r2,-128
  804618:	10000826 	beq	r2,zero,80463c <logic+0x43ac>
    d->_region4_LRI_t = 0;
  80461c:	e0bffc17 	ldw	r2,-16(fp)
  804620:	10002915 	stw	zero,164(r2)
  804624:	10002a15 	stw	zero,168(r2)
    d->_taken_transitions[19] += 1;
  804628:	e0bffc17 	ldw	r2,-16(fp)
  80462c:	10801a17 	ldw	r2,104(r2)
  804630:	10c00044 	addi	r3,r2,1
  804634:	e0bffc17 	ldw	r2,-16(fp)
  804638:	10c01a15 	stw	r3,104(r2)
  }
  d->_g127_e1 = d->_pg120;
  80463c:	e0bffc17 	ldw	r2,-16(fp)
  804640:	10c07303 	ldbu	r3,460(r2)
  804644:	e0bffc17 	ldw	r2,-16(fp)
  804648:	10c06985 	stb	r3,422(r2)
  d->_cg143 = d->V_EVT;
  80464c:	e0bffc17 	ldw	r2,-16(fp)
  804650:	10c03243 	ldbu	r3,201(r2)
  804654:	e0bffc17 	ldw	r2,-16(fp)
  804658:	10c064c5 	stb	r3,403(r2)
  d->_g136 = d->_g127_e1 && d->_cg143;
  80465c:	e0bffc17 	ldw	r2,-16(fp)
  804660:	10806983 	ldbu	r2,422(r2)
  804664:	10803fcc 	andi	r2,r2,255
  804668:	1080201c 	xori	r2,r2,128
  80466c:	10bfe004 	addi	r2,r2,-128
  804670:	10000826 	beq	r2,zero,804694 <logic+0x4404>
  804674:	e0bffc17 	ldw	r2,-16(fp)
  804678:	108064c3 	ldbu	r2,403(r2)
  80467c:	10803fcc 	andi	r2,r2,255
  804680:	1080201c 	xori	r2,r2,128
  804684:	10bfe004 	addi	r2,r2,-128
  804688:	10000226 	beq	r2,zero,804694 <logic+0x4404>
  80468c:	00800044 	movi	r2,1
  804690:	00000106 	br	804698 <logic+0x4408>
  804694:	0005883a 	mov	r2,zero
  804698:	1007883a 	mov	r3,r2
  80469c:	e0bffc17 	ldw	r2,-16(fp)
  8046a0:	10c04f85 	stb	r3,318(r2)
  if (d->_g136) {
  8046a4:	e0bffc17 	ldw	r2,-16(fp)
  8046a8:	10804f83 	ldbu	r2,318(r2)
  8046ac:	10803fcc 	andi	r2,r2,255
  8046b0:	1080201c 	xori	r2,r2,128
  8046b4:	10bfe004 	addi	r2,r2,-128
  8046b8:	10000526 	beq	r2,zero,8046d0 <logic+0x4440>
    d->_taken_transitions[21] += 1;
  8046bc:	e0bffc17 	ldw	r2,-16(fp)
  8046c0:	10801c17 	ldw	r2,112(r2)
  8046c4:	10c00044 	addi	r3,r2,1
  8046c8:	e0bffc17 	ldw	r2,-16(fp)
  8046cc:	10c01c15 	stw	r3,112(r2)
  }
  d->_g136_e2 = d->_g127_e1 && !d->_cg143;
  8046d0:	e0bffc17 	ldw	r2,-16(fp)
  8046d4:	10806983 	ldbu	r2,422(r2)
  8046d8:	10803fcc 	andi	r2,r2,255
  8046dc:	1080201c 	xori	r2,r2,128
  8046e0:	10bfe004 	addi	r2,r2,-128
  8046e4:	10000826 	beq	r2,zero,804708 <logic+0x4478>
  8046e8:	e0bffc17 	ldw	r2,-16(fp)
  8046ec:	108064c3 	ldbu	r2,403(r2)
  8046f0:	10803fcc 	andi	r2,r2,255
  8046f4:	1080201c 	xori	r2,r2,128
  8046f8:	10bfe004 	addi	r2,r2,-128
  8046fc:	1000021e 	bne	r2,zero,804708 <logic+0x4478>
  804700:	00800044 	movi	r2,1
  804704:	00000106 	br	80470c <logic+0x447c>
  804708:	0005883a 	mov	r2,zero
  80470c:	1007883a 	mov	r3,r2
  804710:	e0bffc17 	ldw	r2,-16(fp)
  804714:	10c069c5 	stb	r3,423(r2)
  d->_cg145 = d->uri_active == 0;
  804718:	e0bffc17 	ldw	r2,-16(fp)
  80471c:	10800003 	ldbu	r2,0(r2)
  804720:	10803fcc 	andi	r2,r2,255
  804724:	1080201c 	xori	r2,r2,128
  804728:	10bfe004 	addi	r2,r2,-128
  80472c:	1005003a 	cmpeq	r2,r2,zero
  804730:	1007883a 	mov	r3,r2
  804734:	e0bffc17 	ldw	r2,-16(fp)
  804738:	10c06485 	stb	r3,402(r2)
  d->_g143 = d->_g136_e2 && d->_cg145;
  80473c:	e0bffc17 	ldw	r2,-16(fp)
  804740:	108069c3 	ldbu	r2,423(r2)
  804744:	10803fcc 	andi	r2,r2,255
  804748:	1080201c 	xori	r2,r2,128
  80474c:	10bfe004 	addi	r2,r2,-128
  804750:	10000826 	beq	r2,zero,804774 <logic+0x44e4>
  804754:	e0bffc17 	ldw	r2,-16(fp)
  804758:	10806483 	ldbu	r2,402(r2)
  80475c:	10803fcc 	andi	r2,r2,255
  804760:	1080201c 	xori	r2,r2,128
  804764:	10bfe004 	addi	r2,r2,-128
  804768:	10000226 	beq	r2,zero,804774 <logic+0x44e4>
  80476c:	00800044 	movi	r2,1
  804770:	00000106 	br	804778 <logic+0x44e8>
  804774:	0005883a 	mov	r2,zero
  804778:	1007883a 	mov	r3,r2
  80477c:	e0bffc17 	ldw	r2,-16(fp)
  804780:	10c05105 	stb	r3,324(r2)
  if (d->_g143) {
  804784:	e0bffc17 	ldw	r2,-16(fp)
  804788:	10805103 	ldbu	r2,324(r2)
  80478c:	10803fcc 	andi	r2,r2,255
  804790:	1080201c 	xori	r2,r2,128
  804794:	10bfe004 	addi	r2,r2,-128
  804798:	10000e26 	beq	r2,zero,8047d4 <logic+0x4544>
    d->VP |= 1;
  80479c:	e0bffc17 	ldw	r2,-16(fp)
  8047a0:	108031c3 	ldbu	r2,199(r2)
  8047a4:	10800054 	ori	r2,r2,1
  8047a8:	1007883a 	mov	r3,r2
  8047ac:	e0bffc17 	ldw	r2,-16(fp)
  8047b0:	10c031c5 	stb	r3,199(r2)
    d->_region4_LRI_t = 0;
  8047b4:	e0bffc17 	ldw	r2,-16(fp)
  8047b8:	10002915 	stw	zero,164(r2)
  8047bc:	10002a15 	stw	zero,168(r2)
    d->_taken_transitions[22] += 1;
  8047c0:	e0bffc17 	ldw	r2,-16(fp)
  8047c4:	10801d17 	ldw	r2,116(r2)
  8047c8:	10c00044 	addi	r3,r2,1
  8047cc:	e0bffc17 	ldw	r2,-16(fp)
  8047d0:	10c01d15 	stw	r3,116(r2)
  }
  d->_g146 = d->_GO || d->_g127 || d->_g136 || d->_g143;
  8047d4:	e0bffc17 	ldw	r2,-16(fp)
  8047d8:	10805803 	ldbu	r2,352(r2)
  8047dc:	10803fcc 	andi	r2,r2,255
  8047e0:	1080201c 	xori	r2,r2,128
  8047e4:	10bfe004 	addi	r2,r2,-128
  8047e8:	1000121e 	bne	r2,zero,804834 <logic+0x45a4>
  8047ec:	e0bffc17 	ldw	r2,-16(fp)
  8047f0:	10804e03 	ldbu	r2,312(r2)
  8047f4:	10803fcc 	andi	r2,r2,255
  8047f8:	1080201c 	xori	r2,r2,128
  8047fc:	10bfe004 	addi	r2,r2,-128
  804800:	10000c1e 	bne	r2,zero,804834 <logic+0x45a4>
  804804:	e0bffc17 	ldw	r2,-16(fp)
  804808:	10804f83 	ldbu	r2,318(r2)
  80480c:	10803fcc 	andi	r2,r2,255
  804810:	1080201c 	xori	r2,r2,128
  804814:	10bfe004 	addi	r2,r2,-128
  804818:	1000061e 	bne	r2,zero,804834 <logic+0x45a4>
  80481c:	e0bffc17 	ldw	r2,-16(fp)
  804820:	10805103 	ldbu	r2,324(r2)
  804824:	10803fcc 	andi	r2,r2,255
  804828:	1080201c 	xori	r2,r2,128
  80482c:	10bfe004 	addi	r2,r2,-128
  804830:	10000226 	beq	r2,zero,80483c <logic+0x45ac>
  804834:	00800044 	movi	r2,1
  804838:	00000106 	br	804840 <logic+0x45b0>
  80483c:	0005883a 	mov	r2,zero
  804840:	1007883a 	mov	r3,r2
  804844:	e0bffc17 	ldw	r2,-16(fp)
  804848:	10c051c5 	stb	r3,327(r2)
  if (d->_g146) {
  80484c:	e0bffc17 	ldw	r2,-16(fp)
  804850:	108051c3 	ldbu	r2,327(r2)
  804854:	10803fcc 	andi	r2,r2,255
  804858:	1080201c 	xori	r2,r2,128
  80485c:	10bfe004 	addi	r2,r2,-128
  804860:	10000426 	beq	r2,zero,804874 <logic+0x45e4>
    d->_Pacemaker_local__Atrig8 = 0;
  804864:	e0bffc17 	ldw	r2,-16(fp)
  804868:	10003605 	stb	zero,216(r2)
    d->_Pacemaker_local__Atrig9 = 0;
  80486c:	e0bffc17 	ldw	r2,-16(fp)
  804870:	10003645 	stb	zero,217(r2)
  }
  d->_cg121 = d->_region4_LRI_t < d->T_LRI;
  804874:	e0bffc17 	ldw	r2,-16(fp)
  804878:	14002917 	ldw	r16,164(r2)
  80487c:	14402a17 	ldw	r17,168(r2)
  804880:	e0bffc17 	ldw	r2,-16(fp)
  804884:	10800517 	ldw	r2,20(r2)
  804888:	1009883a 	mov	r4,r2
  80488c:	0806fd40 	call	806fd4 <__floatsidf>
  804890:	1009883a 	mov	r4,r2
  804894:	180b883a 	mov	r5,r3
  804898:	04800044 	movi	r18,1
  80489c:	200d883a 	mov	r6,r4
  8048a0:	280f883a 	mov	r7,r5
  8048a4:	8009883a 	mov	r4,r16
  8048a8:	880b883a 	mov	r5,r17
  8048ac:	08065e40 	call	8065e4 <__ledf2>
  8048b0:	10000116 	blt	r2,zero,8048b8 <logic+0x4628>
  8048b4:	0025883a 	mov	r18,zero
  8048b8:	9007883a 	mov	r3,r18
  8048bc:	e0bffc17 	ldw	r2,-16(fp)
  8048c0:	10c06245 	stb	r3,393(r2)
  d->_g144 = d->_g146 && d->_cg121;
  8048c4:	e0bffc17 	ldw	r2,-16(fp)
  8048c8:	108051c3 	ldbu	r2,327(r2)
  8048cc:	10803fcc 	andi	r2,r2,255
  8048d0:	1080201c 	xori	r2,r2,128
  8048d4:	10bfe004 	addi	r2,r2,-128
  8048d8:	10000826 	beq	r2,zero,8048fc <logic+0x466c>
  8048dc:	e0bffc17 	ldw	r2,-16(fp)
  8048e0:	10806243 	ldbu	r2,393(r2)
  8048e4:	10803fcc 	andi	r2,r2,255
  8048e8:	1080201c 	xori	r2,r2,128
  8048ec:	10bfe004 	addi	r2,r2,-128
  8048f0:	10000226 	beq	r2,zero,8048fc <logic+0x466c>
  8048f4:	00800044 	movi	r2,1
  8048f8:	00000106 	br	804900 <logic+0x4670>
  8048fc:	0005883a 	mov	r2,zero
  804900:	1007883a 	mov	r3,r2
  804904:	e0bffc17 	ldw	r2,-16(fp)
  804908:	10c05145 	stb	r3,325(r2)
  if (d->_g144) {
  80490c:	e0bffc17 	ldw	r2,-16(fp)
  804910:	10805143 	ldbu	r2,325(r2)
  804914:	10803fcc 	andi	r2,r2,255
  804918:	1080201c 	xori	r2,r2,128
  80491c:	10bfe004 	addi	r2,r2,-128
  804920:	10003426 	beq	r2,zero,8049f4 <logic+0x4764>
    d->sleepT = (d->sleepT < (d->T_LRI - d->_region4_LRI_t)) ? d->sleepT : (d->T_LRI - d->_region4_LRI_t);
  804924:	e0bffc17 	ldw	r2,-16(fp)
  804928:	14002f17 	ldw	r16,188(r2)
  80492c:	14403017 	ldw	r17,192(r2)
  804930:	e0bffc17 	ldw	r2,-16(fp)
  804934:	10800517 	ldw	r2,20(r2)
  804938:	1009883a 	mov	r4,r2
  80493c:	0806fd40 	call	806fd4 <__floatsidf>
  804940:	1011883a 	mov	r8,r2
  804944:	1813883a 	mov	r9,r3
  804948:	e13ffc17 	ldw	r4,-16(fp)
  80494c:	20802917 	ldw	r2,164(r4)
  804950:	20c02a17 	ldw	r3,168(r4)
  804954:	100d883a 	mov	r6,r2
  804958:	180f883a 	mov	r7,r3
  80495c:	4009883a 	mov	r4,r8
  804960:	480b883a 	mov	r5,r9
  804964:	08066d80 	call	8066d8 <__subdf3>
  804968:	1009883a 	mov	r4,r2
  80496c:	180b883a 	mov	r5,r3
  804970:	2005883a 	mov	r2,r4
  804974:	2807883a 	mov	r3,r5
  804978:	100d883a 	mov	r6,r2
  80497c:	180f883a 	mov	r7,r3
  804980:	8009883a 	mov	r4,r16
  804984:	880b883a 	mov	r5,r17
  804988:	08065e40 	call	8065e4 <__ledf2>
  80498c:	1000040e 	bge	r2,zero,8049a0 <logic+0x4710>
  804990:	e13ffc17 	ldw	r4,-16(fp)
  804994:	20802f17 	ldw	r2,188(r4)
  804998:	20c03017 	ldw	r3,192(r4)
  80499c:	00001206 	br	8049e8 <logic+0x4758>
  8049a0:	e0bffc17 	ldw	r2,-16(fp)
  8049a4:	10800517 	ldw	r2,20(r2)
  8049a8:	1009883a 	mov	r4,r2
  8049ac:	0806fd40 	call	806fd4 <__floatsidf>
  8049b0:	1011883a 	mov	r8,r2
  8049b4:	1813883a 	mov	r9,r3
  8049b8:	e13ffc17 	ldw	r4,-16(fp)
  8049bc:	20802917 	ldw	r2,164(r4)
  8049c0:	20c02a17 	ldw	r3,168(r4)
  8049c4:	100d883a 	mov	r6,r2
  8049c8:	180f883a 	mov	r7,r3
  8049cc:	4009883a 	mov	r4,r8
  8049d0:	480b883a 	mov	r5,r9
  8049d4:	08066d80 	call	8066d8 <__subdf3>
  8049d8:	1009883a 	mov	r4,r2
  8049dc:	180b883a 	mov	r5,r3
  8049e0:	2005883a 	mov	r2,r4
  8049e4:	2807883a 	mov	r3,r5
  8049e8:	e13ffc17 	ldw	r4,-16(fp)
  8049ec:	20802f15 	stw	r2,188(r4)
  8049f0:	20c03015 	stw	r3,192(r4)
  }
  d->_cg122 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9;
  8049f4:	e0bffc17 	ldw	r2,-16(fp)
  8049f8:	10803603 	ldbu	r2,216(r2)
  8049fc:	10803fcc 	andi	r2,r2,255
  804a00:	1080201c 	xori	r2,r2,128
  804a04:	10bfe004 	addi	r2,r2,-128
  804a08:	1000061e 	bne	r2,zero,804a24 <logic+0x4794>
  804a0c:	e0bffc17 	ldw	r2,-16(fp)
  804a10:	10803643 	ldbu	r2,217(r2)
  804a14:	10803fcc 	andi	r2,r2,255
  804a18:	1080201c 	xori	r2,r2,128
  804a1c:	10bfe004 	addi	r2,r2,-128
  804a20:	10000226 	beq	r2,zero,804a2c <logic+0x479c>
  804a24:	00800044 	movi	r2,1
  804a28:	00000106 	br	804a30 <logic+0x47a0>
  804a2c:	0005883a 	mov	r2,zero
  804a30:	1007883a 	mov	r3,r2
  804a34:	e0bffc17 	ldw	r2,-16(fp)
  804a38:	10c06285 	stb	r3,394(r2)
  d->_g140 = d->_g144 && !d->_cg122 || d->_g124 && !d->_cg126;
  804a3c:	e0bffc17 	ldw	r2,-16(fp)
  804a40:	10805143 	ldbu	r2,325(r2)
  804a44:	10803fcc 	andi	r2,r2,255
  804a48:	1080201c 	xori	r2,r2,128
  804a4c:	10bfe004 	addi	r2,r2,-128
  804a50:	10000626 	beq	r2,zero,804a6c <logic+0x47dc>
  804a54:	e0bffc17 	ldw	r2,-16(fp)
  804a58:	10806283 	ldbu	r2,394(r2)
  804a5c:	10803fcc 	andi	r2,r2,255
  804a60:	1080201c 	xori	r2,r2,128
  804a64:	10bfe004 	addi	r2,r2,-128
  804a68:	10000c26 	beq	r2,zero,804a9c <logic+0x480c>
  804a6c:	e0bffc17 	ldw	r2,-16(fp)
  804a70:	10804d43 	ldbu	r2,309(r2)
  804a74:	10803fcc 	andi	r2,r2,255
  804a78:	1080201c 	xori	r2,r2,128
  804a7c:	10bfe004 	addi	r2,r2,-128
  804a80:	10000826 	beq	r2,zero,804aa4 <logic+0x4814>
  804a84:	e0bffc17 	ldw	r2,-16(fp)
  804a88:	108062c3 	ldbu	r2,395(r2)
  804a8c:	10803fcc 	andi	r2,r2,255
  804a90:	1080201c 	xori	r2,r2,128
  804a94:	10bfe004 	addi	r2,r2,-128
  804a98:	1000021e 	bne	r2,zero,804aa4 <logic+0x4814>
  804a9c:	00800044 	movi	r2,1
  804aa0:	00000106 	br	804aa8 <logic+0x4818>
  804aa4:	0005883a 	mov	r2,zero
  804aa8:	1007883a 	mov	r3,r2
  804aac:	e0bffc17 	ldw	r2,-16(fp)
  804ab0:	10c05085 	stb	r3,322(r2)
  d->_g122 = d->_g146 && !d->_cg121;
  804ab4:	e0bffc17 	ldw	r2,-16(fp)
  804ab8:	108051c3 	ldbu	r2,327(r2)
  804abc:	10803fcc 	andi	r2,r2,255
  804ac0:	1080201c 	xori	r2,r2,128
  804ac4:	10bfe004 	addi	r2,r2,-128
  804ac8:	10000826 	beq	r2,zero,804aec <logic+0x485c>
  804acc:	e0bffc17 	ldw	r2,-16(fp)
  804ad0:	10806243 	ldbu	r2,393(r2)
  804ad4:	10803fcc 	andi	r2,r2,255
  804ad8:	1080201c 	xori	r2,r2,128
  804adc:	10bfe004 	addi	r2,r2,-128
  804ae0:	1000021e 	bne	r2,zero,804aec <logic+0x485c>
  804ae4:	00800044 	movi	r2,1
  804ae8:	00000106 	br	804af0 <logic+0x4860>
  804aec:	0005883a 	mov	r2,zero
  804af0:	1007883a 	mov	r3,r2
  804af4:	e0bffc17 	ldw	r2,-16(fp)
  804af8:	10c04d05 	stb	r3,308(r2)
  d->_cg131 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9;
  804afc:	e0bffc17 	ldw	r2,-16(fp)
  804b00:	10803603 	ldbu	r2,216(r2)
  804b04:	10803fcc 	andi	r2,r2,255
  804b08:	1080201c 	xori	r2,r2,128
  804b0c:	10bfe004 	addi	r2,r2,-128
  804b10:	1000061e 	bne	r2,zero,804b2c <logic+0x489c>
  804b14:	e0bffc17 	ldw	r2,-16(fp)
  804b18:	10803643 	ldbu	r2,217(r2)
  804b1c:	10803fcc 	andi	r2,r2,255
  804b20:	1080201c 	xori	r2,r2,128
  804b24:	10bfe004 	addi	r2,r2,-128
  804b28:	10000226 	beq	r2,zero,804b34 <logic+0x48a4>
  804b2c:	00800044 	movi	r2,1
  804b30:	00000106 	br	804b38 <logic+0x48a8>
  804b34:	0005883a 	mov	r2,zero
  804b38:	1007883a 	mov	r3,r2
  804b3c:	e0bffc17 	ldw	r2,-16(fp)
  804b40:	10c06385 	stb	r3,398(r2)
  d->_g126 = d->_g125 && !d->_cg128 || d->_g122 && !d->_cg131;
  804b44:	e0bffc17 	ldw	r2,-16(fp)
  804b48:	10804d83 	ldbu	r2,310(r2)
  804b4c:	10803fcc 	andi	r2,r2,255
  804b50:	1080201c 	xori	r2,r2,128
  804b54:	10bfe004 	addi	r2,r2,-128
  804b58:	10000626 	beq	r2,zero,804b74 <logic+0x48e4>
  804b5c:	e0bffc17 	ldw	r2,-16(fp)
  804b60:	10806343 	ldbu	r2,397(r2)
  804b64:	10803fcc 	andi	r2,r2,255
  804b68:	1080201c 	xori	r2,r2,128
  804b6c:	10bfe004 	addi	r2,r2,-128
  804b70:	10000c26 	beq	r2,zero,804ba4 <logic+0x4914>
  804b74:	e0bffc17 	ldw	r2,-16(fp)
  804b78:	10804d03 	ldbu	r2,308(r2)
  804b7c:	10803fcc 	andi	r2,r2,255
  804b80:	1080201c 	xori	r2,r2,128
  804b84:	10bfe004 	addi	r2,r2,-128
  804b88:	10000826 	beq	r2,zero,804bac <logic+0x491c>
  804b8c:	e0bffc17 	ldw	r2,-16(fp)
  804b90:	10806383 	ldbu	r2,398(r2)
  804b94:	10803fcc 	andi	r2,r2,255
  804b98:	1080201c 	xori	r2,r2,128
  804b9c:	10bfe004 	addi	r2,r2,-128
  804ba0:	1000021e 	bne	r2,zero,804bac <logic+0x491c>
  804ba4:	00800044 	movi	r2,1
  804ba8:	00000106 	br	804bb0 <logic+0x4920>
  804bac:	0005883a 	mov	r2,zero
  804bb0:	1007883a 	mov	r3,r2
  804bb4:	e0bffc17 	ldw	r2,-16(fp)
  804bb8:	10c04dc5 	stb	r3,311(r2)
  d->_g131 = d->_g146 || d->_g137 && !d->_cg137;
  804bbc:	e0bffc17 	ldw	r2,-16(fp)
  804bc0:	108051c3 	ldbu	r2,327(r2)
  804bc4:	10803fcc 	andi	r2,r2,255
  804bc8:	1080201c 	xori	r2,r2,128
  804bcc:	10bfe004 	addi	r2,r2,-128
  804bd0:	10000c1e 	bne	r2,zero,804c04 <logic+0x4974>
  804bd4:	e0bffc17 	ldw	r2,-16(fp)
  804bd8:	10804fc3 	ldbu	r2,319(r2)
  804bdc:	10803fcc 	andi	r2,r2,255
  804be0:	1080201c 	xori	r2,r2,128
  804be4:	10bfe004 	addi	r2,r2,-128
  804be8:	10000826 	beq	r2,zero,804c0c <logic+0x497c>
  804bec:	e0bffc17 	ldw	r2,-16(fp)
  804bf0:	108063c3 	ldbu	r2,399(r2)
  804bf4:	10803fcc 	andi	r2,r2,255
  804bf8:	1080201c 	xori	r2,r2,128
  804bfc:	10bfe004 	addi	r2,r2,-128
  804c00:	1000021e 	bne	r2,zero,804c0c <logic+0x497c>
  804c04:	00800044 	movi	r2,1
  804c08:	00000106 	br	804c10 <logic+0x4980>
  804c0c:	0005883a 	mov	r2,zero
  804c10:	1007883a 	mov	r3,r2
  804c14:	e0bffc17 	ldw	r2,-16(fp)
  804c18:	10c04ec5 	stb	r3,315(r2)
  d->_g128 = d->_g135 && !d->_cg139;
  804c1c:	e0bffc17 	ldw	r2,-16(fp)
  804c20:	10804f43 	ldbu	r2,317(r2)
  804c24:	10803fcc 	andi	r2,r2,255
  804c28:	1080201c 	xori	r2,r2,128
  804c2c:	10bfe004 	addi	r2,r2,-128
  804c30:	10000826 	beq	r2,zero,804c54 <logic+0x49c4>
  804c34:	e0bffc17 	ldw	r2,-16(fp)
  804c38:	10806443 	ldbu	r2,401(r2)
  804c3c:	10803fcc 	andi	r2,r2,255
  804c40:	1080201c 	xori	r2,r2,128
  804c44:	10bfe004 	addi	r2,r2,-128
  804c48:	1000021e 	bne	r2,zero,804c54 <logic+0x49c4>
  804c4c:	00800044 	movi	r2,1
  804c50:	00000106 	br	804c58 <logic+0x49c8>
  804c54:	0005883a 	mov	r2,zero
  804c58:	1007883a 	mov	r3,r2
  804c5c:	e0bffc17 	ldw	r2,-16(fp)
  804c60:	10c04e45 	stb	r3,313(r2)
  if (d->_g128) {
  804c64:	e0bffc17 	ldw	r2,-16(fp)
  804c68:	10804e43 	ldbu	r2,313(r2)
  804c6c:	10803fcc 	andi	r2,r2,255
  804c70:	1080201c 	xori	r2,r2,128
  804c74:	10bfe004 	addi	r2,r2,-128
  804c78:	10000526 	beq	r2,zero,804c90 <logic+0x4a00>
    d->_taken_transitions[20] += 1;
  804c7c:	e0bffc17 	ldw	r2,-16(fp)
  804c80:	10801b17 	ldw	r2,108(r2)
  804c84:	10c00044 	addi	r3,r2,1
  804c88:	e0bffc17 	ldw	r2,-16(fp)
  804c8c:	10c01b15 	stw	r3,108(r2)
  }
  d->_g120 = d->_g128 || d->_g136_e2 && !d->_cg145;
  804c90:	e0bffc17 	ldw	r2,-16(fp)
  804c94:	10804e43 	ldbu	r2,313(r2)
  804c98:	10803fcc 	andi	r2,r2,255
  804c9c:	1080201c 	xori	r2,r2,128
  804ca0:	10bfe004 	addi	r2,r2,-128
  804ca4:	10000c1e 	bne	r2,zero,804cd8 <logic+0x4a48>
  804ca8:	e0bffc17 	ldw	r2,-16(fp)
  804cac:	108069c3 	ldbu	r2,423(r2)
  804cb0:	10803fcc 	andi	r2,r2,255
  804cb4:	1080201c 	xori	r2,r2,128
  804cb8:	10bfe004 	addi	r2,r2,-128
  804cbc:	10000826 	beq	r2,zero,804ce0 <logic+0x4a50>
  804cc0:	e0bffc17 	ldw	r2,-16(fp)
  804cc4:	10806483 	ldbu	r2,402(r2)
  804cc8:	10803fcc 	andi	r2,r2,255
  804ccc:	1080201c 	xori	r2,r2,128
  804cd0:	10bfe004 	addi	r2,r2,-128
  804cd4:	1000021e 	bne	r2,zero,804ce0 <logic+0x4a50>
  804cd8:	00800044 	movi	r2,1
  804cdc:	00000106 	br	804ce4 <logic+0x4a54>
  804ce0:	0005883a 	mov	r2,zero
  804ce4:	1007883a 	mov	r3,r2
  804ce8:	e0bffc17 	ldw	r2,-16(fp)
  804cec:	10c04cc5 	stb	r3,307(r2)
  d->_g137 = d->_GO || d->_g168 || d->_g107 && !d->_cg150;
  804cf0:	e0bffc17 	ldw	r2,-16(fp)
  804cf4:	10805803 	ldbu	r2,352(r2)
  804cf8:	10803fcc 	andi	r2,r2,255
  804cfc:	1080201c 	xori	r2,r2,128
  804d00:	10bfe004 	addi	r2,r2,-128
  804d04:	1000121e 	bne	r2,zero,804d50 <logic+0x4ac0>
  804d08:	e0bffc17 	ldw	r2,-16(fp)
  804d0c:	10805543 	ldbu	r2,341(r2)
  804d10:	10803fcc 	andi	r2,r2,255
  804d14:	1080201c 	xori	r2,r2,128
  804d18:	10bfe004 	addi	r2,r2,-128
  804d1c:	10000c1e 	bne	r2,zero,804d50 <logic+0x4ac0>
  804d20:	e0bffc17 	ldw	r2,-16(fp)
  804d24:	10804a43 	ldbu	r2,297(r2)
  804d28:	10803fcc 	andi	r2,r2,255
  804d2c:	1080201c 	xori	r2,r2,128
  804d30:	10bfe004 	addi	r2,r2,-128
  804d34:	10000826 	beq	r2,zero,804d58 <logic+0x4ac8>
  804d38:	e0bffc17 	ldw	r2,-16(fp)
  804d3c:	10806503 	ldbu	r2,404(r2)
  804d40:	10803fcc 	andi	r2,r2,255
  804d44:	1080201c 	xori	r2,r2,128
  804d48:	10bfe004 	addi	r2,r2,-128
  804d4c:	1000021e 	bne	r2,zero,804d58 <logic+0x4ac8>
  804d50:	00800044 	movi	r2,1
  804d54:	00000106 	br	804d5c <logic+0x4acc>
  804d58:	0005883a 	mov	r2,zero
  804d5c:	1007883a 	mov	r3,r2
  804d60:	e0bffc17 	ldw	r2,-16(fp)
  804d64:	10c04fc5 	stb	r3,319(r2)
  if (d->_g97_e1) {
  804d68:	e0bffc17 	ldw	r2,-16(fp)
  804d6c:	10806903 	ldbu	r2,420(r2)
  804d70:	10803fcc 	andi	r2,r2,255
  804d74:	1080201c 	xori	r2,r2,128
  804d78:	10bfe004 	addi	r2,r2,-128
  804d7c:	10000826 	beq	r2,zero,804da0 <logic+0x4b10>
    d->_region5_URI_t = 0;
  804d80:	e0bffc17 	ldw	r2,-16(fp)
  804d84:	10002b15 	stw	zero,172(r2)
  804d88:	10002c15 	stw	zero,176(r2)
    d->_taken_transitions[23] += 1;
  804d8c:	e0bffc17 	ldw	r2,-16(fp)
  804d90:	10801e17 	ldw	r2,120(r2)
  804d94:	10c00044 	addi	r3,r2,1
  804d98:	e0bffc17 	ldw	r2,-16(fp)
  804d9c:	10c01e15 	stw	r3,120(r2)
  }
  d->_g139 = d->_g167 && d->_cg171;
  804da0:	e0bffc17 	ldw	r2,-16(fp)
  804da4:	10805503 	ldbu	r2,340(r2)
  804da8:	10803fcc 	andi	r2,r2,255
  804dac:	1080201c 	xori	r2,r2,128
  804db0:	10bfe004 	addi	r2,r2,-128
  804db4:	10000826 	beq	r2,zero,804dd8 <logic+0x4b48>
  804db8:	e0bffc17 	ldw	r2,-16(fp)
  804dbc:	10806743 	ldbu	r2,413(r2)
  804dc0:	10803fcc 	andi	r2,r2,255
  804dc4:	1080201c 	xori	r2,r2,128
  804dc8:	10bfe004 	addi	r2,r2,-128
  804dcc:	10000226 	beq	r2,zero,804dd8 <logic+0x4b48>
  804dd0:	00800044 	movi	r2,1
  804dd4:	00000106 	br	804ddc <logic+0x4b4c>
  804dd8:	0005883a 	mov	r2,zero
  804ddc:	1007883a 	mov	r3,r2
  804de0:	e0bffc17 	ldw	r2,-16(fp)
  804de4:	10c05045 	stb	r3,321(r2)
  if (d->_g139) {
  804de8:	e0bffc17 	ldw	r2,-16(fp)
  804dec:	10805043 	ldbu	r2,321(r2)
  804df0:	10803fcc 	andi	r2,r2,255
  804df4:	1080201c 	xori	r2,r2,128
  804df8:	10bfe004 	addi	r2,r2,-128
  804dfc:	10000826 	beq	r2,zero,804e20 <logic+0x4b90>
    d->_region5_URI_t = 0;
  804e00:	e0bffc17 	ldw	r2,-16(fp)
  804e04:	10002b15 	stw	zero,172(r2)
  804e08:	10002c15 	stw	zero,176(r2)
    d->_taken_transitions[24] += 1;
  804e0c:	e0bffc17 	ldw	r2,-16(fp)
  804e10:	10801f17 	ldw	r2,124(r2)
  804e14:	10c00044 	addi	r3,r2,1
  804e18:	e0bffc17 	ldw	r2,-16(fp)
  804e1c:	10c01f15 	stw	r3,124(r2)
  }
  d->_g145 = d->_g97_e1 || d->_g139;
  804e20:	e0bffc17 	ldw	r2,-16(fp)
  804e24:	10806903 	ldbu	r2,420(r2)
  804e28:	10803fcc 	andi	r2,r2,255
  804e2c:	1080201c 	xori	r2,r2,128
  804e30:	10bfe004 	addi	r2,r2,-128
  804e34:	1000061e 	bne	r2,zero,804e50 <logic+0x4bc0>
  804e38:	e0bffc17 	ldw	r2,-16(fp)
  804e3c:	10805043 	ldbu	r2,321(r2)
  804e40:	10803fcc 	andi	r2,r2,255
  804e44:	1080201c 	xori	r2,r2,128
  804e48:	10bfe004 	addi	r2,r2,-128
  804e4c:	10000226 	beq	r2,zero,804e58 <logic+0x4bc8>
  804e50:	00800044 	movi	r2,1
  804e54:	00000106 	br	804e5c <logic+0x4bcc>
  804e58:	0005883a 	mov	r2,zero
  804e5c:	1007883a 	mov	r3,r2
  804e60:	e0bffc17 	ldw	r2,-16(fp)
  804e64:	10c05185 	stb	r3,326(r2)
  if (d->_g145) {
  804e68:	e0bffc17 	ldw	r2,-16(fp)
  804e6c:	10805183 	ldbu	r2,326(r2)
  804e70:	10803fcc 	andi	r2,r2,255
  804e74:	1080201c 	xori	r2,r2,128
  804e78:	10bfe004 	addi	r2,r2,-128
  804e7c:	10000426 	beq	r2,zero,804e90 <logic+0x4c00>
    d->_Pacemaker_local__Atrig10 = 0;
  804e80:	e0bffc17 	ldw	r2,-16(fp)
  804e84:	10003685 	stb	zero,218(r2)
    d->_Pacemaker_local__Atrig11 = 0;
  804e88:	e0bffc17 	ldw	r2,-16(fp)
  804e8c:	100036c5 	stb	zero,219(r2)
  }
  d->_cg153 = d->_region5_URI_t < d->T_URI;
  804e90:	e0bffc17 	ldw	r2,-16(fp)
  804e94:	14002b17 	ldw	r16,172(r2)
  804e98:	14402c17 	ldw	r17,176(r2)
  804e9c:	e0bffc17 	ldw	r2,-16(fp)
  804ea0:	10800617 	ldw	r2,24(r2)
  804ea4:	1009883a 	mov	r4,r2
  804ea8:	0806fd40 	call	806fd4 <__floatsidf>
  804eac:	1009883a 	mov	r4,r2
  804eb0:	180b883a 	mov	r5,r3
  804eb4:	04800044 	movi	r18,1
  804eb8:	200d883a 	mov	r6,r4
  804ebc:	280f883a 	mov	r7,r5
  804ec0:	8009883a 	mov	r4,r16
  804ec4:	880b883a 	mov	r5,r17
  804ec8:	08065e40 	call	8065e4 <__ledf2>
  804ecc:	10000116 	blt	r2,zero,804ed4 <logic+0x4c44>
  804ed0:	0025883a 	mov	r18,zero
  804ed4:	9007883a 	mov	r3,r18
  804ed8:	e0bffc17 	ldw	r2,-16(fp)
  804edc:	10c06545 	stb	r3,405(r2)
  d->_g141 = d->_g145 && d->_cg153;
  804ee0:	e0bffc17 	ldw	r2,-16(fp)
  804ee4:	10805183 	ldbu	r2,326(r2)
  804ee8:	10803fcc 	andi	r2,r2,255
  804eec:	1080201c 	xori	r2,r2,128
  804ef0:	10bfe004 	addi	r2,r2,-128
  804ef4:	10000826 	beq	r2,zero,804f18 <logic+0x4c88>
  804ef8:	e0bffc17 	ldw	r2,-16(fp)
  804efc:	10806543 	ldbu	r2,405(r2)
  804f00:	10803fcc 	andi	r2,r2,255
  804f04:	1080201c 	xori	r2,r2,128
  804f08:	10bfe004 	addi	r2,r2,-128
  804f0c:	10000226 	beq	r2,zero,804f18 <logic+0x4c88>
  804f10:	00800044 	movi	r2,1
  804f14:	00000106 	br	804f1c <logic+0x4c8c>
  804f18:	0005883a 	mov	r2,zero
  804f1c:	1007883a 	mov	r3,r2
  804f20:	e0bffc17 	ldw	r2,-16(fp)
  804f24:	10c050c5 	stb	r3,323(r2)
  if (d->_g141) {
  804f28:	e0bffc17 	ldw	r2,-16(fp)
  804f2c:	108050c3 	ldbu	r2,323(r2)
  804f30:	10803fcc 	andi	r2,r2,255
  804f34:	1080201c 	xori	r2,r2,128
  804f38:	10bfe004 	addi	r2,r2,-128
  804f3c:	10003426 	beq	r2,zero,805010 <logic+0x4d80>
    d->sleepT = (d->sleepT < (d->T_URI - d->_region5_URI_t)) ? d->sleepT : (d->T_URI - d->_region5_URI_t);
  804f40:	e0bffc17 	ldw	r2,-16(fp)
  804f44:	14002f17 	ldw	r16,188(r2)
  804f48:	14403017 	ldw	r17,192(r2)
  804f4c:	e0bffc17 	ldw	r2,-16(fp)
  804f50:	10800617 	ldw	r2,24(r2)
  804f54:	1009883a 	mov	r4,r2
  804f58:	0806fd40 	call	806fd4 <__floatsidf>
  804f5c:	1011883a 	mov	r8,r2
  804f60:	1813883a 	mov	r9,r3
  804f64:	e13ffc17 	ldw	r4,-16(fp)
  804f68:	20802b17 	ldw	r2,172(r4)
  804f6c:	20c02c17 	ldw	r3,176(r4)
  804f70:	100d883a 	mov	r6,r2
  804f74:	180f883a 	mov	r7,r3
  804f78:	4009883a 	mov	r4,r8
  804f7c:	480b883a 	mov	r5,r9
  804f80:	08066d80 	call	8066d8 <__subdf3>
  804f84:	1009883a 	mov	r4,r2
  804f88:	180b883a 	mov	r5,r3
  804f8c:	2005883a 	mov	r2,r4
  804f90:	2807883a 	mov	r3,r5
  804f94:	100d883a 	mov	r6,r2
  804f98:	180f883a 	mov	r7,r3
  804f9c:	8009883a 	mov	r4,r16
  804fa0:	880b883a 	mov	r5,r17
  804fa4:	08065e40 	call	8065e4 <__ledf2>
  804fa8:	1000040e 	bge	r2,zero,804fbc <logic+0x4d2c>
  804fac:	e13ffc17 	ldw	r4,-16(fp)
  804fb0:	20802f17 	ldw	r2,188(r4)
  804fb4:	20c03017 	ldw	r3,192(r4)
  804fb8:	00001206 	br	805004 <logic+0x4d74>
  804fbc:	e0bffc17 	ldw	r2,-16(fp)
  804fc0:	10800617 	ldw	r2,24(r2)
  804fc4:	1009883a 	mov	r4,r2
  804fc8:	0806fd40 	call	806fd4 <__floatsidf>
  804fcc:	1011883a 	mov	r8,r2
  804fd0:	1813883a 	mov	r9,r3
  804fd4:	e13ffc17 	ldw	r4,-16(fp)
  804fd8:	20802b17 	ldw	r2,172(r4)
  804fdc:	20c02c17 	ldw	r3,176(r4)
  804fe0:	100d883a 	mov	r6,r2
  804fe4:	180f883a 	mov	r7,r3
  804fe8:	4009883a 	mov	r4,r8
  804fec:	480b883a 	mov	r5,r9
  804ff0:	08066d80 	call	8066d8 <__subdf3>
  804ff4:	1009883a 	mov	r4,r2
  804ff8:	180b883a 	mov	r5,r3
  804ffc:	2005883a 	mov	r2,r4
  805000:	2807883a 	mov	r3,r5
  805004:	e13ffc17 	ldw	r4,-16(fp)
  805008:	20802f15 	stw	r2,188(r4)
  80500c:	20c03015 	stw	r3,192(r4)
  }
  d->_cg154 = d->_Pacemaker_local__Atrig10 || d->_Pacemaker_local__Atrig11;
  805010:	e0bffc17 	ldw	r2,-16(fp)
  805014:	10803683 	ldbu	r2,218(r2)
  805018:	10803fcc 	andi	r2,r2,255
  80501c:	1080201c 	xori	r2,r2,128
  805020:	10bfe004 	addi	r2,r2,-128
  805024:	1000061e 	bne	r2,zero,805040 <logic+0x4db0>
  805028:	e0bffc17 	ldw	r2,-16(fp)
  80502c:	108036c3 	ldbu	r2,219(r2)
  805030:	10803fcc 	andi	r2,r2,255
  805034:	1080201c 	xori	r2,r2,128
  805038:	10bfe004 	addi	r2,r2,-128
  80503c:	10000226 	beq	r2,zero,805048 <logic+0x4db8>
  805040:	00800044 	movi	r2,1
  805044:	00000106 	br	80504c <logic+0x4dbc>
  805048:	0005883a 	mov	r2,zero
  80504c:	1007883a 	mov	r3,r2
  805050:	e0bffc17 	ldw	r2,-16(fp)
  805054:	10c06585 	stb	r3,406(r2)
  d->_g150 = d->_g141 && !d->_cg154 || d->_g162 && !d->_cg158;
  805058:	e0bffc17 	ldw	r2,-16(fp)
  80505c:	108050c3 	ldbu	r2,323(r2)
  805060:	10803fcc 	andi	r2,r2,255
  805064:	1080201c 	xori	r2,r2,128
  805068:	10bfe004 	addi	r2,r2,-128
  80506c:	10000626 	beq	r2,zero,805088 <logic+0x4df8>
  805070:	e0bffc17 	ldw	r2,-16(fp)
  805074:	10806583 	ldbu	r2,406(r2)
  805078:	10803fcc 	andi	r2,r2,255
  80507c:	1080201c 	xori	r2,r2,128
  805080:	10bfe004 	addi	r2,r2,-128
  805084:	10000c26 	beq	r2,zero,8050b8 <logic+0x4e28>
  805088:	e0bffc17 	ldw	r2,-16(fp)
  80508c:	10805443 	ldbu	r2,337(r2)
  805090:	10803fcc 	andi	r2,r2,255
  805094:	1080201c 	xori	r2,r2,128
  805098:	10bfe004 	addi	r2,r2,-128
  80509c:	10000826 	beq	r2,zero,8050c0 <logic+0x4e30>
  8050a0:	e0bffc17 	ldw	r2,-16(fp)
  8050a4:	108065c3 	ldbu	r2,407(r2)
  8050a8:	10803fcc 	andi	r2,r2,255
  8050ac:	1080201c 	xori	r2,r2,128
  8050b0:	10bfe004 	addi	r2,r2,-128
  8050b4:	1000021e 	bne	r2,zero,8050c0 <logic+0x4e30>
  8050b8:	00800044 	movi	r2,1
  8050bc:	00000106 	br	8050c4 <logic+0x4e34>
  8050c0:	0005883a 	mov	r2,zero
  8050c4:	1007883a 	mov	r3,r2
  8050c8:	e0bffc17 	ldw	r2,-16(fp)
  8050cc:	10c05205 	stb	r3,328(r2)
  d->_g173 = d->_g145 && !d->_cg153;
  8050d0:	e0bffc17 	ldw	r2,-16(fp)
  8050d4:	10805183 	ldbu	r2,326(r2)
  8050d8:	10803fcc 	andi	r2,r2,255
  8050dc:	1080201c 	xori	r2,r2,128
  8050e0:	10bfe004 	addi	r2,r2,-128
  8050e4:	10000826 	beq	r2,zero,805108 <logic+0x4e78>
  8050e8:	e0bffc17 	ldw	r2,-16(fp)
  8050ec:	10806543 	ldbu	r2,405(r2)
  8050f0:	10803fcc 	andi	r2,r2,255
  8050f4:	1080201c 	xori	r2,r2,128
  8050f8:	10bfe004 	addi	r2,r2,-128
  8050fc:	1000021e 	bne	r2,zero,805108 <logic+0x4e78>
  805100:	00800044 	movi	r2,1
  805104:	00000106 	br	80510c <logic+0x4e7c>
  805108:	0005883a 	mov	r2,zero
  80510c:	1007883a 	mov	r3,r2
  805110:	e0bffc17 	ldw	r2,-16(fp)
  805114:	10c05685 	stb	r3,346(r2)
  d->_cg163 = d->_Pacemaker_local__Atrig10 || d->_Pacemaker_local__Atrig11;
  805118:	e0bffc17 	ldw	r2,-16(fp)
  80511c:	10803683 	ldbu	r2,218(r2)
  805120:	10803fcc 	andi	r2,r2,255
  805124:	1080201c 	xori	r2,r2,128
  805128:	10bfe004 	addi	r2,r2,-128
  80512c:	1000061e 	bne	r2,zero,805148 <logic+0x4eb8>
  805130:	e0bffc17 	ldw	r2,-16(fp)
  805134:	108036c3 	ldbu	r2,219(r2)
  805138:	10803fcc 	andi	r2,r2,255
  80513c:	1080201c 	xori	r2,r2,128
  805140:	10bfe004 	addi	r2,r2,-128
  805144:	10000226 	beq	r2,zero,805150 <logic+0x4ec0>
  805148:	00800044 	movi	r2,1
  80514c:	00000106 	br	805154 <logic+0x4ec4>
  805150:	0005883a 	mov	r2,zero
  805154:	1007883a 	mov	r3,r2
  805158:	e0bffc17 	ldw	r2,-16(fp)
  80515c:	10c06685 	stb	r3,410(r2)
  d->_g171 = d->_g157 && !d->_cg160 || d->_g173 && !d->_cg163;
  805160:	e0bffc17 	ldw	r2,-16(fp)
  805164:	10805343 	ldbu	r2,333(r2)
  805168:	10803fcc 	andi	r2,r2,255
  80516c:	1080201c 	xori	r2,r2,128
  805170:	10bfe004 	addi	r2,r2,-128
  805174:	10000626 	beq	r2,zero,805190 <logic+0x4f00>
  805178:	e0bffc17 	ldw	r2,-16(fp)
  80517c:	10806643 	ldbu	r2,409(r2)
  805180:	10803fcc 	andi	r2,r2,255
  805184:	1080201c 	xori	r2,r2,128
  805188:	10bfe004 	addi	r2,r2,-128
  80518c:	10000c26 	beq	r2,zero,8051c0 <logic+0x4f30>
  805190:	e0bffc17 	ldw	r2,-16(fp)
  805194:	10805683 	ldbu	r2,346(r2)
  805198:	10803fcc 	andi	r2,r2,255
  80519c:	1080201c 	xori	r2,r2,128
  8051a0:	10bfe004 	addi	r2,r2,-128
  8051a4:	10000826 	beq	r2,zero,8051c8 <logic+0x4f38>
  8051a8:	e0bffc17 	ldw	r2,-16(fp)
  8051ac:	10806683 	ldbu	r2,410(r2)
  8051b0:	10803fcc 	andi	r2,r2,255
  8051b4:	1080201c 	xori	r2,r2,128
  8051b8:	10bfe004 	addi	r2,r2,-128
  8051bc:	1000021e 	bne	r2,zero,8051c8 <logic+0x4f38>
  8051c0:	00800044 	movi	r2,1
  8051c4:	00000106 	br	8051cc <logic+0x4f3c>
  8051c8:	0005883a 	mov	r2,zero
  8051cc:	1007883a 	mov	r3,r2
  8051d0:	e0bffc17 	ldw	r2,-16(fp)
  8051d4:	10c05605 	stb	r3,344(r2)
  d->_g172 = d->_g145 || d->_g169 && !d->_cg169;
  8051d8:	e0bffc17 	ldw	r2,-16(fp)
  8051dc:	10805183 	ldbu	r2,326(r2)
  8051e0:	10803fcc 	andi	r2,r2,255
  8051e4:	1080201c 	xori	r2,r2,128
  8051e8:	10bfe004 	addi	r2,r2,-128
  8051ec:	10000c1e 	bne	r2,zero,805220 <logic+0x4f90>
  8051f0:	e0bffc17 	ldw	r2,-16(fp)
  8051f4:	10805583 	ldbu	r2,342(r2)
  8051f8:	10803fcc 	andi	r2,r2,255
  8051fc:	1080201c 	xori	r2,r2,128
  805200:	10bfe004 	addi	r2,r2,-128
  805204:	10000826 	beq	r2,zero,805228 <logic+0x4f98>
  805208:	e0bffc17 	ldw	r2,-16(fp)
  80520c:	108066c3 	ldbu	r2,411(r2)
  805210:	10803fcc 	andi	r2,r2,255
  805214:	1080201c 	xori	r2,r2,128
  805218:	10bfe004 	addi	r2,r2,-128
  80521c:	1000021e 	bne	r2,zero,805228 <logic+0x4f98>
  805220:	00800044 	movi	r2,1
  805224:	00000106 	br	80522c <logic+0x4f9c>
  805228:	0005883a 	mov	r2,zero
  80522c:	1007883a 	mov	r3,r2
  805230:	e0bffc17 	ldw	r2,-16(fp)
  805234:	10c05645 	stb	r3,345(r2)
  d->_g151 = d->_GO || d->_g181;
  805238:	e0bffc17 	ldw	r2,-16(fp)
  80523c:	10805803 	ldbu	r2,352(r2)
  805240:	10803fcc 	andi	r2,r2,255
  805244:	1080201c 	xori	r2,r2,128
  805248:	10bfe004 	addi	r2,r2,-128
  80524c:	1000061e 	bne	r2,zero,805268 <logic+0x4fd8>
  805250:	e0bffc17 	ldw	r2,-16(fp)
  805254:	108056c3 	ldbu	r2,347(r2)
  805258:	10803fcc 	andi	r2,r2,255
  80525c:	1080201c 	xori	r2,r2,128
  805260:	10bfe004 	addi	r2,r2,-128
  805264:	10000226 	beq	r2,zero,805270 <logic+0x4fe0>
  805268:	00800044 	movi	r2,1
  80526c:	00000106 	br	805274 <logic+0x4fe4>
  805270:	0005883a 	mov	r2,zero
  805274:	1007883a 	mov	r3,r2
  805278:	e0bffc17 	ldw	r2,-16(fp)
  80527c:	10c05245 	stb	r3,329(r2)
  d->_g154 = d->_GO || d->_g185;
  805280:	e0bffc17 	ldw	r2,-16(fp)
  805284:	10805803 	ldbu	r2,352(r2)
  805288:	10803fcc 	andi	r2,r2,255
  80528c:	1080201c 	xori	r2,r2,128
  805290:	10bfe004 	addi	r2,r2,-128
  805294:	1000061e 	bne	r2,zero,8052b0 <logic+0x5020>
  805298:	e0bffc17 	ldw	r2,-16(fp)
  80529c:	10805703 	ldbu	r2,348(r2)
  8052a0:	10803fcc 	andi	r2,r2,255
  8052a4:	1080201c 	xori	r2,r2,128
  8052a8:	10bfe004 	addi	r2,r2,-128
  8052ac:	10000226 	beq	r2,zero,8052b8 <logic+0x5028>
  8052b0:	00800044 	movi	r2,1
  8052b4:	00000106 	br	8052bc <logic+0x502c>
  8052b8:	0005883a 	mov	r2,zero
  8052bc:	1007883a 	mov	r3,r2
  8052c0:	e0bffc17 	ldw	r2,-16(fp)
  8052c4:	10c052c5 	stb	r3,331(r2)
  d->_g158 = d->_GO || d->_g63;
  8052c8:	e0bffc17 	ldw	r2,-16(fp)
  8052cc:	10805803 	ldbu	r2,352(r2)
  8052d0:	10803fcc 	andi	r2,r2,255
  8052d4:	1080201c 	xori	r2,r2,128
  8052d8:	10bfe004 	addi	r2,r2,-128
  8052dc:	1000061e 	bne	r2,zero,8052f8 <logic+0x5068>
  8052e0:	e0bffc17 	ldw	r2,-16(fp)
  8052e4:	10804243 	ldbu	r2,265(r2)
  8052e8:	10803fcc 	andi	r2,r2,255
  8052ec:	1080201c 	xori	r2,r2,128
  8052f0:	10bfe004 	addi	r2,r2,-128
  8052f4:	10000226 	beq	r2,zero,805300 <logic+0x5070>
  8052f8:	00800044 	movi	r2,1
  8052fc:	00000106 	br	805304 <logic+0x5074>
  805300:	0005883a 	mov	r2,zero
  805304:	1007883a 	mov	r3,r2
  805308:	e0bffc17 	ldw	r2,-16(fp)
  80530c:	10c05385 	stb	r3,334(r2)
  d->_g163 = d->_GO || d->_g86;
  805310:	e0bffc17 	ldw	r2,-16(fp)
  805314:	10805803 	ldbu	r2,352(r2)
  805318:	10803fcc 	andi	r2,r2,255
  80531c:	1080201c 	xori	r2,r2,128
  805320:	10bfe004 	addi	r2,r2,-128
  805324:	1000061e 	bne	r2,zero,805340 <logic+0x50b0>
  805328:	e0bffc17 	ldw	r2,-16(fp)
  80532c:	10804683 	ldbu	r2,282(r2)
  805330:	10803fcc 	andi	r2,r2,255
  805334:	1080201c 	xori	r2,r2,128
  805338:	10bfe004 	addi	r2,r2,-128
  80533c:	10000226 	beq	r2,zero,805348 <logic+0x50b8>
  805340:	00800044 	movi	r2,1
  805344:	00000106 	br	80534c <logic+0x50bc>
  805348:	0005883a 	mov	r2,zero
  80534c:	1007883a 	mov	r3,r2
  805350:	e0bffc17 	ldw	r2,-16(fp)
  805354:	10c05485 	stb	r3,338(r2)
  d->_g160 = d->_GO || d->_g92;
  805358:	e0bffc17 	ldw	r2,-16(fp)
  80535c:	10805803 	ldbu	r2,352(r2)
  805360:	10803fcc 	andi	r2,r2,255
  805364:	1080201c 	xori	r2,r2,128
  805368:	10bfe004 	addi	r2,r2,-128
  80536c:	1000061e 	bne	r2,zero,805388 <logic+0x50f8>
  805370:	e0bffc17 	ldw	r2,-16(fp)
  805374:	10804743 	ldbu	r2,285(r2)
  805378:	10803fcc 	andi	r2,r2,255
  80537c:	1080201c 	xori	r2,r2,128
  805380:	10bfe004 	addi	r2,r2,-128
  805384:	10000226 	beq	r2,zero,805390 <logic+0x5100>
  805388:	00800044 	movi	r2,1
  80538c:	00000106 	br	805394 <logic+0x5104>
  805390:	0005883a 	mov	r2,zero
  805394:	1007883a 	mov	r3,r2
  805398:	e0bffc17 	ldw	r2,-16(fp)
  80539c:	10c05405 	stb	r3,336(r2)
  d->_g152 = d->_GO || d->_g201;
  8053a0:	e0bffc17 	ldw	r2,-16(fp)
  8053a4:	10805803 	ldbu	r2,352(r2)
  8053a8:	10803fcc 	andi	r2,r2,255
  8053ac:	1080201c 	xori	r2,r2,128
  8053b0:	10bfe004 	addi	r2,r2,-128
  8053b4:	1000061e 	bne	r2,zero,8053d0 <logic+0x5140>
  8053b8:	e0bffc17 	ldw	r2,-16(fp)
  8053bc:	10805743 	ldbu	r2,349(r2)
  8053c0:	10803fcc 	andi	r2,r2,255
  8053c4:	1080201c 	xori	r2,r2,128
  8053c8:	10bfe004 	addi	r2,r2,-128
  8053cc:	10000226 	beq	r2,zero,8053d8 <logic+0x5148>
  8053d0:	00800044 	movi	r2,1
  8053d4:	00000106 	br	8053dc <logic+0x514c>
  8053d8:	0005883a 	mov	r2,zero
  8053dc:	1007883a 	mov	r3,r2
  8053e0:	e0bffc17 	ldw	r2,-16(fp)
  8053e4:	10c05285 	stb	r3,330(r2)
  if (d->_g42_e1) {
  8053e8:	e0bffc17 	ldw	r2,-16(fp)
  8053ec:	10806803 	ldbu	r2,416(r2)
  8053f0:	10803fcc 	andi	r2,r2,255
  8053f4:	1080201c 	xori	r2,r2,128
  8053f8:	10bfe004 	addi	r2,r2,-128
  8053fc:	10000426 	beq	r2,zero,805410 <logic+0x5180>
    d->_reg_AP = d->AP;
  805400:	e0bffc17 	ldw	r2,-16(fp)
  805404:	10c03183 	ldbu	r3,198(r2)
  805408:	e0bffc17 	ldw	r2,-16(fp)
  80540c:	10c03305 	stb	r3,204(r2)
  }
  if (d->_g13_e1) {
  805410:	e0bffc17 	ldw	r2,-16(fp)
  805414:	10806783 	ldbu	r2,414(r2)
  805418:	10803fcc 	andi	r2,r2,255
  80541c:	1080201c 	xori	r2,r2,128
  805420:	10bfe004 	addi	r2,r2,-128
  805424:	10000426 	beq	r2,zero,805438 <logic+0x51a8>
    d->_reg_VP = d->VP;
  805428:	e0bffc17 	ldw	r2,-16(fp)
  80542c:	10c031c3 	ldbu	r3,199(r2)
  805430:	e0bffc17 	ldw	r2,-16(fp)
  805434:	10c03385 	stb	r3,206(r2)
  }
}
  805438:	0001883a 	nop
  80543c:	e6fffd04 	addi	sp,fp,-12
  805440:	dfc00417 	ldw	ra,16(sp)
  805444:	df000317 	ldw	fp,12(sp)
  805448:	dc800217 	ldw	r18,8(sp)
  80544c:	dc400117 	ldw	r17,4(sp)
  805450:	dc000017 	ldw	r16,0(sp)
  805454:	dec00504 	addi	sp,sp,20
  805458:	f800283a 	ret

0080545c <reset>:

void reset(TickData* d) {
  80545c:	defffe04 	addi	sp,sp,-8
  805460:	df000115 	stw	fp,4(sp)
  805464:	df000104 	addi	fp,sp,4
  805468:	e13fff15 	stw	r4,-4(fp)
  d->_GO = 1;
  80546c:	e0bfff17 	ldw	r2,-4(fp)
  805470:	00c00044 	movi	r3,1
  805474:	10c05805 	stb	r3,352(r2)
  d->_TERM = 0;
  805478:	e0bfff17 	ldw	r2,-4(fp)
  80547c:	10006a85 	stb	zero,426(r2)
  d->T_AVI = AVI_VALUE;
  805480:	e0bfff17 	ldw	r2,-4(fp)
  805484:	00c04b04 	movi	r3,300
  805488:	10c00115 	stw	r3,4(r2)
  d->T_AEI = AEI_VALUE;
  80548c:	e0bfff17 	ldw	r2,-4(fp)
  805490:	00c0c804 	movi	r3,800
  805494:	10c00215 	stw	r3,8(r2)
  d->T_PVAR = PVARP_VALUE;
  805498:	e0bfff17 	ldw	r2,-4(fp)
  80549c:	00c00c84 	movi	r3,50
  8054a0:	10c00315 	stw	r3,12(r2)
  d->T_VRP = VRP_VALUE;
  8054a4:	e0bfff17 	ldw	r2,-4(fp)
  8054a8:	00c02584 	movi	r3,150
  8054ac:	10c00415 	stw	r3,16(r2)
  d->T_LRI = LRI_VALUE;
  8054b0:	e0bfff17 	ldw	r2,-4(fp)
  8054b4:	00c0ed84 	movi	r3,950
  8054b8:	10c00515 	stw	r3,20(r2)
  d->T_URI = URI_VALUE;
  8054bc:	e0bfff17 	ldw	r2,-4(fp)
  8054c0:	00c0e104 	movi	r3,900
  8054c4:	10c00615 	stw	r3,24(r2)
  d->_region0_VRefrac_t = 0;
  8054c8:	e0bfff17 	ldw	r2,-4(fp)
  8054cc:	10002115 	stw	zero,132(r2)
  8054d0:	10002215 	stw	zero,136(r2)
  d->_region1_ARefrac_t = 0;
  8054d4:	e0bfff17 	ldw	r2,-4(fp)
  8054d8:	10002315 	stw	zero,140(r2)
  8054dc:	10002415 	stw	zero,144(r2)
  d->_region2_AEI_t = 0;
  8054e0:	e0bfff17 	ldw	r2,-4(fp)
  8054e4:	10002515 	stw	zero,148(r2)
  8054e8:	10002615 	stw	zero,152(r2)
  d->_region3_AVI_t = 0;
  8054ec:	e0bfff17 	ldw	r2,-4(fp)
  8054f0:	10002715 	stw	zero,156(r2)
  8054f4:	10002815 	stw	zero,160(r2)
  d->_region4_LRI_t = 0;
  8054f8:	e0bfff17 	ldw	r2,-4(fp)
  8054fc:	10002915 	stw	zero,164(r2)
  805500:	10002a15 	stw	zero,168(r2)
  d->_region5_URI_t = 0;
  805504:	e0bfff17 	ldw	r2,-4(fp)
  805508:	10002b15 	stw	zero,172(r2)
  80550c:	10002c15 	stw	zero,176(r2)
  d->deltaT = 0.0;
  805510:	e0bfff17 	ldw	r2,-4(fp)
  805514:	10002d15 	stw	zero,180(r2)
  805518:	10002e15 	stw	zero,184(r2)
  d->sleepT = 0.0;
  80551c:	e0bfff17 	ldw	r2,-4(fp)
  805520:	10002f15 	stw	zero,188(r2)
  805524:	10003015 	stw	zero,192(r2)
  d->_reg_AP = 0;
  805528:	e0bfff17 	ldw	r2,-4(fp)
  80552c:	10003305 	stb	zero,204(r2)
  d->_reg_VP = 0;
  805530:	e0bfff17 	ldw	r2,-4(fp)
  805534:	10003385 	stb	zero,206(r2)
  d->_taken_transitions[0] = 0;
  805538:	e0bfff17 	ldw	r2,-4(fp)
  80553c:	10000715 	stw	zero,28(r2)
  d->_taken_transitions[1] = 0;
  805540:	e0bfff17 	ldw	r2,-4(fp)
  805544:	10000815 	stw	zero,32(r2)
  d->_taken_transitions[2] = 0;
  805548:	e0bfff17 	ldw	r2,-4(fp)
  80554c:	10000915 	stw	zero,36(r2)
  d->_taken_transitions[3] = 0;
  805550:	e0bfff17 	ldw	r2,-4(fp)
  805554:	10000a15 	stw	zero,40(r2)
  d->_taken_transitions[4] = 0;
  805558:	e0bfff17 	ldw	r2,-4(fp)
  80555c:	10000b15 	stw	zero,44(r2)
  d->_taken_transitions[5] = 0;
  805560:	e0bfff17 	ldw	r2,-4(fp)
  805564:	10000c15 	stw	zero,48(r2)
  d->_taken_transitions[6] = 0;
  805568:	e0bfff17 	ldw	r2,-4(fp)
  80556c:	10000d15 	stw	zero,52(r2)
  d->_taken_transitions[7] = 0;
  805570:	e0bfff17 	ldw	r2,-4(fp)
  805574:	10000e15 	stw	zero,56(r2)
  d->_taken_transitions[8] = 0;
  805578:	e0bfff17 	ldw	r2,-4(fp)
  80557c:	10000f15 	stw	zero,60(r2)
  d->_taken_transitions[9] = 0;
  805580:	e0bfff17 	ldw	r2,-4(fp)
  805584:	10001015 	stw	zero,64(r2)
  d->_taken_transitions[10] = 0;
  805588:	e0bfff17 	ldw	r2,-4(fp)
  80558c:	10001115 	stw	zero,68(r2)
  d->_taken_transitions[11] = 0;
  805590:	e0bfff17 	ldw	r2,-4(fp)
  805594:	10001215 	stw	zero,72(r2)
  d->_taken_transitions[12] = 0;
  805598:	e0bfff17 	ldw	r2,-4(fp)
  80559c:	10001315 	stw	zero,76(r2)
  d->_taken_transitions[13] = 0;
  8055a0:	e0bfff17 	ldw	r2,-4(fp)
  8055a4:	10001415 	stw	zero,80(r2)
  d->_taken_transitions[14] = 0;
  8055a8:	e0bfff17 	ldw	r2,-4(fp)
  8055ac:	10001515 	stw	zero,84(r2)
  d->_taken_transitions[15] = 0;
  8055b0:	e0bfff17 	ldw	r2,-4(fp)
  8055b4:	10001615 	stw	zero,88(r2)
  d->_taken_transitions[16] = 0;
  8055b8:	e0bfff17 	ldw	r2,-4(fp)
  8055bc:	10001715 	stw	zero,92(r2)
  d->_taken_transitions[17] = 0;
  8055c0:	e0bfff17 	ldw	r2,-4(fp)
  8055c4:	10001815 	stw	zero,96(r2)
  d->_taken_transitions[18] = 0;
  8055c8:	e0bfff17 	ldw	r2,-4(fp)
  8055cc:	10001915 	stw	zero,100(r2)
  d->_taken_transitions[19] = 0;
  8055d0:	e0bfff17 	ldw	r2,-4(fp)
  8055d4:	10001a15 	stw	zero,104(r2)
  d->_taken_transitions[20] = 0;
  8055d8:	e0bfff17 	ldw	r2,-4(fp)
  8055dc:	10001b15 	stw	zero,108(r2)
  d->_taken_transitions[21] = 0;
  8055e0:	e0bfff17 	ldw	r2,-4(fp)
  8055e4:	10001c15 	stw	zero,112(r2)
  d->_taken_transitions[22] = 0;
  8055e8:	e0bfff17 	ldw	r2,-4(fp)
  8055ec:	10001d15 	stw	zero,116(r2)
  d->_taken_transitions[23] = 0;
  8055f0:	e0bfff17 	ldw	r2,-4(fp)
  8055f4:	10001e15 	stw	zero,120(r2)
  d->_taken_transitions[24] = 0;
  8055f8:	e0bfff17 	ldw	r2,-4(fp)
  8055fc:	10001f15 	stw	zero,124(r2)
  d->_taken_transitions[25] = 0;
  805600:	e0bfff17 	ldw	r2,-4(fp)
  805604:	10002015 	stw	zero,128(r2)
  d->_pg8 = 0;
  805608:	e0bfff17 	ldw	r2,-4(fp)
  80560c:	10006ac5 	stb	zero,427(r2)
  d->_pg29 = 0;
  805610:	e0bfff17 	ldw	r2,-4(fp)
  805614:	10006b05 	stb	zero,428(r2)
  d->_pg17 = 0;
  805618:	e0bfff17 	ldw	r2,-4(fp)
  80561c:	10006b45 	stb	zero,429(r2)
  d->_pg151 = 0;
  805620:	e0bfff17 	ldw	r2,-4(fp)
  805624:	10006b85 	stb	zero,430(r2)
  d->_pg13_e1 = 0;
  805628:	e0bfff17 	ldw	r2,-4(fp)
  80562c:	10006bc5 	stb	zero,431(r2)
  d->_pg27 = 0;
  805630:	e0bfff17 	ldw	r2,-4(fp)
  805634:	10006c05 	stb	zero,432(r2)
  d->_pg37 = 0;
  805638:	e0bfff17 	ldw	r2,-4(fp)
  80563c:	10006c45 	stb	zero,433(r2)
  d->_pg34 = 0;
  805640:	e0bfff17 	ldw	r2,-4(fp)
  805644:	10006c85 	stb	zero,434(r2)
  d->_pg41 = 0;
  805648:	e0bfff17 	ldw	r2,-4(fp)
  80564c:	10006cc5 	stb	zero,435(r2)
  d->_pg154 = 0;
  805650:	e0bfff17 	ldw	r2,-4(fp)
  805654:	10006d05 	stb	zero,436(r2)
  d->_pg52 = 0;
  805658:	e0bfff17 	ldw	r2,-4(fp)
  80565c:	10006d45 	stb	zero,437(r2)
  d->_pg42_e1 = 0;
  805660:	e0bfff17 	ldw	r2,-4(fp)
  805664:	10006d85 	stb	zero,438(r2)
  d->_pg62 = 0;
  805668:	e0bfff17 	ldw	r2,-4(fp)
  80566c:	10006dc5 	stb	zero,439(r2)
  d->_pg72 = 0;
  805670:	e0bfff17 	ldw	r2,-4(fp)
  805674:	10006e05 	stb	zero,440(r2)
  d->_pg158 = 0;
  805678:	e0bfff17 	ldw	r2,-4(fp)
  80567c:	10006e45 	stb	zero,441(r2)
  d->_pg83_e2 = 0;
  805680:	e0bfff17 	ldw	r2,-4(fp)
  805684:	10006e85 	stb	zero,442(r2)
  d->_pg74 = 0;
  805688:	e0bfff17 	ldw	r2,-4(fp)
  80568c:	10006ec5 	stb	zero,443(r2)
  d->_pg77 = 0;
  805690:	e0bfff17 	ldw	r2,-4(fp)
  805694:	10006f05 	stb	zero,444(r2)
  d->_pg100 = 0;
  805698:	e0bfff17 	ldw	r2,-4(fp)
  80569c:	10006f45 	stb	zero,445(r2)
  d->_pg163 = 0;
  8056a0:	e0bfff17 	ldw	r2,-4(fp)
  8056a4:	10006f85 	stb	zero,446(r2)
  d->_pg159 = 0;
  8056a8:	e0bfff17 	ldw	r2,-4(fp)
  8056ac:	10006fc5 	stb	zero,447(r2)
  d->_pg98 = 0;
  8056b0:	e0bfff17 	ldw	r2,-4(fp)
  8056b4:	10007005 	stb	zero,448(r2)
  d->_pg101 = 0;
  8056b8:	e0bfff17 	ldw	r2,-4(fp)
  8056bc:	10007045 	stb	zero,449(r2)
  d->_pg111 = 0;
  8056c0:	e0bfff17 	ldw	r2,-4(fp)
  8056c4:	10007085 	stb	zero,450(r2)
  d->_pg137 = 0;
  8056c8:	e0bfff17 	ldw	r2,-4(fp)
  8056cc:	100070c5 	stb	zero,451(r2)
  d->_pg171 = 0;
  8056d0:	e0bfff17 	ldw	r2,-4(fp)
  8056d4:	10007105 	stb	zero,452(r2)
  d->_pg150 = 0;
  8056d8:	e0bfff17 	ldw	r2,-4(fp)
  8056dc:	10007145 	stb	zero,453(r2)
  d->_pg172 = 0;
  8056e0:	e0bfff17 	ldw	r2,-4(fp)
  8056e4:	10007185 	stb	zero,454(r2)
  d->_pg152 = 0;
  8056e8:	e0bfff17 	ldw	r2,-4(fp)
  8056ec:	100071c5 	stb	zero,455(r2)
  d->_pg160 = 0;
  8056f0:	e0bfff17 	ldw	r2,-4(fp)
  8056f4:	10007205 	stb	zero,456(r2)
  d->_pg126 = 0;
  8056f8:	e0bfff17 	ldw	r2,-4(fp)
  8056fc:	10007245 	stb	zero,457(r2)
  d->_pg140 = 0;
  805700:	e0bfff17 	ldw	r2,-4(fp)
  805704:	10007285 	stb	zero,458(r2)
  d->_pg131 = 0;
  805708:	e0bfff17 	ldw	r2,-4(fp)
  80570c:	100072c5 	stb	zero,459(r2)
  d->_pg120 = 0;
  805710:	e0bfff17 	ldw	r2,-4(fp)
  805714:	10007305 	stb	zero,460(r2)
}
  805718:	0001883a 	nop
  80571c:	e037883a 	mov	sp,fp
  805720:	df000017 	ldw	fp,0(sp)
  805724:	dec00104 	addi	sp,sp,4
  805728:	f800283a 	ret

0080572c <tick>:

void tick(TickData* d) {
  80572c:	defffd04 	addi	sp,sp,-12
  805730:	dfc00215 	stw	ra,8(sp)
  805734:	df000115 	stw	fp,4(sp)
  805738:	df000104 	addi	fp,sp,4
  80573c:	e13fff15 	stw	r4,-4(fp)
  logic(d);
  805740:	e13fff17 	ldw	r4,-4(fp)
  805744:	08002900 	call	800290 <logic>

  d->_pg8 = d->_g8;
  805748:	e0bfff17 	ldw	r2,-4(fp)
  80574c:	10c037c3 	ldbu	r3,223(r2)
  805750:	e0bfff17 	ldw	r2,-4(fp)
  805754:	10c06ac5 	stb	r3,427(r2)
  d->_pg29 = d->_g29;
  805758:	e0bfff17 	ldw	r2,-4(fp)
  80575c:	10c03c03 	ldbu	r3,240(r2)
  805760:	e0bfff17 	ldw	r2,-4(fp)
  805764:	10c06b05 	stb	r3,428(r2)
  d->_pg17 = d->_g17;
  805768:	e0bfff17 	ldw	r2,-4(fp)
  80576c:	10c03983 	ldbu	r3,230(r2)
  805770:	e0bfff17 	ldw	r2,-4(fp)
  805774:	10c06b45 	stb	r3,429(r2)
  d->_pg151 = d->_g151;
  805778:	e0bfff17 	ldw	r2,-4(fp)
  80577c:	10c05243 	ldbu	r3,329(r2)
  805780:	e0bfff17 	ldw	r2,-4(fp)
  805784:	10c06b85 	stb	r3,430(r2)
  d->_pg13_e1 = d->_g13_e1;
  805788:	e0bfff17 	ldw	r2,-4(fp)
  80578c:	10c06783 	ldbu	r3,414(r2)
  805790:	e0bfff17 	ldw	r2,-4(fp)
  805794:	10c06bc5 	stb	r3,431(r2)
  d->_pg27 = d->_g27;
  805798:	e0bfff17 	ldw	r2,-4(fp)
  80579c:	10c03b83 	ldbu	r3,238(r2)
  8057a0:	e0bfff17 	ldw	r2,-4(fp)
  8057a4:	10c06c05 	stb	r3,432(r2)
  d->_pg37 = d->_g37;
  8057a8:	e0bfff17 	ldw	r2,-4(fp)
  8057ac:	10c03d03 	ldbu	r3,244(r2)
  8057b0:	e0bfff17 	ldw	r2,-4(fp)
  8057b4:	10c06c45 	stb	r3,433(r2)
  d->_pg34 = d->_g34;
  8057b8:	e0bfff17 	ldw	r2,-4(fp)
  8057bc:	10c03c83 	ldbu	r3,242(r2)
  8057c0:	e0bfff17 	ldw	r2,-4(fp)
  8057c4:	10c06c85 	stb	r3,434(r2)
  d->_pg41 = d->_g41;
  8057c8:	e0bfff17 	ldw	r2,-4(fp)
  8057cc:	10c03dc3 	ldbu	r3,247(r2)
  8057d0:	e0bfff17 	ldw	r2,-4(fp)
  8057d4:	10c06cc5 	stb	r3,435(r2)
  d->_pg154 = d->_g154;
  8057d8:	e0bfff17 	ldw	r2,-4(fp)
  8057dc:	10c052c3 	ldbu	r3,331(r2)
  8057e0:	e0bfff17 	ldw	r2,-4(fp)
  8057e4:	10c06d05 	stb	r3,436(r2)
  d->_pg52 = d->_g52;
  8057e8:	e0bfff17 	ldw	r2,-4(fp)
  8057ec:	10c03fc3 	ldbu	r3,255(r2)
  8057f0:	e0bfff17 	ldw	r2,-4(fp)
  8057f4:	10c06d45 	stb	r3,437(r2)
  d->_pg42_e1 = d->_g42_e1;
  8057f8:	e0bfff17 	ldw	r2,-4(fp)
  8057fc:	10c06803 	ldbu	r3,416(r2)
  805800:	e0bfff17 	ldw	r2,-4(fp)
  805804:	10c06d85 	stb	r3,438(r2)
  d->_pg62 = d->_g62;
  805808:	e0bfff17 	ldw	r2,-4(fp)
  80580c:	10c04203 	ldbu	r3,264(r2)
  805810:	e0bfff17 	ldw	r2,-4(fp)
  805814:	10c06dc5 	stb	r3,439(r2)
  d->_pg72 = d->_g72;
  805818:	e0bfff17 	ldw	r2,-4(fp)
  80581c:	10c04383 	ldbu	r3,270(r2)
  805820:	e0bfff17 	ldw	r2,-4(fp)
  805824:	10c06e05 	stb	r3,440(r2)
  d->_pg158 = d->_g158;
  805828:	e0bfff17 	ldw	r2,-4(fp)
  80582c:	10c05383 	ldbu	r3,334(r2)
  805830:	e0bfff17 	ldw	r2,-4(fp)
  805834:	10c06e45 	stb	r3,441(r2)
  d->_pg83_e2 = d->_g83_e2;
  805838:	e0bfff17 	ldw	r2,-4(fp)
  80583c:	10c068c3 	ldbu	r3,419(r2)
  805840:	e0bfff17 	ldw	r2,-4(fp)
  805844:	10c06e85 	stb	r3,442(r2)
  d->_pg74 = d->_g74;
  805848:	e0bfff17 	ldw	r2,-4(fp)
  80584c:	10c04403 	ldbu	r3,272(r2)
  805850:	e0bfff17 	ldw	r2,-4(fp)
  805854:	10c06ec5 	stb	r3,443(r2)
  d->_pg77 = d->_g77;
  805858:	e0bfff17 	ldw	r2,-4(fp)
  80585c:	10c044c3 	ldbu	r3,275(r2)
  805860:	e0bfff17 	ldw	r2,-4(fp)
  805864:	10c06f05 	stb	r3,444(r2)
  d->_pg100 = d->_g100;
  805868:	e0bfff17 	ldw	r2,-4(fp)
  80586c:	10c04903 	ldbu	r3,292(r2)
  805870:	e0bfff17 	ldw	r2,-4(fp)
  805874:	10c06f45 	stb	r3,445(r2)
  d->_pg163 = d->_g163;
  805878:	e0bfff17 	ldw	r2,-4(fp)
  80587c:	10c05483 	ldbu	r3,338(r2)
  805880:	e0bfff17 	ldw	r2,-4(fp)
  805884:	10c06f85 	stb	r3,446(r2)
  d->_pg159 = d->_g159;
  805888:	e0bfff17 	ldw	r2,-4(fp)
  80588c:	10c053c3 	ldbu	r3,335(r2)
  805890:	e0bfff17 	ldw	r2,-4(fp)
  805894:	10c06fc5 	stb	r3,447(r2)
  d->_pg98 = d->_g98;
  805898:	e0bfff17 	ldw	r2,-4(fp)
  80589c:	10c04883 	ldbu	r3,290(r2)
  8058a0:	e0bfff17 	ldw	r2,-4(fp)
  8058a4:	10c07005 	stb	r3,448(r2)
  d->_pg101 = d->_g101;
  8058a8:	e0bfff17 	ldw	r2,-4(fp)
  8058ac:	10c04943 	ldbu	r3,293(r2)
  8058b0:	e0bfff17 	ldw	r2,-4(fp)
  8058b4:	10c07045 	stb	r3,449(r2)
  d->_pg111 = d->_g111;
  8058b8:	e0bfff17 	ldw	r2,-4(fp)
  8058bc:	10c04b43 	ldbu	r3,301(r2)
  8058c0:	e0bfff17 	ldw	r2,-4(fp)
  8058c4:	10c07085 	stb	r3,450(r2)
  d->_pg137 = d->_g137;
  8058c8:	e0bfff17 	ldw	r2,-4(fp)
  8058cc:	10c04fc3 	ldbu	r3,319(r2)
  8058d0:	e0bfff17 	ldw	r2,-4(fp)
  8058d4:	10c070c5 	stb	r3,451(r2)
  d->_pg171 = d->_g171;
  8058d8:	e0bfff17 	ldw	r2,-4(fp)
  8058dc:	10c05603 	ldbu	r3,344(r2)
  8058e0:	e0bfff17 	ldw	r2,-4(fp)
  8058e4:	10c07105 	stb	r3,452(r2)
  d->_pg150 = d->_g150;
  8058e8:	e0bfff17 	ldw	r2,-4(fp)
  8058ec:	10c05203 	ldbu	r3,328(r2)
  8058f0:	e0bfff17 	ldw	r2,-4(fp)
  8058f4:	10c07145 	stb	r3,453(r2)
  d->_pg172 = d->_g172;
  8058f8:	e0bfff17 	ldw	r2,-4(fp)
  8058fc:	10c05643 	ldbu	r3,345(r2)
  805900:	e0bfff17 	ldw	r2,-4(fp)
  805904:	10c07185 	stb	r3,454(r2)
  d->_pg152 = d->_g152;
  805908:	e0bfff17 	ldw	r2,-4(fp)
  80590c:	10c05283 	ldbu	r3,330(r2)
  805910:	e0bfff17 	ldw	r2,-4(fp)
  805914:	10c071c5 	stb	r3,455(r2)
  d->_pg160 = d->_g160;
  805918:	e0bfff17 	ldw	r2,-4(fp)
  80591c:	10c05403 	ldbu	r3,336(r2)
  805920:	e0bfff17 	ldw	r2,-4(fp)
  805924:	10c07205 	stb	r3,456(r2)
  d->_pg126 = d->_g126;
  805928:	e0bfff17 	ldw	r2,-4(fp)
  80592c:	10c04dc3 	ldbu	r3,311(r2)
  805930:	e0bfff17 	ldw	r2,-4(fp)
  805934:	10c07245 	stb	r3,457(r2)
  d->_pg140 = d->_g140;
  805938:	e0bfff17 	ldw	r2,-4(fp)
  80593c:	10c05083 	ldbu	r3,322(r2)
  805940:	e0bfff17 	ldw	r2,-4(fp)
  805944:	10c07285 	stb	r3,458(r2)
  d->_pg131 = d->_g131;
  805948:	e0bfff17 	ldw	r2,-4(fp)
  80594c:	10c04ec3 	ldbu	r3,315(r2)
  805950:	e0bfff17 	ldw	r2,-4(fp)
  805954:	10c072c5 	stb	r3,459(r2)
  d->_pg120 = d->_g120;
  805958:	e0bfff17 	ldw	r2,-4(fp)
  80595c:	10c04cc3 	ldbu	r3,307(r2)
  805960:	e0bfff17 	ldw	r2,-4(fp)
  805964:	10c07305 	stb	r3,460(r2)
  d->_GO = 0;
  805968:	e0bfff17 	ldw	r2,-4(fp)
  80596c:	10005805 	stb	zero,352(r2)
}
  805970:	0001883a 	nop
  805974:	e037883a 	mov	sp,fp
  805978:	dfc00117 	ldw	ra,4(sp)
  80597c:	df000017 	ldw	fp,0(sp)
  805980:	dec00204 	addi	sp,sp,8
  805984:	f800283a 	ret

00805988 <timer_isr>:

// ---- 1ms tick flag (avoid name clash with generated tick(...) function)
static volatile int g_tick_flag = 0;

// ---- Timer ISR: clear timeout + set flag
static void timer_isr(void* context) {
  805988:	defffe04 	addi	sp,sp,-8
  80598c:	df000115 	stw	fp,4(sp)
  805990:	df000104 	addi	fp,sp,4
  805994:	e13fff15 	stw	r4,-4(fp)
    // acknowledge timer interrupt
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
  805998:	0007883a 	mov	r3,zero
  80599c:	00804074 	movhi	r2,257
  8059a0:	10840804 	addi	r2,r2,4128
  8059a4:	10c00035 	stwio	r3,0(r2)
    g_tick_flag = 1;
  8059a8:	00800044 	movi	r2,1
  8059ac:	d0a61e15 	stw	r2,-26504(gp)
}
  8059b0:	0001883a 	nop
  8059b4:	e037883a 	mov	sp,fp
  8059b8:	df000017 	ldw	fp,0(sp)
  8059bc:	dec00104 	addi	sp,sp,4
  8059c0:	f800283a 	ret

008059c4 <main>:

int main(void) {
  8059c4:	deff8604 	addi	sp,sp,-488
  8059c8:	dfc07915 	stw	ra,484(sp)
  8059cc:	df007815 	stw	fp,480(sp)
  8059d0:	df007804 	addi	fp,sp,480
    // --------- Setup 1ms hardware timer ----------
    // stop timer
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x8);
  8059d4:	00c00204 	movi	r3,8
  8059d8:	00804074 	movhi	r2,257
  8059dc:	10840904 	addi	r2,r2,4132
  8059e0:	10c00035 	stwio	r3,0(r2)

    // compute 1ms period from CPU clock
    const alt_u32 cpu_hz    = ALT_CPU_FREQ;        // from system.h (e.g., 50_000_000)
  8059e4:	0080bef4 	movhi	r2,763
  8059e8:	10bc2004 	addi	r2,r2,-3968
  8059ec:	e0bf8a15 	stw	r2,-472(fp)
    const alt_u32 ticks_1ms = cpu_hz / 1000;       // e.g., 50_000 @ 50MHz
  8059f0:	e0bf8a17 	ldw	r2,-472(fp)
  8059f4:	0140fa04 	movi	r5,1000
  8059f8:	1009883a 	mov	r4,r2
  8059fc:	0805ba00 	call	805ba0 <__udivsi3>
  805a00:	e0bf8b15 	stw	r2,-468(fp)

    // load period (low, high)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE,  (ticks_1ms & 0xFFFF));
  805a04:	e0bf8b17 	ldw	r2,-468(fp)
  805a08:	10ffffcc 	andi	r3,r2,65535
  805a0c:	00804074 	movhi	r2,257
  805a10:	10840a04 	addi	r2,r2,4136
  805a14:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, ((ticks_1ms >> 16) & 0xFFFF));
  805a18:	e0bf8b17 	ldw	r2,-468(fp)
  805a1c:	1004d43a 	srli	r2,r2,16
  805a20:	1007883a 	mov	r3,r2
  805a24:	00804074 	movhi	r2,257
  805a28:	10840b04 	addi	r2,r2,4140
  805a2c:	10c00035 	stwio	r3,0(r2)

    // register ISR
    alt_ic_isr_register(
  805a30:	d8000015 	stw	zero,0(sp)
  805a34:	000f883a 	mov	r7,zero
  805a38:	01802034 	movhi	r6,128
  805a3c:	31966204 	addi	r6,r6,22920
  805a40:	01400084 	movi	r5,2
  805a44:	0009883a 	mov	r4,zero
  805a48:	08071140 	call	807114 <alt_ic_isr_register>
        timer_isr,
        NULL,
        NULL);

    // start: ITO (bit0) | CONT (bit1) | START (bit2)  -> 0b111 = 0x7
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x7);
  805a4c:	00c001c4 	movi	r3,7
  805a50:	00804074 	movhi	r2,257
  805a54:	10840904 	addi	r2,r2,4132
  805a58:	10c00035 	stwio	r3,0(r2)
    // --------- Generated pacemaker state ----------
    // The KIELER C generator declares `tick(TickData* d)` in Pacemaker.h.
    // We don't need to touch fields yet; zero-init is fine for a compile/test.
    TickData d;
    // zero the struct so all internal state starts clean
    for (unsigned i = 0; i < sizeof(TickData); ++i) ((volatile char*)&d)[i] = 0;
  805a5c:	e03f8915 	stw	zero,-476(fp)
  805a60:	00000706 	br	805a80 <main+0xbc>
  805a64:	e0ff8c04 	addi	r3,fp,-464
  805a68:	e0bf8917 	ldw	r2,-476(fp)
  805a6c:	1885883a 	add	r2,r3,r2
  805a70:	10000005 	stb	zero,0(r2)
  805a74:	e0bf8917 	ldw	r2,-476(fp)
  805a78:	10800044 	addi	r2,r2,1
  805a7c:	e0bf8915 	stw	r2,-476(fp)
  805a80:	e0bf8917 	ldw	r2,-476(fp)
  805a84:	10807430 	cmpltui	r2,r2,464
  805a88:	103ff61e 	bne	r2,zero,805a64 <__alt_mem_onchip_mem+0xff7fda64>

    // --------- Main 1ms loop ----------
    while (1) {
        if (g_tick_flag) {
  805a8c:	d0a61e17 	ldw	r2,-26504(gp)
  805a90:	103ffe26 	beq	r2,zero,805a8c <__alt_mem_onchip_mem+0xff7fda8c>
            g_tick_flag = 0;
  805a94:	d0261e15 	stw	zero,-26504(gp)

            // TODO: set inputs on d (AS/VS) before calling tick(&d)
            // e.g., d.AS = ...; d.VS = ...;

            tick(&d);   // call the generated SCCharts step once per ms
  805a98:	e0bf8c04 	addi	r2,fp,-464
  805a9c:	1009883a 	mov	r4,r2
  805aa0:	080572c0 	call	80572c <tick>

            // TODO: read outputs from d (AP/VP) and drive LEDs or UART
            // e.g., if (d.AP) ...; if (d.VP) ...;
        }
        // optional: do low-priority background work here
    }
  805aa4:	003ff906 	br	805a8c <__alt_mem_onchip_mem+0xff7fda8c>

00805aa8 <__divsi3>:
  805aa8:	20001b16 	blt	r4,zero,805b18 <__divsi3+0x70>
  805aac:	000f883a 	mov	r7,zero
  805ab0:	28001616 	blt	r5,zero,805b0c <__divsi3+0x64>
  805ab4:	200d883a 	mov	r6,r4
  805ab8:	29001a2e 	bgeu	r5,r4,805b24 <__divsi3+0x7c>
  805abc:	00800804 	movi	r2,32
  805ac0:	00c00044 	movi	r3,1
  805ac4:	00000106 	br	805acc <__divsi3+0x24>
  805ac8:	10000d26 	beq	r2,zero,805b00 <__divsi3+0x58>
  805acc:	294b883a 	add	r5,r5,r5
  805ad0:	10bfffc4 	addi	r2,r2,-1
  805ad4:	18c7883a 	add	r3,r3,r3
  805ad8:	293ffb36 	bltu	r5,r4,805ac8 <__alt_mem_onchip_mem+0xff7fdac8>
  805adc:	0005883a 	mov	r2,zero
  805ae0:	18000726 	beq	r3,zero,805b00 <__divsi3+0x58>
  805ae4:	0005883a 	mov	r2,zero
  805ae8:	31400236 	bltu	r6,r5,805af4 <__divsi3+0x4c>
  805aec:	314dc83a 	sub	r6,r6,r5
  805af0:	10c4b03a 	or	r2,r2,r3
  805af4:	1806d07a 	srli	r3,r3,1
  805af8:	280ad07a 	srli	r5,r5,1
  805afc:	183ffa1e 	bne	r3,zero,805ae8 <__alt_mem_onchip_mem+0xff7fdae8>
  805b00:	38000126 	beq	r7,zero,805b08 <__divsi3+0x60>
  805b04:	0085c83a 	sub	r2,zero,r2
  805b08:	f800283a 	ret
  805b0c:	014bc83a 	sub	r5,zero,r5
  805b10:	39c0005c 	xori	r7,r7,1
  805b14:	003fe706 	br	805ab4 <__alt_mem_onchip_mem+0xff7fdab4>
  805b18:	0109c83a 	sub	r4,zero,r4
  805b1c:	01c00044 	movi	r7,1
  805b20:	003fe306 	br	805ab0 <__alt_mem_onchip_mem+0xff7fdab0>
  805b24:	00c00044 	movi	r3,1
  805b28:	003fee06 	br	805ae4 <__alt_mem_onchip_mem+0xff7fdae4>

00805b2c <__modsi3>:
  805b2c:	20001716 	blt	r4,zero,805b8c <__modsi3+0x60>
  805b30:	000f883a 	mov	r7,zero
  805b34:	2005883a 	mov	r2,r4
  805b38:	28001216 	blt	r5,zero,805b84 <__modsi3+0x58>
  805b3c:	2900162e 	bgeu	r5,r4,805b98 <__modsi3+0x6c>
  805b40:	01800804 	movi	r6,32
  805b44:	00c00044 	movi	r3,1
  805b48:	00000106 	br	805b50 <__modsi3+0x24>
  805b4c:	30000a26 	beq	r6,zero,805b78 <__modsi3+0x4c>
  805b50:	294b883a 	add	r5,r5,r5
  805b54:	31bfffc4 	addi	r6,r6,-1
  805b58:	18c7883a 	add	r3,r3,r3
  805b5c:	293ffb36 	bltu	r5,r4,805b4c <__alt_mem_onchip_mem+0xff7fdb4c>
  805b60:	18000526 	beq	r3,zero,805b78 <__modsi3+0x4c>
  805b64:	1806d07a 	srli	r3,r3,1
  805b68:	11400136 	bltu	r2,r5,805b70 <__modsi3+0x44>
  805b6c:	1145c83a 	sub	r2,r2,r5
  805b70:	280ad07a 	srli	r5,r5,1
  805b74:	183ffb1e 	bne	r3,zero,805b64 <__alt_mem_onchip_mem+0xff7fdb64>
  805b78:	38000126 	beq	r7,zero,805b80 <__modsi3+0x54>
  805b7c:	0085c83a 	sub	r2,zero,r2
  805b80:	f800283a 	ret
  805b84:	014bc83a 	sub	r5,zero,r5
  805b88:	003fec06 	br	805b3c <__alt_mem_onchip_mem+0xff7fdb3c>
  805b8c:	0109c83a 	sub	r4,zero,r4
  805b90:	01c00044 	movi	r7,1
  805b94:	003fe706 	br	805b34 <__alt_mem_onchip_mem+0xff7fdb34>
  805b98:	00c00044 	movi	r3,1
  805b9c:	003ff106 	br	805b64 <__alt_mem_onchip_mem+0xff7fdb64>

00805ba0 <__udivsi3>:
  805ba0:	200d883a 	mov	r6,r4
  805ba4:	2900152e 	bgeu	r5,r4,805bfc <__udivsi3+0x5c>
  805ba8:	28001416 	blt	r5,zero,805bfc <__udivsi3+0x5c>
  805bac:	00800804 	movi	r2,32
  805bb0:	00c00044 	movi	r3,1
  805bb4:	00000206 	br	805bc0 <__udivsi3+0x20>
  805bb8:	10000e26 	beq	r2,zero,805bf4 <__udivsi3+0x54>
  805bbc:	28000516 	blt	r5,zero,805bd4 <__udivsi3+0x34>
  805bc0:	294b883a 	add	r5,r5,r5
  805bc4:	10bfffc4 	addi	r2,r2,-1
  805bc8:	18c7883a 	add	r3,r3,r3
  805bcc:	293ffa36 	bltu	r5,r4,805bb8 <__alt_mem_onchip_mem+0xff7fdbb8>
  805bd0:	18000826 	beq	r3,zero,805bf4 <__udivsi3+0x54>
  805bd4:	0005883a 	mov	r2,zero
  805bd8:	31400236 	bltu	r6,r5,805be4 <__udivsi3+0x44>
  805bdc:	314dc83a 	sub	r6,r6,r5
  805be0:	10c4b03a 	or	r2,r2,r3
  805be4:	1806d07a 	srli	r3,r3,1
  805be8:	280ad07a 	srli	r5,r5,1
  805bec:	183ffa1e 	bne	r3,zero,805bd8 <__alt_mem_onchip_mem+0xff7fdbd8>
  805bf0:	f800283a 	ret
  805bf4:	0005883a 	mov	r2,zero
  805bf8:	f800283a 	ret
  805bfc:	00c00044 	movi	r3,1
  805c00:	003ff406 	br	805bd4 <__alt_mem_onchip_mem+0xff7fdbd4>

00805c04 <__umodsi3>:
  805c04:	2005883a 	mov	r2,r4
  805c08:	2900122e 	bgeu	r5,r4,805c54 <__umodsi3+0x50>
  805c0c:	28001116 	blt	r5,zero,805c54 <__umodsi3+0x50>
  805c10:	01800804 	movi	r6,32
  805c14:	00c00044 	movi	r3,1
  805c18:	00000206 	br	805c24 <__umodsi3+0x20>
  805c1c:	30000c26 	beq	r6,zero,805c50 <__umodsi3+0x4c>
  805c20:	28000516 	blt	r5,zero,805c38 <__umodsi3+0x34>
  805c24:	294b883a 	add	r5,r5,r5
  805c28:	31bfffc4 	addi	r6,r6,-1
  805c2c:	18c7883a 	add	r3,r3,r3
  805c30:	293ffa36 	bltu	r5,r4,805c1c <__alt_mem_onchip_mem+0xff7fdc1c>
  805c34:	18000626 	beq	r3,zero,805c50 <__umodsi3+0x4c>
  805c38:	1806d07a 	srli	r3,r3,1
  805c3c:	11400136 	bltu	r2,r5,805c44 <__umodsi3+0x40>
  805c40:	1145c83a 	sub	r2,r2,r5
  805c44:	280ad07a 	srli	r5,r5,1
  805c48:	183ffb1e 	bne	r3,zero,805c38 <__alt_mem_onchip_mem+0xff7fdc38>
  805c4c:	f800283a 	ret
  805c50:	f800283a 	ret
  805c54:	00c00044 	movi	r3,1
  805c58:	003ff706 	br	805c38 <__alt_mem_onchip_mem+0xff7fdc38>

00805c5c <__adddf3>:
  805c5c:	02c00434 	movhi	r11,16
  805c60:	5affffc4 	addi	r11,r11,-1
  805c64:	2806d7fa 	srli	r3,r5,31
  805c68:	2ad4703a 	and	r10,r5,r11
  805c6c:	3ad2703a 	and	r9,r7,r11
  805c70:	3804d53a 	srli	r2,r7,20
  805c74:	3018d77a 	srli	r12,r6,29
  805c78:	280ad53a 	srli	r5,r5,20
  805c7c:	501490fa 	slli	r10,r10,3
  805c80:	2010d77a 	srli	r8,r4,29
  805c84:	481290fa 	slli	r9,r9,3
  805c88:	380ed7fa 	srli	r7,r7,31
  805c8c:	defffb04 	addi	sp,sp,-20
  805c90:	dc800215 	stw	r18,8(sp)
  805c94:	dc400115 	stw	r17,4(sp)
  805c98:	dc000015 	stw	r16,0(sp)
  805c9c:	dfc00415 	stw	ra,16(sp)
  805ca0:	dcc00315 	stw	r19,12(sp)
  805ca4:	1c803fcc 	andi	r18,r3,255
  805ca8:	2c01ffcc 	andi	r16,r5,2047
  805cac:	5210b03a 	or	r8,r10,r8
  805cb0:	202290fa 	slli	r17,r4,3
  805cb4:	1081ffcc 	andi	r2,r2,2047
  805cb8:	4b12b03a 	or	r9,r9,r12
  805cbc:	300c90fa 	slli	r6,r6,3
  805cc0:	91c07526 	beq	r18,r7,805e98 <__adddf3+0x23c>
  805cc4:	8087c83a 	sub	r3,r16,r2
  805cc8:	00c0ab0e 	bge	zero,r3,805f78 <__adddf3+0x31c>
  805ccc:	10002a1e 	bne	r2,zero,805d78 <__adddf3+0x11c>
  805cd0:	4984b03a 	or	r2,r9,r6
  805cd4:	1000961e 	bne	r2,zero,805f30 <__adddf3+0x2d4>
  805cd8:	888001cc 	andi	r2,r17,7
  805cdc:	10000726 	beq	r2,zero,805cfc <__adddf3+0xa0>
  805ce0:	888003cc 	andi	r2,r17,15
  805ce4:	00c00104 	movi	r3,4
  805ce8:	10c00426 	beq	r2,r3,805cfc <__adddf3+0xa0>
  805cec:	88c7883a 	add	r3,r17,r3
  805cf0:	1c63803a 	cmpltu	r17,r3,r17
  805cf4:	4451883a 	add	r8,r8,r17
  805cf8:	1823883a 	mov	r17,r3
  805cfc:	4080202c 	andhi	r2,r8,128
  805d00:	10005926 	beq	r2,zero,805e68 <__adddf3+0x20c>
  805d04:	84000044 	addi	r16,r16,1
  805d08:	0081ffc4 	movi	r2,2047
  805d0c:	8080ba26 	beq	r16,r2,805ff8 <__adddf3+0x39c>
  805d10:	00bfe034 	movhi	r2,65408
  805d14:	10bfffc4 	addi	r2,r2,-1
  805d18:	4090703a 	and	r8,r8,r2
  805d1c:	4004977a 	slli	r2,r8,29
  805d20:	4010927a 	slli	r8,r8,9
  805d24:	8822d0fa 	srli	r17,r17,3
  805d28:	8401ffcc 	andi	r16,r16,2047
  805d2c:	4010d33a 	srli	r8,r8,12
  805d30:	9007883a 	mov	r3,r18
  805d34:	1444b03a 	or	r2,r2,r17
  805d38:	8401ffcc 	andi	r16,r16,2047
  805d3c:	8020953a 	slli	r16,r16,20
  805d40:	18c03fcc 	andi	r3,r3,255
  805d44:	01000434 	movhi	r4,16
  805d48:	213fffc4 	addi	r4,r4,-1
  805d4c:	180697fa 	slli	r3,r3,31
  805d50:	4110703a 	and	r8,r8,r4
  805d54:	4410b03a 	or	r8,r8,r16
  805d58:	40c6b03a 	or	r3,r8,r3
  805d5c:	dfc00417 	ldw	ra,16(sp)
  805d60:	dcc00317 	ldw	r19,12(sp)
  805d64:	dc800217 	ldw	r18,8(sp)
  805d68:	dc400117 	ldw	r17,4(sp)
  805d6c:	dc000017 	ldw	r16,0(sp)
  805d70:	dec00504 	addi	sp,sp,20
  805d74:	f800283a 	ret
  805d78:	0081ffc4 	movi	r2,2047
  805d7c:	80bfd626 	beq	r16,r2,805cd8 <__alt_mem_onchip_mem+0xff7fdcd8>
  805d80:	4a402034 	orhi	r9,r9,128
  805d84:	00800e04 	movi	r2,56
  805d88:	10c09f16 	blt	r2,r3,806008 <__adddf3+0x3ac>
  805d8c:	008007c4 	movi	r2,31
  805d90:	10c0c216 	blt	r2,r3,80609c <__adddf3+0x440>
  805d94:	00800804 	movi	r2,32
  805d98:	10c5c83a 	sub	r2,r2,r3
  805d9c:	488a983a 	sll	r5,r9,r2
  805da0:	30c8d83a 	srl	r4,r6,r3
  805da4:	3084983a 	sll	r2,r6,r2
  805da8:	48c6d83a 	srl	r3,r9,r3
  805dac:	290cb03a 	or	r6,r5,r4
  805db0:	1004c03a 	cmpne	r2,r2,zero
  805db4:	308cb03a 	or	r6,r6,r2
  805db8:	898dc83a 	sub	r6,r17,r6
  805dbc:	89a3803a 	cmpltu	r17,r17,r6
  805dc0:	40d1c83a 	sub	r8,r8,r3
  805dc4:	4451c83a 	sub	r8,r8,r17
  805dc8:	3023883a 	mov	r17,r6
  805dcc:	4080202c 	andhi	r2,r8,128
  805dd0:	10002326 	beq	r2,zero,805e60 <__adddf3+0x204>
  805dd4:	04c02034 	movhi	r19,128
  805dd8:	9cffffc4 	addi	r19,r19,-1
  805ddc:	44e6703a 	and	r19,r8,r19
  805de0:	98007626 	beq	r19,zero,805fbc <__adddf3+0x360>
  805de4:	9809883a 	mov	r4,r19
  805de8:	08070b00 	call	8070b0 <__clzsi2>
  805dec:	10fffe04 	addi	r3,r2,-8
  805df0:	010007c4 	movi	r4,31
  805df4:	20c07716 	blt	r4,r3,805fd4 <__adddf3+0x378>
  805df8:	00800804 	movi	r2,32
  805dfc:	10c5c83a 	sub	r2,r2,r3
  805e00:	8884d83a 	srl	r2,r17,r2
  805e04:	98d0983a 	sll	r8,r19,r3
  805e08:	88e2983a 	sll	r17,r17,r3
  805e0c:	1204b03a 	or	r2,r2,r8
  805e10:	1c007416 	blt	r3,r16,805fe4 <__adddf3+0x388>
  805e14:	1c21c83a 	sub	r16,r3,r16
  805e18:	82000044 	addi	r8,r16,1
  805e1c:	00c007c4 	movi	r3,31
  805e20:	1a009116 	blt	r3,r8,806068 <__adddf3+0x40c>
  805e24:	00c00804 	movi	r3,32
  805e28:	1a07c83a 	sub	r3,r3,r8
  805e2c:	8a08d83a 	srl	r4,r17,r8
  805e30:	88e2983a 	sll	r17,r17,r3
  805e34:	10c6983a 	sll	r3,r2,r3
  805e38:	1210d83a 	srl	r8,r2,r8
  805e3c:	8804c03a 	cmpne	r2,r17,zero
  805e40:	1906b03a 	or	r3,r3,r4
  805e44:	18a2b03a 	or	r17,r3,r2
  805e48:	0021883a 	mov	r16,zero
  805e4c:	003fa206 	br	805cd8 <__alt_mem_onchip_mem+0xff7fdcd8>
  805e50:	1890b03a 	or	r8,r3,r2
  805e54:	40017d26 	beq	r8,zero,80644c <__adddf3+0x7f0>
  805e58:	1011883a 	mov	r8,r2
  805e5c:	1823883a 	mov	r17,r3
  805e60:	888001cc 	andi	r2,r17,7
  805e64:	103f9e1e 	bne	r2,zero,805ce0 <__alt_mem_onchip_mem+0xff7fdce0>
  805e68:	4004977a 	slli	r2,r8,29
  805e6c:	8822d0fa 	srli	r17,r17,3
  805e70:	4010d0fa 	srli	r8,r8,3
  805e74:	9007883a 	mov	r3,r18
  805e78:	1444b03a 	or	r2,r2,r17
  805e7c:	0101ffc4 	movi	r4,2047
  805e80:	81002426 	beq	r16,r4,805f14 <__adddf3+0x2b8>
  805e84:	8120703a 	and	r16,r16,r4
  805e88:	01000434 	movhi	r4,16
  805e8c:	213fffc4 	addi	r4,r4,-1
  805e90:	4110703a 	and	r8,r8,r4
  805e94:	003fa806 	br	805d38 <__alt_mem_onchip_mem+0xff7fdd38>
  805e98:	8089c83a 	sub	r4,r16,r2
  805e9c:	01005e0e 	bge	zero,r4,806018 <__adddf3+0x3bc>
  805ea0:	10002b26 	beq	r2,zero,805f50 <__adddf3+0x2f4>
  805ea4:	0081ffc4 	movi	r2,2047
  805ea8:	80bf8b26 	beq	r16,r2,805cd8 <__alt_mem_onchip_mem+0xff7fdcd8>
  805eac:	4a402034 	orhi	r9,r9,128
  805eb0:	00800e04 	movi	r2,56
  805eb4:	1100a40e 	bge	r2,r4,806148 <__adddf3+0x4ec>
  805eb8:	498cb03a 	or	r6,r9,r6
  805ebc:	300ac03a 	cmpne	r5,r6,zero
  805ec0:	0013883a 	mov	r9,zero
  805ec4:	2c4b883a 	add	r5,r5,r17
  805ec8:	2c63803a 	cmpltu	r17,r5,r17
  805ecc:	4a11883a 	add	r8,r9,r8
  805ed0:	8a11883a 	add	r8,r17,r8
  805ed4:	2823883a 	mov	r17,r5
  805ed8:	4080202c 	andhi	r2,r8,128
  805edc:	103fe026 	beq	r2,zero,805e60 <__alt_mem_onchip_mem+0xff7fde60>
  805ee0:	84000044 	addi	r16,r16,1
  805ee4:	0081ffc4 	movi	r2,2047
  805ee8:	8080d226 	beq	r16,r2,806234 <__adddf3+0x5d8>
  805eec:	00bfe034 	movhi	r2,65408
  805ef0:	10bfffc4 	addi	r2,r2,-1
  805ef4:	4090703a 	and	r8,r8,r2
  805ef8:	880ad07a 	srli	r5,r17,1
  805efc:	400897fa 	slli	r4,r8,31
  805f00:	88c0004c 	andi	r3,r17,1
  805f04:	28e2b03a 	or	r17,r5,r3
  805f08:	4010d07a 	srli	r8,r8,1
  805f0c:	2462b03a 	or	r17,r4,r17
  805f10:	003f7106 	br	805cd8 <__alt_mem_onchip_mem+0xff7fdcd8>
  805f14:	4088b03a 	or	r4,r8,r2
  805f18:	20014526 	beq	r4,zero,806430 <__adddf3+0x7d4>
  805f1c:	01000434 	movhi	r4,16
  805f20:	42000234 	orhi	r8,r8,8
  805f24:	213fffc4 	addi	r4,r4,-1
  805f28:	4110703a 	and	r8,r8,r4
  805f2c:	003f8206 	br	805d38 <__alt_mem_onchip_mem+0xff7fdd38>
  805f30:	18ffffc4 	addi	r3,r3,-1
  805f34:	1800491e 	bne	r3,zero,80605c <__adddf3+0x400>
  805f38:	898bc83a 	sub	r5,r17,r6
  805f3c:	8963803a 	cmpltu	r17,r17,r5
  805f40:	4251c83a 	sub	r8,r8,r9
  805f44:	4451c83a 	sub	r8,r8,r17
  805f48:	2823883a 	mov	r17,r5
  805f4c:	003f9f06 	br	805dcc <__alt_mem_onchip_mem+0xff7fddcc>
  805f50:	4984b03a 	or	r2,r9,r6
  805f54:	103f6026 	beq	r2,zero,805cd8 <__alt_mem_onchip_mem+0xff7fdcd8>
  805f58:	213fffc4 	addi	r4,r4,-1
  805f5c:	2000931e 	bne	r4,zero,8061ac <__adddf3+0x550>
  805f60:	898d883a 	add	r6,r17,r6
  805f64:	3463803a 	cmpltu	r17,r6,r17
  805f68:	4251883a 	add	r8,r8,r9
  805f6c:	8a11883a 	add	r8,r17,r8
  805f70:	3023883a 	mov	r17,r6
  805f74:	003fd806 	br	805ed8 <__alt_mem_onchip_mem+0xff7fded8>
  805f78:	1800541e 	bne	r3,zero,8060cc <__adddf3+0x470>
  805f7c:	80800044 	addi	r2,r16,1
  805f80:	1081ffcc 	andi	r2,r2,2047
  805f84:	00c00044 	movi	r3,1
  805f88:	1880a00e 	bge	r3,r2,80620c <__adddf3+0x5b0>
  805f8c:	8989c83a 	sub	r4,r17,r6
  805f90:	8905803a 	cmpltu	r2,r17,r4
  805f94:	4267c83a 	sub	r19,r8,r9
  805f98:	98a7c83a 	sub	r19,r19,r2
  805f9c:	9880202c 	andhi	r2,r19,128
  805fa0:	10006326 	beq	r2,zero,806130 <__adddf3+0x4d4>
  805fa4:	3463c83a 	sub	r17,r6,r17
  805fa8:	4a07c83a 	sub	r3,r9,r8
  805fac:	344d803a 	cmpltu	r6,r6,r17
  805fb0:	19a7c83a 	sub	r19,r3,r6
  805fb4:	3825883a 	mov	r18,r7
  805fb8:	983f8a1e 	bne	r19,zero,805de4 <__alt_mem_onchip_mem+0xff7fdde4>
  805fbc:	8809883a 	mov	r4,r17
  805fc0:	08070b00 	call	8070b0 <__clzsi2>
  805fc4:	10800804 	addi	r2,r2,32
  805fc8:	10fffe04 	addi	r3,r2,-8
  805fcc:	010007c4 	movi	r4,31
  805fd0:	20ff890e 	bge	r4,r3,805df8 <__alt_mem_onchip_mem+0xff7fddf8>
  805fd4:	10bff604 	addi	r2,r2,-40
  805fd8:	8884983a 	sll	r2,r17,r2
  805fdc:	0023883a 	mov	r17,zero
  805fe0:	1c3f8c0e 	bge	r3,r16,805e14 <__alt_mem_onchip_mem+0xff7fde14>
  805fe4:	023fe034 	movhi	r8,65408
  805fe8:	423fffc4 	addi	r8,r8,-1
  805fec:	80e1c83a 	sub	r16,r16,r3
  805ff0:	1210703a 	and	r8,r2,r8
  805ff4:	003f3806 	br	805cd8 <__alt_mem_onchip_mem+0xff7fdcd8>
  805ff8:	9007883a 	mov	r3,r18
  805ffc:	0011883a 	mov	r8,zero
  806000:	0005883a 	mov	r2,zero
  806004:	003f4c06 	br	805d38 <__alt_mem_onchip_mem+0xff7fdd38>
  806008:	498cb03a 	or	r6,r9,r6
  80600c:	300cc03a 	cmpne	r6,r6,zero
  806010:	0007883a 	mov	r3,zero
  806014:	003f6806 	br	805db8 <__alt_mem_onchip_mem+0xff7fddb8>
  806018:	20009c1e 	bne	r4,zero,80628c <__adddf3+0x630>
  80601c:	80800044 	addi	r2,r16,1
  806020:	1141ffcc 	andi	r5,r2,2047
  806024:	01000044 	movi	r4,1
  806028:	2140670e 	bge	r4,r5,8061c8 <__adddf3+0x56c>
  80602c:	0101ffc4 	movi	r4,2047
  806030:	11007f26 	beq	r2,r4,806230 <__adddf3+0x5d4>
  806034:	898d883a 	add	r6,r17,r6
  806038:	4247883a 	add	r3,r8,r9
  80603c:	3451803a 	cmpltu	r8,r6,r17
  806040:	40d1883a 	add	r8,r8,r3
  806044:	402297fa 	slli	r17,r8,31
  806048:	300cd07a 	srli	r6,r6,1
  80604c:	4010d07a 	srli	r8,r8,1
  806050:	1021883a 	mov	r16,r2
  806054:	89a2b03a 	or	r17,r17,r6
  806058:	003f1f06 	br	805cd8 <__alt_mem_onchip_mem+0xff7fdcd8>
  80605c:	0081ffc4 	movi	r2,2047
  806060:	80bf481e 	bne	r16,r2,805d84 <__alt_mem_onchip_mem+0xff7fdd84>
  806064:	003f1c06 	br	805cd8 <__alt_mem_onchip_mem+0xff7fdcd8>
  806068:	843ff844 	addi	r16,r16,-31
  80606c:	01000804 	movi	r4,32
  806070:	1406d83a 	srl	r3,r2,r16
  806074:	41005026 	beq	r8,r4,8061b8 <__adddf3+0x55c>
  806078:	01001004 	movi	r4,64
  80607c:	2211c83a 	sub	r8,r4,r8
  806080:	1204983a 	sll	r2,r2,r8
  806084:	88a2b03a 	or	r17,r17,r2
  806088:	8822c03a 	cmpne	r17,r17,zero
  80608c:	1c62b03a 	or	r17,r3,r17
  806090:	0011883a 	mov	r8,zero
  806094:	0021883a 	mov	r16,zero
  806098:	003f7106 	br	805e60 <__alt_mem_onchip_mem+0xff7fde60>
  80609c:	193ff804 	addi	r4,r3,-32
  8060a0:	00800804 	movi	r2,32
  8060a4:	4908d83a 	srl	r4,r9,r4
  8060a8:	18804526 	beq	r3,r2,8061c0 <__adddf3+0x564>
  8060ac:	00801004 	movi	r2,64
  8060b0:	10c5c83a 	sub	r2,r2,r3
  8060b4:	4886983a 	sll	r3,r9,r2
  8060b8:	198cb03a 	or	r6,r3,r6
  8060bc:	300cc03a 	cmpne	r6,r6,zero
  8060c0:	218cb03a 	or	r6,r4,r6
  8060c4:	0007883a 	mov	r3,zero
  8060c8:	003f3b06 	br	805db8 <__alt_mem_onchip_mem+0xff7fddb8>
  8060cc:	80002a26 	beq	r16,zero,806178 <__adddf3+0x51c>
  8060d0:	0101ffc4 	movi	r4,2047
  8060d4:	11006826 	beq	r2,r4,806278 <__adddf3+0x61c>
  8060d8:	00c7c83a 	sub	r3,zero,r3
  8060dc:	42002034 	orhi	r8,r8,128
  8060e0:	01000e04 	movi	r4,56
  8060e4:	20c07c16 	blt	r4,r3,8062d8 <__adddf3+0x67c>
  8060e8:	010007c4 	movi	r4,31
  8060ec:	20c0da16 	blt	r4,r3,806458 <__adddf3+0x7fc>
  8060f0:	01000804 	movi	r4,32
  8060f4:	20c9c83a 	sub	r4,r4,r3
  8060f8:	4114983a 	sll	r10,r8,r4
  8060fc:	88cad83a 	srl	r5,r17,r3
  806100:	8908983a 	sll	r4,r17,r4
  806104:	40c6d83a 	srl	r3,r8,r3
  806108:	5162b03a 	or	r17,r10,r5
  80610c:	2008c03a 	cmpne	r4,r4,zero
  806110:	8922b03a 	or	r17,r17,r4
  806114:	3463c83a 	sub	r17,r6,r17
  806118:	48c7c83a 	sub	r3,r9,r3
  80611c:	344d803a 	cmpltu	r6,r6,r17
  806120:	1991c83a 	sub	r8,r3,r6
  806124:	1021883a 	mov	r16,r2
  806128:	3825883a 	mov	r18,r7
  80612c:	003f2706 	br	805dcc <__alt_mem_onchip_mem+0xff7fddcc>
  806130:	24d0b03a 	or	r8,r4,r19
  806134:	40001b1e 	bne	r8,zero,8061a4 <__adddf3+0x548>
  806138:	0005883a 	mov	r2,zero
  80613c:	0007883a 	mov	r3,zero
  806140:	0021883a 	mov	r16,zero
  806144:	003f4d06 	br	805e7c <__alt_mem_onchip_mem+0xff7fde7c>
  806148:	008007c4 	movi	r2,31
  80614c:	11003c16 	blt	r2,r4,806240 <__adddf3+0x5e4>
  806150:	00800804 	movi	r2,32
  806154:	1105c83a 	sub	r2,r2,r4
  806158:	488e983a 	sll	r7,r9,r2
  80615c:	310ad83a 	srl	r5,r6,r4
  806160:	3084983a 	sll	r2,r6,r2
  806164:	4912d83a 	srl	r9,r9,r4
  806168:	394ab03a 	or	r5,r7,r5
  80616c:	1004c03a 	cmpne	r2,r2,zero
  806170:	288ab03a 	or	r5,r5,r2
  806174:	003f5306 	br	805ec4 <__alt_mem_onchip_mem+0xff7fdec4>
  806178:	4448b03a 	or	r4,r8,r17
  80617c:	20003e26 	beq	r4,zero,806278 <__adddf3+0x61c>
  806180:	00c6303a 	nor	r3,zero,r3
  806184:	18003a1e 	bne	r3,zero,806270 <__adddf3+0x614>
  806188:	3463c83a 	sub	r17,r6,r17
  80618c:	4a07c83a 	sub	r3,r9,r8
  806190:	344d803a 	cmpltu	r6,r6,r17
  806194:	1991c83a 	sub	r8,r3,r6
  806198:	1021883a 	mov	r16,r2
  80619c:	3825883a 	mov	r18,r7
  8061a0:	003f0a06 	br	805dcc <__alt_mem_onchip_mem+0xff7fddcc>
  8061a4:	2023883a 	mov	r17,r4
  8061a8:	003f0d06 	br	805de0 <__alt_mem_onchip_mem+0xff7fdde0>
  8061ac:	0081ffc4 	movi	r2,2047
  8061b0:	80bf3f1e 	bne	r16,r2,805eb0 <__alt_mem_onchip_mem+0xff7fdeb0>
  8061b4:	003ec806 	br	805cd8 <__alt_mem_onchip_mem+0xff7fdcd8>
  8061b8:	0005883a 	mov	r2,zero
  8061bc:	003fb106 	br	806084 <__alt_mem_onchip_mem+0xff7fe084>
  8061c0:	0007883a 	mov	r3,zero
  8061c4:	003fbc06 	br	8060b8 <__alt_mem_onchip_mem+0xff7fe0b8>
  8061c8:	4444b03a 	or	r2,r8,r17
  8061cc:	8000871e 	bne	r16,zero,8063ec <__adddf3+0x790>
  8061d0:	1000ba26 	beq	r2,zero,8064bc <__adddf3+0x860>
  8061d4:	4984b03a 	or	r2,r9,r6
  8061d8:	103ebf26 	beq	r2,zero,805cd8 <__alt_mem_onchip_mem+0xff7fdcd8>
  8061dc:	8985883a 	add	r2,r17,r6
  8061e0:	4247883a 	add	r3,r8,r9
  8061e4:	1451803a 	cmpltu	r8,r2,r17
  8061e8:	40d1883a 	add	r8,r8,r3
  8061ec:	40c0202c 	andhi	r3,r8,128
  8061f0:	1023883a 	mov	r17,r2
  8061f4:	183f1a26 	beq	r3,zero,805e60 <__alt_mem_onchip_mem+0xff7fde60>
  8061f8:	00bfe034 	movhi	r2,65408
  8061fc:	10bfffc4 	addi	r2,r2,-1
  806200:	2021883a 	mov	r16,r4
  806204:	4090703a 	and	r8,r8,r2
  806208:	003eb306 	br	805cd8 <__alt_mem_onchip_mem+0xff7fdcd8>
  80620c:	4444b03a 	or	r2,r8,r17
  806210:	8000291e 	bne	r16,zero,8062b8 <__adddf3+0x65c>
  806214:	10004b1e 	bne	r2,zero,806344 <__adddf3+0x6e8>
  806218:	4990b03a 	or	r8,r9,r6
  80621c:	40008b26 	beq	r8,zero,80644c <__adddf3+0x7f0>
  806220:	4811883a 	mov	r8,r9
  806224:	3023883a 	mov	r17,r6
  806228:	3825883a 	mov	r18,r7
  80622c:	003eaa06 	br	805cd8 <__alt_mem_onchip_mem+0xff7fdcd8>
  806230:	1021883a 	mov	r16,r2
  806234:	0011883a 	mov	r8,zero
  806238:	0005883a 	mov	r2,zero
  80623c:	003f0f06 	br	805e7c <__alt_mem_onchip_mem+0xff7fde7c>
  806240:	217ff804 	addi	r5,r4,-32
  806244:	00800804 	movi	r2,32
  806248:	494ad83a 	srl	r5,r9,r5
  80624c:	20807d26 	beq	r4,r2,806444 <__adddf3+0x7e8>
  806250:	00801004 	movi	r2,64
  806254:	1109c83a 	sub	r4,r2,r4
  806258:	4912983a 	sll	r9,r9,r4
  80625c:	498cb03a 	or	r6,r9,r6
  806260:	300cc03a 	cmpne	r6,r6,zero
  806264:	298ab03a 	or	r5,r5,r6
  806268:	0013883a 	mov	r9,zero
  80626c:	003f1506 	br	805ec4 <__alt_mem_onchip_mem+0xff7fdec4>
  806270:	0101ffc4 	movi	r4,2047
  806274:	113f9a1e 	bne	r2,r4,8060e0 <__alt_mem_onchip_mem+0xff7fe0e0>
  806278:	4811883a 	mov	r8,r9
  80627c:	3023883a 	mov	r17,r6
  806280:	1021883a 	mov	r16,r2
  806284:	3825883a 	mov	r18,r7
  806288:	003e9306 	br	805cd8 <__alt_mem_onchip_mem+0xff7fdcd8>
  80628c:	8000161e 	bne	r16,zero,8062e8 <__adddf3+0x68c>
  806290:	444ab03a 	or	r5,r8,r17
  806294:	28005126 	beq	r5,zero,8063dc <__adddf3+0x780>
  806298:	0108303a 	nor	r4,zero,r4
  80629c:	20004d1e 	bne	r4,zero,8063d4 <__adddf3+0x778>
  8062a0:	89a3883a 	add	r17,r17,r6
  8062a4:	4253883a 	add	r9,r8,r9
  8062a8:	898d803a 	cmpltu	r6,r17,r6
  8062ac:	3251883a 	add	r8,r6,r9
  8062b0:	1021883a 	mov	r16,r2
  8062b4:	003f0806 	br	805ed8 <__alt_mem_onchip_mem+0xff7fded8>
  8062b8:	1000301e 	bne	r2,zero,80637c <__adddf3+0x720>
  8062bc:	4984b03a 	or	r2,r9,r6
  8062c0:	10007126 	beq	r2,zero,806488 <__adddf3+0x82c>
  8062c4:	4811883a 	mov	r8,r9
  8062c8:	3023883a 	mov	r17,r6
  8062cc:	3825883a 	mov	r18,r7
  8062d0:	0401ffc4 	movi	r16,2047
  8062d4:	003e8006 	br	805cd8 <__alt_mem_onchip_mem+0xff7fdcd8>
  8062d8:	4462b03a 	or	r17,r8,r17
  8062dc:	8822c03a 	cmpne	r17,r17,zero
  8062e0:	0007883a 	mov	r3,zero
  8062e4:	003f8b06 	br	806114 <__alt_mem_onchip_mem+0xff7fe114>
  8062e8:	0141ffc4 	movi	r5,2047
  8062ec:	11403b26 	beq	r2,r5,8063dc <__adddf3+0x780>
  8062f0:	0109c83a 	sub	r4,zero,r4
  8062f4:	42002034 	orhi	r8,r8,128
  8062f8:	01400e04 	movi	r5,56
  8062fc:	29006716 	blt	r5,r4,80649c <__adddf3+0x840>
  806300:	014007c4 	movi	r5,31
  806304:	29007016 	blt	r5,r4,8064c8 <__adddf3+0x86c>
  806308:	01400804 	movi	r5,32
  80630c:	290bc83a 	sub	r5,r5,r4
  806310:	4154983a 	sll	r10,r8,r5
  806314:	890ed83a 	srl	r7,r17,r4
  806318:	894a983a 	sll	r5,r17,r5
  80631c:	4108d83a 	srl	r4,r8,r4
  806320:	51e2b03a 	or	r17,r10,r7
  806324:	280ac03a 	cmpne	r5,r5,zero
  806328:	8962b03a 	or	r17,r17,r5
  80632c:	89a3883a 	add	r17,r17,r6
  806330:	2253883a 	add	r9,r4,r9
  806334:	898d803a 	cmpltu	r6,r17,r6
  806338:	3251883a 	add	r8,r6,r9
  80633c:	1021883a 	mov	r16,r2
  806340:	003ee506 	br	805ed8 <__alt_mem_onchip_mem+0xff7fded8>
  806344:	4984b03a 	or	r2,r9,r6
  806348:	103e6326 	beq	r2,zero,805cd8 <__alt_mem_onchip_mem+0xff7fdcd8>
  80634c:	8987c83a 	sub	r3,r17,r6
  806350:	88c9803a 	cmpltu	r4,r17,r3
  806354:	4245c83a 	sub	r2,r8,r9
  806358:	1105c83a 	sub	r2,r2,r4
  80635c:	1100202c 	andhi	r4,r2,128
  806360:	203ebb26 	beq	r4,zero,805e50 <__alt_mem_onchip_mem+0xff7fde50>
  806364:	3463c83a 	sub	r17,r6,r17
  806368:	4a07c83a 	sub	r3,r9,r8
  80636c:	344d803a 	cmpltu	r6,r6,r17
  806370:	1991c83a 	sub	r8,r3,r6
  806374:	3825883a 	mov	r18,r7
  806378:	003e5706 	br	805cd8 <__alt_mem_onchip_mem+0xff7fdcd8>
  80637c:	4984b03a 	or	r2,r9,r6
  806380:	10002e26 	beq	r2,zero,80643c <__adddf3+0x7e0>
  806384:	4004d0fa 	srli	r2,r8,3
  806388:	8822d0fa 	srli	r17,r17,3
  80638c:	4010977a 	slli	r8,r8,29
  806390:	10c0022c 	andhi	r3,r2,8
  806394:	4462b03a 	or	r17,r8,r17
  806398:	18000826 	beq	r3,zero,8063bc <__adddf3+0x760>
  80639c:	4808d0fa 	srli	r4,r9,3
  8063a0:	20c0022c 	andhi	r3,r4,8
  8063a4:	1800051e 	bne	r3,zero,8063bc <__adddf3+0x760>
  8063a8:	300cd0fa 	srli	r6,r6,3
  8063ac:	4806977a 	slli	r3,r9,29
  8063b0:	2005883a 	mov	r2,r4
  8063b4:	3825883a 	mov	r18,r7
  8063b8:	19a2b03a 	or	r17,r3,r6
  8063bc:	8810d77a 	srli	r8,r17,29
  8063c0:	100490fa 	slli	r2,r2,3
  8063c4:	882290fa 	slli	r17,r17,3
  8063c8:	0401ffc4 	movi	r16,2047
  8063cc:	4090b03a 	or	r8,r8,r2
  8063d0:	003e4106 	br	805cd8 <__alt_mem_onchip_mem+0xff7fdcd8>
  8063d4:	0141ffc4 	movi	r5,2047
  8063d8:	117fc71e 	bne	r2,r5,8062f8 <__alt_mem_onchip_mem+0xff7fe2f8>
  8063dc:	4811883a 	mov	r8,r9
  8063e0:	3023883a 	mov	r17,r6
  8063e4:	1021883a 	mov	r16,r2
  8063e8:	003e3b06 	br	805cd8 <__alt_mem_onchip_mem+0xff7fdcd8>
  8063ec:	10002f26 	beq	r2,zero,8064ac <__adddf3+0x850>
  8063f0:	4984b03a 	or	r2,r9,r6
  8063f4:	10001126 	beq	r2,zero,80643c <__adddf3+0x7e0>
  8063f8:	4004d0fa 	srli	r2,r8,3
  8063fc:	8822d0fa 	srli	r17,r17,3
  806400:	4010977a 	slli	r8,r8,29
  806404:	10c0022c 	andhi	r3,r2,8
  806408:	4462b03a 	or	r17,r8,r17
  80640c:	183feb26 	beq	r3,zero,8063bc <__alt_mem_onchip_mem+0xff7fe3bc>
  806410:	4808d0fa 	srli	r4,r9,3
  806414:	20c0022c 	andhi	r3,r4,8
  806418:	183fe81e 	bne	r3,zero,8063bc <__alt_mem_onchip_mem+0xff7fe3bc>
  80641c:	300cd0fa 	srli	r6,r6,3
  806420:	4806977a 	slli	r3,r9,29
  806424:	2005883a 	mov	r2,r4
  806428:	19a2b03a 	or	r17,r3,r6
  80642c:	003fe306 	br	8063bc <__alt_mem_onchip_mem+0xff7fe3bc>
  806430:	0011883a 	mov	r8,zero
  806434:	0005883a 	mov	r2,zero
  806438:	003e3f06 	br	805d38 <__alt_mem_onchip_mem+0xff7fdd38>
  80643c:	0401ffc4 	movi	r16,2047
  806440:	003e2506 	br	805cd8 <__alt_mem_onchip_mem+0xff7fdcd8>
  806444:	0013883a 	mov	r9,zero
  806448:	003f8406 	br	80625c <__alt_mem_onchip_mem+0xff7fe25c>
  80644c:	0005883a 	mov	r2,zero
  806450:	0007883a 	mov	r3,zero
  806454:	003e8906 	br	805e7c <__alt_mem_onchip_mem+0xff7fde7c>
  806458:	197ff804 	addi	r5,r3,-32
  80645c:	01000804 	movi	r4,32
  806460:	414ad83a 	srl	r5,r8,r5
  806464:	19002426 	beq	r3,r4,8064f8 <__adddf3+0x89c>
  806468:	01001004 	movi	r4,64
  80646c:	20c7c83a 	sub	r3,r4,r3
  806470:	40c6983a 	sll	r3,r8,r3
  806474:	1c46b03a 	or	r3,r3,r17
  806478:	1806c03a 	cmpne	r3,r3,zero
  80647c:	28e2b03a 	or	r17,r5,r3
  806480:	0007883a 	mov	r3,zero
  806484:	003f2306 	br	806114 <__alt_mem_onchip_mem+0xff7fe114>
  806488:	0007883a 	mov	r3,zero
  80648c:	5811883a 	mov	r8,r11
  806490:	00bfffc4 	movi	r2,-1
  806494:	0401ffc4 	movi	r16,2047
  806498:	003e7806 	br	805e7c <__alt_mem_onchip_mem+0xff7fde7c>
  80649c:	4462b03a 	or	r17,r8,r17
  8064a0:	8822c03a 	cmpne	r17,r17,zero
  8064a4:	0009883a 	mov	r4,zero
  8064a8:	003fa006 	br	80632c <__alt_mem_onchip_mem+0xff7fe32c>
  8064ac:	4811883a 	mov	r8,r9
  8064b0:	3023883a 	mov	r17,r6
  8064b4:	0401ffc4 	movi	r16,2047
  8064b8:	003e0706 	br	805cd8 <__alt_mem_onchip_mem+0xff7fdcd8>
  8064bc:	4811883a 	mov	r8,r9
  8064c0:	3023883a 	mov	r17,r6
  8064c4:	003e0406 	br	805cd8 <__alt_mem_onchip_mem+0xff7fdcd8>
  8064c8:	21fff804 	addi	r7,r4,-32
  8064cc:	01400804 	movi	r5,32
  8064d0:	41ced83a 	srl	r7,r8,r7
  8064d4:	21400a26 	beq	r4,r5,806500 <__adddf3+0x8a4>
  8064d8:	01401004 	movi	r5,64
  8064dc:	2909c83a 	sub	r4,r5,r4
  8064e0:	4108983a 	sll	r4,r8,r4
  8064e4:	2448b03a 	or	r4,r4,r17
  8064e8:	2008c03a 	cmpne	r4,r4,zero
  8064ec:	3922b03a 	or	r17,r7,r4
  8064f0:	0009883a 	mov	r4,zero
  8064f4:	003f8d06 	br	80632c <__alt_mem_onchip_mem+0xff7fe32c>
  8064f8:	0007883a 	mov	r3,zero
  8064fc:	003fdd06 	br	806474 <__alt_mem_onchip_mem+0xff7fe474>
  806500:	0009883a 	mov	r4,zero
  806504:	003ff706 	br	8064e4 <__alt_mem_onchip_mem+0xff7fe4e4>

00806508 <__gedf2>:
  806508:	2804d53a 	srli	r2,r5,20
  80650c:	3806d53a 	srli	r3,r7,20
  806510:	02000434 	movhi	r8,16
  806514:	423fffc4 	addi	r8,r8,-1
  806518:	1081ffcc 	andi	r2,r2,2047
  80651c:	0241ffc4 	movi	r9,2047
  806520:	2a14703a 	and	r10,r5,r8
  806524:	18c1ffcc 	andi	r3,r3,2047
  806528:	3a10703a 	and	r8,r7,r8
  80652c:	280ad7fa 	srli	r5,r5,31
  806530:	380ed7fa 	srli	r7,r7,31
  806534:	12401d26 	beq	r2,r9,8065ac <__gedf2+0xa4>
  806538:	0241ffc4 	movi	r9,2047
  80653c:	1a401226 	beq	r3,r9,806588 <__gedf2+0x80>
  806540:	1000081e 	bne	r2,zero,806564 <__gedf2+0x5c>
  806544:	2296b03a 	or	r11,r4,r10
  806548:	5813003a 	cmpeq	r9,r11,zero
  80654c:	1800091e 	bne	r3,zero,806574 <__gedf2+0x6c>
  806550:	3218b03a 	or	r12,r6,r8
  806554:	6000071e 	bne	r12,zero,806574 <__gedf2+0x6c>
  806558:	0005883a 	mov	r2,zero
  80655c:	5800101e 	bne	r11,zero,8065a0 <__gedf2+0x98>
  806560:	f800283a 	ret
  806564:	18000c1e 	bne	r3,zero,806598 <__gedf2+0x90>
  806568:	3212b03a 	or	r9,r6,r8
  80656c:	48000c26 	beq	r9,zero,8065a0 <__gedf2+0x98>
  806570:	0013883a 	mov	r9,zero
  806574:	39c03fcc 	andi	r7,r7,255
  806578:	48000826 	beq	r9,zero,80659c <__gedf2+0x94>
  80657c:	38000926 	beq	r7,zero,8065a4 <__gedf2+0x9c>
  806580:	00800044 	movi	r2,1
  806584:	f800283a 	ret
  806588:	3212b03a 	or	r9,r6,r8
  80658c:	483fec26 	beq	r9,zero,806540 <__alt_mem_onchip_mem+0xff7fe540>
  806590:	00bfff84 	movi	r2,-2
  806594:	f800283a 	ret
  806598:	39c03fcc 	andi	r7,r7,255
  80659c:	29c00626 	beq	r5,r7,8065b8 <__gedf2+0xb0>
  8065a0:	283ff726 	beq	r5,zero,806580 <__alt_mem_onchip_mem+0xff7fe580>
  8065a4:	00bfffc4 	movi	r2,-1
  8065a8:	f800283a 	ret
  8065ac:	2292b03a 	or	r9,r4,r10
  8065b0:	483fe126 	beq	r9,zero,806538 <__alt_mem_onchip_mem+0xff7fe538>
  8065b4:	003ff606 	br	806590 <__alt_mem_onchip_mem+0xff7fe590>
  8065b8:	18bff916 	blt	r3,r2,8065a0 <__alt_mem_onchip_mem+0xff7fe5a0>
  8065bc:	10c00316 	blt	r2,r3,8065cc <__gedf2+0xc4>
  8065c0:	42bff736 	bltu	r8,r10,8065a0 <__alt_mem_onchip_mem+0xff7fe5a0>
  8065c4:	52000326 	beq	r10,r8,8065d4 <__gedf2+0xcc>
  8065c8:	5200042e 	bgeu	r10,r8,8065dc <__gedf2+0xd4>
  8065cc:	283fec1e 	bne	r5,zero,806580 <__alt_mem_onchip_mem+0xff7fe580>
  8065d0:	003ff406 	br	8065a4 <__alt_mem_onchip_mem+0xff7fe5a4>
  8065d4:	313ff236 	bltu	r6,r4,8065a0 <__alt_mem_onchip_mem+0xff7fe5a0>
  8065d8:	21bffc36 	bltu	r4,r6,8065cc <__alt_mem_onchip_mem+0xff7fe5cc>
  8065dc:	0005883a 	mov	r2,zero
  8065e0:	f800283a 	ret

008065e4 <__ledf2>:
  8065e4:	2804d53a 	srli	r2,r5,20
  8065e8:	3810d53a 	srli	r8,r7,20
  8065ec:	00c00434 	movhi	r3,16
  8065f0:	18ffffc4 	addi	r3,r3,-1
  8065f4:	1081ffcc 	andi	r2,r2,2047
  8065f8:	0241ffc4 	movi	r9,2047
  8065fc:	28d4703a 	and	r10,r5,r3
  806600:	4201ffcc 	andi	r8,r8,2047
  806604:	38c6703a 	and	r3,r7,r3
  806608:	280ad7fa 	srli	r5,r5,31
  80660c:	380ed7fa 	srli	r7,r7,31
  806610:	12401f26 	beq	r2,r9,806690 <__ledf2+0xac>
  806614:	0241ffc4 	movi	r9,2047
  806618:	42401426 	beq	r8,r9,80666c <__ledf2+0x88>
  80661c:	1000091e 	bne	r2,zero,806644 <__ledf2+0x60>
  806620:	2296b03a 	or	r11,r4,r10
  806624:	5813003a 	cmpeq	r9,r11,zero
  806628:	29403fcc 	andi	r5,r5,255
  80662c:	40000a1e 	bne	r8,zero,806658 <__ledf2+0x74>
  806630:	30d8b03a 	or	r12,r6,r3
  806634:	6000081e 	bne	r12,zero,806658 <__ledf2+0x74>
  806638:	0005883a 	mov	r2,zero
  80663c:	5800111e 	bne	r11,zero,806684 <__ledf2+0xa0>
  806640:	f800283a 	ret
  806644:	29403fcc 	andi	r5,r5,255
  806648:	40000c1e 	bne	r8,zero,80667c <__ledf2+0x98>
  80664c:	30d2b03a 	or	r9,r6,r3
  806650:	48000c26 	beq	r9,zero,806684 <__ledf2+0xa0>
  806654:	0013883a 	mov	r9,zero
  806658:	39c03fcc 	andi	r7,r7,255
  80665c:	48000826 	beq	r9,zero,806680 <__ledf2+0x9c>
  806660:	38001126 	beq	r7,zero,8066a8 <__ledf2+0xc4>
  806664:	00800044 	movi	r2,1
  806668:	f800283a 	ret
  80666c:	30d2b03a 	or	r9,r6,r3
  806670:	483fea26 	beq	r9,zero,80661c <__alt_mem_onchip_mem+0xff7fe61c>
  806674:	00800084 	movi	r2,2
  806678:	f800283a 	ret
  80667c:	39c03fcc 	andi	r7,r7,255
  806680:	39400726 	beq	r7,r5,8066a0 <__ledf2+0xbc>
  806684:	2800081e 	bne	r5,zero,8066a8 <__ledf2+0xc4>
  806688:	00800044 	movi	r2,1
  80668c:	f800283a 	ret
  806690:	2292b03a 	or	r9,r4,r10
  806694:	483fdf26 	beq	r9,zero,806614 <__alt_mem_onchip_mem+0xff7fe614>
  806698:	00800084 	movi	r2,2
  80669c:	f800283a 	ret
  8066a0:	4080030e 	bge	r8,r2,8066b0 <__ledf2+0xcc>
  8066a4:	383fef26 	beq	r7,zero,806664 <__alt_mem_onchip_mem+0xff7fe664>
  8066a8:	00bfffc4 	movi	r2,-1
  8066ac:	f800283a 	ret
  8066b0:	123feb16 	blt	r2,r8,806660 <__alt_mem_onchip_mem+0xff7fe660>
  8066b4:	1abff336 	bltu	r3,r10,806684 <__alt_mem_onchip_mem+0xff7fe684>
  8066b8:	50c00326 	beq	r10,r3,8066c8 <__ledf2+0xe4>
  8066bc:	50c0042e 	bgeu	r10,r3,8066d0 <__ledf2+0xec>
  8066c0:	283fe81e 	bne	r5,zero,806664 <__alt_mem_onchip_mem+0xff7fe664>
  8066c4:	003ff806 	br	8066a8 <__alt_mem_onchip_mem+0xff7fe6a8>
  8066c8:	313fee36 	bltu	r6,r4,806684 <__alt_mem_onchip_mem+0xff7fe684>
  8066cc:	21bffc36 	bltu	r4,r6,8066c0 <__alt_mem_onchip_mem+0xff7fe6c0>
  8066d0:	0005883a 	mov	r2,zero
  8066d4:	f800283a 	ret

008066d8 <__subdf3>:
  8066d8:	02000434 	movhi	r8,16
  8066dc:	423fffc4 	addi	r8,r8,-1
  8066e0:	defffb04 	addi	sp,sp,-20
  8066e4:	2a14703a 	and	r10,r5,r8
  8066e8:	3812d53a 	srli	r9,r7,20
  8066ec:	3a10703a 	and	r8,r7,r8
  8066f0:	2006d77a 	srli	r3,r4,29
  8066f4:	3004d77a 	srli	r2,r6,29
  8066f8:	dc000015 	stw	r16,0(sp)
  8066fc:	501490fa 	slli	r10,r10,3
  806700:	2820d53a 	srli	r16,r5,20
  806704:	401090fa 	slli	r8,r8,3
  806708:	dc800215 	stw	r18,8(sp)
  80670c:	dc400115 	stw	r17,4(sp)
  806710:	dfc00415 	stw	ra,16(sp)
  806714:	202290fa 	slli	r17,r4,3
  806718:	dcc00315 	stw	r19,12(sp)
  80671c:	4a41ffcc 	andi	r9,r9,2047
  806720:	0101ffc4 	movi	r4,2047
  806724:	2824d7fa 	srli	r18,r5,31
  806728:	8401ffcc 	andi	r16,r16,2047
  80672c:	50c6b03a 	or	r3,r10,r3
  806730:	380ed7fa 	srli	r7,r7,31
  806734:	408ab03a 	or	r5,r8,r2
  806738:	300c90fa 	slli	r6,r6,3
  80673c:	49009626 	beq	r9,r4,806998 <__subdf3+0x2c0>
  806740:	39c0005c 	xori	r7,r7,1
  806744:	8245c83a 	sub	r2,r16,r9
  806748:	3c807426 	beq	r7,r18,80691c <__subdf3+0x244>
  80674c:	0080af0e 	bge	zero,r2,806a0c <__subdf3+0x334>
  806750:	48002a1e 	bne	r9,zero,8067fc <__subdf3+0x124>
  806754:	2988b03a 	or	r4,r5,r6
  806758:	20009a1e 	bne	r4,zero,8069c4 <__subdf3+0x2ec>
  80675c:	888001cc 	andi	r2,r17,7
  806760:	10000726 	beq	r2,zero,806780 <__subdf3+0xa8>
  806764:	888003cc 	andi	r2,r17,15
  806768:	01000104 	movi	r4,4
  80676c:	11000426 	beq	r2,r4,806780 <__subdf3+0xa8>
  806770:	890b883a 	add	r5,r17,r4
  806774:	2c63803a 	cmpltu	r17,r5,r17
  806778:	1c47883a 	add	r3,r3,r17
  80677c:	2823883a 	mov	r17,r5
  806780:	1880202c 	andhi	r2,r3,128
  806784:	10005926 	beq	r2,zero,8068ec <__subdf3+0x214>
  806788:	84000044 	addi	r16,r16,1
  80678c:	0081ffc4 	movi	r2,2047
  806790:	8080be26 	beq	r16,r2,806a8c <__subdf3+0x3b4>
  806794:	017fe034 	movhi	r5,65408
  806798:	297fffc4 	addi	r5,r5,-1
  80679c:	1946703a 	and	r3,r3,r5
  8067a0:	1804977a 	slli	r2,r3,29
  8067a4:	1806927a 	slli	r3,r3,9
  8067a8:	8822d0fa 	srli	r17,r17,3
  8067ac:	8401ffcc 	andi	r16,r16,2047
  8067b0:	180ad33a 	srli	r5,r3,12
  8067b4:	9100004c 	andi	r4,r18,1
  8067b8:	1444b03a 	or	r2,r2,r17
  8067bc:	80c1ffcc 	andi	r3,r16,2047
  8067c0:	1820953a 	slli	r16,r3,20
  8067c4:	20c03fcc 	andi	r3,r4,255
  8067c8:	180897fa 	slli	r4,r3,31
  8067cc:	00c00434 	movhi	r3,16
  8067d0:	18ffffc4 	addi	r3,r3,-1
  8067d4:	28c6703a 	and	r3,r5,r3
  8067d8:	1c06b03a 	or	r3,r3,r16
  8067dc:	1906b03a 	or	r3,r3,r4
  8067e0:	dfc00417 	ldw	ra,16(sp)
  8067e4:	dcc00317 	ldw	r19,12(sp)
  8067e8:	dc800217 	ldw	r18,8(sp)
  8067ec:	dc400117 	ldw	r17,4(sp)
  8067f0:	dc000017 	ldw	r16,0(sp)
  8067f4:	dec00504 	addi	sp,sp,20
  8067f8:	f800283a 	ret
  8067fc:	0101ffc4 	movi	r4,2047
  806800:	813fd626 	beq	r16,r4,80675c <__alt_mem_onchip_mem+0xff7fe75c>
  806804:	29402034 	orhi	r5,r5,128
  806808:	01000e04 	movi	r4,56
  80680c:	2080a316 	blt	r4,r2,806a9c <__subdf3+0x3c4>
  806810:	010007c4 	movi	r4,31
  806814:	2080c616 	blt	r4,r2,806b30 <__subdf3+0x458>
  806818:	01000804 	movi	r4,32
  80681c:	2089c83a 	sub	r4,r4,r2
  806820:	2910983a 	sll	r8,r5,r4
  806824:	308ed83a 	srl	r7,r6,r2
  806828:	3108983a 	sll	r4,r6,r4
  80682c:	2884d83a 	srl	r2,r5,r2
  806830:	41ccb03a 	or	r6,r8,r7
  806834:	2008c03a 	cmpne	r4,r4,zero
  806838:	310cb03a 	or	r6,r6,r4
  80683c:	898dc83a 	sub	r6,r17,r6
  806840:	89a3803a 	cmpltu	r17,r17,r6
  806844:	1887c83a 	sub	r3,r3,r2
  806848:	1c47c83a 	sub	r3,r3,r17
  80684c:	3023883a 	mov	r17,r6
  806850:	1880202c 	andhi	r2,r3,128
  806854:	10002326 	beq	r2,zero,8068e4 <__subdf3+0x20c>
  806858:	04c02034 	movhi	r19,128
  80685c:	9cffffc4 	addi	r19,r19,-1
  806860:	1ce6703a 	and	r19,r3,r19
  806864:	98007a26 	beq	r19,zero,806a50 <__subdf3+0x378>
  806868:	9809883a 	mov	r4,r19
  80686c:	08070b00 	call	8070b0 <__clzsi2>
  806870:	113ffe04 	addi	r4,r2,-8
  806874:	00c007c4 	movi	r3,31
  806878:	19007b16 	blt	r3,r4,806a68 <__subdf3+0x390>
  80687c:	00800804 	movi	r2,32
  806880:	1105c83a 	sub	r2,r2,r4
  806884:	8884d83a 	srl	r2,r17,r2
  806888:	9906983a 	sll	r3,r19,r4
  80688c:	8922983a 	sll	r17,r17,r4
  806890:	10c4b03a 	or	r2,r2,r3
  806894:	24007816 	blt	r4,r16,806a78 <__subdf3+0x3a0>
  806898:	2421c83a 	sub	r16,r4,r16
  80689c:	80c00044 	addi	r3,r16,1
  8068a0:	010007c4 	movi	r4,31
  8068a4:	20c09516 	blt	r4,r3,806afc <__subdf3+0x424>
  8068a8:	01400804 	movi	r5,32
  8068ac:	28cbc83a 	sub	r5,r5,r3
  8068b0:	88c8d83a 	srl	r4,r17,r3
  8068b4:	8962983a 	sll	r17,r17,r5
  8068b8:	114a983a 	sll	r5,r2,r5
  8068bc:	10c6d83a 	srl	r3,r2,r3
  8068c0:	8804c03a 	cmpne	r2,r17,zero
  8068c4:	290ab03a 	or	r5,r5,r4
  8068c8:	28a2b03a 	or	r17,r5,r2
  8068cc:	0021883a 	mov	r16,zero
  8068d0:	003fa206 	br	80675c <__alt_mem_onchip_mem+0xff7fe75c>
  8068d4:	2090b03a 	or	r8,r4,r2
  8068d8:	40018e26 	beq	r8,zero,806f14 <__subdf3+0x83c>
  8068dc:	1007883a 	mov	r3,r2
  8068e0:	2023883a 	mov	r17,r4
  8068e4:	888001cc 	andi	r2,r17,7
  8068e8:	103f9e1e 	bne	r2,zero,806764 <__alt_mem_onchip_mem+0xff7fe764>
  8068ec:	1804977a 	slli	r2,r3,29
  8068f0:	8822d0fa 	srli	r17,r17,3
  8068f4:	1810d0fa 	srli	r8,r3,3
  8068f8:	9100004c 	andi	r4,r18,1
  8068fc:	1444b03a 	or	r2,r2,r17
  806900:	00c1ffc4 	movi	r3,2047
  806904:	80c02826 	beq	r16,r3,8069a8 <__subdf3+0x2d0>
  806908:	01400434 	movhi	r5,16
  80690c:	297fffc4 	addi	r5,r5,-1
  806910:	80e0703a 	and	r16,r16,r3
  806914:	414a703a 	and	r5,r8,r5
  806918:	003fa806 	br	8067bc <__alt_mem_onchip_mem+0xff7fe7bc>
  80691c:	0080630e 	bge	zero,r2,806aac <__subdf3+0x3d4>
  806920:	48003026 	beq	r9,zero,8069e4 <__subdf3+0x30c>
  806924:	0101ffc4 	movi	r4,2047
  806928:	813f8c26 	beq	r16,r4,80675c <__alt_mem_onchip_mem+0xff7fe75c>
  80692c:	29402034 	orhi	r5,r5,128
  806930:	01000e04 	movi	r4,56
  806934:	2080a90e 	bge	r4,r2,806bdc <__subdf3+0x504>
  806938:	298cb03a 	or	r6,r5,r6
  80693c:	3012c03a 	cmpne	r9,r6,zero
  806940:	0005883a 	mov	r2,zero
  806944:	4c53883a 	add	r9,r9,r17
  806948:	4c63803a 	cmpltu	r17,r9,r17
  80694c:	10c7883a 	add	r3,r2,r3
  806950:	88c7883a 	add	r3,r17,r3
  806954:	4823883a 	mov	r17,r9
  806958:	1880202c 	andhi	r2,r3,128
  80695c:	1000d026 	beq	r2,zero,806ca0 <__subdf3+0x5c8>
  806960:	84000044 	addi	r16,r16,1
  806964:	0081ffc4 	movi	r2,2047
  806968:	8080fe26 	beq	r16,r2,806d64 <__subdf3+0x68c>
  80696c:	00bfe034 	movhi	r2,65408
  806970:	10bfffc4 	addi	r2,r2,-1
  806974:	1886703a 	and	r3,r3,r2
  806978:	880ad07a 	srli	r5,r17,1
  80697c:	180497fa 	slli	r2,r3,31
  806980:	8900004c 	andi	r4,r17,1
  806984:	2922b03a 	or	r17,r5,r4
  806988:	1806d07a 	srli	r3,r3,1
  80698c:	1462b03a 	or	r17,r2,r17
  806990:	3825883a 	mov	r18,r7
  806994:	003f7106 	br	80675c <__alt_mem_onchip_mem+0xff7fe75c>
  806998:	2984b03a 	or	r2,r5,r6
  80699c:	103f6826 	beq	r2,zero,806740 <__alt_mem_onchip_mem+0xff7fe740>
  8069a0:	39c03fcc 	andi	r7,r7,255
  8069a4:	003f6706 	br	806744 <__alt_mem_onchip_mem+0xff7fe744>
  8069a8:	4086b03a 	or	r3,r8,r2
  8069ac:	18015226 	beq	r3,zero,806ef8 <__subdf3+0x820>
  8069b0:	00c00434 	movhi	r3,16
  8069b4:	41400234 	orhi	r5,r8,8
  8069b8:	18ffffc4 	addi	r3,r3,-1
  8069bc:	28ca703a 	and	r5,r5,r3
  8069c0:	003f7e06 	br	8067bc <__alt_mem_onchip_mem+0xff7fe7bc>
  8069c4:	10bfffc4 	addi	r2,r2,-1
  8069c8:	1000491e 	bne	r2,zero,806af0 <__subdf3+0x418>
  8069cc:	898fc83a 	sub	r7,r17,r6
  8069d0:	89e3803a 	cmpltu	r17,r17,r7
  8069d4:	1947c83a 	sub	r3,r3,r5
  8069d8:	1c47c83a 	sub	r3,r3,r17
  8069dc:	3823883a 	mov	r17,r7
  8069e0:	003f9b06 	br	806850 <__alt_mem_onchip_mem+0xff7fe850>
  8069e4:	2988b03a 	or	r4,r5,r6
  8069e8:	203f5c26 	beq	r4,zero,80675c <__alt_mem_onchip_mem+0xff7fe75c>
  8069ec:	10bfffc4 	addi	r2,r2,-1
  8069f0:	1000931e 	bne	r2,zero,806c40 <__subdf3+0x568>
  8069f4:	898d883a 	add	r6,r17,r6
  8069f8:	3463803a 	cmpltu	r17,r6,r17
  8069fc:	1947883a 	add	r3,r3,r5
  806a00:	88c7883a 	add	r3,r17,r3
  806a04:	3023883a 	mov	r17,r6
  806a08:	003fd306 	br	806958 <__alt_mem_onchip_mem+0xff7fe958>
  806a0c:	1000541e 	bne	r2,zero,806b60 <__subdf3+0x488>
  806a10:	80800044 	addi	r2,r16,1
  806a14:	1081ffcc 	andi	r2,r2,2047
  806a18:	01000044 	movi	r4,1
  806a1c:	2080a20e 	bge	r4,r2,806ca8 <__subdf3+0x5d0>
  806a20:	8989c83a 	sub	r4,r17,r6
  806a24:	8905803a 	cmpltu	r2,r17,r4
  806a28:	1967c83a 	sub	r19,r3,r5
  806a2c:	98a7c83a 	sub	r19,r19,r2
  806a30:	9880202c 	andhi	r2,r19,128
  806a34:	10006326 	beq	r2,zero,806bc4 <__subdf3+0x4ec>
  806a38:	3463c83a 	sub	r17,r6,r17
  806a3c:	28c7c83a 	sub	r3,r5,r3
  806a40:	344d803a 	cmpltu	r6,r6,r17
  806a44:	19a7c83a 	sub	r19,r3,r6
  806a48:	3825883a 	mov	r18,r7
  806a4c:	983f861e 	bne	r19,zero,806868 <__alt_mem_onchip_mem+0xff7fe868>
  806a50:	8809883a 	mov	r4,r17
  806a54:	08070b00 	call	8070b0 <__clzsi2>
  806a58:	10800804 	addi	r2,r2,32
  806a5c:	113ffe04 	addi	r4,r2,-8
  806a60:	00c007c4 	movi	r3,31
  806a64:	193f850e 	bge	r3,r4,80687c <__alt_mem_onchip_mem+0xff7fe87c>
  806a68:	10bff604 	addi	r2,r2,-40
  806a6c:	8884983a 	sll	r2,r17,r2
  806a70:	0023883a 	mov	r17,zero
  806a74:	243f880e 	bge	r4,r16,806898 <__alt_mem_onchip_mem+0xff7fe898>
  806a78:	00ffe034 	movhi	r3,65408
  806a7c:	18ffffc4 	addi	r3,r3,-1
  806a80:	8121c83a 	sub	r16,r16,r4
  806a84:	10c6703a 	and	r3,r2,r3
  806a88:	003f3406 	br	80675c <__alt_mem_onchip_mem+0xff7fe75c>
  806a8c:	9100004c 	andi	r4,r18,1
  806a90:	000b883a 	mov	r5,zero
  806a94:	0005883a 	mov	r2,zero
  806a98:	003f4806 	br	8067bc <__alt_mem_onchip_mem+0xff7fe7bc>
  806a9c:	298cb03a 	or	r6,r5,r6
  806aa0:	300cc03a 	cmpne	r6,r6,zero
  806aa4:	0005883a 	mov	r2,zero
  806aa8:	003f6406 	br	80683c <__alt_mem_onchip_mem+0xff7fe83c>
  806aac:	10009a1e 	bne	r2,zero,806d18 <__subdf3+0x640>
  806ab0:	82400044 	addi	r9,r16,1
  806ab4:	4881ffcc 	andi	r2,r9,2047
  806ab8:	02800044 	movi	r10,1
  806abc:	5080670e 	bge	r10,r2,806c5c <__subdf3+0x584>
  806ac0:	0081ffc4 	movi	r2,2047
  806ac4:	4880af26 	beq	r9,r2,806d84 <__subdf3+0x6ac>
  806ac8:	898d883a 	add	r6,r17,r6
  806acc:	1945883a 	add	r2,r3,r5
  806ad0:	3447803a 	cmpltu	r3,r6,r17
  806ad4:	1887883a 	add	r3,r3,r2
  806ad8:	182297fa 	slli	r17,r3,31
  806adc:	300cd07a 	srli	r6,r6,1
  806ae0:	1806d07a 	srli	r3,r3,1
  806ae4:	4821883a 	mov	r16,r9
  806ae8:	89a2b03a 	or	r17,r17,r6
  806aec:	003f1b06 	br	80675c <__alt_mem_onchip_mem+0xff7fe75c>
  806af0:	0101ffc4 	movi	r4,2047
  806af4:	813f441e 	bne	r16,r4,806808 <__alt_mem_onchip_mem+0xff7fe808>
  806af8:	003f1806 	br	80675c <__alt_mem_onchip_mem+0xff7fe75c>
  806afc:	843ff844 	addi	r16,r16,-31
  806b00:	01400804 	movi	r5,32
  806b04:	1408d83a 	srl	r4,r2,r16
  806b08:	19405026 	beq	r3,r5,806c4c <__subdf3+0x574>
  806b0c:	01401004 	movi	r5,64
  806b10:	28c7c83a 	sub	r3,r5,r3
  806b14:	10c4983a 	sll	r2,r2,r3
  806b18:	88a2b03a 	or	r17,r17,r2
  806b1c:	8822c03a 	cmpne	r17,r17,zero
  806b20:	2462b03a 	or	r17,r4,r17
  806b24:	0007883a 	mov	r3,zero
  806b28:	0021883a 	mov	r16,zero
  806b2c:	003f6d06 	br	8068e4 <__alt_mem_onchip_mem+0xff7fe8e4>
  806b30:	11fff804 	addi	r7,r2,-32
  806b34:	01000804 	movi	r4,32
  806b38:	29ced83a 	srl	r7,r5,r7
  806b3c:	11004526 	beq	r2,r4,806c54 <__subdf3+0x57c>
  806b40:	01001004 	movi	r4,64
  806b44:	2089c83a 	sub	r4,r4,r2
  806b48:	2904983a 	sll	r2,r5,r4
  806b4c:	118cb03a 	or	r6,r2,r6
  806b50:	300cc03a 	cmpne	r6,r6,zero
  806b54:	398cb03a 	or	r6,r7,r6
  806b58:	0005883a 	mov	r2,zero
  806b5c:	003f3706 	br	80683c <__alt_mem_onchip_mem+0xff7fe83c>
  806b60:	80002a26 	beq	r16,zero,806c0c <__subdf3+0x534>
  806b64:	0101ffc4 	movi	r4,2047
  806b68:	49006626 	beq	r9,r4,806d04 <__subdf3+0x62c>
  806b6c:	0085c83a 	sub	r2,zero,r2
  806b70:	18c02034 	orhi	r3,r3,128
  806b74:	01000e04 	movi	r4,56
  806b78:	20807e16 	blt	r4,r2,806d74 <__subdf3+0x69c>
  806b7c:	010007c4 	movi	r4,31
  806b80:	2080e716 	blt	r4,r2,806f20 <__subdf3+0x848>
  806b84:	01000804 	movi	r4,32
  806b88:	2089c83a 	sub	r4,r4,r2
  806b8c:	1914983a 	sll	r10,r3,r4
  806b90:	8890d83a 	srl	r8,r17,r2
  806b94:	8908983a 	sll	r4,r17,r4
  806b98:	1884d83a 	srl	r2,r3,r2
  806b9c:	5222b03a 	or	r17,r10,r8
  806ba0:	2006c03a 	cmpne	r3,r4,zero
  806ba4:	88e2b03a 	or	r17,r17,r3
  806ba8:	3463c83a 	sub	r17,r6,r17
  806bac:	2885c83a 	sub	r2,r5,r2
  806bb0:	344d803a 	cmpltu	r6,r6,r17
  806bb4:	1187c83a 	sub	r3,r2,r6
  806bb8:	4821883a 	mov	r16,r9
  806bbc:	3825883a 	mov	r18,r7
  806bc0:	003f2306 	br	806850 <__alt_mem_onchip_mem+0xff7fe850>
  806bc4:	24d0b03a 	or	r8,r4,r19
  806bc8:	40001b1e 	bne	r8,zero,806c38 <__subdf3+0x560>
  806bcc:	0005883a 	mov	r2,zero
  806bd0:	0009883a 	mov	r4,zero
  806bd4:	0021883a 	mov	r16,zero
  806bd8:	003f4906 	br	806900 <__alt_mem_onchip_mem+0xff7fe900>
  806bdc:	010007c4 	movi	r4,31
  806be0:	20803a16 	blt	r4,r2,806ccc <__subdf3+0x5f4>
  806be4:	01000804 	movi	r4,32
  806be8:	2089c83a 	sub	r4,r4,r2
  806bec:	2912983a 	sll	r9,r5,r4
  806bf0:	3090d83a 	srl	r8,r6,r2
  806bf4:	3108983a 	sll	r4,r6,r4
  806bf8:	2884d83a 	srl	r2,r5,r2
  806bfc:	4a12b03a 	or	r9,r9,r8
  806c00:	2008c03a 	cmpne	r4,r4,zero
  806c04:	4912b03a 	or	r9,r9,r4
  806c08:	003f4e06 	br	806944 <__alt_mem_onchip_mem+0xff7fe944>
  806c0c:	1c48b03a 	or	r4,r3,r17
  806c10:	20003c26 	beq	r4,zero,806d04 <__subdf3+0x62c>
  806c14:	0084303a 	nor	r2,zero,r2
  806c18:	1000381e 	bne	r2,zero,806cfc <__subdf3+0x624>
  806c1c:	3463c83a 	sub	r17,r6,r17
  806c20:	28c5c83a 	sub	r2,r5,r3
  806c24:	344d803a 	cmpltu	r6,r6,r17
  806c28:	1187c83a 	sub	r3,r2,r6
  806c2c:	4821883a 	mov	r16,r9
  806c30:	3825883a 	mov	r18,r7
  806c34:	003f0606 	br	806850 <__alt_mem_onchip_mem+0xff7fe850>
  806c38:	2023883a 	mov	r17,r4
  806c3c:	003f0906 	br	806864 <__alt_mem_onchip_mem+0xff7fe864>
  806c40:	0101ffc4 	movi	r4,2047
  806c44:	813f3a1e 	bne	r16,r4,806930 <__alt_mem_onchip_mem+0xff7fe930>
  806c48:	003ec406 	br	80675c <__alt_mem_onchip_mem+0xff7fe75c>
  806c4c:	0005883a 	mov	r2,zero
  806c50:	003fb106 	br	806b18 <__alt_mem_onchip_mem+0xff7feb18>
  806c54:	0005883a 	mov	r2,zero
  806c58:	003fbc06 	br	806b4c <__alt_mem_onchip_mem+0xff7feb4c>
  806c5c:	1c44b03a 	or	r2,r3,r17
  806c60:	80008e1e 	bne	r16,zero,806e9c <__subdf3+0x7c4>
  806c64:	1000c826 	beq	r2,zero,806f88 <__subdf3+0x8b0>
  806c68:	2984b03a 	or	r2,r5,r6
  806c6c:	103ebb26 	beq	r2,zero,80675c <__alt_mem_onchip_mem+0xff7fe75c>
  806c70:	8989883a 	add	r4,r17,r6
  806c74:	1945883a 	add	r2,r3,r5
  806c78:	2447803a 	cmpltu	r3,r4,r17
  806c7c:	1887883a 	add	r3,r3,r2
  806c80:	1880202c 	andhi	r2,r3,128
  806c84:	2023883a 	mov	r17,r4
  806c88:	103f1626 	beq	r2,zero,8068e4 <__alt_mem_onchip_mem+0xff7fe8e4>
  806c8c:	00bfe034 	movhi	r2,65408
  806c90:	10bfffc4 	addi	r2,r2,-1
  806c94:	5021883a 	mov	r16,r10
  806c98:	1886703a 	and	r3,r3,r2
  806c9c:	003eaf06 	br	80675c <__alt_mem_onchip_mem+0xff7fe75c>
  806ca0:	3825883a 	mov	r18,r7
  806ca4:	003f0f06 	br	8068e4 <__alt_mem_onchip_mem+0xff7fe8e4>
  806ca8:	1c44b03a 	or	r2,r3,r17
  806cac:	8000251e 	bne	r16,zero,806d44 <__subdf3+0x66c>
  806cb0:	1000661e 	bne	r2,zero,806e4c <__subdf3+0x774>
  806cb4:	2990b03a 	or	r8,r5,r6
  806cb8:	40009626 	beq	r8,zero,806f14 <__subdf3+0x83c>
  806cbc:	2807883a 	mov	r3,r5
  806cc0:	3023883a 	mov	r17,r6
  806cc4:	3825883a 	mov	r18,r7
  806cc8:	003ea406 	br	80675c <__alt_mem_onchip_mem+0xff7fe75c>
  806ccc:	127ff804 	addi	r9,r2,-32
  806cd0:	01000804 	movi	r4,32
  806cd4:	2a52d83a 	srl	r9,r5,r9
  806cd8:	11008c26 	beq	r2,r4,806f0c <__subdf3+0x834>
  806cdc:	01001004 	movi	r4,64
  806ce0:	2085c83a 	sub	r2,r4,r2
  806ce4:	2884983a 	sll	r2,r5,r2
  806ce8:	118cb03a 	or	r6,r2,r6
  806cec:	300cc03a 	cmpne	r6,r6,zero
  806cf0:	4992b03a 	or	r9,r9,r6
  806cf4:	0005883a 	mov	r2,zero
  806cf8:	003f1206 	br	806944 <__alt_mem_onchip_mem+0xff7fe944>
  806cfc:	0101ffc4 	movi	r4,2047
  806d00:	493f9c1e 	bne	r9,r4,806b74 <__alt_mem_onchip_mem+0xff7feb74>
  806d04:	2807883a 	mov	r3,r5
  806d08:	3023883a 	mov	r17,r6
  806d0c:	4821883a 	mov	r16,r9
  806d10:	3825883a 	mov	r18,r7
  806d14:	003e9106 	br	80675c <__alt_mem_onchip_mem+0xff7fe75c>
  806d18:	80001f1e 	bne	r16,zero,806d98 <__subdf3+0x6c0>
  806d1c:	1c48b03a 	or	r4,r3,r17
  806d20:	20005a26 	beq	r4,zero,806e8c <__subdf3+0x7b4>
  806d24:	0084303a 	nor	r2,zero,r2
  806d28:	1000561e 	bne	r2,zero,806e84 <__subdf3+0x7ac>
  806d2c:	89a3883a 	add	r17,r17,r6
  806d30:	1945883a 	add	r2,r3,r5
  806d34:	898d803a 	cmpltu	r6,r17,r6
  806d38:	3087883a 	add	r3,r6,r2
  806d3c:	4821883a 	mov	r16,r9
  806d40:	003f0506 	br	806958 <__alt_mem_onchip_mem+0xff7fe958>
  806d44:	10002b1e 	bne	r2,zero,806df4 <__subdf3+0x71c>
  806d48:	2984b03a 	or	r2,r5,r6
  806d4c:	10008026 	beq	r2,zero,806f50 <__subdf3+0x878>
  806d50:	2807883a 	mov	r3,r5
  806d54:	3023883a 	mov	r17,r6
  806d58:	3825883a 	mov	r18,r7
  806d5c:	0401ffc4 	movi	r16,2047
  806d60:	003e7e06 	br	80675c <__alt_mem_onchip_mem+0xff7fe75c>
  806d64:	3809883a 	mov	r4,r7
  806d68:	0011883a 	mov	r8,zero
  806d6c:	0005883a 	mov	r2,zero
  806d70:	003ee306 	br	806900 <__alt_mem_onchip_mem+0xff7fe900>
  806d74:	1c62b03a 	or	r17,r3,r17
  806d78:	8822c03a 	cmpne	r17,r17,zero
  806d7c:	0005883a 	mov	r2,zero
  806d80:	003f8906 	br	806ba8 <__alt_mem_onchip_mem+0xff7feba8>
  806d84:	3809883a 	mov	r4,r7
  806d88:	4821883a 	mov	r16,r9
  806d8c:	0011883a 	mov	r8,zero
  806d90:	0005883a 	mov	r2,zero
  806d94:	003eda06 	br	806900 <__alt_mem_onchip_mem+0xff7fe900>
  806d98:	0101ffc4 	movi	r4,2047
  806d9c:	49003b26 	beq	r9,r4,806e8c <__subdf3+0x7b4>
  806da0:	0085c83a 	sub	r2,zero,r2
  806da4:	18c02034 	orhi	r3,r3,128
  806da8:	01000e04 	movi	r4,56
  806dac:	20806e16 	blt	r4,r2,806f68 <__subdf3+0x890>
  806db0:	010007c4 	movi	r4,31
  806db4:	20807716 	blt	r4,r2,806f94 <__subdf3+0x8bc>
  806db8:	01000804 	movi	r4,32
  806dbc:	2089c83a 	sub	r4,r4,r2
  806dc0:	1914983a 	sll	r10,r3,r4
  806dc4:	8890d83a 	srl	r8,r17,r2
  806dc8:	8908983a 	sll	r4,r17,r4
  806dcc:	1884d83a 	srl	r2,r3,r2
  806dd0:	5222b03a 	or	r17,r10,r8
  806dd4:	2006c03a 	cmpne	r3,r4,zero
  806dd8:	88e2b03a 	or	r17,r17,r3
  806ddc:	89a3883a 	add	r17,r17,r6
  806de0:	1145883a 	add	r2,r2,r5
  806de4:	898d803a 	cmpltu	r6,r17,r6
  806de8:	3087883a 	add	r3,r6,r2
  806dec:	4821883a 	mov	r16,r9
  806df0:	003ed906 	br	806958 <__alt_mem_onchip_mem+0xff7fe958>
  806df4:	2984b03a 	or	r2,r5,r6
  806df8:	10004226 	beq	r2,zero,806f04 <__subdf3+0x82c>
  806dfc:	1808d0fa 	srli	r4,r3,3
  806e00:	8822d0fa 	srli	r17,r17,3
  806e04:	1806977a 	slli	r3,r3,29
  806e08:	2080022c 	andhi	r2,r4,8
  806e0c:	1c62b03a 	or	r17,r3,r17
  806e10:	10000826 	beq	r2,zero,806e34 <__subdf3+0x75c>
  806e14:	2812d0fa 	srli	r9,r5,3
  806e18:	4880022c 	andhi	r2,r9,8
  806e1c:	1000051e 	bne	r2,zero,806e34 <__subdf3+0x75c>
  806e20:	300cd0fa 	srli	r6,r6,3
  806e24:	2804977a 	slli	r2,r5,29
  806e28:	4809883a 	mov	r4,r9
  806e2c:	3825883a 	mov	r18,r7
  806e30:	11a2b03a 	or	r17,r2,r6
  806e34:	8806d77a 	srli	r3,r17,29
  806e38:	200890fa 	slli	r4,r4,3
  806e3c:	882290fa 	slli	r17,r17,3
  806e40:	0401ffc4 	movi	r16,2047
  806e44:	1906b03a 	or	r3,r3,r4
  806e48:	003e4406 	br	80675c <__alt_mem_onchip_mem+0xff7fe75c>
  806e4c:	2984b03a 	or	r2,r5,r6
  806e50:	103e4226 	beq	r2,zero,80675c <__alt_mem_onchip_mem+0xff7fe75c>
  806e54:	8989c83a 	sub	r4,r17,r6
  806e58:	8911803a 	cmpltu	r8,r17,r4
  806e5c:	1945c83a 	sub	r2,r3,r5
  806e60:	1205c83a 	sub	r2,r2,r8
  806e64:	1200202c 	andhi	r8,r2,128
  806e68:	403e9a26 	beq	r8,zero,8068d4 <__alt_mem_onchip_mem+0xff7fe8d4>
  806e6c:	3463c83a 	sub	r17,r6,r17
  806e70:	28c5c83a 	sub	r2,r5,r3
  806e74:	344d803a 	cmpltu	r6,r6,r17
  806e78:	1187c83a 	sub	r3,r2,r6
  806e7c:	3825883a 	mov	r18,r7
  806e80:	003e3606 	br	80675c <__alt_mem_onchip_mem+0xff7fe75c>
  806e84:	0101ffc4 	movi	r4,2047
  806e88:	493fc71e 	bne	r9,r4,806da8 <__alt_mem_onchip_mem+0xff7feda8>
  806e8c:	2807883a 	mov	r3,r5
  806e90:	3023883a 	mov	r17,r6
  806e94:	4821883a 	mov	r16,r9
  806e98:	003e3006 	br	80675c <__alt_mem_onchip_mem+0xff7fe75c>
  806e9c:	10003626 	beq	r2,zero,806f78 <__subdf3+0x8a0>
  806ea0:	2984b03a 	or	r2,r5,r6
  806ea4:	10001726 	beq	r2,zero,806f04 <__subdf3+0x82c>
  806ea8:	1808d0fa 	srli	r4,r3,3
  806eac:	8822d0fa 	srli	r17,r17,3
  806eb0:	1806977a 	slli	r3,r3,29
  806eb4:	2080022c 	andhi	r2,r4,8
  806eb8:	1c62b03a 	or	r17,r3,r17
  806ebc:	10000726 	beq	r2,zero,806edc <__subdf3+0x804>
  806ec0:	2812d0fa 	srli	r9,r5,3
  806ec4:	4880022c 	andhi	r2,r9,8
  806ec8:	1000041e 	bne	r2,zero,806edc <__subdf3+0x804>
  806ecc:	300cd0fa 	srli	r6,r6,3
  806ed0:	2804977a 	slli	r2,r5,29
  806ed4:	4809883a 	mov	r4,r9
  806ed8:	11a2b03a 	or	r17,r2,r6
  806edc:	8806d77a 	srli	r3,r17,29
  806ee0:	200890fa 	slli	r4,r4,3
  806ee4:	882290fa 	slli	r17,r17,3
  806ee8:	3825883a 	mov	r18,r7
  806eec:	1906b03a 	or	r3,r3,r4
  806ef0:	0401ffc4 	movi	r16,2047
  806ef4:	003e1906 	br	80675c <__alt_mem_onchip_mem+0xff7fe75c>
  806ef8:	000b883a 	mov	r5,zero
  806efc:	0005883a 	mov	r2,zero
  806f00:	003e2e06 	br	8067bc <__alt_mem_onchip_mem+0xff7fe7bc>
  806f04:	0401ffc4 	movi	r16,2047
  806f08:	003e1406 	br	80675c <__alt_mem_onchip_mem+0xff7fe75c>
  806f0c:	0005883a 	mov	r2,zero
  806f10:	003f7506 	br	806ce8 <__alt_mem_onchip_mem+0xff7fece8>
  806f14:	0005883a 	mov	r2,zero
  806f18:	0009883a 	mov	r4,zero
  806f1c:	003e7806 	br	806900 <__alt_mem_onchip_mem+0xff7fe900>
  806f20:	123ff804 	addi	r8,r2,-32
  806f24:	01000804 	movi	r4,32
  806f28:	1a10d83a 	srl	r8,r3,r8
  806f2c:	11002526 	beq	r2,r4,806fc4 <__subdf3+0x8ec>
  806f30:	01001004 	movi	r4,64
  806f34:	2085c83a 	sub	r2,r4,r2
  806f38:	1884983a 	sll	r2,r3,r2
  806f3c:	1444b03a 	or	r2,r2,r17
  806f40:	1004c03a 	cmpne	r2,r2,zero
  806f44:	40a2b03a 	or	r17,r8,r2
  806f48:	0005883a 	mov	r2,zero
  806f4c:	003f1606 	br	806ba8 <__alt_mem_onchip_mem+0xff7feba8>
  806f50:	02000434 	movhi	r8,16
  806f54:	0009883a 	mov	r4,zero
  806f58:	423fffc4 	addi	r8,r8,-1
  806f5c:	00bfffc4 	movi	r2,-1
  806f60:	0401ffc4 	movi	r16,2047
  806f64:	003e6606 	br	806900 <__alt_mem_onchip_mem+0xff7fe900>
  806f68:	1c62b03a 	or	r17,r3,r17
  806f6c:	8822c03a 	cmpne	r17,r17,zero
  806f70:	0005883a 	mov	r2,zero
  806f74:	003f9906 	br	806ddc <__alt_mem_onchip_mem+0xff7feddc>
  806f78:	2807883a 	mov	r3,r5
  806f7c:	3023883a 	mov	r17,r6
  806f80:	0401ffc4 	movi	r16,2047
  806f84:	003df506 	br	80675c <__alt_mem_onchip_mem+0xff7fe75c>
  806f88:	2807883a 	mov	r3,r5
  806f8c:	3023883a 	mov	r17,r6
  806f90:	003df206 	br	80675c <__alt_mem_onchip_mem+0xff7fe75c>
  806f94:	123ff804 	addi	r8,r2,-32
  806f98:	01000804 	movi	r4,32
  806f9c:	1a10d83a 	srl	r8,r3,r8
  806fa0:	11000a26 	beq	r2,r4,806fcc <__subdf3+0x8f4>
  806fa4:	01001004 	movi	r4,64
  806fa8:	2085c83a 	sub	r2,r4,r2
  806fac:	1884983a 	sll	r2,r3,r2
  806fb0:	1444b03a 	or	r2,r2,r17
  806fb4:	1004c03a 	cmpne	r2,r2,zero
  806fb8:	40a2b03a 	or	r17,r8,r2
  806fbc:	0005883a 	mov	r2,zero
  806fc0:	003f8606 	br	806ddc <__alt_mem_onchip_mem+0xff7feddc>
  806fc4:	0005883a 	mov	r2,zero
  806fc8:	003fdc06 	br	806f3c <__alt_mem_onchip_mem+0xff7fef3c>
  806fcc:	0005883a 	mov	r2,zero
  806fd0:	003ff706 	br	806fb0 <__alt_mem_onchip_mem+0xff7fefb0>

00806fd4 <__floatsidf>:
  806fd4:	defffd04 	addi	sp,sp,-12
  806fd8:	dfc00215 	stw	ra,8(sp)
  806fdc:	dc400115 	stw	r17,4(sp)
  806fe0:	dc000015 	stw	r16,0(sp)
  806fe4:	20002b26 	beq	r4,zero,807094 <__floatsidf+0xc0>
  806fe8:	2023883a 	mov	r17,r4
  806fec:	2020d7fa 	srli	r16,r4,31
  806ff0:	20002d16 	blt	r4,zero,8070a8 <__floatsidf+0xd4>
  806ff4:	8809883a 	mov	r4,r17
  806ff8:	08070b00 	call	8070b0 <__clzsi2>
  806ffc:	01410784 	movi	r5,1054
  807000:	288bc83a 	sub	r5,r5,r2
  807004:	01010cc4 	movi	r4,1075
  807008:	2149c83a 	sub	r4,r4,r5
  80700c:	00c007c4 	movi	r3,31
  807010:	1900160e 	bge	r3,r4,80706c <__floatsidf+0x98>
  807014:	00c104c4 	movi	r3,1043
  807018:	1947c83a 	sub	r3,r3,r5
  80701c:	88c6983a 	sll	r3,r17,r3
  807020:	00800434 	movhi	r2,16
  807024:	10bfffc4 	addi	r2,r2,-1
  807028:	1886703a 	and	r3,r3,r2
  80702c:	2941ffcc 	andi	r5,r5,2047
  807030:	800d883a 	mov	r6,r16
  807034:	0005883a 	mov	r2,zero
  807038:	280a953a 	slli	r5,r5,20
  80703c:	31803fcc 	andi	r6,r6,255
  807040:	01000434 	movhi	r4,16
  807044:	300c97fa 	slli	r6,r6,31
  807048:	213fffc4 	addi	r4,r4,-1
  80704c:	1906703a 	and	r3,r3,r4
  807050:	1946b03a 	or	r3,r3,r5
  807054:	1986b03a 	or	r3,r3,r6
  807058:	dfc00217 	ldw	ra,8(sp)
  80705c:	dc400117 	ldw	r17,4(sp)
  807060:	dc000017 	ldw	r16,0(sp)
  807064:	dec00304 	addi	sp,sp,12
  807068:	f800283a 	ret
  80706c:	00c002c4 	movi	r3,11
  807070:	1887c83a 	sub	r3,r3,r2
  807074:	88c6d83a 	srl	r3,r17,r3
  807078:	8904983a 	sll	r2,r17,r4
  80707c:	01000434 	movhi	r4,16
  807080:	213fffc4 	addi	r4,r4,-1
  807084:	2941ffcc 	andi	r5,r5,2047
  807088:	1906703a 	and	r3,r3,r4
  80708c:	800d883a 	mov	r6,r16
  807090:	003fe906 	br	807038 <__alt_mem_onchip_mem+0xff7ff038>
  807094:	000d883a 	mov	r6,zero
  807098:	000b883a 	mov	r5,zero
  80709c:	0007883a 	mov	r3,zero
  8070a0:	0005883a 	mov	r2,zero
  8070a4:	003fe406 	br	807038 <__alt_mem_onchip_mem+0xff7ff038>
  8070a8:	0123c83a 	sub	r17,zero,r4
  8070ac:	003fd106 	br	806ff4 <__alt_mem_onchip_mem+0xff7feff4>

008070b0 <__clzsi2>:
  8070b0:	00bfffd4 	movui	r2,65535
  8070b4:	11000536 	bltu	r2,r4,8070cc <__clzsi2+0x1c>
  8070b8:	00803fc4 	movi	r2,255
  8070bc:	11000f36 	bltu	r2,r4,8070fc <__clzsi2+0x4c>
  8070c0:	00800804 	movi	r2,32
  8070c4:	0007883a 	mov	r3,zero
  8070c8:	00000506 	br	8070e0 <__clzsi2+0x30>
  8070cc:	00804034 	movhi	r2,256
  8070d0:	10bfffc4 	addi	r2,r2,-1
  8070d4:	11000c2e 	bgeu	r2,r4,807108 <__clzsi2+0x58>
  8070d8:	00800204 	movi	r2,8
  8070dc:	00c00604 	movi	r3,24
  8070e0:	20c8d83a 	srl	r4,r4,r3
  8070e4:	00c02074 	movhi	r3,129
  8070e8:	18ebbf04 	addi	r3,r3,-20740
  8070ec:	1909883a 	add	r4,r3,r4
  8070f0:	20c00003 	ldbu	r3,0(r4)
  8070f4:	10c5c83a 	sub	r2,r2,r3
  8070f8:	f800283a 	ret
  8070fc:	00800604 	movi	r2,24
  807100:	00c00204 	movi	r3,8
  807104:	003ff606 	br	8070e0 <__alt_mem_onchip_mem+0xff7ff0e0>
  807108:	00800404 	movi	r2,16
  80710c:	1007883a 	mov	r3,r2
  807110:	003ff306 	br	8070e0 <__alt_mem_onchip_mem+0xff7ff0e0>

00807114 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  807114:	defff904 	addi	sp,sp,-28
  807118:	dfc00615 	stw	ra,24(sp)
  80711c:	df000515 	stw	fp,20(sp)
  807120:	df000504 	addi	fp,sp,20
  807124:	e13ffc15 	stw	r4,-16(fp)
  807128:	e17ffd15 	stw	r5,-12(fp)
  80712c:	e1bffe15 	stw	r6,-8(fp)
  807130:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  807134:	e0800217 	ldw	r2,8(fp)
  807138:	d8800015 	stw	r2,0(sp)
  80713c:	e1ffff17 	ldw	r7,-4(fp)
  807140:	e1bffe17 	ldw	r6,-8(fp)
  807144:	e17ffd17 	ldw	r5,-12(fp)
  807148:	e13ffc17 	ldw	r4,-16(fp)
  80714c:	08072c40 	call	8072c4 <alt_iic_isr_register>
}  
  807150:	e037883a 	mov	sp,fp
  807154:	dfc00117 	ldw	ra,4(sp)
  807158:	df000017 	ldw	fp,0(sp)
  80715c:	dec00204 	addi	sp,sp,8
  807160:	f800283a 	ret

00807164 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  807164:	defff904 	addi	sp,sp,-28
  807168:	df000615 	stw	fp,24(sp)
  80716c:	df000604 	addi	fp,sp,24
  807170:	e13ffe15 	stw	r4,-8(fp)
  807174:	e17fff15 	stw	r5,-4(fp)
  807178:	e0bfff17 	ldw	r2,-4(fp)
  80717c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807180:	0005303a 	rdctl	r2,status
  807184:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807188:	e0fffb17 	ldw	r3,-20(fp)
  80718c:	00bfff84 	movi	r2,-2
  807190:	1884703a 	and	r2,r3,r2
  807194:	1001703a 	wrctl	status,r2
  
  return context;
  807198:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80719c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  8071a0:	00c00044 	movi	r3,1
  8071a4:	e0bffa17 	ldw	r2,-24(fp)
  8071a8:	1884983a 	sll	r2,r3,r2
  8071ac:	1007883a 	mov	r3,r2
  8071b0:	d0a61f17 	ldw	r2,-26500(gp)
  8071b4:	1884b03a 	or	r2,r3,r2
  8071b8:	d0a61f15 	stw	r2,-26500(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8071bc:	d0a61f17 	ldw	r2,-26500(gp)
  8071c0:	100170fa 	wrctl	ienable,r2
  8071c4:	e0bffc17 	ldw	r2,-16(fp)
  8071c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8071cc:	e0bffd17 	ldw	r2,-12(fp)
  8071d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8071d4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  8071d8:	0001883a 	nop
}
  8071dc:	e037883a 	mov	sp,fp
  8071e0:	df000017 	ldw	fp,0(sp)
  8071e4:	dec00104 	addi	sp,sp,4
  8071e8:	f800283a 	ret

008071ec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  8071ec:	defff904 	addi	sp,sp,-28
  8071f0:	df000615 	stw	fp,24(sp)
  8071f4:	df000604 	addi	fp,sp,24
  8071f8:	e13ffe15 	stw	r4,-8(fp)
  8071fc:	e17fff15 	stw	r5,-4(fp)
  807200:	e0bfff17 	ldw	r2,-4(fp)
  807204:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807208:	0005303a 	rdctl	r2,status
  80720c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807210:	e0fffb17 	ldw	r3,-20(fp)
  807214:	00bfff84 	movi	r2,-2
  807218:	1884703a 	and	r2,r3,r2
  80721c:	1001703a 	wrctl	status,r2
  
  return context;
  807220:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  807224:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  807228:	00c00044 	movi	r3,1
  80722c:	e0bffa17 	ldw	r2,-24(fp)
  807230:	1884983a 	sll	r2,r3,r2
  807234:	0084303a 	nor	r2,zero,r2
  807238:	1007883a 	mov	r3,r2
  80723c:	d0a61f17 	ldw	r2,-26500(gp)
  807240:	1884703a 	and	r2,r3,r2
  807244:	d0a61f15 	stw	r2,-26500(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  807248:	d0a61f17 	ldw	r2,-26500(gp)
  80724c:	100170fa 	wrctl	ienable,r2
  807250:	e0bffc17 	ldw	r2,-16(fp)
  807254:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807258:	e0bffd17 	ldw	r2,-12(fp)
  80725c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  807260:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  807264:	0001883a 	nop
}
  807268:	e037883a 	mov	sp,fp
  80726c:	df000017 	ldw	fp,0(sp)
  807270:	dec00104 	addi	sp,sp,4
  807274:	f800283a 	ret

00807278 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  807278:	defffc04 	addi	sp,sp,-16
  80727c:	df000315 	stw	fp,12(sp)
  807280:	df000304 	addi	fp,sp,12
  807284:	e13ffe15 	stw	r4,-8(fp)
  807288:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80728c:	000530fa 	rdctl	r2,ienable
  807290:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  807294:	00c00044 	movi	r3,1
  807298:	e0bfff17 	ldw	r2,-4(fp)
  80729c:	1884983a 	sll	r2,r3,r2
  8072a0:	1007883a 	mov	r3,r2
  8072a4:	e0bffd17 	ldw	r2,-12(fp)
  8072a8:	1884703a 	and	r2,r3,r2
  8072ac:	1004c03a 	cmpne	r2,r2,zero
  8072b0:	10803fcc 	andi	r2,r2,255
}
  8072b4:	e037883a 	mov	sp,fp
  8072b8:	df000017 	ldw	fp,0(sp)
  8072bc:	dec00104 	addi	sp,sp,4
  8072c0:	f800283a 	ret

008072c4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8072c4:	defff504 	addi	sp,sp,-44
  8072c8:	dfc00a15 	stw	ra,40(sp)
  8072cc:	df000915 	stw	fp,36(sp)
  8072d0:	df000904 	addi	fp,sp,36
  8072d4:	e13ffc15 	stw	r4,-16(fp)
  8072d8:	e17ffd15 	stw	r5,-12(fp)
  8072dc:	e1bffe15 	stw	r6,-8(fp)
  8072e0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  8072e4:	00bffa84 	movi	r2,-22
  8072e8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  8072ec:	e0bffd17 	ldw	r2,-12(fp)
  8072f0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8072f4:	e0bff817 	ldw	r2,-32(fp)
  8072f8:	10800808 	cmpgei	r2,r2,32
  8072fc:	1000271e 	bne	r2,zero,80739c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807300:	0005303a 	rdctl	r2,status
  807304:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807308:	e0fffb17 	ldw	r3,-20(fp)
  80730c:	00bfff84 	movi	r2,-2
  807310:	1884703a 	and	r2,r3,r2
  807314:	1001703a 	wrctl	status,r2
  
  return context;
  807318:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80731c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  807320:	00802074 	movhi	r2,129
  807324:	10b8dc04 	addi	r2,r2,-7312
  807328:	e0fff817 	ldw	r3,-32(fp)
  80732c:	180690fa 	slli	r3,r3,3
  807330:	10c5883a 	add	r2,r2,r3
  807334:	e0fffe17 	ldw	r3,-8(fp)
  807338:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  80733c:	00802074 	movhi	r2,129
  807340:	10b8dc04 	addi	r2,r2,-7312
  807344:	e0fff817 	ldw	r3,-32(fp)
  807348:	180690fa 	slli	r3,r3,3
  80734c:	10c5883a 	add	r2,r2,r3
  807350:	10800104 	addi	r2,r2,4
  807354:	e0ffff17 	ldw	r3,-4(fp)
  807358:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80735c:	e0bffe17 	ldw	r2,-8(fp)
  807360:	10000526 	beq	r2,zero,807378 <alt_iic_isr_register+0xb4>
  807364:	e0bff817 	ldw	r2,-32(fp)
  807368:	100b883a 	mov	r5,r2
  80736c:	e13ffc17 	ldw	r4,-16(fp)
  807370:	08071640 	call	807164 <alt_ic_irq_enable>
  807374:	00000406 	br	807388 <alt_iic_isr_register+0xc4>
  807378:	e0bff817 	ldw	r2,-32(fp)
  80737c:	100b883a 	mov	r5,r2
  807380:	e13ffc17 	ldw	r4,-16(fp)
  807384:	08071ec0 	call	8071ec <alt_ic_irq_disable>
  807388:	e0bff715 	stw	r2,-36(fp)
  80738c:	e0bffa17 	ldw	r2,-24(fp)
  807390:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807394:	e0bff917 	ldw	r2,-28(fp)
  807398:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80739c:	e0bff717 	ldw	r2,-36(fp)
}
  8073a0:	e037883a 	mov	sp,fp
  8073a4:	dfc00117 	ldw	ra,4(sp)
  8073a8:	df000017 	ldw	fp,0(sp)
  8073ac:	dec00204 	addi	sp,sp,8
  8073b0:	f800283a 	ret

008073b4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  8073b4:	defffc04 	addi	sp,sp,-16
  8073b8:	df000315 	stw	fp,12(sp)
  8073bc:	df000304 	addi	fp,sp,12
  8073c0:	e13ffd15 	stw	r4,-12(fp)
  8073c4:	e17ffe15 	stw	r5,-8(fp)
  8073c8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  8073cc:	e0fffe17 	ldw	r3,-8(fp)
  8073d0:	e0bffd17 	ldw	r2,-12(fp)
  8073d4:	18800c26 	beq	r3,r2,807408 <alt_load_section+0x54>
  {
    while( to != end )
  8073d8:	00000806 	br	8073fc <alt_load_section+0x48>
    {
      *to++ = *from++;
  8073dc:	e0bffe17 	ldw	r2,-8(fp)
  8073e0:	10c00104 	addi	r3,r2,4
  8073e4:	e0fffe15 	stw	r3,-8(fp)
  8073e8:	e0fffd17 	ldw	r3,-12(fp)
  8073ec:	19000104 	addi	r4,r3,4
  8073f0:	e13ffd15 	stw	r4,-12(fp)
  8073f4:	18c00017 	ldw	r3,0(r3)
  8073f8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  8073fc:	e0fffe17 	ldw	r3,-8(fp)
  807400:	e0bfff17 	ldw	r2,-4(fp)
  807404:	18bff51e 	bne	r3,r2,8073dc <__alt_mem_onchip_mem+0xff7ff3dc>
    {
      *to++ = *from++;
    }
  }
}
  807408:	0001883a 	nop
  80740c:	e037883a 	mov	sp,fp
  807410:	df000017 	ldw	fp,0(sp)
  807414:	dec00104 	addi	sp,sp,4
  807418:	f800283a 	ret

0080741c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80741c:	defffe04 	addi	sp,sp,-8
  807420:	dfc00115 	stw	ra,4(sp)
  807424:	df000015 	stw	fp,0(sp)
  807428:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80742c:	01802074 	movhi	r6,129
  807430:	31b2c204 	addi	r6,r6,-13560
  807434:	01402074 	movhi	r5,129
  807438:	296cb104 	addi	r5,r5,-19772
  80743c:	01002074 	movhi	r4,129
  807440:	2132c204 	addi	r4,r4,-13560
  807444:	08073b40 	call	8073b4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  807448:	01802034 	movhi	r6,128
  80744c:	31809104 	addi	r6,r6,580
  807450:	01402034 	movhi	r5,128
  807454:	29400804 	addi	r5,r5,32
  807458:	01002034 	movhi	r4,128
  80745c:	21000804 	addi	r4,r4,32
  807460:	08073b40 	call	8073b4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  807464:	01802074 	movhi	r6,129
  807468:	31acb104 	addi	r6,r6,-19772
  80746c:	01402074 	movhi	r5,129
  807470:	296bbf04 	addi	r5,r5,-20740
  807474:	01002074 	movhi	r4,129
  807478:	212bbf04 	addi	r4,r4,-20740
  80747c:	08073b40 	call	8073b4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  807480:	0809b680 	call	809b68 <alt_dcache_flush_all>
  alt_icache_flush_all();
  807484:	0809d7c0 	call	809d7c <alt_icache_flush_all>
}
  807488:	0001883a 	nop
  80748c:	e037883a 	mov	sp,fp
  807490:	dfc00117 	ldw	ra,4(sp)
  807494:	df000017 	ldw	fp,0(sp)
  807498:	dec00204 	addi	sp,sp,8
  80749c:	f800283a 	ret

008074a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8074a0:	defffd04 	addi	sp,sp,-12
  8074a4:	dfc00215 	stw	ra,8(sp)
  8074a8:	df000115 	stw	fp,4(sp)
  8074ac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8074b0:	0009883a 	mov	r4,zero
  8074b4:	08075500 	call	807550 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  8074b8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8074bc:	08075880 	call	807588 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8074c0:	01802074 	movhi	r6,129
  8074c4:	31abff04 	addi	r6,r6,-20484
  8074c8:	01402074 	movhi	r5,129
  8074cc:	296bff04 	addi	r5,r5,-20484
  8074d0:	01002074 	movhi	r4,129
  8074d4:	212bff04 	addi	r4,r4,-20484
  8074d8:	0809f100 	call	809f10 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8074dc:	0809cbc0 	call	809cbc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8074e0:	01002074 	movhi	r4,129
  8074e4:	21274704 	addi	r4,r4,-25316
  8074e8:	080a8600 	call	80a860 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8074ec:	d0a62017 	ldw	r2,-26496(gp)
  8074f0:	d0e62117 	ldw	r3,-26492(gp)
  8074f4:	d1262217 	ldw	r4,-26488(gp)
  8074f8:	200d883a 	mov	r6,r4
  8074fc:	180b883a 	mov	r5,r3
  807500:	1009883a 	mov	r4,r2
  807504:	08059c40 	call	8059c4 <main>
  807508:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80750c:	01000044 	movi	r4,1
  807510:	0809a980 	call	809a98 <close>
  exit (result);
  807514:	e13fff17 	ldw	r4,-4(fp)
  807518:	080a8740 	call	80a874 <exit>

0080751c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80751c:	defffd04 	addi	sp,sp,-12
  807520:	dfc00215 	stw	ra,8(sp)
  807524:	df000115 	stw	fp,4(sp)
  807528:	df000104 	addi	fp,sp,4
  80752c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  807530:	d1600404 	addi	r5,gp,-32752
  807534:	e13fff17 	ldw	r4,-4(fp)
  807538:	0809c180 	call	809c18 <alt_dev_llist_insert>
}
  80753c:	e037883a 	mov	sp,fp
  807540:	dfc00117 	ldw	ra,4(sp)
  807544:	df000017 	ldw	fp,0(sp)
  807548:	dec00204 	addi	sp,sp,8
  80754c:	f800283a 	ret

00807550 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  807550:	defffd04 	addi	sp,sp,-12
  807554:	dfc00215 	stw	ra,8(sp)
  807558:	df000115 	stw	fp,4(sp)
  80755c:	df000104 	addi	fp,sp,4
  807560:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  807564:	080a4180 	call	80a418 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  807568:	00800044 	movi	r2,1
  80756c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  807570:	0001883a 	nop
  807574:	e037883a 	mov	sp,fp
  807578:	dfc00117 	ldw	ra,4(sp)
  80757c:	df000017 	ldw	fp,0(sp)
  807580:	dec00204 	addi	sp,sp,8
  807584:	f800283a 	ret

00807588 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  807588:	defffe04 	addi	sp,sp,-8
  80758c:	dfc00115 	stw	ra,4(sp)
  807590:	df000015 	stw	fp,0(sp)
  807594:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  807598:	01c0fa04 	movi	r7,1000
  80759c:	01800084 	movi	r6,2
  8075a0:	000b883a 	mov	r5,zero
  8075a4:	01004074 	movhi	r4,257
  8075a8:	21040804 	addi	r4,r4,4128
  8075ac:	0808fdc0 	call	808fdc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  8075b0:	01800044 	movi	r6,1
  8075b4:	000b883a 	mov	r5,zero
  8075b8:	01002074 	movhi	r4,129
  8075bc:	212cbb04 	addi	r4,r4,-19732
  8075c0:	08077840 	call	807784 <altera_avalon_jtag_uart_init>
  8075c4:	01002074 	movhi	r4,129
  8075c8:	212cb104 	addi	r4,r4,-19772
  8075cc:	080751c0 	call	80751c <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  8075d0:	01002074 	movhi	r4,129
  8075d4:	2130d304 	addi	r4,r4,-15540
  8075d8:	0808dd00 	call	808dd0 <altera_avalon_lcd_16207_init>
  8075dc:	01002074 	movhi	r4,129
  8075e0:	2130c904 	addi	r4,r4,-15580
  8075e4:	080751c0 	call	80751c <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  8075e8:	000d883a 	mov	r6,zero
  8075ec:	000b883a 	mov	r5,zero
  8075f0:	01002074 	movhi	r4,129
  8075f4:	21311b04 	addi	r4,r4,-15252
  8075f8:	08091680 	call	809168 <altera_avalon_uart_init>
  8075fc:	01002074 	movhi	r4,129
  807600:	21311104 	addi	r4,r4,-15292
  807604:	080751c0 	call	80751c <alt_dev_reg>
}
  807608:	0001883a 	nop
  80760c:	e037883a 	mov	sp,fp
  807610:	dfc00117 	ldw	ra,4(sp)
  807614:	df000017 	ldw	fp,0(sp)
  807618:	dec00204 	addi	sp,sp,8
  80761c:	f800283a 	ret

00807620 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  807620:	defffa04 	addi	sp,sp,-24
  807624:	dfc00515 	stw	ra,20(sp)
  807628:	df000415 	stw	fp,16(sp)
  80762c:	df000404 	addi	fp,sp,16
  807630:	e13ffd15 	stw	r4,-12(fp)
  807634:	e17ffe15 	stw	r5,-8(fp)
  807638:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80763c:	e0bffd17 	ldw	r2,-12(fp)
  807640:	10800017 	ldw	r2,0(r2)
  807644:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  807648:	e0bffc17 	ldw	r2,-16(fp)
  80764c:	10c00a04 	addi	r3,r2,40
  807650:	e0bffd17 	ldw	r2,-12(fp)
  807654:	10800217 	ldw	r2,8(r2)
  807658:	100f883a 	mov	r7,r2
  80765c:	e1bfff17 	ldw	r6,-4(fp)
  807660:	e17ffe17 	ldw	r5,-8(fp)
  807664:	1809883a 	mov	r4,r3
  807668:	0807c480 	call	807c48 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80766c:	e037883a 	mov	sp,fp
  807670:	dfc00117 	ldw	ra,4(sp)
  807674:	df000017 	ldw	fp,0(sp)
  807678:	dec00204 	addi	sp,sp,8
  80767c:	f800283a 	ret

00807680 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  807680:	defffa04 	addi	sp,sp,-24
  807684:	dfc00515 	stw	ra,20(sp)
  807688:	df000415 	stw	fp,16(sp)
  80768c:	df000404 	addi	fp,sp,16
  807690:	e13ffd15 	stw	r4,-12(fp)
  807694:	e17ffe15 	stw	r5,-8(fp)
  807698:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80769c:	e0bffd17 	ldw	r2,-12(fp)
  8076a0:	10800017 	ldw	r2,0(r2)
  8076a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8076a8:	e0bffc17 	ldw	r2,-16(fp)
  8076ac:	10c00a04 	addi	r3,r2,40
  8076b0:	e0bffd17 	ldw	r2,-12(fp)
  8076b4:	10800217 	ldw	r2,8(r2)
  8076b8:	100f883a 	mov	r7,r2
  8076bc:	e1bfff17 	ldw	r6,-4(fp)
  8076c0:	e17ffe17 	ldw	r5,-8(fp)
  8076c4:	1809883a 	mov	r4,r3
  8076c8:	0807e640 	call	807e64 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  8076cc:	e037883a 	mov	sp,fp
  8076d0:	dfc00117 	ldw	ra,4(sp)
  8076d4:	df000017 	ldw	fp,0(sp)
  8076d8:	dec00204 	addi	sp,sp,8
  8076dc:	f800283a 	ret

008076e0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  8076e0:	defffc04 	addi	sp,sp,-16
  8076e4:	dfc00315 	stw	ra,12(sp)
  8076e8:	df000215 	stw	fp,8(sp)
  8076ec:	df000204 	addi	fp,sp,8
  8076f0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8076f4:	e0bfff17 	ldw	r2,-4(fp)
  8076f8:	10800017 	ldw	r2,0(r2)
  8076fc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  807700:	e0bffe17 	ldw	r2,-8(fp)
  807704:	10c00a04 	addi	r3,r2,40
  807708:	e0bfff17 	ldw	r2,-4(fp)
  80770c:	10800217 	ldw	r2,8(r2)
  807710:	100b883a 	mov	r5,r2
  807714:	1809883a 	mov	r4,r3
  807718:	0807af00 	call	807af0 <altera_avalon_jtag_uart_close>
}
  80771c:	e037883a 	mov	sp,fp
  807720:	dfc00117 	ldw	ra,4(sp)
  807724:	df000017 	ldw	fp,0(sp)
  807728:	dec00204 	addi	sp,sp,8
  80772c:	f800283a 	ret

00807730 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  807730:	defffa04 	addi	sp,sp,-24
  807734:	dfc00515 	stw	ra,20(sp)
  807738:	df000415 	stw	fp,16(sp)
  80773c:	df000404 	addi	fp,sp,16
  807740:	e13ffd15 	stw	r4,-12(fp)
  807744:	e17ffe15 	stw	r5,-8(fp)
  807748:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80774c:	e0bffd17 	ldw	r2,-12(fp)
  807750:	10800017 	ldw	r2,0(r2)
  807754:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  807758:	e0bffc17 	ldw	r2,-16(fp)
  80775c:	10800a04 	addi	r2,r2,40
  807760:	e1bfff17 	ldw	r6,-4(fp)
  807764:	e17ffe17 	ldw	r5,-8(fp)
  807768:	1009883a 	mov	r4,r2
  80776c:	0807b580 	call	807b58 <altera_avalon_jtag_uart_ioctl>
}
  807770:	e037883a 	mov	sp,fp
  807774:	dfc00117 	ldw	ra,4(sp)
  807778:	df000017 	ldw	fp,0(sp)
  80777c:	dec00204 	addi	sp,sp,8
  807780:	f800283a 	ret

00807784 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  807784:	defffa04 	addi	sp,sp,-24
  807788:	dfc00515 	stw	ra,20(sp)
  80778c:	df000415 	stw	fp,16(sp)
  807790:	df000404 	addi	fp,sp,16
  807794:	e13ffd15 	stw	r4,-12(fp)
  807798:	e17ffe15 	stw	r5,-8(fp)
  80779c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8077a0:	e0bffd17 	ldw	r2,-12(fp)
  8077a4:	00c00044 	movi	r3,1
  8077a8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8077ac:	e0bffd17 	ldw	r2,-12(fp)
  8077b0:	10800017 	ldw	r2,0(r2)
  8077b4:	10800104 	addi	r2,r2,4
  8077b8:	1007883a 	mov	r3,r2
  8077bc:	e0bffd17 	ldw	r2,-12(fp)
  8077c0:	10800817 	ldw	r2,32(r2)
  8077c4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  8077c8:	e0bffe17 	ldw	r2,-8(fp)
  8077cc:	e0ffff17 	ldw	r3,-4(fp)
  8077d0:	d8000015 	stw	zero,0(sp)
  8077d4:	e1fffd17 	ldw	r7,-12(fp)
  8077d8:	01802034 	movhi	r6,128
  8077dc:	319e1104 	addi	r6,r6,30788
  8077e0:	180b883a 	mov	r5,r3
  8077e4:	1009883a 	mov	r4,r2
  8077e8:	08071140 	call	807114 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8077ec:	e0bffd17 	ldw	r2,-12(fp)
  8077f0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8077f4:	e0bffd17 	ldw	r2,-12(fp)
  8077f8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8077fc:	d0e62417 	ldw	r3,-26480(gp)
  807800:	e1fffd17 	ldw	r7,-12(fp)
  807804:	01802034 	movhi	r6,128
  807808:	319e9404 	addi	r6,r6,31312
  80780c:	180b883a 	mov	r5,r3
  807810:	1009883a 	mov	r4,r2
  807814:	08099300 	call	809930 <alt_alarm_start>
  807818:	1000040e 	bge	r2,zero,80782c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80781c:	e0fffd17 	ldw	r3,-12(fp)
  807820:	00a00034 	movhi	r2,32768
  807824:	10bfffc4 	addi	r2,r2,-1
  807828:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80782c:	0001883a 	nop
  807830:	e037883a 	mov	sp,fp
  807834:	dfc00117 	ldw	ra,4(sp)
  807838:	df000017 	ldw	fp,0(sp)
  80783c:	dec00204 	addi	sp,sp,8
  807840:	f800283a 	ret

00807844 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  807844:	defff804 	addi	sp,sp,-32
  807848:	df000715 	stw	fp,28(sp)
  80784c:	df000704 	addi	fp,sp,28
  807850:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  807854:	e0bfff17 	ldw	r2,-4(fp)
  807858:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80785c:	e0bffb17 	ldw	r2,-20(fp)
  807860:	10800017 	ldw	r2,0(r2)
  807864:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  807868:	e0bffc17 	ldw	r2,-16(fp)
  80786c:	10800104 	addi	r2,r2,4
  807870:	10800037 	ldwio	r2,0(r2)
  807874:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  807878:	e0bffd17 	ldw	r2,-12(fp)
  80787c:	1080c00c 	andi	r2,r2,768
  807880:	10006d26 	beq	r2,zero,807a38 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  807884:	e0bffd17 	ldw	r2,-12(fp)
  807888:	1080400c 	andi	r2,r2,256
  80788c:	10003526 	beq	r2,zero,807964 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  807890:	00800074 	movhi	r2,1
  807894:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807898:	e0bffb17 	ldw	r2,-20(fp)
  80789c:	10800a17 	ldw	r2,40(r2)
  8078a0:	10800044 	addi	r2,r2,1
  8078a4:	1081ffcc 	andi	r2,r2,2047
  8078a8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  8078ac:	e0bffb17 	ldw	r2,-20(fp)
  8078b0:	10c00b17 	ldw	r3,44(r2)
  8078b4:	e0bffe17 	ldw	r2,-8(fp)
  8078b8:	18801526 	beq	r3,r2,807910 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8078bc:	e0bffc17 	ldw	r2,-16(fp)
  8078c0:	10800037 	ldwio	r2,0(r2)
  8078c4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  8078c8:	e0bff917 	ldw	r2,-28(fp)
  8078cc:	10a0000c 	andi	r2,r2,32768
  8078d0:	10001126 	beq	r2,zero,807918 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8078d4:	e0bffb17 	ldw	r2,-20(fp)
  8078d8:	10800a17 	ldw	r2,40(r2)
  8078dc:	e0fff917 	ldw	r3,-28(fp)
  8078e0:	1809883a 	mov	r4,r3
  8078e4:	e0fffb17 	ldw	r3,-20(fp)
  8078e8:	1885883a 	add	r2,r3,r2
  8078ec:	10800e04 	addi	r2,r2,56
  8078f0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8078f4:	e0bffb17 	ldw	r2,-20(fp)
  8078f8:	10800a17 	ldw	r2,40(r2)
  8078fc:	10800044 	addi	r2,r2,1
  807900:	10c1ffcc 	andi	r3,r2,2047
  807904:	e0bffb17 	ldw	r2,-20(fp)
  807908:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80790c:	003fe206 	br	807898 <__alt_mem_onchip_mem+0xff7ff898>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  807910:	0001883a 	nop
  807914:	00000106 	br	80791c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  807918:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80791c:	e0bff917 	ldw	r2,-28(fp)
  807920:	10bfffec 	andhi	r2,r2,65535
  807924:	10000f26 	beq	r2,zero,807964 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  807928:	e0bffb17 	ldw	r2,-20(fp)
  80792c:	10c00817 	ldw	r3,32(r2)
  807930:	00bfff84 	movi	r2,-2
  807934:	1886703a 	and	r3,r3,r2
  807938:	e0bffb17 	ldw	r2,-20(fp)
  80793c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  807940:	e0bffc17 	ldw	r2,-16(fp)
  807944:	10800104 	addi	r2,r2,4
  807948:	1007883a 	mov	r3,r2
  80794c:	e0bffb17 	ldw	r2,-20(fp)
  807950:	10800817 	ldw	r2,32(r2)
  807954:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  807958:	e0bffc17 	ldw	r2,-16(fp)
  80795c:	10800104 	addi	r2,r2,4
  807960:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  807964:	e0bffd17 	ldw	r2,-12(fp)
  807968:	1080800c 	andi	r2,r2,512
  80796c:	103fbe26 	beq	r2,zero,807868 <__alt_mem_onchip_mem+0xff7ff868>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  807970:	e0bffd17 	ldw	r2,-12(fp)
  807974:	1004d43a 	srli	r2,r2,16
  807978:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80797c:	00001406 	br	8079d0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  807980:	e0bffc17 	ldw	r2,-16(fp)
  807984:	e0fffb17 	ldw	r3,-20(fp)
  807988:	18c00d17 	ldw	r3,52(r3)
  80798c:	e13ffb17 	ldw	r4,-20(fp)
  807990:	20c7883a 	add	r3,r4,r3
  807994:	18c20e04 	addi	r3,r3,2104
  807998:	18c00003 	ldbu	r3,0(r3)
  80799c:	18c03fcc 	andi	r3,r3,255
  8079a0:	18c0201c 	xori	r3,r3,128
  8079a4:	18ffe004 	addi	r3,r3,-128
  8079a8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8079ac:	e0bffb17 	ldw	r2,-20(fp)
  8079b0:	10800d17 	ldw	r2,52(r2)
  8079b4:	10800044 	addi	r2,r2,1
  8079b8:	10c1ffcc 	andi	r3,r2,2047
  8079bc:	e0bffb17 	ldw	r2,-20(fp)
  8079c0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  8079c4:	e0bffa17 	ldw	r2,-24(fp)
  8079c8:	10bfffc4 	addi	r2,r2,-1
  8079cc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8079d0:	e0bffa17 	ldw	r2,-24(fp)
  8079d4:	10000526 	beq	r2,zero,8079ec <altera_avalon_jtag_uart_irq+0x1a8>
  8079d8:	e0bffb17 	ldw	r2,-20(fp)
  8079dc:	10c00d17 	ldw	r3,52(r2)
  8079e0:	e0bffb17 	ldw	r2,-20(fp)
  8079e4:	10800c17 	ldw	r2,48(r2)
  8079e8:	18bfe51e 	bne	r3,r2,807980 <__alt_mem_onchip_mem+0xff7ff980>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8079ec:	e0bffa17 	ldw	r2,-24(fp)
  8079f0:	103f9d26 	beq	r2,zero,807868 <__alt_mem_onchip_mem+0xff7ff868>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8079f4:	e0bffb17 	ldw	r2,-20(fp)
  8079f8:	10c00817 	ldw	r3,32(r2)
  8079fc:	00bfff44 	movi	r2,-3
  807a00:	1886703a 	and	r3,r3,r2
  807a04:	e0bffb17 	ldw	r2,-20(fp)
  807a08:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  807a0c:	e0bffb17 	ldw	r2,-20(fp)
  807a10:	10800017 	ldw	r2,0(r2)
  807a14:	10800104 	addi	r2,r2,4
  807a18:	1007883a 	mov	r3,r2
  807a1c:	e0bffb17 	ldw	r2,-20(fp)
  807a20:	10800817 	ldw	r2,32(r2)
  807a24:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  807a28:	e0bffc17 	ldw	r2,-16(fp)
  807a2c:	10800104 	addi	r2,r2,4
  807a30:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  807a34:	003f8c06 	br	807868 <__alt_mem_onchip_mem+0xff7ff868>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  807a38:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  807a3c:	0001883a 	nop
  807a40:	e037883a 	mov	sp,fp
  807a44:	df000017 	ldw	fp,0(sp)
  807a48:	dec00104 	addi	sp,sp,4
  807a4c:	f800283a 	ret

00807a50 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  807a50:	defff804 	addi	sp,sp,-32
  807a54:	df000715 	stw	fp,28(sp)
  807a58:	df000704 	addi	fp,sp,28
  807a5c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  807a60:	e0bffb17 	ldw	r2,-20(fp)
  807a64:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  807a68:	e0bff917 	ldw	r2,-28(fp)
  807a6c:	10800017 	ldw	r2,0(r2)
  807a70:	10800104 	addi	r2,r2,4
  807a74:	10800037 	ldwio	r2,0(r2)
  807a78:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  807a7c:	e0bffa17 	ldw	r2,-24(fp)
  807a80:	1081000c 	andi	r2,r2,1024
  807a84:	10000b26 	beq	r2,zero,807ab4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  807a88:	e0bff917 	ldw	r2,-28(fp)
  807a8c:	10800017 	ldw	r2,0(r2)
  807a90:	10800104 	addi	r2,r2,4
  807a94:	1007883a 	mov	r3,r2
  807a98:	e0bff917 	ldw	r2,-28(fp)
  807a9c:	10800817 	ldw	r2,32(r2)
  807aa0:	10810014 	ori	r2,r2,1024
  807aa4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  807aa8:	e0bff917 	ldw	r2,-28(fp)
  807aac:	10000915 	stw	zero,36(r2)
  807ab0:	00000a06 	br	807adc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  807ab4:	e0bff917 	ldw	r2,-28(fp)
  807ab8:	10c00917 	ldw	r3,36(r2)
  807abc:	00a00034 	movhi	r2,32768
  807ac0:	10bfff04 	addi	r2,r2,-4
  807ac4:	10c00536 	bltu	r2,r3,807adc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  807ac8:	e0bff917 	ldw	r2,-28(fp)
  807acc:	10800917 	ldw	r2,36(r2)
  807ad0:	10c00044 	addi	r3,r2,1
  807ad4:	e0bff917 	ldw	r2,-28(fp)
  807ad8:	10c00915 	stw	r3,36(r2)
  807adc:	d0a62417 	ldw	r2,-26480(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  807ae0:	e037883a 	mov	sp,fp
  807ae4:	df000017 	ldw	fp,0(sp)
  807ae8:	dec00104 	addi	sp,sp,4
  807aec:	f800283a 	ret

00807af0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  807af0:	defffd04 	addi	sp,sp,-12
  807af4:	df000215 	stw	fp,8(sp)
  807af8:	df000204 	addi	fp,sp,8
  807afc:	e13ffe15 	stw	r4,-8(fp)
  807b00:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  807b04:	00000506 	br	807b1c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  807b08:	e0bfff17 	ldw	r2,-4(fp)
  807b0c:	1090000c 	andi	r2,r2,16384
  807b10:	10000226 	beq	r2,zero,807b1c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  807b14:	00bffd44 	movi	r2,-11
  807b18:	00000b06 	br	807b48 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  807b1c:	e0bffe17 	ldw	r2,-8(fp)
  807b20:	10c00d17 	ldw	r3,52(r2)
  807b24:	e0bffe17 	ldw	r2,-8(fp)
  807b28:	10800c17 	ldw	r2,48(r2)
  807b2c:	18800526 	beq	r3,r2,807b44 <altera_avalon_jtag_uart_close+0x54>
  807b30:	e0bffe17 	ldw	r2,-8(fp)
  807b34:	10c00917 	ldw	r3,36(r2)
  807b38:	e0bffe17 	ldw	r2,-8(fp)
  807b3c:	10800117 	ldw	r2,4(r2)
  807b40:	18bff136 	bltu	r3,r2,807b08 <__alt_mem_onchip_mem+0xff7ffb08>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  807b44:	0005883a 	mov	r2,zero
}
  807b48:	e037883a 	mov	sp,fp
  807b4c:	df000017 	ldw	fp,0(sp)
  807b50:	dec00104 	addi	sp,sp,4
  807b54:	f800283a 	ret

00807b58 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  807b58:	defffa04 	addi	sp,sp,-24
  807b5c:	df000515 	stw	fp,20(sp)
  807b60:	df000504 	addi	fp,sp,20
  807b64:	e13ffd15 	stw	r4,-12(fp)
  807b68:	e17ffe15 	stw	r5,-8(fp)
  807b6c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  807b70:	00bff9c4 	movi	r2,-25
  807b74:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  807b78:	e0bffe17 	ldw	r2,-8(fp)
  807b7c:	10da8060 	cmpeqi	r3,r2,27137
  807b80:	1800031e 	bne	r3,zero,807b90 <altera_avalon_jtag_uart_ioctl+0x38>
  807b84:	109a80a0 	cmpeqi	r2,r2,27138
  807b88:	1000181e 	bne	r2,zero,807bec <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  807b8c:	00002906 	br	807c34 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  807b90:	e0bffd17 	ldw	r2,-12(fp)
  807b94:	10c00117 	ldw	r3,4(r2)
  807b98:	00a00034 	movhi	r2,32768
  807b9c:	10bfffc4 	addi	r2,r2,-1
  807ba0:	18802126 	beq	r3,r2,807c28 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  807ba4:	e0bfff17 	ldw	r2,-4(fp)
  807ba8:	10800017 	ldw	r2,0(r2)
  807bac:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  807bb0:	e0bffc17 	ldw	r2,-16(fp)
  807bb4:	10800090 	cmplti	r2,r2,2
  807bb8:	1000061e 	bne	r2,zero,807bd4 <altera_avalon_jtag_uart_ioctl+0x7c>
  807bbc:	e0fffc17 	ldw	r3,-16(fp)
  807bc0:	00a00034 	movhi	r2,32768
  807bc4:	10bfffc4 	addi	r2,r2,-1
  807bc8:	18800226 	beq	r3,r2,807bd4 <altera_avalon_jtag_uart_ioctl+0x7c>
  807bcc:	e0bffc17 	ldw	r2,-16(fp)
  807bd0:	00000206 	br	807bdc <altera_avalon_jtag_uart_ioctl+0x84>
  807bd4:	00a00034 	movhi	r2,32768
  807bd8:	10bfff84 	addi	r2,r2,-2
  807bdc:	e0fffd17 	ldw	r3,-12(fp)
  807be0:	18800115 	stw	r2,4(r3)
      rc = 0;
  807be4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  807be8:	00000f06 	br	807c28 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  807bec:	e0bffd17 	ldw	r2,-12(fp)
  807bf0:	10c00117 	ldw	r3,4(r2)
  807bf4:	00a00034 	movhi	r2,32768
  807bf8:	10bfffc4 	addi	r2,r2,-1
  807bfc:	18800c26 	beq	r3,r2,807c30 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  807c00:	e0bffd17 	ldw	r2,-12(fp)
  807c04:	10c00917 	ldw	r3,36(r2)
  807c08:	e0bffd17 	ldw	r2,-12(fp)
  807c0c:	10800117 	ldw	r2,4(r2)
  807c10:	1885803a 	cmpltu	r2,r3,r2
  807c14:	10c03fcc 	andi	r3,r2,255
  807c18:	e0bfff17 	ldw	r2,-4(fp)
  807c1c:	10c00015 	stw	r3,0(r2)
      rc = 0;
  807c20:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  807c24:	00000206 	br	807c30 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  807c28:	0001883a 	nop
  807c2c:	00000106 	br	807c34 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  807c30:	0001883a 	nop

  default:
    break;
  }

  return rc;
  807c34:	e0bffb17 	ldw	r2,-20(fp)
}
  807c38:	e037883a 	mov	sp,fp
  807c3c:	df000017 	ldw	fp,0(sp)
  807c40:	dec00104 	addi	sp,sp,4
  807c44:	f800283a 	ret

00807c48 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  807c48:	defff304 	addi	sp,sp,-52
  807c4c:	dfc00c15 	stw	ra,48(sp)
  807c50:	df000b15 	stw	fp,44(sp)
  807c54:	df000b04 	addi	fp,sp,44
  807c58:	e13ffc15 	stw	r4,-16(fp)
  807c5c:	e17ffd15 	stw	r5,-12(fp)
  807c60:	e1bffe15 	stw	r6,-8(fp)
  807c64:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  807c68:	e0bffd17 	ldw	r2,-12(fp)
  807c6c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  807c70:	00004706 	br	807d90 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  807c74:	e0bffc17 	ldw	r2,-16(fp)
  807c78:	10800a17 	ldw	r2,40(r2)
  807c7c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  807c80:	e0bffc17 	ldw	r2,-16(fp)
  807c84:	10800b17 	ldw	r2,44(r2)
  807c88:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  807c8c:	e0fff717 	ldw	r3,-36(fp)
  807c90:	e0bff817 	ldw	r2,-32(fp)
  807c94:	18800536 	bltu	r3,r2,807cac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  807c98:	e0fff717 	ldw	r3,-36(fp)
  807c9c:	e0bff817 	ldw	r2,-32(fp)
  807ca0:	1885c83a 	sub	r2,r3,r2
  807ca4:	e0bff615 	stw	r2,-40(fp)
  807ca8:	00000406 	br	807cbc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  807cac:	00c20004 	movi	r3,2048
  807cb0:	e0bff817 	ldw	r2,-32(fp)
  807cb4:	1885c83a 	sub	r2,r3,r2
  807cb8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  807cbc:	e0bff617 	ldw	r2,-40(fp)
  807cc0:	10001e26 	beq	r2,zero,807d3c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  807cc4:	e0fffe17 	ldw	r3,-8(fp)
  807cc8:	e0bff617 	ldw	r2,-40(fp)
  807ccc:	1880022e 	bgeu	r3,r2,807cd8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  807cd0:	e0bffe17 	ldw	r2,-8(fp)
  807cd4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  807cd8:	e0bffc17 	ldw	r2,-16(fp)
  807cdc:	10c00e04 	addi	r3,r2,56
  807ce0:	e0bff817 	ldw	r2,-32(fp)
  807ce4:	1885883a 	add	r2,r3,r2
  807ce8:	e1bff617 	ldw	r6,-40(fp)
  807cec:	100b883a 	mov	r5,r2
  807cf0:	e13ff517 	ldw	r4,-44(fp)
  807cf4:	080a9280 	call	80a928 <memcpy>
      ptr   += n;
  807cf8:	e0fff517 	ldw	r3,-44(fp)
  807cfc:	e0bff617 	ldw	r2,-40(fp)
  807d00:	1885883a 	add	r2,r3,r2
  807d04:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  807d08:	e0fffe17 	ldw	r3,-8(fp)
  807d0c:	e0bff617 	ldw	r2,-40(fp)
  807d10:	1885c83a 	sub	r2,r3,r2
  807d14:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807d18:	e0fff817 	ldw	r3,-32(fp)
  807d1c:	e0bff617 	ldw	r2,-40(fp)
  807d20:	1885883a 	add	r2,r3,r2
  807d24:	10c1ffcc 	andi	r3,r2,2047
  807d28:	e0bffc17 	ldw	r2,-16(fp)
  807d2c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  807d30:	e0bffe17 	ldw	r2,-8(fp)
  807d34:	00bfcf16 	blt	zero,r2,807c74 <__alt_mem_onchip_mem+0xff7ffc74>
  807d38:	00000106 	br	807d40 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  807d3c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  807d40:	e0fff517 	ldw	r3,-44(fp)
  807d44:	e0bffd17 	ldw	r2,-12(fp)
  807d48:	1880141e 	bne	r3,r2,807d9c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  807d4c:	e0bfff17 	ldw	r2,-4(fp)
  807d50:	1090000c 	andi	r2,r2,16384
  807d54:	1000131e 	bne	r2,zero,807da4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  807d58:	0001883a 	nop
  807d5c:	e0bffc17 	ldw	r2,-16(fp)
  807d60:	10c00a17 	ldw	r3,40(r2)
  807d64:	e0bff717 	ldw	r2,-36(fp)
  807d68:	1880051e 	bne	r3,r2,807d80 <altera_avalon_jtag_uart_read+0x138>
  807d6c:	e0bffc17 	ldw	r2,-16(fp)
  807d70:	10c00917 	ldw	r3,36(r2)
  807d74:	e0bffc17 	ldw	r2,-16(fp)
  807d78:	10800117 	ldw	r2,4(r2)
  807d7c:	18bff736 	bltu	r3,r2,807d5c <__alt_mem_onchip_mem+0xff7ffd5c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  807d80:	e0bffc17 	ldw	r2,-16(fp)
  807d84:	10c00a17 	ldw	r3,40(r2)
  807d88:	e0bff717 	ldw	r2,-36(fp)
  807d8c:	18800726 	beq	r3,r2,807dac <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  807d90:	e0bffe17 	ldw	r2,-8(fp)
  807d94:	00bfb716 	blt	zero,r2,807c74 <__alt_mem_onchip_mem+0xff7ffc74>
  807d98:	00000506 	br	807db0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  807d9c:	0001883a 	nop
  807da0:	00000306 	br	807db0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  807da4:	0001883a 	nop
  807da8:	00000106 	br	807db0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  807dac:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  807db0:	e0fff517 	ldw	r3,-44(fp)
  807db4:	e0bffd17 	ldw	r2,-12(fp)
  807db8:	18801826 	beq	r3,r2,807e1c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807dbc:	0005303a 	rdctl	r2,status
  807dc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807dc4:	e0fffb17 	ldw	r3,-20(fp)
  807dc8:	00bfff84 	movi	r2,-2
  807dcc:	1884703a 	and	r2,r3,r2
  807dd0:	1001703a 	wrctl	status,r2
  
  return context;
  807dd4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  807dd8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  807ddc:	e0bffc17 	ldw	r2,-16(fp)
  807de0:	10800817 	ldw	r2,32(r2)
  807de4:	10c00054 	ori	r3,r2,1
  807de8:	e0bffc17 	ldw	r2,-16(fp)
  807dec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  807df0:	e0bffc17 	ldw	r2,-16(fp)
  807df4:	10800017 	ldw	r2,0(r2)
  807df8:	10800104 	addi	r2,r2,4
  807dfc:	1007883a 	mov	r3,r2
  807e00:	e0bffc17 	ldw	r2,-16(fp)
  807e04:	10800817 	ldw	r2,32(r2)
  807e08:	18800035 	stwio	r2,0(r3)
  807e0c:	e0bffa17 	ldw	r2,-24(fp)
  807e10:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807e14:	e0bff917 	ldw	r2,-28(fp)
  807e18:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  807e1c:	e0fff517 	ldw	r3,-44(fp)
  807e20:	e0bffd17 	ldw	r2,-12(fp)
  807e24:	18800426 	beq	r3,r2,807e38 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  807e28:	e0fff517 	ldw	r3,-44(fp)
  807e2c:	e0bffd17 	ldw	r2,-12(fp)
  807e30:	1885c83a 	sub	r2,r3,r2
  807e34:	00000606 	br	807e50 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  807e38:	e0bfff17 	ldw	r2,-4(fp)
  807e3c:	1090000c 	andi	r2,r2,16384
  807e40:	10000226 	beq	r2,zero,807e4c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  807e44:	00bffd44 	movi	r2,-11
  807e48:	00000106 	br	807e50 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  807e4c:	00bffec4 	movi	r2,-5
}
  807e50:	e037883a 	mov	sp,fp
  807e54:	dfc00117 	ldw	ra,4(sp)
  807e58:	df000017 	ldw	fp,0(sp)
  807e5c:	dec00204 	addi	sp,sp,8
  807e60:	f800283a 	ret

00807e64 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  807e64:	defff304 	addi	sp,sp,-52
  807e68:	dfc00c15 	stw	ra,48(sp)
  807e6c:	df000b15 	stw	fp,44(sp)
  807e70:	df000b04 	addi	fp,sp,44
  807e74:	e13ffc15 	stw	r4,-16(fp)
  807e78:	e17ffd15 	stw	r5,-12(fp)
  807e7c:	e1bffe15 	stw	r6,-8(fp)
  807e80:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  807e84:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  807e88:	e0bffd17 	ldw	r2,-12(fp)
  807e8c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  807e90:	00003706 	br	807f70 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  807e94:	e0bffc17 	ldw	r2,-16(fp)
  807e98:	10800c17 	ldw	r2,48(r2)
  807e9c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  807ea0:	e0bffc17 	ldw	r2,-16(fp)
  807ea4:	10800d17 	ldw	r2,52(r2)
  807ea8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  807eac:	e0fff917 	ldw	r3,-28(fp)
  807eb0:	e0bff517 	ldw	r2,-44(fp)
  807eb4:	1880062e 	bgeu	r3,r2,807ed0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  807eb8:	e0fff517 	ldw	r3,-44(fp)
  807ebc:	e0bff917 	ldw	r2,-28(fp)
  807ec0:	1885c83a 	sub	r2,r3,r2
  807ec4:	10bfffc4 	addi	r2,r2,-1
  807ec8:	e0bff615 	stw	r2,-40(fp)
  807ecc:	00000b06 	br	807efc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  807ed0:	e0bff517 	ldw	r2,-44(fp)
  807ed4:	10000526 	beq	r2,zero,807eec <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  807ed8:	00c20004 	movi	r3,2048
  807edc:	e0bff917 	ldw	r2,-28(fp)
  807ee0:	1885c83a 	sub	r2,r3,r2
  807ee4:	e0bff615 	stw	r2,-40(fp)
  807ee8:	00000406 	br	807efc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  807eec:	00c1ffc4 	movi	r3,2047
  807ef0:	e0bff917 	ldw	r2,-28(fp)
  807ef4:	1885c83a 	sub	r2,r3,r2
  807ef8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  807efc:	e0bff617 	ldw	r2,-40(fp)
  807f00:	10001e26 	beq	r2,zero,807f7c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  807f04:	e0fffe17 	ldw	r3,-8(fp)
  807f08:	e0bff617 	ldw	r2,-40(fp)
  807f0c:	1880022e 	bgeu	r3,r2,807f18 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  807f10:	e0bffe17 	ldw	r2,-8(fp)
  807f14:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  807f18:	e0bffc17 	ldw	r2,-16(fp)
  807f1c:	10c20e04 	addi	r3,r2,2104
  807f20:	e0bff917 	ldw	r2,-28(fp)
  807f24:	1885883a 	add	r2,r3,r2
  807f28:	e1bff617 	ldw	r6,-40(fp)
  807f2c:	e17ffd17 	ldw	r5,-12(fp)
  807f30:	1009883a 	mov	r4,r2
  807f34:	080a9280 	call	80a928 <memcpy>
      ptr   += n;
  807f38:	e0fffd17 	ldw	r3,-12(fp)
  807f3c:	e0bff617 	ldw	r2,-40(fp)
  807f40:	1885883a 	add	r2,r3,r2
  807f44:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  807f48:	e0fffe17 	ldw	r3,-8(fp)
  807f4c:	e0bff617 	ldw	r2,-40(fp)
  807f50:	1885c83a 	sub	r2,r3,r2
  807f54:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807f58:	e0fff917 	ldw	r3,-28(fp)
  807f5c:	e0bff617 	ldw	r2,-40(fp)
  807f60:	1885883a 	add	r2,r3,r2
  807f64:	10c1ffcc 	andi	r3,r2,2047
  807f68:	e0bffc17 	ldw	r2,-16(fp)
  807f6c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  807f70:	e0bffe17 	ldw	r2,-8(fp)
  807f74:	00bfc716 	blt	zero,r2,807e94 <__alt_mem_onchip_mem+0xff7ffe94>
  807f78:	00000106 	br	807f80 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  807f7c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807f80:	0005303a 	rdctl	r2,status
  807f84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807f88:	e0fffb17 	ldw	r3,-20(fp)
  807f8c:	00bfff84 	movi	r2,-2
  807f90:	1884703a 	and	r2,r3,r2
  807f94:	1001703a 	wrctl	status,r2
  
  return context;
  807f98:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  807f9c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  807fa0:	e0bffc17 	ldw	r2,-16(fp)
  807fa4:	10800817 	ldw	r2,32(r2)
  807fa8:	10c00094 	ori	r3,r2,2
  807fac:	e0bffc17 	ldw	r2,-16(fp)
  807fb0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  807fb4:	e0bffc17 	ldw	r2,-16(fp)
  807fb8:	10800017 	ldw	r2,0(r2)
  807fbc:	10800104 	addi	r2,r2,4
  807fc0:	1007883a 	mov	r3,r2
  807fc4:	e0bffc17 	ldw	r2,-16(fp)
  807fc8:	10800817 	ldw	r2,32(r2)
  807fcc:	18800035 	stwio	r2,0(r3)
  807fd0:	e0bffa17 	ldw	r2,-24(fp)
  807fd4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807fd8:	e0bff817 	ldw	r2,-32(fp)
  807fdc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  807fe0:	e0bffe17 	ldw	r2,-8(fp)
  807fe4:	0080100e 	bge	zero,r2,808028 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  807fe8:	e0bfff17 	ldw	r2,-4(fp)
  807fec:	1090000c 	andi	r2,r2,16384
  807ff0:	1000101e 	bne	r2,zero,808034 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  807ff4:	0001883a 	nop
  807ff8:	e0bffc17 	ldw	r2,-16(fp)
  807ffc:	10c00d17 	ldw	r3,52(r2)
  808000:	e0bff517 	ldw	r2,-44(fp)
  808004:	1880051e 	bne	r3,r2,80801c <altera_avalon_jtag_uart_write+0x1b8>
  808008:	e0bffc17 	ldw	r2,-16(fp)
  80800c:	10c00917 	ldw	r3,36(r2)
  808010:	e0bffc17 	ldw	r2,-16(fp)
  808014:	10800117 	ldw	r2,4(r2)
  808018:	18bff736 	bltu	r3,r2,807ff8 <__alt_mem_onchip_mem+0xff7ffff8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80801c:	e0bffc17 	ldw	r2,-16(fp)
  808020:	10800917 	ldw	r2,36(r2)
  808024:	1000051e 	bne	r2,zero,80803c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  808028:	e0bffe17 	ldw	r2,-8(fp)
  80802c:	00bfd016 	blt	zero,r2,807f70 <__alt_mem_onchip_mem+0xff7fff70>
  808030:	00000306 	br	808040 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  808034:	0001883a 	nop
  808038:	00000106 	br	808040 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80803c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  808040:	e0fffd17 	ldw	r3,-12(fp)
  808044:	e0bff717 	ldw	r2,-36(fp)
  808048:	18800426 	beq	r3,r2,80805c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  80804c:	e0fffd17 	ldw	r3,-12(fp)
  808050:	e0bff717 	ldw	r2,-36(fp)
  808054:	1885c83a 	sub	r2,r3,r2
  808058:	00000606 	br	808074 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  80805c:	e0bfff17 	ldw	r2,-4(fp)
  808060:	1090000c 	andi	r2,r2,16384
  808064:	10000226 	beq	r2,zero,808070 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  808068:	00bffd44 	movi	r2,-11
  80806c:	00000106 	br	808074 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  808070:	00bffec4 	movi	r2,-5
}
  808074:	e037883a 	mov	sp,fp
  808078:	dfc00117 	ldw	ra,4(sp)
  80807c:	df000017 	ldw	fp,0(sp)
  808080:	dec00204 	addi	sp,sp,8
  808084:	f800283a 	ret

00808088 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  808088:	defffa04 	addi	sp,sp,-24
  80808c:	dfc00515 	stw	ra,20(sp)
  808090:	df000415 	stw	fp,16(sp)
  808094:	df000404 	addi	fp,sp,16
  808098:	e13ffe15 	stw	r4,-8(fp)
  80809c:	2805883a 	mov	r2,r5
  8080a0:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8080a4:	e0bffe17 	ldw	r2,-8(fp)
  8080a8:	10800017 	ldw	r2,0(r2)
  8080ac:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8080b0:	008003f4 	movhi	r2,15
  8080b4:	10909004 	addi	r2,r2,16960
  8080b8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8080bc:	e0bffe17 	ldw	r2,-8(fp)
  8080c0:	10800803 	ldbu	r2,32(r2)
  8080c4:	10803fcc 	andi	r2,r2,255
  8080c8:	1080201c 	xori	r2,r2,128
  8080cc:	10bfe004 	addi	r2,r2,-128
  8080d0:	1000151e 	bne	r2,zero,808128 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8080d4:	00000906 	br	8080fc <lcd_write_command+0x74>
    if (--i == 0)
  8080d8:	e0bffc17 	ldw	r2,-16(fp)
  8080dc:	10bfffc4 	addi	r2,r2,-1
  8080e0:	e0bffc15 	stw	r2,-16(fp)
  8080e4:	e0bffc17 	ldw	r2,-16(fp)
  8080e8:	1000041e 	bne	r2,zero,8080fc <lcd_write_command+0x74>
    {
      sp->broken = 1;
  8080ec:	e0bffe17 	ldw	r2,-8(fp)
  8080f0:	00c00044 	movi	r3,1
  8080f4:	10c00805 	stb	r3,32(r2)
      return;
  8080f8:	00000c06 	br	80812c <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8080fc:	e0bffd17 	ldw	r2,-12(fp)
  808100:	10800104 	addi	r2,r2,4
  808104:	10800037 	ldwio	r2,0(r2)
  808108:	1080200c 	andi	r2,r2,128
  80810c:	103ff21e 	bne	r2,zero,8080d8 <__alt_mem_onchip_mem+0xff8000d8>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  808110:	01001904 	movi	r4,100
  808114:	080a3e80 	call	80a3e8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  808118:	e0bffd17 	ldw	r2,-12(fp)
  80811c:	e0ffff03 	ldbu	r3,-4(fp)
  808120:	10c00035 	stwio	r3,0(r2)
  808124:	00000106 	br	80812c <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  808128:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  80812c:	e037883a 	mov	sp,fp
  808130:	dfc00117 	ldw	ra,4(sp)
  808134:	df000017 	ldw	fp,0(sp)
  808138:	dec00204 	addi	sp,sp,8
  80813c:	f800283a 	ret

00808140 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  808140:	defffa04 	addi	sp,sp,-24
  808144:	dfc00515 	stw	ra,20(sp)
  808148:	df000415 	stw	fp,16(sp)
  80814c:	df000404 	addi	fp,sp,16
  808150:	e13ffe15 	stw	r4,-8(fp)
  808154:	2805883a 	mov	r2,r5
  808158:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80815c:	e0bffe17 	ldw	r2,-8(fp)
  808160:	10800017 	ldw	r2,0(r2)
  808164:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  808168:	008003f4 	movhi	r2,15
  80816c:	10909004 	addi	r2,r2,16960
  808170:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  808174:	e0bffe17 	ldw	r2,-8(fp)
  808178:	10800803 	ldbu	r2,32(r2)
  80817c:	10803fcc 	andi	r2,r2,255
  808180:	1080201c 	xori	r2,r2,128
  808184:	10bfe004 	addi	r2,r2,-128
  808188:	10001d1e 	bne	r2,zero,808200 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80818c:	00000906 	br	8081b4 <lcd_write_data+0x74>
    if (--i == 0)
  808190:	e0bffc17 	ldw	r2,-16(fp)
  808194:	10bfffc4 	addi	r2,r2,-1
  808198:	e0bffc15 	stw	r2,-16(fp)
  80819c:	e0bffc17 	ldw	r2,-16(fp)
  8081a0:	1000041e 	bne	r2,zero,8081b4 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  8081a4:	e0bffe17 	ldw	r2,-8(fp)
  8081a8:	00c00044 	movi	r3,1
  8081ac:	10c00805 	stb	r3,32(r2)
      return;
  8081b0:	00001406 	br	808204 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8081b4:	e0bffd17 	ldw	r2,-12(fp)
  8081b8:	10800104 	addi	r2,r2,4
  8081bc:	10800037 	ldwio	r2,0(r2)
  8081c0:	1080200c 	andi	r2,r2,128
  8081c4:	103ff21e 	bne	r2,zero,808190 <__alt_mem_onchip_mem+0xff800190>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8081c8:	01001904 	movi	r4,100
  8081cc:	080a3e80 	call	80a3e8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  8081d0:	e0bffd17 	ldw	r2,-12(fp)
  8081d4:	10800204 	addi	r2,r2,8
  8081d8:	1007883a 	mov	r3,r2
  8081dc:	e0bfff03 	ldbu	r2,-4(fp)
  8081e0:	18800035 	stwio	r2,0(r3)

  sp->address++;
  8081e4:	e0bffe17 	ldw	r2,-8(fp)
  8081e8:	108008c3 	ldbu	r2,35(r2)
  8081ec:	10800044 	addi	r2,r2,1
  8081f0:	1007883a 	mov	r3,r2
  8081f4:	e0bffe17 	ldw	r2,-8(fp)
  8081f8:	10c008c5 	stb	r3,35(r2)
  8081fc:	00000106 	br	808204 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  808200:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  808204:	e037883a 	mov	sp,fp
  808208:	dfc00117 	ldw	ra,4(sp)
  80820c:	df000017 	ldw	fp,0(sp)
  808210:	dec00204 	addi	sp,sp,8
  808214:	f800283a 	ret

00808218 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  808218:	defffc04 	addi	sp,sp,-16
  80821c:	dfc00315 	stw	ra,12(sp)
  808220:	df000215 	stw	fp,8(sp)
  808224:	df000204 	addi	fp,sp,8
  808228:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80822c:	01400044 	movi	r5,1
  808230:	e13fff17 	ldw	r4,-4(fp)
  808234:	08080880 	call	808088 <lcd_write_command>

  sp->x = 0;
  808238:	e0bfff17 	ldw	r2,-4(fp)
  80823c:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  808240:	e0bfff17 	ldw	r2,-4(fp)
  808244:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  808248:	e0bfff17 	ldw	r2,-4(fp)
  80824c:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  808250:	e03ffe15 	stw	zero,-8(fp)
  808254:	00001b06 	br	8082c4 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  808258:	e0bffe17 	ldw	r2,-8(fp)
  80825c:	108018e4 	muli	r2,r2,99
  808260:	10801004 	addi	r2,r2,64
  808264:	e0ffff17 	ldw	r3,-4(fp)
  808268:	1885883a 	add	r2,r3,r2
  80826c:	01801444 	movi	r6,81
  808270:	01400804 	movi	r5,32
  808274:	1009883a 	mov	r4,r2
  808278:	080aa700 	call	80aa70 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80827c:	e0bffe17 	ldw	r2,-8(fp)
  808280:	108018e4 	muli	r2,r2,99
  808284:	10800c04 	addi	r2,r2,48
  808288:	e0ffff17 	ldw	r3,-4(fp)
  80828c:	1885883a 	add	r2,r3,r2
  808290:	01800404 	movi	r6,16
  808294:	01400804 	movi	r5,32
  808298:	1009883a 	mov	r4,r2
  80829c:	080aa700 	call	80aa70 <memset>
    sp->line[y].width = 0;
  8082a0:	e0ffff17 	ldw	r3,-4(fp)
  8082a4:	e0bffe17 	ldw	r2,-8(fp)
  8082a8:	108018e4 	muli	r2,r2,99
  8082ac:	1885883a 	add	r2,r3,r2
  8082b0:	10802444 	addi	r2,r2,145
  8082b4:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8082b8:	e0bffe17 	ldw	r2,-8(fp)
  8082bc:	10800044 	addi	r2,r2,1
  8082c0:	e0bffe15 	stw	r2,-8(fp)
  8082c4:	e0bffe17 	ldw	r2,-8(fp)
  8082c8:	10800090 	cmplti	r2,r2,2
  8082cc:	103fe21e 	bne	r2,zero,808258 <__alt_mem_onchip_mem+0xff800258>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  8082d0:	0001883a 	nop
  8082d4:	e037883a 	mov	sp,fp
  8082d8:	dfc00117 	ldw	ra,4(sp)
  8082dc:	df000017 	ldw	fp,0(sp)
  8082e0:	dec00204 	addi	sp,sp,8
  8082e4:	f800283a 	ret

008082e8 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  8082e8:	defff704 	addi	sp,sp,-36
  8082ec:	dfc00815 	stw	ra,32(sp)
  8082f0:	df000715 	stw	fp,28(sp)
  8082f4:	df000704 	addi	fp,sp,28
  8082f8:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  8082fc:	e0bfff17 	ldw	r2,-4(fp)
  808300:	10800943 	ldbu	r2,37(r2)
  808304:	10803fcc 	andi	r2,r2,255
  808308:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80830c:	e03ff915 	stw	zero,-28(fp)
  808310:	00006706 	br	8084b0 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  808314:	e0ffff17 	ldw	r3,-4(fp)
  808318:	e0bff917 	ldw	r2,-28(fp)
  80831c:	108018e4 	muli	r2,r2,99
  808320:	1885883a 	add	r2,r3,r2
  808324:	10802444 	addi	r2,r2,145
  808328:	10800003 	ldbu	r2,0(r2)
  80832c:	10803fcc 	andi	r2,r2,255
  808330:	1080201c 	xori	r2,r2,128
  808334:	10bfe004 	addi	r2,r2,-128
  808338:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80833c:	e0ffff17 	ldw	r3,-4(fp)
  808340:	e0bff917 	ldw	r2,-28(fp)
  808344:	108018e4 	muli	r2,r2,99
  808348:	1885883a 	add	r2,r3,r2
  80834c:	10802484 	addi	r2,r2,146
  808350:	10800003 	ldbu	r2,0(r2)
  808354:	10c03fcc 	andi	r3,r2,255
  808358:	e0bffc17 	ldw	r2,-16(fp)
  80835c:	1885383a 	mul	r2,r3,r2
  808360:	1005d23a 	srai	r2,r2,8
  808364:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  808368:	e0fffb17 	ldw	r3,-20(fp)
  80836c:	e0bffd17 	ldw	r2,-12(fp)
  808370:	18800116 	blt	r3,r2,808378 <lcd_repaint_screen+0x90>
      offset = 0;
  808374:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  808378:	e03ffa15 	stw	zero,-24(fp)
  80837c:	00004606 	br	808498 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  808380:	e0fffa17 	ldw	r3,-24(fp)
  808384:	e0bffb17 	ldw	r2,-20(fp)
  808388:	1885883a 	add	r2,r3,r2
  80838c:	e17ffd17 	ldw	r5,-12(fp)
  808390:	1009883a 	mov	r4,r2
  808394:	0805b2c0 	call	805b2c <__modsi3>
  808398:	1009883a 	mov	r4,r2
  80839c:	e0ffff17 	ldw	r3,-4(fp)
  8083a0:	e0bff917 	ldw	r2,-28(fp)
  8083a4:	108018e4 	muli	r2,r2,99
  8083a8:	1885883a 	add	r2,r3,r2
  8083ac:	1105883a 	add	r2,r2,r4
  8083b0:	10801004 	addi	r2,r2,64
  8083b4:	10800003 	ldbu	r2,0(r2)
  8083b8:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  8083bc:	e0ffff17 	ldw	r3,-4(fp)
  8083c0:	e0bff917 	ldw	r2,-28(fp)
  8083c4:	108018e4 	muli	r2,r2,99
  8083c8:	1887883a 	add	r3,r3,r2
  8083cc:	e0bffa17 	ldw	r2,-24(fp)
  8083d0:	1885883a 	add	r2,r3,r2
  8083d4:	10800c04 	addi	r2,r2,48
  8083d8:	10800003 	ldbu	r2,0(r2)
  8083dc:	10c03fcc 	andi	r3,r2,255
  8083e0:	18c0201c 	xori	r3,r3,128
  8083e4:	18ffe004 	addi	r3,r3,-128
  8083e8:	e0bffe07 	ldb	r2,-8(fp)
  8083ec:	18802726 	beq	r3,r2,80848c <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  8083f0:	e0fff917 	ldw	r3,-28(fp)
  8083f4:	d0a00104 	addi	r2,gp,-32764
  8083f8:	1885883a 	add	r2,r3,r2
  8083fc:	10800003 	ldbu	r2,0(r2)
  808400:	1007883a 	mov	r3,r2
  808404:	e0bffa17 	ldw	r2,-24(fp)
  808408:	1885883a 	add	r2,r3,r2
  80840c:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  808410:	e0fffe43 	ldbu	r3,-7(fp)
  808414:	e0bfff17 	ldw	r2,-4(fp)
  808418:	108008c3 	ldbu	r2,35(r2)
  80841c:	10803fcc 	andi	r2,r2,255
  808420:	1080201c 	xori	r2,r2,128
  808424:	10bfe004 	addi	r2,r2,-128
  808428:	18800a26 	beq	r3,r2,808454 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80842c:	e0fffe43 	ldbu	r3,-7(fp)
  808430:	00bfe004 	movi	r2,-128
  808434:	1884b03a 	or	r2,r3,r2
  808438:	10803fcc 	andi	r2,r2,255
  80843c:	100b883a 	mov	r5,r2
  808440:	e13fff17 	ldw	r4,-4(fp)
  808444:	08080880 	call	808088 <lcd_write_command>
          sp->address = address;
  808448:	e0fffe43 	ldbu	r3,-7(fp)
  80844c:	e0bfff17 	ldw	r2,-4(fp)
  808450:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  808454:	e0bffe03 	ldbu	r2,-8(fp)
  808458:	10803fcc 	andi	r2,r2,255
  80845c:	100b883a 	mov	r5,r2
  808460:	e13fff17 	ldw	r4,-4(fp)
  808464:	08081400 	call	808140 <lcd_write_data>
        sp->line[y].visible[x] = c;
  808468:	e0ffff17 	ldw	r3,-4(fp)
  80846c:	e0bff917 	ldw	r2,-28(fp)
  808470:	108018e4 	muli	r2,r2,99
  808474:	1887883a 	add	r3,r3,r2
  808478:	e0bffa17 	ldw	r2,-24(fp)
  80847c:	1885883a 	add	r2,r3,r2
  808480:	10800c04 	addi	r2,r2,48
  808484:	e0fffe03 	ldbu	r3,-8(fp)
  808488:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80848c:	e0bffa17 	ldw	r2,-24(fp)
  808490:	10800044 	addi	r2,r2,1
  808494:	e0bffa15 	stw	r2,-24(fp)
  808498:	e0bffa17 	ldw	r2,-24(fp)
  80849c:	10800410 	cmplti	r2,r2,16
  8084a0:	103fb71e 	bne	r2,zero,808380 <__alt_mem_onchip_mem+0xff800380>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8084a4:	e0bff917 	ldw	r2,-28(fp)
  8084a8:	10800044 	addi	r2,r2,1
  8084ac:	e0bff915 	stw	r2,-28(fp)
  8084b0:	e0bff917 	ldw	r2,-28(fp)
  8084b4:	10800090 	cmplti	r2,r2,2
  8084b8:	103f961e 	bne	r2,zero,808314 <__alt_mem_onchip_mem+0xff800314>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  8084bc:	0001883a 	nop
  8084c0:	e037883a 	mov	sp,fp
  8084c4:	dfc00117 	ldw	ra,4(sp)
  8084c8:	df000017 	ldw	fp,0(sp)
  8084cc:	dec00204 	addi	sp,sp,8
  8084d0:	f800283a 	ret

008084d4 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  8084d4:	defffc04 	addi	sp,sp,-16
  8084d8:	dfc00315 	stw	ra,12(sp)
  8084dc:	df000215 	stw	fp,8(sp)
  8084e0:	df000204 	addi	fp,sp,8
  8084e4:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8084e8:	e03ffe15 	stw	zero,-8(fp)
  8084ec:	00001d06 	br	808564 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  8084f0:	e0bffe17 	ldw	r2,-8(fp)
  8084f4:	00800f16 	blt	zero,r2,808534 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  8084f8:	e0bffe17 	ldw	r2,-8(fp)
  8084fc:	108018e4 	muli	r2,r2,99
  808500:	10801004 	addi	r2,r2,64
  808504:	e0ffff17 	ldw	r3,-4(fp)
  808508:	1889883a 	add	r4,r3,r2
  80850c:	e0bffe17 	ldw	r2,-8(fp)
  808510:	10800044 	addi	r2,r2,1
  808514:	108018e4 	muli	r2,r2,99
  808518:	10801004 	addi	r2,r2,64
  80851c:	e0ffff17 	ldw	r3,-4(fp)
  808520:	1885883a 	add	r2,r3,r2
  808524:	01801404 	movi	r6,80
  808528:	100b883a 	mov	r5,r2
  80852c:	080a9280 	call	80a928 <memcpy>
  808530:	00000906 	br	808558 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  808534:	e0bffe17 	ldw	r2,-8(fp)
  808538:	108018e4 	muli	r2,r2,99
  80853c:	10801004 	addi	r2,r2,64
  808540:	e0ffff17 	ldw	r3,-4(fp)
  808544:	1885883a 	add	r2,r3,r2
  808548:	01801404 	movi	r6,80
  80854c:	01400804 	movi	r5,32
  808550:	1009883a 	mov	r4,r2
  808554:	080aa700 	call	80aa70 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  808558:	e0bffe17 	ldw	r2,-8(fp)
  80855c:	10800044 	addi	r2,r2,1
  808560:	e0bffe15 	stw	r2,-8(fp)
  808564:	e0bffe17 	ldw	r2,-8(fp)
  808568:	10800090 	cmplti	r2,r2,2
  80856c:	103fe01e 	bne	r2,zero,8084f0 <__alt_mem_onchip_mem+0xff8004f0>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  808570:	e0bfff17 	ldw	r2,-4(fp)
  808574:	10800883 	ldbu	r2,34(r2)
  808578:	10bfffc4 	addi	r2,r2,-1
  80857c:	1007883a 	mov	r3,r2
  808580:	e0bfff17 	ldw	r2,-4(fp)
  808584:	10c00885 	stb	r3,34(r2)
}
  808588:	0001883a 	nop
  80858c:	e037883a 	mov	sp,fp
  808590:	dfc00117 	ldw	ra,4(sp)
  808594:	df000017 	ldw	fp,0(sp)
  808598:	dec00204 	addi	sp,sp,8
  80859c:	f800283a 	ret

008085a0 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  8085a0:	defff904 	addi	sp,sp,-28
  8085a4:	dfc00615 	stw	ra,24(sp)
  8085a8:	df000515 	stw	fp,20(sp)
  8085ac:	df000504 	addi	fp,sp,20
  8085b0:	e13ffe15 	stw	r4,-8(fp)
  8085b4:	2805883a 	mov	r2,r5
  8085b8:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  8085bc:	e03ffb15 	stw	zero,-20(fp)
  8085c0:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  8085c4:	e0bffe17 	ldw	r2,-8(fp)
  8085c8:	10800a03 	ldbu	r2,40(r2)
  8085cc:	10803fcc 	andi	r2,r2,255
  8085d0:	1080201c 	xori	r2,r2,128
  8085d4:	10bfe004 	addi	r2,r2,-128
  8085d8:	108016d8 	cmpnei	r2,r2,91
  8085dc:	1000411e 	bne	r2,zero,8086e4 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  8085e0:	e0bffe17 	ldw	r2,-8(fp)
  8085e4:	10800a04 	addi	r2,r2,40
  8085e8:	10800044 	addi	r2,r2,1
  8085ec:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  8085f0:	00000c06 	br	808624 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  8085f4:	e0bffb17 	ldw	r2,-20(fp)
  8085f8:	10c002a4 	muli	r3,r2,10
  8085fc:	e0bffd17 	ldw	r2,-12(fp)
  808600:	11000044 	addi	r4,r2,1
  808604:	e13ffd15 	stw	r4,-12(fp)
  808608:	10800003 	ldbu	r2,0(r2)
  80860c:	10803fcc 	andi	r2,r2,255
  808610:	1080201c 	xori	r2,r2,128
  808614:	10bfe004 	addi	r2,r2,-128
  808618:	10bff404 	addi	r2,r2,-48
  80861c:	1885883a 	add	r2,r3,r2
  808620:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  808624:	d0e00a17 	ldw	r3,-32728(gp)
  808628:	e0bffd17 	ldw	r2,-12(fp)
  80862c:	10800003 	ldbu	r2,0(r2)
  808630:	10803fcc 	andi	r2,r2,255
  808634:	1080201c 	xori	r2,r2,128
  808638:	10bfe004 	addi	r2,r2,-128
  80863c:	10800044 	addi	r2,r2,1
  808640:	1885883a 	add	r2,r3,r2
  808644:	10800003 	ldbu	r2,0(r2)
  808648:	10803fcc 	andi	r2,r2,255
  80864c:	1080010c 	andi	r2,r2,4
  808650:	103fe81e 	bne	r2,zero,8085f4 <__alt_mem_onchip_mem+0xff8005f4>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  808654:	e0bffd17 	ldw	r2,-12(fp)
  808658:	10800003 	ldbu	r2,0(r2)
  80865c:	10803fcc 	andi	r2,r2,255
  808660:	1080201c 	xori	r2,r2,128
  808664:	10bfe004 	addi	r2,r2,-128
  808668:	10800ed8 	cmpnei	r2,r2,59
  80866c:	10001f1e 	bne	r2,zero,8086ec <lcd_handle_escape+0x14c>
    {
      ptr++;
  808670:	e0bffd17 	ldw	r2,-12(fp)
  808674:	10800044 	addi	r2,r2,1
  808678:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  80867c:	00000c06 	br	8086b0 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  808680:	e0bffc17 	ldw	r2,-16(fp)
  808684:	10c002a4 	muli	r3,r2,10
  808688:	e0bffd17 	ldw	r2,-12(fp)
  80868c:	11000044 	addi	r4,r2,1
  808690:	e13ffd15 	stw	r4,-12(fp)
  808694:	10800003 	ldbu	r2,0(r2)
  808698:	10803fcc 	andi	r2,r2,255
  80869c:	1080201c 	xori	r2,r2,128
  8086a0:	10bfe004 	addi	r2,r2,-128
  8086a4:	10bff404 	addi	r2,r2,-48
  8086a8:	1885883a 	add	r2,r3,r2
  8086ac:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  8086b0:	d0e00a17 	ldw	r3,-32728(gp)
  8086b4:	e0bffd17 	ldw	r2,-12(fp)
  8086b8:	10800003 	ldbu	r2,0(r2)
  8086bc:	10803fcc 	andi	r2,r2,255
  8086c0:	1080201c 	xori	r2,r2,128
  8086c4:	10bfe004 	addi	r2,r2,-128
  8086c8:	10800044 	addi	r2,r2,1
  8086cc:	1885883a 	add	r2,r3,r2
  8086d0:	10800003 	ldbu	r2,0(r2)
  8086d4:	10803fcc 	andi	r2,r2,255
  8086d8:	1080010c 	andi	r2,r2,4
  8086dc:	103fe81e 	bne	r2,zero,808680 <__alt_mem_onchip_mem+0xff800680>
  8086e0:	00000206 	br	8086ec <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  8086e4:	00bfffc4 	movi	r2,-1
  8086e8:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  8086ec:	e0bfff07 	ldb	r2,-4(fp)
  8086f0:	10c012a0 	cmpeqi	r3,r2,74
  8086f4:	1800291e 	bne	r3,zero,80879c <lcd_handle_escape+0x1fc>
  8086f8:	10c012c8 	cmpgei	r3,r2,75
  8086fc:	1800031e 	bne	r3,zero,80870c <lcd_handle_escape+0x16c>
  808700:	10801220 	cmpeqi	r2,r2,72
  808704:	1000061e 	bne	r2,zero,808720 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  808708:	00004a06 	br	808834 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  80870c:	10c012e0 	cmpeqi	r3,r2,75
  808710:	1800281e 	bne	r3,zero,8087b4 <lcd_handle_escape+0x214>
  808714:	108019a0 	cmpeqi	r2,r2,102
  808718:	1000011e 	bne	r2,zero,808720 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80871c:	00004506 	br	808834 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  808720:	e0bffc17 	ldw	r2,-16(fp)
  808724:	0080050e 	bge	zero,r2,80873c <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  808728:	e0bffc17 	ldw	r2,-16(fp)
  80872c:	10bfffc4 	addi	r2,r2,-1
  808730:	1007883a 	mov	r3,r2
  808734:	e0bffe17 	ldw	r2,-8(fp)
  808738:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80873c:	e0bffb17 	ldw	r2,-20(fp)
  808740:	0080370e 	bge	zero,r2,808820 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  808744:	e0bffb17 	ldw	r2,-20(fp)
  808748:	10bfffc4 	addi	r2,r2,-1
  80874c:	1007883a 	mov	r3,r2
  808750:	e0bffe17 	ldw	r2,-8(fp)
  808754:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  808758:	e0bffe17 	ldw	r2,-8(fp)
  80875c:	10800883 	ldbu	r2,34(r2)
  808760:	10803fcc 	andi	r2,r2,255
  808764:	10800170 	cmpltui	r2,r2,5
  808768:	1000061e 	bne	r2,zero,808784 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  80876c:	e0bffe17 	ldw	r2,-8(fp)
  808770:	00c00104 	movi	r3,4
  808774:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  808778:	00000206 	br	808784 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  80877c:	e13ffe17 	ldw	r4,-8(fp)
  808780:	08084d40 	call	8084d4 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  808784:	e0bffe17 	ldw	r2,-8(fp)
  808788:	10800883 	ldbu	r2,34(r2)
  80878c:	10803fcc 	andi	r2,r2,255
  808790:	108000e8 	cmpgeui	r2,r2,3
  808794:	103ff91e 	bne	r2,zero,80877c <__alt_mem_onchip_mem+0xff80077c>
        lcd_scroll_up(sp);
    }
    break;
  808798:	00002106 	br	808820 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80879c:	e0bffb17 	ldw	r2,-20(fp)
  8087a0:	10800098 	cmpnei	r2,r2,2
  8087a4:	1000201e 	bne	r2,zero,808828 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  8087a8:	e13ffe17 	ldw	r4,-8(fp)
  8087ac:	08082180 	call	808218 <lcd_clear_screen>
    break;
  8087b0:	00001d06 	br	808828 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  8087b4:	e0bffb17 	ldw	r2,-20(fp)
  8087b8:	00801d16 	blt	zero,r2,808830 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8087bc:	e0bffe17 	ldw	r2,-8(fp)
  8087c0:	10800843 	ldbu	r2,33(r2)
  8087c4:	10803fcc 	andi	r2,r2,255
  8087c8:	10801428 	cmpgeui	r2,r2,80
  8087cc:	1000181e 	bne	r2,zero,808830 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  8087d0:	e0bffe17 	ldw	r2,-8(fp)
  8087d4:	10800883 	ldbu	r2,34(r2)
  8087d8:	10803fcc 	andi	r2,r2,255
  8087dc:	108018e4 	muli	r2,r2,99
  8087e0:	10801004 	addi	r2,r2,64
  8087e4:	e0fffe17 	ldw	r3,-8(fp)
  8087e8:	1887883a 	add	r3,r3,r2
  8087ec:	e0bffe17 	ldw	r2,-8(fp)
  8087f0:	10800843 	ldbu	r2,33(r2)
  8087f4:	10803fcc 	andi	r2,r2,255
  8087f8:	1889883a 	add	r4,r3,r2
  8087fc:	e0bffe17 	ldw	r2,-8(fp)
  808800:	10800843 	ldbu	r2,33(r2)
  808804:	10803fcc 	andi	r2,r2,255
  808808:	00c01404 	movi	r3,80
  80880c:	1885c83a 	sub	r2,r3,r2
  808810:	100d883a 	mov	r6,r2
  808814:	01400804 	movi	r5,32
  808818:	080aa700 	call	80aa70 <memset>
    }
    break;
  80881c:	00000406 	br	808830 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  808820:	0001883a 	nop
  808824:	00000306 	br	808834 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  808828:	0001883a 	nop
  80882c:	00000106 	br	808834 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  808830:	0001883a 	nop
  }
}
  808834:	0001883a 	nop
  808838:	e037883a 	mov	sp,fp
  80883c:	dfc00117 	ldw	ra,4(sp)
  808840:	df000017 	ldw	fp,0(sp)
  808844:	dec00204 	addi	sp,sp,8
  808848:	f800283a 	ret

0080884c <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  80884c:	defff304 	addi	sp,sp,-52
  808850:	dfc00c15 	stw	ra,48(sp)
  808854:	df000b15 	stw	fp,44(sp)
  808858:	df000b04 	addi	fp,sp,44
  80885c:	e13ffc15 	stw	r4,-16(fp)
  808860:	e17ffd15 	stw	r5,-12(fp)
  808864:	e1bffe15 	stw	r6,-8(fp)
  808868:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  80886c:	e0bffe17 	ldw	r2,-8(fp)
  808870:	e0fffd17 	ldw	r3,-12(fp)
  808874:	1885883a 	add	r2,r3,r2
  808878:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80887c:	e0bffc17 	ldw	r2,-16(fp)
  808880:	00c00044 	movi	r3,1
  808884:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  808888:	00009906 	br	808af0 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  80888c:	e0bffd17 	ldw	r2,-12(fp)
  808890:	10800003 	ldbu	r2,0(r2)
  808894:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  808898:	e0bffc17 	ldw	r2,-16(fp)
  80889c:	10800903 	ldbu	r2,36(r2)
  8088a0:	10803fcc 	andi	r2,r2,255
  8088a4:	1080201c 	xori	r2,r2,128
  8088a8:	10bfe004 	addi	r2,r2,-128
  8088ac:	10003716 	blt	r2,zero,80898c <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  8088b0:	e0bffc17 	ldw	r2,-16(fp)
  8088b4:	10800903 	ldbu	r2,36(r2)
  8088b8:	10803fcc 	andi	r2,r2,255
  8088bc:	1080201c 	xori	r2,r2,128
  8088c0:	10bfe004 	addi	r2,r2,-128
  8088c4:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  8088c8:	e0bffa17 	ldw	r2,-24(fp)
  8088cc:	1000031e 	bne	r2,zero,8088dc <altera_avalon_lcd_16207_write+0x90>
  8088d0:	e0bff907 	ldb	r2,-28(fp)
  8088d4:	108016d8 	cmpnei	r2,r2,91
  8088d8:	10000d1e 	bne	r2,zero,808910 <altera_avalon_lcd_16207_write+0xc4>
  8088dc:	e0bffa17 	ldw	r2,-24(fp)
  8088e0:	10001826 	beq	r2,zero,808944 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  8088e4:	d0e00a17 	ldw	r3,-32728(gp)
  8088e8:	e0bff907 	ldb	r2,-28(fp)
  8088ec:	10800044 	addi	r2,r2,1
  8088f0:	1885883a 	add	r2,r3,r2
  8088f4:	10800003 	ldbu	r2,0(r2)
  8088f8:	10803fcc 	andi	r2,r2,255
  8088fc:	1080010c 	andi	r2,r2,4
  808900:	1000101e 	bne	r2,zero,808944 <altera_avalon_lcd_16207_write+0xf8>
  808904:	e0bff907 	ldb	r2,-28(fp)
  808908:	10800ee0 	cmpeqi	r2,r2,59
  80890c:	10000d1e 	bne	r2,zero,808944 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  808910:	e0fffc17 	ldw	r3,-16(fp)
  808914:	e0bffa17 	ldw	r2,-24(fp)
  808918:	1885883a 	add	r2,r3,r2
  80891c:	10800a04 	addi	r2,r2,40
  808920:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  808924:	e0bff907 	ldb	r2,-28(fp)
  808928:	100b883a 	mov	r5,r2
  80892c:	e13ffc17 	ldw	r4,-16(fp)
  808930:	08085a00 	call	8085a0 <lcd_handle_escape>

        sp->esccount = -1;
  808934:	e0bffc17 	ldw	r2,-16(fp)
  808938:	00ffffc4 	movi	r3,-1
  80893c:	10c00905 	stb	r3,36(r2)
  808940:	00006806 	br	808ae4 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  808944:	e0bffc17 	ldw	r2,-16(fp)
  808948:	10800903 	ldbu	r2,36(r2)
  80894c:	10803fcc 	andi	r2,r2,255
  808950:	108001e8 	cmpgeui	r2,r2,7
  808954:	1000631e 	bne	r2,zero,808ae4 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  808958:	e0fffc17 	ldw	r3,-16(fp)
  80895c:	e0bffa17 	ldw	r2,-24(fp)
  808960:	1885883a 	add	r2,r3,r2
  808964:	10800a04 	addi	r2,r2,40
  808968:	e0fff903 	ldbu	r3,-28(fp)
  80896c:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  808970:	e0bffc17 	ldw	r2,-16(fp)
  808974:	10800903 	ldbu	r2,36(r2)
  808978:	10800044 	addi	r2,r2,1
  80897c:	1007883a 	mov	r3,r2
  808980:	e0bffc17 	ldw	r2,-16(fp)
  808984:	10c00905 	stb	r3,36(r2)
  808988:	00005606 	br	808ae4 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  80898c:	e0bff907 	ldb	r2,-28(fp)
  808990:	108006d8 	cmpnei	r2,r2,27
  808994:	1000031e 	bne	r2,zero,8089a4 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  808998:	e0bffc17 	ldw	r2,-16(fp)
  80899c:	10000905 	stb	zero,36(r2)
  8089a0:	00005006 	br	808ae4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  8089a4:	e0bff907 	ldb	r2,-28(fp)
  8089a8:	10800358 	cmpnei	r2,r2,13
  8089ac:	1000031e 	bne	r2,zero,8089bc <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  8089b0:	e0bffc17 	ldw	r2,-16(fp)
  8089b4:	10000845 	stb	zero,33(r2)
  8089b8:	00004a06 	br	808ae4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  8089bc:	e0bff907 	ldb	r2,-28(fp)
  8089c0:	10800298 	cmpnei	r2,r2,10
  8089c4:	1000101e 	bne	r2,zero,808a08 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  8089c8:	e0bffc17 	ldw	r2,-16(fp)
  8089cc:	10000845 	stb	zero,33(r2)
      sp->y++;
  8089d0:	e0bffc17 	ldw	r2,-16(fp)
  8089d4:	10800883 	ldbu	r2,34(r2)
  8089d8:	10800044 	addi	r2,r2,1
  8089dc:	1007883a 	mov	r3,r2
  8089e0:	e0bffc17 	ldw	r2,-16(fp)
  8089e4:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  8089e8:	e0bffc17 	ldw	r2,-16(fp)
  8089ec:	10800883 	ldbu	r2,34(r2)
  8089f0:	10803fcc 	andi	r2,r2,255
  8089f4:	108000f0 	cmpltui	r2,r2,3
  8089f8:	10003a1e 	bne	r2,zero,808ae4 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  8089fc:	e13ffc17 	ldw	r4,-16(fp)
  808a00:	08084d40 	call	8084d4 <lcd_scroll_up>
  808a04:	00003706 	br	808ae4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  808a08:	e0bff907 	ldb	r2,-28(fp)
  808a0c:	10800218 	cmpnei	r2,r2,8
  808a10:	10000b1e 	bne	r2,zero,808a40 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  808a14:	e0bffc17 	ldw	r2,-16(fp)
  808a18:	10800843 	ldbu	r2,33(r2)
  808a1c:	10803fcc 	andi	r2,r2,255
  808a20:	10003026 	beq	r2,zero,808ae4 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  808a24:	e0bffc17 	ldw	r2,-16(fp)
  808a28:	10800843 	ldbu	r2,33(r2)
  808a2c:	10bfffc4 	addi	r2,r2,-1
  808a30:	1007883a 	mov	r3,r2
  808a34:	e0bffc17 	ldw	r2,-16(fp)
  808a38:	10c00845 	stb	r3,33(r2)
  808a3c:	00002906 	br	808ae4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  808a40:	d0e00a17 	ldw	r3,-32728(gp)
  808a44:	e0bff907 	ldb	r2,-28(fp)
  808a48:	10800044 	addi	r2,r2,1
  808a4c:	1885883a 	add	r2,r3,r2
  808a50:	10800003 	ldbu	r2,0(r2)
  808a54:	10803fcc 	andi	r2,r2,255
  808a58:	1080201c 	xori	r2,r2,128
  808a5c:	10bfe004 	addi	r2,r2,-128
  808a60:	108025cc 	andi	r2,r2,151
  808a64:	10001f26 	beq	r2,zero,808ae4 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  808a68:	e0bffc17 	ldw	r2,-16(fp)
  808a6c:	10800883 	ldbu	r2,34(r2)
  808a70:	10803fcc 	andi	r2,r2,255
  808a74:	108000b0 	cmpltui	r2,r2,2
  808a78:	1000021e 	bne	r2,zero,808a84 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  808a7c:	e13ffc17 	ldw	r4,-16(fp)
  808a80:	08084d40 	call	8084d4 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  808a84:	e0bffc17 	ldw	r2,-16(fp)
  808a88:	10800843 	ldbu	r2,33(r2)
  808a8c:	10803fcc 	andi	r2,r2,255
  808a90:	10801428 	cmpgeui	r2,r2,80
  808a94:	10000d1e 	bne	r2,zero,808acc <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  808a98:	e0bffc17 	ldw	r2,-16(fp)
  808a9c:	10800883 	ldbu	r2,34(r2)
  808aa0:	10c03fcc 	andi	r3,r2,255
  808aa4:	e0bffc17 	ldw	r2,-16(fp)
  808aa8:	10800843 	ldbu	r2,33(r2)
  808aac:	10803fcc 	andi	r2,r2,255
  808ab0:	e13ffc17 	ldw	r4,-16(fp)
  808ab4:	18c018e4 	muli	r3,r3,99
  808ab8:	20c7883a 	add	r3,r4,r3
  808abc:	1885883a 	add	r2,r3,r2
  808ac0:	10801004 	addi	r2,r2,64
  808ac4:	e0fff903 	ldbu	r3,-28(fp)
  808ac8:	10c00005 	stb	r3,0(r2)

      sp->x++;
  808acc:	e0bffc17 	ldw	r2,-16(fp)
  808ad0:	10800843 	ldbu	r2,33(r2)
  808ad4:	10800044 	addi	r2,r2,1
  808ad8:	1007883a 	mov	r3,r2
  808adc:	e0bffc17 	ldw	r2,-16(fp)
  808ae0:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  808ae4:	e0bffd17 	ldw	r2,-12(fp)
  808ae8:	10800044 	addi	r2,r2,1
  808aec:	e0bffd15 	stw	r2,-12(fp)
  808af0:	e0fffd17 	ldw	r3,-12(fp)
  808af4:	e0bff817 	ldw	r2,-32(fp)
  808af8:	18bf6436 	bltu	r3,r2,80888c <__alt_mem_onchip_mem+0xff80088c>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  808afc:	00800404 	movi	r2,16
  808b00:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  808b04:	e03ff515 	stw	zero,-44(fp)
  808b08:	00003706 	br	808be8 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  808b0c:	00801404 	movi	r2,80
  808b10:	e0bff715 	stw	r2,-36(fp)
  808b14:	00001106 	br	808b5c <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  808b18:	e0bff717 	ldw	r2,-36(fp)
  808b1c:	10bfffc4 	addi	r2,r2,-1
  808b20:	e13ffc17 	ldw	r4,-16(fp)
  808b24:	e0fff517 	ldw	r3,-44(fp)
  808b28:	18c018e4 	muli	r3,r3,99
  808b2c:	20c7883a 	add	r3,r4,r3
  808b30:	1885883a 	add	r2,r3,r2
  808b34:	10801004 	addi	r2,r2,64
  808b38:	10800003 	ldbu	r2,0(r2)
  808b3c:	10803fcc 	andi	r2,r2,255
  808b40:	1080201c 	xori	r2,r2,128
  808b44:	10bfe004 	addi	r2,r2,-128
  808b48:	10800820 	cmpeqi	r2,r2,32
  808b4c:	10000626 	beq	r2,zero,808b68 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  808b50:	e0bff717 	ldw	r2,-36(fp)
  808b54:	10bfffc4 	addi	r2,r2,-1
  808b58:	e0bff715 	stw	r2,-36(fp)
  808b5c:	e0bff717 	ldw	r2,-36(fp)
  808b60:	00bfed16 	blt	zero,r2,808b18 <__alt_mem_onchip_mem+0xff800b18>
  808b64:	00000106 	br	808b6c <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  808b68:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  808b6c:	e0bff717 	ldw	r2,-36(fp)
  808b70:	10800448 	cmpgei	r2,r2,17
  808b74:	1000031e 	bne	r2,zero,808b84 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  808b78:	00800404 	movi	r2,16
  808b7c:	e0bff715 	stw	r2,-36(fp)
  808b80:	00000306 	br	808b90 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  808b84:	e0bff717 	ldw	r2,-36(fp)
  808b88:	10800044 	addi	r2,r2,1
  808b8c:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  808b90:	e0bff717 	ldw	r2,-36(fp)
  808b94:	1009883a 	mov	r4,r2
  808b98:	e0fffc17 	ldw	r3,-16(fp)
  808b9c:	e0bff517 	ldw	r2,-44(fp)
  808ba0:	108018e4 	muli	r2,r2,99
  808ba4:	1885883a 	add	r2,r3,r2
  808ba8:	10802444 	addi	r2,r2,145
  808bac:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  808bb0:	e0fff617 	ldw	r3,-40(fp)
  808bb4:	e0bff717 	ldw	r2,-36(fp)
  808bb8:	1880020e 	bge	r3,r2,808bc4 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  808bbc:	e0bff717 	ldw	r2,-36(fp)
  808bc0:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  808bc4:	e0fffc17 	ldw	r3,-16(fp)
  808bc8:	e0bff517 	ldw	r2,-44(fp)
  808bcc:	108018e4 	muli	r2,r2,99
  808bd0:	1885883a 	add	r2,r3,r2
  808bd4:	10802484 	addi	r2,r2,146
  808bd8:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  808bdc:	e0bff517 	ldw	r2,-44(fp)
  808be0:	10800044 	addi	r2,r2,1
  808be4:	e0bff515 	stw	r2,-44(fp)
  808be8:	e0bff517 	ldw	r2,-44(fp)
  808bec:	10800090 	cmplti	r2,r2,2
  808bf0:	103fc61e 	bne	r2,zero,808b0c <__alt_mem_onchip_mem+0xff800b0c>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  808bf4:	e0bff617 	ldw	r2,-40(fp)
  808bf8:	10800448 	cmpgei	r2,r2,17
  808bfc:	1000031e 	bne	r2,zero,808c0c <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  808c00:	e0bffc17 	ldw	r2,-16(fp)
  808c04:	10000985 	stb	zero,38(r2)
  808c08:	00002e06 	br	808cc4 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  808c0c:	e0bff617 	ldw	r2,-40(fp)
  808c10:	1085883a 	add	r2,r2,r2
  808c14:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  808c18:	e0bff617 	ldw	r2,-40(fp)
  808c1c:	1007883a 	mov	r3,r2
  808c20:	e0bffc17 	ldw	r2,-16(fp)
  808c24:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  808c28:	e03ff515 	stw	zero,-44(fp)
  808c2c:	00002206 	br	808cb8 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  808c30:	e0fffc17 	ldw	r3,-16(fp)
  808c34:	e0bff517 	ldw	r2,-44(fp)
  808c38:	108018e4 	muli	r2,r2,99
  808c3c:	1885883a 	add	r2,r3,r2
  808c40:	10802444 	addi	r2,r2,145
  808c44:	10800003 	ldbu	r2,0(r2)
  808c48:	10803fcc 	andi	r2,r2,255
  808c4c:	1080201c 	xori	r2,r2,128
  808c50:	10bfe004 	addi	r2,r2,-128
  808c54:	10800450 	cmplti	r2,r2,17
  808c58:	1000141e 	bne	r2,zero,808cac <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  808c5c:	e0fffc17 	ldw	r3,-16(fp)
  808c60:	e0bff517 	ldw	r2,-44(fp)
  808c64:	108018e4 	muli	r2,r2,99
  808c68:	1885883a 	add	r2,r3,r2
  808c6c:	10802444 	addi	r2,r2,145
  808c70:	10800003 	ldbu	r2,0(r2)
  808c74:	10803fcc 	andi	r2,r2,255
  808c78:	1080201c 	xori	r2,r2,128
  808c7c:	10bfe004 	addi	r2,r2,-128
  808c80:	1004923a 	slli	r2,r2,8
  808c84:	e17ff617 	ldw	r5,-40(fp)
  808c88:	1009883a 	mov	r4,r2
  808c8c:	0805aa80 	call	805aa8 <__divsi3>
  808c90:	1009883a 	mov	r4,r2
  808c94:	e0fffc17 	ldw	r3,-16(fp)
  808c98:	e0bff517 	ldw	r2,-44(fp)
  808c9c:	108018e4 	muli	r2,r2,99
  808ca0:	1885883a 	add	r2,r3,r2
  808ca4:	10802484 	addi	r2,r2,146
  808ca8:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  808cac:	e0bff517 	ldw	r2,-44(fp)
  808cb0:	10800044 	addi	r2,r2,1
  808cb4:	e0bff515 	stw	r2,-44(fp)
  808cb8:	e0bff517 	ldw	r2,-44(fp)
  808cbc:	10800090 	cmplti	r2,r2,2
  808cc0:	103fdb1e 	bne	r2,zero,808c30 <__alt_mem_onchip_mem+0xff800c30>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  808cc4:	e0bffc17 	ldw	r2,-16(fp)
  808cc8:	10800943 	ldbu	r2,37(r2)
  808ccc:	10803fcc 	andi	r2,r2,255
  808cd0:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  808cd4:	e13ffc17 	ldw	r4,-16(fp)
  808cd8:	08082e80 	call	8082e8 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  808cdc:	e0bffc17 	ldw	r2,-16(fp)
  808ce0:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  808ce4:	e0bffc17 	ldw	r2,-16(fp)
  808ce8:	10800943 	ldbu	r2,37(r2)
  808cec:	10c03fcc 	andi	r3,r2,255
  808cf0:	e0bffb17 	ldw	r2,-20(fp)
  808cf4:	18800426 	beq	r3,r2,808d08 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  808cf8:	e0bffc17 	ldw	r2,-16(fp)
  808cfc:	00c00044 	movi	r3,1
  808d00:	10c009c5 	stb	r3,39(r2)
  }
  808d04:	003fef06 	br	808cc4 <__alt_mem_onchip_mem+0xff800cc4>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  808d08:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  808d0c:	e0bffe17 	ldw	r2,-8(fp)
}
  808d10:	e037883a 	mov	sp,fp
  808d14:	dfc00117 	ldw	ra,4(sp)
  808d18:	df000017 	ldw	fp,0(sp)
  808d1c:	dec00204 	addi	sp,sp,8
  808d20:	f800283a 	ret

00808d24 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  808d24:	defffc04 	addi	sp,sp,-16
  808d28:	dfc00315 	stw	ra,12(sp)
  808d2c:	df000215 	stw	fp,8(sp)
  808d30:	df000204 	addi	fp,sp,8
  808d34:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  808d38:	e0bfff17 	ldw	r2,-4(fp)
  808d3c:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  808d40:	e0bffe17 	ldw	r2,-8(fp)
  808d44:	10800943 	ldbu	r2,37(r2)
  808d48:	10803fcc 	andi	r2,r2,255
  808d4c:	10c00044 	addi	r3,r2,1
  808d50:	e0bffe17 	ldw	r2,-8(fp)
  808d54:	10800983 	ldbu	r2,38(r2)
  808d58:	10803fcc 	andi	r2,r2,255
  808d5c:	18800316 	blt	r3,r2,808d6c <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  808d60:	e0bffe17 	ldw	r2,-8(fp)
  808d64:	10000945 	stb	zero,37(r2)
  808d68:	00000606 	br	808d84 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  808d6c:	e0bffe17 	ldw	r2,-8(fp)
  808d70:	10800943 	ldbu	r2,37(r2)
  808d74:	10800044 	addi	r2,r2,1
  808d78:	1007883a 	mov	r3,r2
  808d7c:	e0bffe17 	ldw	r2,-8(fp)
  808d80:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  808d84:	e0bffe17 	ldw	r2,-8(fp)
  808d88:	10800983 	ldbu	r2,38(r2)
  808d8c:	10803fcc 	andi	r2,r2,255
  808d90:	10000826 	beq	r2,zero,808db4 <alt_lcd_16207_timeout+0x90>
  808d94:	e0bffe17 	ldw	r2,-8(fp)
  808d98:	108009c3 	ldbu	r2,39(r2)
  808d9c:	10803fcc 	andi	r2,r2,255
  808da0:	1080201c 	xori	r2,r2,128
  808da4:	10bfe004 	addi	r2,r2,-128
  808da8:	1000021e 	bne	r2,zero,808db4 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  808dac:	e13ffe17 	ldw	r4,-8(fp)
  808db0:	08082e80 	call	8082e8 <lcd_repaint_screen>

  return sp->period;
  808db4:	e0bffe17 	ldw	r2,-8(fp)
  808db8:	10800717 	ldw	r2,28(r2)
}
  808dbc:	e037883a 	mov	sp,fp
  808dc0:	dfc00117 	ldw	ra,4(sp)
  808dc4:	df000017 	ldw	fp,0(sp)
  808dc8:	dec00204 	addi	sp,sp,8
  808dcc:	f800283a 	ret

00808dd0 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  808dd0:	defffc04 	addi	sp,sp,-16
  808dd4:	dfc00315 	stw	ra,12(sp)
  808dd8:	df000215 	stw	fp,8(sp)
  808ddc:	df000204 	addi	fp,sp,8
  808de0:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  808de4:	e0bfff17 	ldw	r2,-4(fp)
  808de8:	10800017 	ldw	r2,0(r2)
  808dec:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  808df0:	e0bfff17 	ldw	r2,-4(fp)
  808df4:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  808df8:	010ea604 	movi	r4,15000
  808dfc:	080a3e80 	call	80a3e8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  808e00:	e0bffe17 	ldw	r2,-8(fp)
  808e04:	00c00c04 	movi	r3,48
  808e08:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  808e0c:	01040104 	movi	r4,4100
  808e10:	080a3e80 	call	80a3e8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  808e14:	e0bffe17 	ldw	r2,-8(fp)
  808e18:	00c00c04 	movi	r3,48
  808e1c:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  808e20:	0100fa04 	movi	r4,1000
  808e24:	080a3e80 	call	80a3e8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  808e28:	e0bffe17 	ldw	r2,-8(fp)
  808e2c:	00c00c04 	movi	r3,48
  808e30:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  808e34:	01400e04 	movi	r5,56
  808e38:	e13fff17 	ldw	r4,-4(fp)
  808e3c:	08080880 	call	808088 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  808e40:	01400204 	movi	r5,8
  808e44:	e13fff17 	ldw	r4,-4(fp)
  808e48:	08080880 	call	808088 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  808e4c:	e13fff17 	ldw	r4,-4(fp)
  808e50:	08082180 	call	808218 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  808e54:	01400184 	movi	r5,6
  808e58:	e13fff17 	ldw	r4,-4(fp)
  808e5c:	08080880 	call	808088 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  808e60:	01400304 	movi	r5,12
  808e64:	e13fff17 	ldw	r4,-4(fp)
  808e68:	08080880 	call	808088 <lcd_write_command>

  sp->esccount = -1;
  808e6c:	e0bfff17 	ldw	r2,-4(fp)
  808e70:	00ffffc4 	movi	r3,-1
  808e74:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  808e78:	e0bfff17 	ldw	r2,-4(fp)
  808e7c:	10800a04 	addi	r2,r2,40
  808e80:	01800204 	movi	r6,8
  808e84:	000b883a 	mov	r5,zero
  808e88:	1009883a 	mov	r4,r2
  808e8c:	080aa700 	call	80aa70 <memset>

  sp->scrollpos = 0;
  808e90:	e0bfff17 	ldw	r2,-4(fp)
  808e94:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  808e98:	e0bfff17 	ldw	r2,-4(fp)
  808e9c:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  808ea0:	e0bfff17 	ldw	r2,-4(fp)
  808ea4:	100009c5 	stb	zero,39(r2)
  808ea8:	d0a62417 	ldw	r2,-26480(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  808eac:	01400284 	movi	r5,10
  808eb0:	1009883a 	mov	r4,r2
  808eb4:	0805ba00 	call	805ba0 <__udivsi3>
  808eb8:	1007883a 	mov	r3,r2
  808ebc:	e0bfff17 	ldw	r2,-4(fp)
  808ec0:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  808ec4:	e0bfff17 	ldw	r2,-4(fp)
  808ec8:	10c00104 	addi	r3,r2,4
  808ecc:	e0bfff17 	ldw	r2,-4(fp)
  808ed0:	10800717 	ldw	r2,28(r2)
  808ed4:	e1ffff17 	ldw	r7,-4(fp)
  808ed8:	01802074 	movhi	r6,129
  808edc:	31a34904 	addi	r6,r6,-29404
  808ee0:	100b883a 	mov	r5,r2
  808ee4:	1809883a 	mov	r4,r3
  808ee8:	08099300 	call	809930 <alt_alarm_start>
}
  808eec:	0001883a 	nop
  808ef0:	e037883a 	mov	sp,fp
  808ef4:	dfc00117 	ldw	ra,4(sp)
  808ef8:	df000017 	ldw	fp,0(sp)
  808efc:	dec00204 	addi	sp,sp,8
  808f00:	f800283a 	ret

00808f04 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  808f04:	defffa04 	addi	sp,sp,-24
  808f08:	dfc00515 	stw	ra,20(sp)
  808f0c:	df000415 	stw	fp,16(sp)
  808f10:	df000404 	addi	fp,sp,16
  808f14:	e13ffd15 	stw	r4,-12(fp)
  808f18:	e17ffe15 	stw	r5,-8(fp)
  808f1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  808f20:	e0bffd17 	ldw	r2,-12(fp)
  808f24:	10800017 	ldw	r2,0(r2)
  808f28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  808f2c:	e0bffc17 	ldw	r2,-16(fp)
  808f30:	10c00a04 	addi	r3,r2,40
  808f34:	e0bffd17 	ldw	r2,-12(fp)
  808f38:	10800217 	ldw	r2,8(r2)
  808f3c:	100f883a 	mov	r7,r2
  808f40:	e1bfff17 	ldw	r6,-4(fp)
  808f44:	e17ffe17 	ldw	r5,-8(fp)
  808f48:	1809883a 	mov	r4,r3
  808f4c:	080884c0 	call	80884c <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  808f50:	e037883a 	mov	sp,fp
  808f54:	dfc00117 	ldw	ra,4(sp)
  808f58:	df000017 	ldw	fp,0(sp)
  808f5c:	dec00204 	addi	sp,sp,8
  808f60:	f800283a 	ret

00808f64 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  808f64:	defffa04 	addi	sp,sp,-24
  808f68:	dfc00515 	stw	ra,20(sp)
  808f6c:	df000415 	stw	fp,16(sp)
  808f70:	df000404 	addi	fp,sp,16
  808f74:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  808f78:	0007883a 	mov	r3,zero
  808f7c:	e0bfff17 	ldw	r2,-4(fp)
  808f80:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  808f84:	e0bfff17 	ldw	r2,-4(fp)
  808f88:	10800104 	addi	r2,r2,4
  808f8c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808f90:	0005303a 	rdctl	r2,status
  808f94:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808f98:	e0fffd17 	ldw	r3,-12(fp)
  808f9c:	00bfff84 	movi	r2,-2
  808fa0:	1884703a 	and	r2,r3,r2
  808fa4:	1001703a 	wrctl	status,r2
  
  return context;
  808fa8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  808fac:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  808fb0:	080a2e00 	call	80a2e0 <alt_tick>
  808fb4:	e0bffc17 	ldw	r2,-16(fp)
  808fb8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808fbc:	e0bffe17 	ldw	r2,-8(fp)
  808fc0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  808fc4:	0001883a 	nop
  808fc8:	e037883a 	mov	sp,fp
  808fcc:	dfc00117 	ldw	ra,4(sp)
  808fd0:	df000017 	ldw	fp,0(sp)
  808fd4:	dec00204 	addi	sp,sp,8
  808fd8:	f800283a 	ret

00808fdc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  808fdc:	defff804 	addi	sp,sp,-32
  808fe0:	dfc00715 	stw	ra,28(sp)
  808fe4:	df000615 	stw	fp,24(sp)
  808fe8:	df000604 	addi	fp,sp,24
  808fec:	e13ffc15 	stw	r4,-16(fp)
  808ff0:	e17ffd15 	stw	r5,-12(fp)
  808ff4:	e1bffe15 	stw	r6,-8(fp)
  808ff8:	e1ffff15 	stw	r7,-4(fp)
  808ffc:	e0bfff17 	ldw	r2,-4(fp)
  809000:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  809004:	d0a62417 	ldw	r2,-26480(gp)
  809008:	1000021e 	bne	r2,zero,809014 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  80900c:	e0bffb17 	ldw	r2,-20(fp)
  809010:	d0a62415 	stw	r2,-26480(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  809014:	e0bffc17 	ldw	r2,-16(fp)
  809018:	10800104 	addi	r2,r2,4
  80901c:	00c001c4 	movi	r3,7
  809020:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  809024:	d8000015 	stw	zero,0(sp)
  809028:	e1fffc17 	ldw	r7,-16(fp)
  80902c:	01802074 	movhi	r6,129
  809030:	31a3d904 	addi	r6,r6,-28828
  809034:	e17ffe17 	ldw	r5,-8(fp)
  809038:	e13ffd17 	ldw	r4,-12(fp)
  80903c:	08071140 	call	807114 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  809040:	0001883a 	nop
  809044:	e037883a 	mov	sp,fp
  809048:	dfc00117 	ldw	ra,4(sp)
  80904c:	df000017 	ldw	fp,0(sp)
  809050:	dec00204 	addi	sp,sp,8
  809054:	f800283a 	ret

00809058 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  809058:	defffa04 	addi	sp,sp,-24
  80905c:	dfc00515 	stw	ra,20(sp)
  809060:	df000415 	stw	fp,16(sp)
  809064:	df000404 	addi	fp,sp,16
  809068:	e13ffd15 	stw	r4,-12(fp)
  80906c:	e17ffe15 	stw	r5,-8(fp)
  809070:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  809074:	e0bffd17 	ldw	r2,-12(fp)
  809078:	10800017 	ldw	r2,0(r2)
  80907c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  809080:	e0bffc17 	ldw	r2,-16(fp)
  809084:	10c00a04 	addi	r3,r2,40
  809088:	e0bffd17 	ldw	r2,-12(fp)
  80908c:	10800217 	ldw	r2,8(r2)
  809090:	100f883a 	mov	r7,r2
  809094:	e1bfff17 	ldw	r6,-4(fp)
  809098:	e17ffe17 	ldw	r5,-8(fp)
  80909c:	1809883a 	mov	r4,r3
  8090a0:	080956c0 	call	80956c <altera_avalon_uart_read>
      fd->fd_flags);
}
  8090a4:	e037883a 	mov	sp,fp
  8090a8:	dfc00117 	ldw	ra,4(sp)
  8090ac:	df000017 	ldw	fp,0(sp)
  8090b0:	dec00204 	addi	sp,sp,8
  8090b4:	f800283a 	ret

008090b8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8090b8:	defffa04 	addi	sp,sp,-24
  8090bc:	dfc00515 	stw	ra,20(sp)
  8090c0:	df000415 	stw	fp,16(sp)
  8090c4:	df000404 	addi	fp,sp,16
  8090c8:	e13ffd15 	stw	r4,-12(fp)
  8090cc:	e17ffe15 	stw	r5,-8(fp)
  8090d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8090d4:	e0bffd17 	ldw	r2,-12(fp)
  8090d8:	10800017 	ldw	r2,0(r2)
  8090dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  8090e0:	e0bffc17 	ldw	r2,-16(fp)
  8090e4:	10c00a04 	addi	r3,r2,40
  8090e8:	e0bffd17 	ldw	r2,-12(fp)
  8090ec:	10800217 	ldw	r2,8(r2)
  8090f0:	100f883a 	mov	r7,r2
  8090f4:	e1bfff17 	ldw	r6,-4(fp)
  8090f8:	e17ffe17 	ldw	r5,-8(fp)
  8090fc:	1809883a 	mov	r4,r3
  809100:	08097840 	call	809784 <altera_avalon_uart_write>
      fd->fd_flags);
}
  809104:	e037883a 	mov	sp,fp
  809108:	dfc00117 	ldw	ra,4(sp)
  80910c:	df000017 	ldw	fp,0(sp)
  809110:	dec00204 	addi	sp,sp,8
  809114:	f800283a 	ret

00809118 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  809118:	defffc04 	addi	sp,sp,-16
  80911c:	dfc00315 	stw	ra,12(sp)
  809120:	df000215 	stw	fp,8(sp)
  809124:	df000204 	addi	fp,sp,8
  809128:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80912c:	e0bfff17 	ldw	r2,-4(fp)
  809130:	10800017 	ldw	r2,0(r2)
  809134:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  809138:	e0bffe17 	ldw	r2,-8(fp)
  80913c:	10c00a04 	addi	r3,r2,40
  809140:	e0bfff17 	ldw	r2,-4(fp)
  809144:	10800217 	ldw	r2,8(r2)
  809148:	100b883a 	mov	r5,r2
  80914c:	1809883a 	mov	r4,r3
  809150:	08094dc0 	call	8094dc <altera_avalon_uart_close>
}
  809154:	e037883a 	mov	sp,fp
  809158:	dfc00117 	ldw	ra,4(sp)
  80915c:	df000017 	ldw	fp,0(sp)
  809160:	dec00204 	addi	sp,sp,8
  809164:	f800283a 	ret

00809168 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  809168:	defff804 	addi	sp,sp,-32
  80916c:	dfc00715 	stw	ra,28(sp)
  809170:	df000615 	stw	fp,24(sp)
  809174:	df000604 	addi	fp,sp,24
  809178:	e13ffd15 	stw	r4,-12(fp)
  80917c:	e17ffe15 	stw	r5,-8(fp)
  809180:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  809184:	e0bffd17 	ldw	r2,-12(fp)
  809188:	10800017 	ldw	r2,0(r2)
  80918c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  809190:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  809194:	1000041e 	bne	r2,zero,8091a8 <altera_avalon_uart_init+0x40>
  809198:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80919c:	1000021e 	bne	r2,zero,8091a8 <altera_avalon_uart_init+0x40>
  8091a0:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8091a4:	10000226 	beq	r2,zero,8091b0 <altera_avalon_uart_init+0x48>
  8091a8:	00800044 	movi	r2,1
  8091ac:	00000106 	br	8091b4 <altera_avalon_uart_init+0x4c>
  8091b0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8091b4:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  8091b8:	e0bffc17 	ldw	r2,-16(fp)
  8091bc:	10000f1e 	bne	r2,zero,8091fc <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  8091c0:	e0bffd17 	ldw	r2,-12(fp)
  8091c4:	00c32004 	movi	r3,3200
  8091c8:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  8091cc:	e0bffb17 	ldw	r2,-20(fp)
  8091d0:	10800304 	addi	r2,r2,12
  8091d4:	e0fffd17 	ldw	r3,-12(fp)
  8091d8:	18c00117 	ldw	r3,4(r3)
  8091dc:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  8091e0:	d8000015 	stw	zero,0(sp)
  8091e4:	e1fffd17 	ldw	r7,-12(fp)
  8091e8:	01802074 	movhi	r6,129
  8091ec:	31a48504 	addi	r6,r6,-28140
  8091f0:	e17fff17 	ldw	r5,-4(fp)
  8091f4:	e13ffe17 	ldw	r4,-8(fp)
  8091f8:	08071140 	call	807114 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  8091fc:	0001883a 	nop
  809200:	e037883a 	mov	sp,fp
  809204:	dfc00117 	ldw	ra,4(sp)
  809208:	df000017 	ldw	fp,0(sp)
  80920c:	dec00204 	addi	sp,sp,8
  809210:	f800283a 	ret

00809214 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  809214:	defffa04 	addi	sp,sp,-24
  809218:	dfc00515 	stw	ra,20(sp)
  80921c:	df000415 	stw	fp,16(sp)
  809220:	df000404 	addi	fp,sp,16
  809224:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  809228:	e0bfff17 	ldw	r2,-4(fp)
  80922c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  809230:	e0bffc17 	ldw	r2,-16(fp)
  809234:	10800017 	ldw	r2,0(r2)
  809238:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  80923c:	e0bffd17 	ldw	r2,-12(fp)
  809240:	10800204 	addi	r2,r2,8
  809244:	10800037 	ldwio	r2,0(r2)
  809248:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80924c:	e0bffd17 	ldw	r2,-12(fp)
  809250:	10800204 	addi	r2,r2,8
  809254:	0007883a 	mov	r3,zero
  809258:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  80925c:	e0bffd17 	ldw	r2,-12(fp)
  809260:	10800204 	addi	r2,r2,8
  809264:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  809268:	e0bffe17 	ldw	r2,-8(fp)
  80926c:	1080200c 	andi	r2,r2,128
  809270:	10000326 	beq	r2,zero,809280 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  809274:	e17ffe17 	ldw	r5,-8(fp)
  809278:	e13ffc17 	ldw	r4,-16(fp)
  80927c:	08092b00 	call	8092b0 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  809280:	e0bffe17 	ldw	r2,-8(fp)
  809284:	1081100c 	andi	r2,r2,1088
  809288:	10000326 	beq	r2,zero,809298 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80928c:	e17ffe17 	ldw	r5,-8(fp)
  809290:	e13ffc17 	ldw	r4,-16(fp)
  809294:	08093940 	call	809394 <altera_avalon_uart_txirq>
  }
  

}
  809298:	0001883a 	nop
  80929c:	e037883a 	mov	sp,fp
  8092a0:	dfc00117 	ldw	ra,4(sp)
  8092a4:	df000017 	ldw	fp,0(sp)
  8092a8:	dec00204 	addi	sp,sp,8
  8092ac:	f800283a 	ret

008092b0 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8092b0:	defffc04 	addi	sp,sp,-16
  8092b4:	df000315 	stw	fp,12(sp)
  8092b8:	df000304 	addi	fp,sp,12
  8092bc:	e13ffe15 	stw	r4,-8(fp)
  8092c0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  8092c4:	e0bfff17 	ldw	r2,-4(fp)
  8092c8:	108000cc 	andi	r2,r2,3
  8092cc:	10002c1e 	bne	r2,zero,809380 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  8092d0:	e0bffe17 	ldw	r2,-8(fp)
  8092d4:	10800317 	ldw	r2,12(r2)
  8092d8:	e0bffe17 	ldw	r2,-8(fp)
  8092dc:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8092e0:	e0bffe17 	ldw	r2,-8(fp)
  8092e4:	10800317 	ldw	r2,12(r2)
  8092e8:	10800044 	addi	r2,r2,1
  8092ec:	10800fcc 	andi	r2,r2,63
  8092f0:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  8092f4:	e0bffe17 	ldw	r2,-8(fp)
  8092f8:	10800317 	ldw	r2,12(r2)
  8092fc:	e0fffe17 	ldw	r3,-8(fp)
  809300:	18c00017 	ldw	r3,0(r3)
  809304:	18c00037 	ldwio	r3,0(r3)
  809308:	1809883a 	mov	r4,r3
  80930c:	e0fffe17 	ldw	r3,-8(fp)
  809310:	1885883a 	add	r2,r3,r2
  809314:	10800704 	addi	r2,r2,28
  809318:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  80931c:	e0bffe17 	ldw	r2,-8(fp)
  809320:	e0fffd17 	ldw	r3,-12(fp)
  809324:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  809328:	e0bffe17 	ldw	r2,-8(fp)
  80932c:	10800317 	ldw	r2,12(r2)
  809330:	10800044 	addi	r2,r2,1
  809334:	10800fcc 	andi	r2,r2,63
  809338:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  80933c:	e0bffe17 	ldw	r2,-8(fp)
  809340:	10c00217 	ldw	r3,8(r2)
  809344:	e0bffd17 	ldw	r2,-12(fp)
  809348:	18800e1e 	bne	r3,r2,809384 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80934c:	e0bffe17 	ldw	r2,-8(fp)
  809350:	10c00117 	ldw	r3,4(r2)
  809354:	00bfdfc4 	movi	r2,-129
  809358:	1886703a 	and	r3,r3,r2
  80935c:	e0bffe17 	ldw	r2,-8(fp)
  809360:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  809364:	e0bffe17 	ldw	r2,-8(fp)
  809368:	10800017 	ldw	r2,0(r2)
  80936c:	10800304 	addi	r2,r2,12
  809370:	e0fffe17 	ldw	r3,-8(fp)
  809374:	18c00117 	ldw	r3,4(r3)
  809378:	10c00035 	stwio	r3,0(r2)
  80937c:	00000106 	br	809384 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  809380:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  809384:	e037883a 	mov	sp,fp
  809388:	df000017 	ldw	fp,0(sp)
  80938c:	dec00104 	addi	sp,sp,4
  809390:	f800283a 	ret

00809394 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  809394:	defffb04 	addi	sp,sp,-20
  809398:	df000415 	stw	fp,16(sp)
  80939c:	df000404 	addi	fp,sp,16
  8093a0:	e13ffc15 	stw	r4,-16(fp)
  8093a4:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  8093a8:	e0bffc17 	ldw	r2,-16(fp)
  8093ac:	10c00417 	ldw	r3,16(r2)
  8093b0:	e0bffc17 	ldw	r2,-16(fp)
  8093b4:	10800517 	ldw	r2,20(r2)
  8093b8:	18803226 	beq	r3,r2,809484 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8093bc:	e0bffc17 	ldw	r2,-16(fp)
  8093c0:	10800617 	ldw	r2,24(r2)
  8093c4:	1080008c 	andi	r2,r2,2
  8093c8:	10000326 	beq	r2,zero,8093d8 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8093cc:	e0bffd17 	ldw	r2,-12(fp)
  8093d0:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8093d4:	10001d26 	beq	r2,zero,80944c <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  8093d8:	e0bffc17 	ldw	r2,-16(fp)
  8093dc:	10800417 	ldw	r2,16(r2)
  8093e0:	e0bffc17 	ldw	r2,-16(fp)
  8093e4:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  8093e8:	e0bffc17 	ldw	r2,-16(fp)
  8093ec:	10800017 	ldw	r2,0(r2)
  8093f0:	10800104 	addi	r2,r2,4
  8093f4:	e0fffc17 	ldw	r3,-16(fp)
  8093f8:	18c00417 	ldw	r3,16(r3)
  8093fc:	e13ffc17 	ldw	r4,-16(fp)
  809400:	20c7883a 	add	r3,r4,r3
  809404:	18c01704 	addi	r3,r3,92
  809408:	18c00003 	ldbu	r3,0(r3)
  80940c:	18c03fcc 	andi	r3,r3,255
  809410:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  809414:	e0bffc17 	ldw	r2,-16(fp)
  809418:	10800417 	ldw	r2,16(r2)
  80941c:	10800044 	addi	r2,r2,1
  809420:	e0fffc17 	ldw	r3,-16(fp)
  809424:	18800415 	stw	r2,16(r3)
  809428:	10c00fcc 	andi	r3,r2,63
  80942c:	e0bffc17 	ldw	r2,-16(fp)
  809430:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  809434:	e0bffc17 	ldw	r2,-16(fp)
  809438:	10800117 	ldw	r2,4(r2)
  80943c:	10c01014 	ori	r3,r2,64
  809440:	e0bffc17 	ldw	r2,-16(fp)
  809444:	10c00115 	stw	r3,4(r2)
  809448:	00000e06 	br	809484 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80944c:	e0bffc17 	ldw	r2,-16(fp)
  809450:	10800017 	ldw	r2,0(r2)
  809454:	10800204 	addi	r2,r2,8
  809458:	10800037 	ldwio	r2,0(r2)
  80945c:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  809460:	e0bffd17 	ldw	r2,-12(fp)
  809464:	1082000c 	andi	r2,r2,2048
  809468:	1000061e 	bne	r2,zero,809484 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80946c:	e0bffc17 	ldw	r2,-16(fp)
  809470:	10c00117 	ldw	r3,4(r2)
  809474:	00bfefc4 	movi	r2,-65
  809478:	1886703a 	and	r3,r3,r2
  80947c:	e0bffc17 	ldw	r2,-16(fp)
  809480:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  809484:	e0bffc17 	ldw	r2,-16(fp)
  809488:	10c00417 	ldw	r3,16(r2)
  80948c:	e0bffc17 	ldw	r2,-16(fp)
  809490:	10800517 	ldw	r2,20(r2)
  809494:	1880061e 	bne	r3,r2,8094b0 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  809498:	e0bffc17 	ldw	r2,-16(fp)
  80949c:	10c00117 	ldw	r3,4(r2)
  8094a0:	00beefc4 	movi	r2,-1089
  8094a4:	1886703a 	and	r3,r3,r2
  8094a8:	e0bffc17 	ldw	r2,-16(fp)
  8094ac:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8094b0:	e0bffc17 	ldw	r2,-16(fp)
  8094b4:	10800017 	ldw	r2,0(r2)
  8094b8:	10800304 	addi	r2,r2,12
  8094bc:	e0fffc17 	ldw	r3,-16(fp)
  8094c0:	18c00117 	ldw	r3,4(r3)
  8094c4:	10c00035 	stwio	r3,0(r2)
}
  8094c8:	0001883a 	nop
  8094cc:	e037883a 	mov	sp,fp
  8094d0:	df000017 	ldw	fp,0(sp)
  8094d4:	dec00104 	addi	sp,sp,4
  8094d8:	f800283a 	ret

008094dc <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  8094dc:	defffd04 	addi	sp,sp,-12
  8094e0:	df000215 	stw	fp,8(sp)
  8094e4:	df000204 	addi	fp,sp,8
  8094e8:	e13ffe15 	stw	r4,-8(fp)
  8094ec:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8094f0:	00000506 	br	809508 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  8094f4:	e0bfff17 	ldw	r2,-4(fp)
  8094f8:	1090000c 	andi	r2,r2,16384
  8094fc:	10000226 	beq	r2,zero,809508 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  809500:	00bffd44 	movi	r2,-11
  809504:	00000606 	br	809520 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  809508:	e0bffe17 	ldw	r2,-8(fp)
  80950c:	10c00417 	ldw	r3,16(r2)
  809510:	e0bffe17 	ldw	r2,-8(fp)
  809514:	10800517 	ldw	r2,20(r2)
  809518:	18bff61e 	bne	r3,r2,8094f4 <__alt_mem_onchip_mem+0xff8014f4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80951c:	0005883a 	mov	r2,zero
}
  809520:	e037883a 	mov	sp,fp
  809524:	df000017 	ldw	fp,0(sp)
  809528:	dec00104 	addi	sp,sp,4
  80952c:	f800283a 	ret

00809530 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809530:	defffe04 	addi	sp,sp,-8
  809534:	dfc00115 	stw	ra,4(sp)
  809538:	df000015 	stw	fp,0(sp)
  80953c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  809540:	d0a00717 	ldw	r2,-32740(gp)
  809544:	10000326 	beq	r2,zero,809554 <alt_get_errno+0x24>
  809548:	d0a00717 	ldw	r2,-32740(gp)
  80954c:	103ee83a 	callr	r2
  809550:	00000106 	br	809558 <alt_get_errno+0x28>
  809554:	d0a62604 	addi	r2,gp,-26472
}
  809558:	e037883a 	mov	sp,fp
  80955c:	dfc00117 	ldw	ra,4(sp)
  809560:	df000017 	ldw	fp,0(sp)
  809564:	dec00204 	addi	sp,sp,8
  809568:	f800283a 	ret

0080956c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80956c:	defff204 	addi	sp,sp,-56
  809570:	dfc00d15 	stw	ra,52(sp)
  809574:	df000c15 	stw	fp,48(sp)
  809578:	df000c04 	addi	fp,sp,48
  80957c:	e13ffc15 	stw	r4,-16(fp)
  809580:	e17ffd15 	stw	r5,-12(fp)
  809584:	e1bffe15 	stw	r6,-8(fp)
  809588:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  80958c:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  809590:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  809594:	e0bfff17 	ldw	r2,-4(fp)
  809598:	1090000c 	andi	r2,r2,16384
  80959c:	1005003a 	cmpeq	r2,r2,zero
  8095a0:	10803fcc 	andi	r2,r2,255
  8095a4:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8095a8:	00001306 	br	8095f8 <altera_avalon_uart_read+0x8c>
    {
      count++;
  8095ac:	e0bff517 	ldw	r2,-44(fp)
  8095b0:	10800044 	addi	r2,r2,1
  8095b4:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  8095b8:	e0bffd17 	ldw	r2,-12(fp)
  8095bc:	10c00044 	addi	r3,r2,1
  8095c0:	e0fffd15 	stw	r3,-12(fp)
  8095c4:	e0fffc17 	ldw	r3,-16(fp)
  8095c8:	18c00217 	ldw	r3,8(r3)
  8095cc:	e13ffc17 	ldw	r4,-16(fp)
  8095d0:	20c7883a 	add	r3,r4,r3
  8095d4:	18c00704 	addi	r3,r3,28
  8095d8:	18c00003 	ldbu	r3,0(r3)
  8095dc:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  8095e0:	e0bffc17 	ldw	r2,-16(fp)
  8095e4:	10800217 	ldw	r2,8(r2)
  8095e8:	10800044 	addi	r2,r2,1
  8095ec:	10c00fcc 	andi	r3,r2,63
  8095f0:	e0bffc17 	ldw	r2,-16(fp)
  8095f4:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8095f8:	e0fff517 	ldw	r3,-44(fp)
  8095fc:	e0bffe17 	ldw	r2,-8(fp)
  809600:	1880050e 	bge	r3,r2,809618 <altera_avalon_uart_read+0xac>
  809604:	e0bffc17 	ldw	r2,-16(fp)
  809608:	10c00217 	ldw	r3,8(r2)
  80960c:	e0bffc17 	ldw	r2,-16(fp)
  809610:	10800317 	ldw	r2,12(r2)
  809614:	18bfe51e 	bne	r3,r2,8095ac <__alt_mem_onchip_mem+0xff8015ac>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  809618:	e0bff517 	ldw	r2,-44(fp)
  80961c:	1000251e 	bne	r2,zero,8096b4 <altera_avalon_uart_read+0x148>
  809620:	e0bffc17 	ldw	r2,-16(fp)
  809624:	10c00217 	ldw	r3,8(r2)
  809628:	e0bffc17 	ldw	r2,-16(fp)
  80962c:	10800317 	ldw	r2,12(r2)
  809630:	1880201e 	bne	r3,r2,8096b4 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  809634:	e0bff617 	ldw	r2,-40(fp)
  809638:	1000071e 	bne	r2,zero,809658 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80963c:	08095300 	call	809530 <alt_get_errno>
  809640:	1007883a 	mov	r3,r2
  809644:	008002c4 	movi	r2,11
  809648:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  80964c:	00800044 	movi	r2,1
  809650:	e0bff405 	stb	r2,-48(fp)
        break;
  809654:	00001b06 	br	8096c4 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809658:	0005303a 	rdctl	r2,status
  80965c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809660:	e0fff917 	ldw	r3,-28(fp)
  809664:	00bfff84 	movi	r2,-2
  809668:	1884703a 	and	r2,r3,r2
  80966c:	1001703a 	wrctl	status,r2
  
  return context;
  809670:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  809674:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  809678:	e0bffc17 	ldw	r2,-16(fp)
  80967c:	10800117 	ldw	r2,4(r2)
  809680:	10c02014 	ori	r3,r2,128
  809684:	e0bffc17 	ldw	r2,-16(fp)
  809688:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80968c:	e0bffc17 	ldw	r2,-16(fp)
  809690:	10800017 	ldw	r2,0(r2)
  809694:	10800304 	addi	r2,r2,12
  809698:	e0fffc17 	ldw	r3,-16(fp)
  80969c:	18c00117 	ldw	r3,4(r3)
  8096a0:	10c00035 	stwio	r3,0(r2)
  8096a4:	e0bff817 	ldw	r2,-32(fp)
  8096a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8096ac:	e0bffa17 	ldw	r2,-24(fp)
  8096b0:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  8096b4:	e0bff517 	ldw	r2,-44(fp)
  8096b8:	1000021e 	bne	r2,zero,8096c4 <altera_avalon_uart_read+0x158>
  8096bc:	e0bffe17 	ldw	r2,-8(fp)
  8096c0:	103fcd1e 	bne	r2,zero,8095f8 <__alt_mem_onchip_mem+0xff8015f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8096c4:	0005303a 	rdctl	r2,status
  8096c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8096cc:	e0fffb17 	ldw	r3,-20(fp)
  8096d0:	00bfff84 	movi	r2,-2
  8096d4:	1884703a 	and	r2,r3,r2
  8096d8:	1001703a 	wrctl	status,r2
  
  return context;
  8096dc:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  8096e0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8096e4:	e0bffc17 	ldw	r2,-16(fp)
  8096e8:	10800117 	ldw	r2,4(r2)
  8096ec:	10c02014 	ori	r3,r2,128
  8096f0:	e0bffc17 	ldw	r2,-16(fp)
  8096f4:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8096f8:	e0bffc17 	ldw	r2,-16(fp)
  8096fc:	10800017 	ldw	r2,0(r2)
  809700:	10800304 	addi	r2,r2,12
  809704:	e0fffc17 	ldw	r3,-16(fp)
  809708:	18c00117 	ldw	r3,4(r3)
  80970c:	10c00035 	stwio	r3,0(r2)
  809710:	e0bff817 	ldw	r2,-32(fp)
  809714:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809718:	e0bff717 	ldw	r2,-36(fp)
  80971c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  809720:	e0bff403 	ldbu	r2,-48(fp)
  809724:	10000226 	beq	r2,zero,809730 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  809728:	00bffd44 	movi	r2,-11
  80972c:	00000106 	br	809734 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  809730:	e0bff517 	ldw	r2,-44(fp)
  }
}
  809734:	e037883a 	mov	sp,fp
  809738:	dfc00117 	ldw	ra,4(sp)
  80973c:	df000017 	ldw	fp,0(sp)
  809740:	dec00204 	addi	sp,sp,8
  809744:	f800283a 	ret

00809748 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809748:	defffe04 	addi	sp,sp,-8
  80974c:	dfc00115 	stw	ra,4(sp)
  809750:	df000015 	stw	fp,0(sp)
  809754:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  809758:	d0a00717 	ldw	r2,-32740(gp)
  80975c:	10000326 	beq	r2,zero,80976c <alt_get_errno+0x24>
  809760:	d0a00717 	ldw	r2,-32740(gp)
  809764:	103ee83a 	callr	r2
  809768:	00000106 	br	809770 <alt_get_errno+0x28>
  80976c:	d0a62604 	addi	r2,gp,-26472
}
  809770:	e037883a 	mov	sp,fp
  809774:	dfc00117 	ldw	ra,4(sp)
  809778:	df000017 	ldw	fp,0(sp)
  80977c:	dec00204 	addi	sp,sp,8
  809780:	f800283a 	ret

00809784 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  809784:	defff204 	addi	sp,sp,-56
  809788:	dfc00d15 	stw	ra,52(sp)
  80978c:	df000c15 	stw	fp,48(sp)
  809790:	df000c04 	addi	fp,sp,48
  809794:	e13ffc15 	stw	r4,-16(fp)
  809798:	e17ffd15 	stw	r5,-12(fp)
  80979c:	e1bffe15 	stw	r6,-8(fp)
  8097a0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  8097a4:	e0bffe17 	ldw	r2,-8(fp)
  8097a8:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  8097ac:	e0bfff17 	ldw	r2,-4(fp)
  8097b0:	1090000c 	andi	r2,r2,16384
  8097b4:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8097b8:	00003c06 	br	8098ac <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8097bc:	e0bffc17 	ldw	r2,-16(fp)
  8097c0:	10800517 	ldw	r2,20(r2)
  8097c4:	10800044 	addi	r2,r2,1
  8097c8:	10800fcc 	andi	r2,r2,63
  8097cc:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  8097d0:	e0bffc17 	ldw	r2,-16(fp)
  8097d4:	10c00417 	ldw	r3,16(r2)
  8097d8:	e0bff717 	ldw	r2,-36(fp)
  8097dc:	1880221e 	bne	r3,r2,809868 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  8097e0:	e0bff517 	ldw	r2,-44(fp)
  8097e4:	10000526 	beq	r2,zero,8097fc <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  8097e8:	08097480 	call	809748 <alt_get_errno>
  8097ec:	1007883a 	mov	r3,r2
  8097f0:	008002c4 	movi	r2,11
  8097f4:	18800015 	stw	r2,0(r3)
        break;
  8097f8:	00002e06 	br	8098b4 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8097fc:	0005303a 	rdctl	r2,status
  809800:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809804:	e0fff917 	ldw	r3,-28(fp)
  809808:	00bfff84 	movi	r2,-2
  80980c:	1884703a 	and	r2,r3,r2
  809810:	1001703a 	wrctl	status,r2
  
  return context;
  809814:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  809818:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80981c:	e0bffc17 	ldw	r2,-16(fp)
  809820:	10800117 	ldw	r2,4(r2)
  809824:	10c11014 	ori	r3,r2,1088
  809828:	e0bffc17 	ldw	r2,-16(fp)
  80982c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  809830:	e0bffc17 	ldw	r2,-16(fp)
  809834:	10800017 	ldw	r2,0(r2)
  809838:	10800304 	addi	r2,r2,12
  80983c:	e0fffc17 	ldw	r3,-16(fp)
  809840:	18c00117 	ldw	r3,4(r3)
  809844:	10c00035 	stwio	r3,0(r2)
  809848:	e0bff817 	ldw	r2,-32(fp)
  80984c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809850:	e0bff617 	ldw	r2,-40(fp)
  809854:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  809858:	e0bffc17 	ldw	r2,-16(fp)
  80985c:	10c00417 	ldw	r3,16(r2)
  809860:	e0bff717 	ldw	r2,-36(fp)
  809864:	18bffc26 	beq	r3,r2,809858 <__alt_mem_onchip_mem+0xff801858>
      }
    }

    count--;
  809868:	e0bff417 	ldw	r2,-48(fp)
  80986c:	10bfffc4 	addi	r2,r2,-1
  809870:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  809874:	e0bffc17 	ldw	r2,-16(fp)
  809878:	10c00517 	ldw	r3,20(r2)
  80987c:	e0bffd17 	ldw	r2,-12(fp)
  809880:	11000044 	addi	r4,r2,1
  809884:	e13ffd15 	stw	r4,-12(fp)
  809888:	10800003 	ldbu	r2,0(r2)
  80988c:	1009883a 	mov	r4,r2
  809890:	e0bffc17 	ldw	r2,-16(fp)
  809894:	10c5883a 	add	r2,r2,r3
  809898:	10801704 	addi	r2,r2,92
  80989c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  8098a0:	e0bffc17 	ldw	r2,-16(fp)
  8098a4:	e0fff717 	ldw	r3,-36(fp)
  8098a8:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8098ac:	e0bff417 	ldw	r2,-48(fp)
  8098b0:	103fc21e 	bne	r2,zero,8097bc <__alt_mem_onchip_mem+0xff8017bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8098b4:	0005303a 	rdctl	r2,status
  8098b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8098bc:	e0fffb17 	ldw	r3,-20(fp)
  8098c0:	00bfff84 	movi	r2,-2
  8098c4:	1884703a 	and	r2,r3,r2
  8098c8:	1001703a 	wrctl	status,r2
  
  return context;
  8098cc:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  8098d0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8098d4:	e0bffc17 	ldw	r2,-16(fp)
  8098d8:	10800117 	ldw	r2,4(r2)
  8098dc:	10c11014 	ori	r3,r2,1088
  8098e0:	e0bffc17 	ldw	r2,-16(fp)
  8098e4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8098e8:	e0bffc17 	ldw	r2,-16(fp)
  8098ec:	10800017 	ldw	r2,0(r2)
  8098f0:	10800304 	addi	r2,r2,12
  8098f4:	e0fffc17 	ldw	r3,-16(fp)
  8098f8:	18c00117 	ldw	r3,4(r3)
  8098fc:	10c00035 	stwio	r3,0(r2)
  809900:	e0bff817 	ldw	r2,-32(fp)
  809904:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809908:	e0bffa17 	ldw	r2,-24(fp)
  80990c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  809910:	e0fffe17 	ldw	r3,-8(fp)
  809914:	e0bff417 	ldw	r2,-48(fp)
  809918:	1885c83a 	sub	r2,r3,r2
}
  80991c:	e037883a 	mov	sp,fp
  809920:	dfc00117 	ldw	ra,4(sp)
  809924:	df000017 	ldw	fp,0(sp)
  809928:	dec00204 	addi	sp,sp,8
  80992c:	f800283a 	ret

00809930 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  809930:	defff504 	addi	sp,sp,-44
  809934:	df000a15 	stw	fp,40(sp)
  809938:	df000a04 	addi	fp,sp,40
  80993c:	e13ffc15 	stw	r4,-16(fp)
  809940:	e17ffd15 	stw	r5,-12(fp)
  809944:	e1bffe15 	stw	r6,-8(fp)
  809948:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80994c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  809950:	d0a62417 	ldw	r2,-26480(gp)
  
  if (alt_ticks_per_second ())
  809954:	10003c26 	beq	r2,zero,809a48 <alt_alarm_start+0x118>
  {
    if (alarm)
  809958:	e0bffc17 	ldw	r2,-16(fp)
  80995c:	10003826 	beq	r2,zero,809a40 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  809960:	e0bffc17 	ldw	r2,-16(fp)
  809964:	e0fffe17 	ldw	r3,-8(fp)
  809968:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80996c:	e0bffc17 	ldw	r2,-16(fp)
  809970:	e0ffff17 	ldw	r3,-4(fp)
  809974:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809978:	0005303a 	rdctl	r2,status
  80997c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809980:	e0fff917 	ldw	r3,-28(fp)
  809984:	00bfff84 	movi	r2,-2
  809988:	1884703a 	and	r2,r3,r2
  80998c:	1001703a 	wrctl	status,r2
  
  return context;
  809990:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  809994:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  809998:	d0a62517 	ldw	r2,-26476(gp)
      
      current_nticks = alt_nticks();
  80999c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  8099a0:	e0fffd17 	ldw	r3,-12(fp)
  8099a4:	e0bff617 	ldw	r2,-40(fp)
  8099a8:	1885883a 	add	r2,r3,r2
  8099ac:	10c00044 	addi	r3,r2,1
  8099b0:	e0bffc17 	ldw	r2,-16(fp)
  8099b4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8099b8:	e0bffc17 	ldw	r2,-16(fp)
  8099bc:	10c00217 	ldw	r3,8(r2)
  8099c0:	e0bff617 	ldw	r2,-40(fp)
  8099c4:	1880042e 	bgeu	r3,r2,8099d8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  8099c8:	e0bffc17 	ldw	r2,-16(fp)
  8099cc:	00c00044 	movi	r3,1
  8099d0:	10c00405 	stb	r3,16(r2)
  8099d4:	00000206 	br	8099e0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  8099d8:	e0bffc17 	ldw	r2,-16(fp)
  8099dc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8099e0:	e0bffc17 	ldw	r2,-16(fp)
  8099e4:	d0e00804 	addi	r3,gp,-32736
  8099e8:	e0fffa15 	stw	r3,-24(fp)
  8099ec:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8099f0:	e0bffb17 	ldw	r2,-20(fp)
  8099f4:	e0fffa17 	ldw	r3,-24(fp)
  8099f8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8099fc:	e0bffa17 	ldw	r2,-24(fp)
  809a00:	10c00017 	ldw	r3,0(r2)
  809a04:	e0bffb17 	ldw	r2,-20(fp)
  809a08:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  809a0c:	e0bffa17 	ldw	r2,-24(fp)
  809a10:	10800017 	ldw	r2,0(r2)
  809a14:	e0fffb17 	ldw	r3,-20(fp)
  809a18:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  809a1c:	e0bffa17 	ldw	r2,-24(fp)
  809a20:	e0fffb17 	ldw	r3,-20(fp)
  809a24:	10c00015 	stw	r3,0(r2)
  809a28:	e0bff817 	ldw	r2,-32(fp)
  809a2c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  809a30:	e0bff717 	ldw	r2,-36(fp)
  809a34:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  809a38:	0005883a 	mov	r2,zero
  809a3c:	00000306 	br	809a4c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  809a40:	00bffa84 	movi	r2,-22
  809a44:	00000106 	br	809a4c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  809a48:	00bfde84 	movi	r2,-134
  }
}
  809a4c:	e037883a 	mov	sp,fp
  809a50:	df000017 	ldw	fp,0(sp)
  809a54:	dec00104 	addi	sp,sp,4
  809a58:	f800283a 	ret

00809a5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809a5c:	defffe04 	addi	sp,sp,-8
  809a60:	dfc00115 	stw	ra,4(sp)
  809a64:	df000015 	stw	fp,0(sp)
  809a68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  809a6c:	d0a00717 	ldw	r2,-32740(gp)
  809a70:	10000326 	beq	r2,zero,809a80 <alt_get_errno+0x24>
  809a74:	d0a00717 	ldw	r2,-32740(gp)
  809a78:	103ee83a 	callr	r2
  809a7c:	00000106 	br	809a84 <alt_get_errno+0x28>
  809a80:	d0a62604 	addi	r2,gp,-26472
}
  809a84:	e037883a 	mov	sp,fp
  809a88:	dfc00117 	ldw	ra,4(sp)
  809a8c:	df000017 	ldw	fp,0(sp)
  809a90:	dec00204 	addi	sp,sp,8
  809a94:	f800283a 	ret

00809a98 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  809a98:	defffb04 	addi	sp,sp,-20
  809a9c:	dfc00415 	stw	ra,16(sp)
  809aa0:	df000315 	stw	fp,12(sp)
  809aa4:	df000304 	addi	fp,sp,12
  809aa8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  809aac:	e0bfff17 	ldw	r2,-4(fp)
  809ab0:	10000616 	blt	r2,zero,809acc <close+0x34>
  809ab4:	e0bfff17 	ldw	r2,-4(fp)
  809ab8:	10c00324 	muli	r3,r2,12
  809abc:	00802074 	movhi	r2,129
  809ac0:	10b14c04 	addi	r2,r2,-15056
  809ac4:	1885883a 	add	r2,r3,r2
  809ac8:	00000106 	br	809ad0 <close+0x38>
  809acc:	0005883a 	mov	r2,zero
  809ad0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  809ad4:	e0bffd17 	ldw	r2,-12(fp)
  809ad8:	10001926 	beq	r2,zero,809b40 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  809adc:	e0bffd17 	ldw	r2,-12(fp)
  809ae0:	10800017 	ldw	r2,0(r2)
  809ae4:	10800417 	ldw	r2,16(r2)
  809ae8:	10000626 	beq	r2,zero,809b04 <close+0x6c>
  809aec:	e0bffd17 	ldw	r2,-12(fp)
  809af0:	10800017 	ldw	r2,0(r2)
  809af4:	10800417 	ldw	r2,16(r2)
  809af8:	e13ffd17 	ldw	r4,-12(fp)
  809afc:	103ee83a 	callr	r2
  809b00:	00000106 	br	809b08 <close+0x70>
  809b04:	0005883a 	mov	r2,zero
  809b08:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  809b0c:	e13fff17 	ldw	r4,-4(fp)
  809b10:	080a1e00 	call	80a1e0 <alt_release_fd>
    if (rval < 0)
  809b14:	e0bffe17 	ldw	r2,-8(fp)
  809b18:	1000070e 	bge	r2,zero,809b38 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  809b1c:	0809a5c0 	call	809a5c <alt_get_errno>
  809b20:	1007883a 	mov	r3,r2
  809b24:	e0bffe17 	ldw	r2,-8(fp)
  809b28:	0085c83a 	sub	r2,zero,r2
  809b2c:	18800015 	stw	r2,0(r3)
      return -1;
  809b30:	00bfffc4 	movi	r2,-1
  809b34:	00000706 	br	809b54 <close+0xbc>
    }
    return 0;
  809b38:	0005883a 	mov	r2,zero
  809b3c:	00000506 	br	809b54 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  809b40:	0809a5c0 	call	809a5c <alt_get_errno>
  809b44:	1007883a 	mov	r3,r2
  809b48:	00801444 	movi	r2,81
  809b4c:	18800015 	stw	r2,0(r3)
    return -1;
  809b50:	00bfffc4 	movi	r2,-1
  }
}
  809b54:	e037883a 	mov	sp,fp
  809b58:	dfc00117 	ldw	ra,4(sp)
  809b5c:	df000017 	ldw	fp,0(sp)
  809b60:	dec00204 	addi	sp,sp,8
  809b64:	f800283a 	ret

00809b68 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  809b68:	defffe04 	addi	sp,sp,-8
  809b6c:	df000115 	stw	fp,4(sp)
  809b70:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  809b74:	e03fff15 	stw	zero,-4(fp)
  809b78:	00000506 	br	809b90 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  809b7c:	e0bfff17 	ldw	r2,-4(fp)
  809b80:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  809b84:	e0bfff17 	ldw	r2,-4(fp)
  809b88:	10800804 	addi	r2,r2,32
  809b8c:	e0bfff15 	stw	r2,-4(fp)
  809b90:	e0bfff17 	ldw	r2,-4(fp)
  809b94:	10820030 	cmpltui	r2,r2,2048
  809b98:	103ff81e 	bne	r2,zero,809b7c <__alt_mem_onchip_mem+0xff801b7c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  809b9c:	0001883a 	nop
  809ba0:	e037883a 	mov	sp,fp
  809ba4:	df000017 	ldw	fp,0(sp)
  809ba8:	dec00104 	addi	sp,sp,4
  809bac:	f800283a 	ret

00809bb0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  809bb0:	defffc04 	addi	sp,sp,-16
  809bb4:	df000315 	stw	fp,12(sp)
  809bb8:	df000304 	addi	fp,sp,12
  809bbc:	e13ffd15 	stw	r4,-12(fp)
  809bc0:	e17ffe15 	stw	r5,-8(fp)
  809bc4:	e1bfff15 	stw	r6,-4(fp)
  return len;
  809bc8:	e0bfff17 	ldw	r2,-4(fp)
}
  809bcc:	e037883a 	mov	sp,fp
  809bd0:	df000017 	ldw	fp,0(sp)
  809bd4:	dec00104 	addi	sp,sp,4
  809bd8:	f800283a 	ret

00809bdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809bdc:	defffe04 	addi	sp,sp,-8
  809be0:	dfc00115 	stw	ra,4(sp)
  809be4:	df000015 	stw	fp,0(sp)
  809be8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  809bec:	d0a00717 	ldw	r2,-32740(gp)
  809bf0:	10000326 	beq	r2,zero,809c00 <alt_get_errno+0x24>
  809bf4:	d0a00717 	ldw	r2,-32740(gp)
  809bf8:	103ee83a 	callr	r2
  809bfc:	00000106 	br	809c04 <alt_get_errno+0x28>
  809c00:	d0a62604 	addi	r2,gp,-26472
}
  809c04:	e037883a 	mov	sp,fp
  809c08:	dfc00117 	ldw	ra,4(sp)
  809c0c:	df000017 	ldw	fp,0(sp)
  809c10:	dec00204 	addi	sp,sp,8
  809c14:	f800283a 	ret

00809c18 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  809c18:	defffa04 	addi	sp,sp,-24
  809c1c:	dfc00515 	stw	ra,20(sp)
  809c20:	df000415 	stw	fp,16(sp)
  809c24:	df000404 	addi	fp,sp,16
  809c28:	e13ffe15 	stw	r4,-8(fp)
  809c2c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  809c30:	e0bffe17 	ldw	r2,-8(fp)
  809c34:	10000326 	beq	r2,zero,809c44 <alt_dev_llist_insert+0x2c>
  809c38:	e0bffe17 	ldw	r2,-8(fp)
  809c3c:	10800217 	ldw	r2,8(r2)
  809c40:	1000061e 	bne	r2,zero,809c5c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  809c44:	0809bdc0 	call	809bdc <alt_get_errno>
  809c48:	1007883a 	mov	r3,r2
  809c4c:	00800584 	movi	r2,22
  809c50:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  809c54:	00bffa84 	movi	r2,-22
  809c58:	00001306 	br	809ca8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  809c5c:	e0bffe17 	ldw	r2,-8(fp)
  809c60:	e0ffff17 	ldw	r3,-4(fp)
  809c64:	e0fffc15 	stw	r3,-16(fp)
  809c68:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  809c6c:	e0bffd17 	ldw	r2,-12(fp)
  809c70:	e0fffc17 	ldw	r3,-16(fp)
  809c74:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  809c78:	e0bffc17 	ldw	r2,-16(fp)
  809c7c:	10c00017 	ldw	r3,0(r2)
  809c80:	e0bffd17 	ldw	r2,-12(fp)
  809c84:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  809c88:	e0bffc17 	ldw	r2,-16(fp)
  809c8c:	10800017 	ldw	r2,0(r2)
  809c90:	e0fffd17 	ldw	r3,-12(fp)
  809c94:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  809c98:	e0bffc17 	ldw	r2,-16(fp)
  809c9c:	e0fffd17 	ldw	r3,-12(fp)
  809ca0:	10c00015 	stw	r3,0(r2)

  return 0;  
  809ca4:	0005883a 	mov	r2,zero
}
  809ca8:	e037883a 	mov	sp,fp
  809cac:	dfc00117 	ldw	ra,4(sp)
  809cb0:	df000017 	ldw	fp,0(sp)
  809cb4:	dec00204 	addi	sp,sp,8
  809cb8:	f800283a 	ret

00809cbc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  809cbc:	defffd04 	addi	sp,sp,-12
  809cc0:	dfc00215 	stw	ra,8(sp)
  809cc4:	df000115 	stw	fp,4(sp)
  809cc8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  809ccc:	00802074 	movhi	r2,129
  809cd0:	10abbe04 	addi	r2,r2,-20744
  809cd4:	e0bfff15 	stw	r2,-4(fp)
  809cd8:	00000606 	br	809cf4 <_do_ctors+0x38>
        (*ctor) (); 
  809cdc:	e0bfff17 	ldw	r2,-4(fp)
  809ce0:	10800017 	ldw	r2,0(r2)
  809ce4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  809ce8:	e0bfff17 	ldw	r2,-4(fp)
  809cec:	10bfff04 	addi	r2,r2,-4
  809cf0:	e0bfff15 	stw	r2,-4(fp)
  809cf4:	e0ffff17 	ldw	r3,-4(fp)
  809cf8:	00802074 	movhi	r2,129
  809cfc:	10abbf04 	addi	r2,r2,-20740
  809d00:	18bff62e 	bgeu	r3,r2,809cdc <__alt_mem_onchip_mem+0xff801cdc>
        (*ctor) (); 
}
  809d04:	0001883a 	nop
  809d08:	e037883a 	mov	sp,fp
  809d0c:	dfc00117 	ldw	ra,4(sp)
  809d10:	df000017 	ldw	fp,0(sp)
  809d14:	dec00204 	addi	sp,sp,8
  809d18:	f800283a 	ret

00809d1c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  809d1c:	defffd04 	addi	sp,sp,-12
  809d20:	dfc00215 	stw	ra,8(sp)
  809d24:	df000115 	stw	fp,4(sp)
  809d28:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  809d2c:	00802074 	movhi	r2,129
  809d30:	10abbe04 	addi	r2,r2,-20744
  809d34:	e0bfff15 	stw	r2,-4(fp)
  809d38:	00000606 	br	809d54 <_do_dtors+0x38>
        (*dtor) (); 
  809d3c:	e0bfff17 	ldw	r2,-4(fp)
  809d40:	10800017 	ldw	r2,0(r2)
  809d44:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  809d48:	e0bfff17 	ldw	r2,-4(fp)
  809d4c:	10bfff04 	addi	r2,r2,-4
  809d50:	e0bfff15 	stw	r2,-4(fp)
  809d54:	e0ffff17 	ldw	r3,-4(fp)
  809d58:	00802074 	movhi	r2,129
  809d5c:	10abbf04 	addi	r2,r2,-20740
  809d60:	18bff62e 	bgeu	r3,r2,809d3c <__alt_mem_onchip_mem+0xff801d3c>
        (*dtor) (); 
}
  809d64:	0001883a 	nop
  809d68:	e037883a 	mov	sp,fp
  809d6c:	dfc00117 	ldw	ra,4(sp)
  809d70:	df000017 	ldw	fp,0(sp)
  809d74:	dec00204 	addi	sp,sp,8
  809d78:	f800283a 	ret

00809d7c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  809d7c:	defffe04 	addi	sp,sp,-8
  809d80:	dfc00115 	stw	ra,4(sp)
  809d84:	df000015 	stw	fp,0(sp)
  809d88:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  809d8c:	01440004 	movi	r5,4096
  809d90:	0009883a 	mov	r4,zero
  809d94:	080a7d00 	call	80a7d0 <alt_icache_flush>
#endif
}
  809d98:	0001883a 	nop
  809d9c:	e037883a 	mov	sp,fp
  809da0:	dfc00117 	ldw	ra,4(sp)
  809da4:	df000017 	ldw	fp,0(sp)
  809da8:	dec00204 	addi	sp,sp,8
  809dac:	f800283a 	ret

00809db0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  809db0:	defffe04 	addi	sp,sp,-8
  809db4:	df000115 	stw	fp,4(sp)
  809db8:	df000104 	addi	fp,sp,4
  809dbc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  809dc0:	e0bfff17 	ldw	r2,-4(fp)
  809dc4:	10bffe84 	addi	r2,r2,-6
  809dc8:	10c00428 	cmpgeui	r3,r2,16
  809dcc:	18001a1e 	bne	r3,zero,809e38 <alt_exception_cause_generated_bad_addr+0x88>
  809dd0:	100690ba 	slli	r3,r2,2
  809dd4:	00802074 	movhi	r2,129
  809dd8:	10a77a04 	addi	r2,r2,-25112
  809ddc:	1885883a 	add	r2,r3,r2
  809de0:	10800017 	ldw	r2,0(r2)
  809de4:	1000683a 	jmp	r2
  809de8:	00809e28 	cmpgeui	r2,zero,632
  809dec:	00809e28 	cmpgeui	r2,zero,632
  809df0:	00809e38 	rdprs	r2,zero,632
  809df4:	00809e38 	rdprs	r2,zero,632
  809df8:	00809e38 	rdprs	r2,zero,632
  809dfc:	00809e28 	cmpgeui	r2,zero,632
  809e00:	00809e30 	cmpltui	r2,zero,632
  809e04:	00809e38 	rdprs	r2,zero,632
  809e08:	00809e28 	cmpgeui	r2,zero,632
  809e0c:	00809e28 	cmpgeui	r2,zero,632
  809e10:	00809e38 	rdprs	r2,zero,632
  809e14:	00809e28 	cmpgeui	r2,zero,632
  809e18:	00809e30 	cmpltui	r2,zero,632
  809e1c:	00809e38 	rdprs	r2,zero,632
  809e20:	00809e38 	rdprs	r2,zero,632
  809e24:	00809e28 	cmpgeui	r2,zero,632
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  809e28:	00800044 	movi	r2,1
  809e2c:	00000306 	br	809e3c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  809e30:	0005883a 	mov	r2,zero
  809e34:	00000106 	br	809e3c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  809e38:	0005883a 	mov	r2,zero
  }
}
  809e3c:	e037883a 	mov	sp,fp
  809e40:	df000017 	ldw	fp,0(sp)
  809e44:	dec00104 	addi	sp,sp,4
  809e48:	f800283a 	ret

00809e4c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  809e4c:	defff904 	addi	sp,sp,-28
  809e50:	dfc00615 	stw	ra,24(sp)
  809e54:	df000515 	stw	fp,20(sp)
  809e58:	df000504 	addi	fp,sp,20
  809e5c:	e13ffc15 	stw	r4,-16(fp)
  809e60:	e17ffd15 	stw	r5,-12(fp)
  809e64:	e1bffe15 	stw	r6,-8(fp)
  809e68:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  809e6c:	e1bfff17 	ldw	r6,-4(fp)
  809e70:	e17ffe17 	ldw	r5,-8(fp)
  809e74:	e13ffd17 	ldw	r4,-12(fp)
  809e78:	080a08c0 	call	80a08c <open>
  809e7c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  809e80:	e0bffb17 	ldw	r2,-20(fp)
  809e84:	10001c16 	blt	r2,zero,809ef8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  809e88:	00802074 	movhi	r2,129
  809e8c:	10b14c04 	addi	r2,r2,-15056
  809e90:	e0fffb17 	ldw	r3,-20(fp)
  809e94:	18c00324 	muli	r3,r3,12
  809e98:	10c5883a 	add	r2,r2,r3
  809e9c:	10c00017 	ldw	r3,0(r2)
  809ea0:	e0bffc17 	ldw	r2,-16(fp)
  809ea4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  809ea8:	00802074 	movhi	r2,129
  809eac:	10b14c04 	addi	r2,r2,-15056
  809eb0:	e0fffb17 	ldw	r3,-20(fp)
  809eb4:	18c00324 	muli	r3,r3,12
  809eb8:	10c5883a 	add	r2,r2,r3
  809ebc:	10800104 	addi	r2,r2,4
  809ec0:	10c00017 	ldw	r3,0(r2)
  809ec4:	e0bffc17 	ldw	r2,-16(fp)
  809ec8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  809ecc:	00802074 	movhi	r2,129
  809ed0:	10b14c04 	addi	r2,r2,-15056
  809ed4:	e0fffb17 	ldw	r3,-20(fp)
  809ed8:	18c00324 	muli	r3,r3,12
  809edc:	10c5883a 	add	r2,r2,r3
  809ee0:	10800204 	addi	r2,r2,8
  809ee4:	10c00017 	ldw	r3,0(r2)
  809ee8:	e0bffc17 	ldw	r2,-16(fp)
  809eec:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  809ef0:	e13ffb17 	ldw	r4,-20(fp)
  809ef4:	080a1e00 	call	80a1e0 <alt_release_fd>
  }
} 
  809ef8:	0001883a 	nop
  809efc:	e037883a 	mov	sp,fp
  809f00:	dfc00117 	ldw	ra,4(sp)
  809f04:	df000017 	ldw	fp,0(sp)
  809f08:	dec00204 	addi	sp,sp,8
  809f0c:	f800283a 	ret

00809f10 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  809f10:	defffb04 	addi	sp,sp,-20
  809f14:	dfc00415 	stw	ra,16(sp)
  809f18:	df000315 	stw	fp,12(sp)
  809f1c:	df000304 	addi	fp,sp,12
  809f20:	e13ffd15 	stw	r4,-12(fp)
  809f24:	e17ffe15 	stw	r5,-8(fp)
  809f28:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  809f2c:	01c07fc4 	movi	r7,511
  809f30:	01800044 	movi	r6,1
  809f34:	e17ffd17 	ldw	r5,-12(fp)
  809f38:	01002074 	movhi	r4,129
  809f3c:	21314f04 	addi	r4,r4,-15044
  809f40:	0809e4c0 	call	809e4c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  809f44:	01c07fc4 	movi	r7,511
  809f48:	000d883a 	mov	r6,zero
  809f4c:	e17ffe17 	ldw	r5,-8(fp)
  809f50:	01002074 	movhi	r4,129
  809f54:	21314c04 	addi	r4,r4,-15056
  809f58:	0809e4c0 	call	809e4c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  809f5c:	01c07fc4 	movi	r7,511
  809f60:	01800044 	movi	r6,1
  809f64:	e17fff17 	ldw	r5,-4(fp)
  809f68:	01002074 	movhi	r4,129
  809f6c:	21315204 	addi	r4,r4,-15032
  809f70:	0809e4c0 	call	809e4c <alt_open_fd>
}  
  809f74:	0001883a 	nop
  809f78:	e037883a 	mov	sp,fp
  809f7c:	dfc00117 	ldw	ra,4(sp)
  809f80:	df000017 	ldw	fp,0(sp)
  809f84:	dec00204 	addi	sp,sp,8
  809f88:	f800283a 	ret

00809f8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809f8c:	defffe04 	addi	sp,sp,-8
  809f90:	dfc00115 	stw	ra,4(sp)
  809f94:	df000015 	stw	fp,0(sp)
  809f98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  809f9c:	d0a00717 	ldw	r2,-32740(gp)
  809fa0:	10000326 	beq	r2,zero,809fb0 <alt_get_errno+0x24>
  809fa4:	d0a00717 	ldw	r2,-32740(gp)
  809fa8:	103ee83a 	callr	r2
  809fac:	00000106 	br	809fb4 <alt_get_errno+0x28>
  809fb0:	d0a62604 	addi	r2,gp,-26472
}
  809fb4:	e037883a 	mov	sp,fp
  809fb8:	dfc00117 	ldw	ra,4(sp)
  809fbc:	df000017 	ldw	fp,0(sp)
  809fc0:	dec00204 	addi	sp,sp,8
  809fc4:	f800283a 	ret

00809fc8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  809fc8:	defffd04 	addi	sp,sp,-12
  809fcc:	df000215 	stw	fp,8(sp)
  809fd0:	df000204 	addi	fp,sp,8
  809fd4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  809fd8:	e0bfff17 	ldw	r2,-4(fp)
  809fdc:	10800217 	ldw	r2,8(r2)
  809fe0:	10d00034 	orhi	r3,r2,16384
  809fe4:	e0bfff17 	ldw	r2,-4(fp)
  809fe8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  809fec:	e03ffe15 	stw	zero,-8(fp)
  809ff0:	00001d06 	br	80a068 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  809ff4:	00802074 	movhi	r2,129
  809ff8:	10b14c04 	addi	r2,r2,-15056
  809ffc:	e0fffe17 	ldw	r3,-8(fp)
  80a000:	18c00324 	muli	r3,r3,12
  80a004:	10c5883a 	add	r2,r2,r3
  80a008:	10c00017 	ldw	r3,0(r2)
  80a00c:	e0bfff17 	ldw	r2,-4(fp)
  80a010:	10800017 	ldw	r2,0(r2)
  80a014:	1880111e 	bne	r3,r2,80a05c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80a018:	00802074 	movhi	r2,129
  80a01c:	10b14c04 	addi	r2,r2,-15056
  80a020:	e0fffe17 	ldw	r3,-8(fp)
  80a024:	18c00324 	muli	r3,r3,12
  80a028:	10c5883a 	add	r2,r2,r3
  80a02c:	10800204 	addi	r2,r2,8
  80a030:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80a034:	1000090e 	bge	r2,zero,80a05c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80a038:	e0bffe17 	ldw	r2,-8(fp)
  80a03c:	10c00324 	muli	r3,r2,12
  80a040:	00802074 	movhi	r2,129
  80a044:	10b14c04 	addi	r2,r2,-15056
  80a048:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80a04c:	e0bfff17 	ldw	r2,-4(fp)
  80a050:	18800226 	beq	r3,r2,80a05c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80a054:	00bffcc4 	movi	r2,-13
  80a058:	00000806 	br	80a07c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80a05c:	e0bffe17 	ldw	r2,-8(fp)
  80a060:	10800044 	addi	r2,r2,1
  80a064:	e0bffe15 	stw	r2,-8(fp)
  80a068:	d0a00617 	ldw	r2,-32744(gp)
  80a06c:	1007883a 	mov	r3,r2
  80a070:	e0bffe17 	ldw	r2,-8(fp)
  80a074:	18bfdf2e 	bgeu	r3,r2,809ff4 <__alt_mem_onchip_mem+0xff801ff4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80a078:	0005883a 	mov	r2,zero
}
  80a07c:	e037883a 	mov	sp,fp
  80a080:	df000017 	ldw	fp,0(sp)
  80a084:	dec00104 	addi	sp,sp,4
  80a088:	f800283a 	ret

0080a08c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80a08c:	defff604 	addi	sp,sp,-40
  80a090:	dfc00915 	stw	ra,36(sp)
  80a094:	df000815 	stw	fp,32(sp)
  80a098:	df000804 	addi	fp,sp,32
  80a09c:	e13ffd15 	stw	r4,-12(fp)
  80a0a0:	e17ffe15 	stw	r5,-8(fp)
  80a0a4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80a0a8:	00bfffc4 	movi	r2,-1
  80a0ac:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80a0b0:	00bffb44 	movi	r2,-19
  80a0b4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80a0b8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80a0bc:	d1600404 	addi	r5,gp,-32752
  80a0c0:	e13ffd17 	ldw	r4,-12(fp)
  80a0c4:	080a5940 	call	80a594 <alt_find_dev>
  80a0c8:	e0bff815 	stw	r2,-32(fp)
  80a0cc:	e0bff817 	ldw	r2,-32(fp)
  80a0d0:	1000051e 	bne	r2,zero,80a0e8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80a0d4:	e13ffd17 	ldw	r4,-12(fp)
  80a0d8:	080a6240 	call	80a624 <alt_find_file>
  80a0dc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80a0e0:	00800044 	movi	r2,1
  80a0e4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80a0e8:	e0bff817 	ldw	r2,-32(fp)
  80a0ec:	10002926 	beq	r2,zero,80a194 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80a0f0:	e13ff817 	ldw	r4,-32(fp)
  80a0f4:	080a72c0 	call	80a72c <alt_get_fd>
  80a0f8:	e0bff915 	stw	r2,-28(fp)
  80a0fc:	e0bff917 	ldw	r2,-28(fp)
  80a100:	1000030e 	bge	r2,zero,80a110 <open+0x84>
    {
      status = index;
  80a104:	e0bff917 	ldw	r2,-28(fp)
  80a108:	e0bffa15 	stw	r2,-24(fp)
  80a10c:	00002306 	br	80a19c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  80a110:	e0bff917 	ldw	r2,-28(fp)
  80a114:	10c00324 	muli	r3,r2,12
  80a118:	00802074 	movhi	r2,129
  80a11c:	10b14c04 	addi	r2,r2,-15056
  80a120:	1885883a 	add	r2,r3,r2
  80a124:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80a128:	e0fffe17 	ldw	r3,-8(fp)
  80a12c:	00900034 	movhi	r2,16384
  80a130:	10bfffc4 	addi	r2,r2,-1
  80a134:	1886703a 	and	r3,r3,r2
  80a138:	e0bffc17 	ldw	r2,-16(fp)
  80a13c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80a140:	e0bffb17 	ldw	r2,-20(fp)
  80a144:	1000051e 	bne	r2,zero,80a15c <open+0xd0>
  80a148:	e13ffc17 	ldw	r4,-16(fp)
  80a14c:	0809fc80 	call	809fc8 <alt_file_locked>
  80a150:	e0bffa15 	stw	r2,-24(fp)
  80a154:	e0bffa17 	ldw	r2,-24(fp)
  80a158:	10001016 	blt	r2,zero,80a19c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80a15c:	e0bff817 	ldw	r2,-32(fp)
  80a160:	10800317 	ldw	r2,12(r2)
  80a164:	10000826 	beq	r2,zero,80a188 <open+0xfc>
  80a168:	e0bff817 	ldw	r2,-32(fp)
  80a16c:	10800317 	ldw	r2,12(r2)
  80a170:	e1ffff17 	ldw	r7,-4(fp)
  80a174:	e1bffe17 	ldw	r6,-8(fp)
  80a178:	e17ffd17 	ldw	r5,-12(fp)
  80a17c:	e13ffc17 	ldw	r4,-16(fp)
  80a180:	103ee83a 	callr	r2
  80a184:	00000106 	br	80a18c <open+0x100>
  80a188:	0005883a 	mov	r2,zero
  80a18c:	e0bffa15 	stw	r2,-24(fp)
  80a190:	00000206 	br	80a19c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80a194:	00bffb44 	movi	r2,-19
  80a198:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80a19c:	e0bffa17 	ldw	r2,-24(fp)
  80a1a0:	1000090e 	bge	r2,zero,80a1c8 <open+0x13c>
  {
    alt_release_fd (index);  
  80a1a4:	e13ff917 	ldw	r4,-28(fp)
  80a1a8:	080a1e00 	call	80a1e0 <alt_release_fd>
    ALT_ERRNO = -status;
  80a1ac:	0809f8c0 	call	809f8c <alt_get_errno>
  80a1b0:	1007883a 	mov	r3,r2
  80a1b4:	e0bffa17 	ldw	r2,-24(fp)
  80a1b8:	0085c83a 	sub	r2,zero,r2
  80a1bc:	18800015 	stw	r2,0(r3)
    return -1;
  80a1c0:	00bfffc4 	movi	r2,-1
  80a1c4:	00000106 	br	80a1cc <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  80a1c8:	e0bff917 	ldw	r2,-28(fp)
}
  80a1cc:	e037883a 	mov	sp,fp
  80a1d0:	dfc00117 	ldw	ra,4(sp)
  80a1d4:	df000017 	ldw	fp,0(sp)
  80a1d8:	dec00204 	addi	sp,sp,8
  80a1dc:	f800283a 	ret

0080a1e0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80a1e0:	defffe04 	addi	sp,sp,-8
  80a1e4:	df000115 	stw	fp,4(sp)
  80a1e8:	df000104 	addi	fp,sp,4
  80a1ec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80a1f0:	e0bfff17 	ldw	r2,-4(fp)
  80a1f4:	108000d0 	cmplti	r2,r2,3
  80a1f8:	10000d1e 	bne	r2,zero,80a230 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80a1fc:	00802074 	movhi	r2,129
  80a200:	10b14c04 	addi	r2,r2,-15056
  80a204:	e0ffff17 	ldw	r3,-4(fp)
  80a208:	18c00324 	muli	r3,r3,12
  80a20c:	10c5883a 	add	r2,r2,r3
  80a210:	10800204 	addi	r2,r2,8
  80a214:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80a218:	00802074 	movhi	r2,129
  80a21c:	10b14c04 	addi	r2,r2,-15056
  80a220:	e0ffff17 	ldw	r3,-4(fp)
  80a224:	18c00324 	muli	r3,r3,12
  80a228:	10c5883a 	add	r2,r2,r3
  80a22c:	10000015 	stw	zero,0(r2)
  }
}
  80a230:	0001883a 	nop
  80a234:	e037883a 	mov	sp,fp
  80a238:	df000017 	ldw	fp,0(sp)
  80a23c:	dec00104 	addi	sp,sp,4
  80a240:	f800283a 	ret

0080a244 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80a244:	defffa04 	addi	sp,sp,-24
  80a248:	df000515 	stw	fp,20(sp)
  80a24c:	df000504 	addi	fp,sp,20
  80a250:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a254:	0005303a 	rdctl	r2,status
  80a258:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a25c:	e0fffc17 	ldw	r3,-16(fp)
  80a260:	00bfff84 	movi	r2,-2
  80a264:	1884703a 	and	r2,r3,r2
  80a268:	1001703a 	wrctl	status,r2
  
  return context;
  80a26c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80a270:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80a274:	e0bfff17 	ldw	r2,-4(fp)
  80a278:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80a27c:	e0bffd17 	ldw	r2,-12(fp)
  80a280:	10800017 	ldw	r2,0(r2)
  80a284:	e0fffd17 	ldw	r3,-12(fp)
  80a288:	18c00117 	ldw	r3,4(r3)
  80a28c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80a290:	e0bffd17 	ldw	r2,-12(fp)
  80a294:	10800117 	ldw	r2,4(r2)
  80a298:	e0fffd17 	ldw	r3,-12(fp)
  80a29c:	18c00017 	ldw	r3,0(r3)
  80a2a0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80a2a4:	e0bffd17 	ldw	r2,-12(fp)
  80a2a8:	e0fffd17 	ldw	r3,-12(fp)
  80a2ac:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80a2b0:	e0bffd17 	ldw	r2,-12(fp)
  80a2b4:	e0fffd17 	ldw	r3,-12(fp)
  80a2b8:	10c00015 	stw	r3,0(r2)
  80a2bc:	e0bffb17 	ldw	r2,-20(fp)
  80a2c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a2c4:	e0bffe17 	ldw	r2,-8(fp)
  80a2c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80a2cc:	0001883a 	nop
  80a2d0:	e037883a 	mov	sp,fp
  80a2d4:	df000017 	ldw	fp,0(sp)
  80a2d8:	dec00104 	addi	sp,sp,4
  80a2dc:	f800283a 	ret

0080a2e0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80a2e0:	defffb04 	addi	sp,sp,-20
  80a2e4:	dfc00415 	stw	ra,16(sp)
  80a2e8:	df000315 	stw	fp,12(sp)
  80a2ec:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80a2f0:	d0a00817 	ldw	r2,-32736(gp)
  80a2f4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80a2f8:	d0a62517 	ldw	r2,-26476(gp)
  80a2fc:	10800044 	addi	r2,r2,1
  80a300:	d0a62515 	stw	r2,-26476(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80a304:	00002e06 	br	80a3c0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80a308:	e0bffd17 	ldw	r2,-12(fp)
  80a30c:	10800017 	ldw	r2,0(r2)
  80a310:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80a314:	e0bffd17 	ldw	r2,-12(fp)
  80a318:	10800403 	ldbu	r2,16(r2)
  80a31c:	10803fcc 	andi	r2,r2,255
  80a320:	10000426 	beq	r2,zero,80a334 <alt_tick+0x54>
  80a324:	d0a62517 	ldw	r2,-26476(gp)
  80a328:	1000021e 	bne	r2,zero,80a334 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80a32c:	e0bffd17 	ldw	r2,-12(fp)
  80a330:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80a334:	e0bffd17 	ldw	r2,-12(fp)
  80a338:	10800217 	ldw	r2,8(r2)
  80a33c:	d0e62517 	ldw	r3,-26476(gp)
  80a340:	18801d36 	bltu	r3,r2,80a3b8 <alt_tick+0xd8>
  80a344:	e0bffd17 	ldw	r2,-12(fp)
  80a348:	10800403 	ldbu	r2,16(r2)
  80a34c:	10803fcc 	andi	r2,r2,255
  80a350:	1000191e 	bne	r2,zero,80a3b8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80a354:	e0bffd17 	ldw	r2,-12(fp)
  80a358:	10800317 	ldw	r2,12(r2)
  80a35c:	e0fffd17 	ldw	r3,-12(fp)
  80a360:	18c00517 	ldw	r3,20(r3)
  80a364:	1809883a 	mov	r4,r3
  80a368:	103ee83a 	callr	r2
  80a36c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80a370:	e0bfff17 	ldw	r2,-4(fp)
  80a374:	1000031e 	bne	r2,zero,80a384 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80a378:	e13ffd17 	ldw	r4,-12(fp)
  80a37c:	080a2440 	call	80a244 <alt_alarm_stop>
  80a380:	00000d06 	br	80a3b8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80a384:	e0bffd17 	ldw	r2,-12(fp)
  80a388:	10c00217 	ldw	r3,8(r2)
  80a38c:	e0bfff17 	ldw	r2,-4(fp)
  80a390:	1887883a 	add	r3,r3,r2
  80a394:	e0bffd17 	ldw	r2,-12(fp)
  80a398:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80a39c:	e0bffd17 	ldw	r2,-12(fp)
  80a3a0:	10c00217 	ldw	r3,8(r2)
  80a3a4:	d0a62517 	ldw	r2,-26476(gp)
  80a3a8:	1880032e 	bgeu	r3,r2,80a3b8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80a3ac:	e0bffd17 	ldw	r2,-12(fp)
  80a3b0:	00c00044 	movi	r3,1
  80a3b4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80a3b8:	e0bffe17 	ldw	r2,-8(fp)
  80a3bc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80a3c0:	e0fffd17 	ldw	r3,-12(fp)
  80a3c4:	d0a00804 	addi	r2,gp,-32736
  80a3c8:	18bfcf1e 	bne	r3,r2,80a308 <__alt_mem_onchip_mem+0xff802308>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80a3cc:	0001883a 	nop
}
  80a3d0:	0001883a 	nop
  80a3d4:	e037883a 	mov	sp,fp
  80a3d8:	dfc00117 	ldw	ra,4(sp)
  80a3dc:	df000017 	ldw	fp,0(sp)
  80a3e0:	dec00204 	addi	sp,sp,8
  80a3e4:	f800283a 	ret

0080a3e8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80a3e8:	defffd04 	addi	sp,sp,-12
  80a3ec:	dfc00215 	stw	ra,8(sp)
  80a3f0:	df000115 	stw	fp,4(sp)
  80a3f4:	df000104 	addi	fp,sp,4
  80a3f8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80a3fc:	e13fff17 	ldw	r4,-4(fp)
  80a400:	080a43c0 	call	80a43c <alt_busy_sleep>
}
  80a404:	e037883a 	mov	sp,fp
  80a408:	dfc00117 	ldw	ra,4(sp)
  80a40c:	df000017 	ldw	fp,0(sp)
  80a410:	dec00204 	addi	sp,sp,8
  80a414:	f800283a 	ret

0080a418 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  80a418:	deffff04 	addi	sp,sp,-4
  80a41c:	df000015 	stw	fp,0(sp)
  80a420:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80a424:	000170fa 	wrctl	ienable,zero
}
  80a428:	0001883a 	nop
  80a42c:	e037883a 	mov	sp,fp
  80a430:	df000017 	ldw	fp,0(sp)
  80a434:	dec00104 	addi	sp,sp,4
  80a438:	f800283a 	ret

0080a43c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  80a43c:	defffa04 	addi	sp,sp,-24
  80a440:	dfc00515 	stw	ra,20(sp)
  80a444:	df000415 	stw	fp,16(sp)
  80a448:	df000404 	addi	fp,sp,16
  80a44c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  80a450:	008000c4 	movi	r2,3
  80a454:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  80a458:	e0fffd17 	ldw	r3,-12(fp)
  80a45c:	008003f4 	movhi	r2,15
  80a460:	10909004 	addi	r2,r2,16960
  80a464:	1885383a 	mul	r2,r3,r2
  80a468:	100b883a 	mov	r5,r2
  80a46c:	0100bef4 	movhi	r4,763
  80a470:	213c2004 	addi	r4,r4,-3968
  80a474:	0805ba00 	call	805ba0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  80a478:	100b883a 	mov	r5,r2
  80a47c:	01200034 	movhi	r4,32768
  80a480:	213fffc4 	addi	r4,r4,-1
  80a484:	0805ba00 	call	805ba0 <__udivsi3>
  80a488:	100b883a 	mov	r5,r2
  80a48c:	e13fff17 	ldw	r4,-4(fp)
  80a490:	0805ba00 	call	805ba0 <__udivsi3>
  80a494:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80a498:	e0bffe17 	ldw	r2,-8(fp)
  80a49c:	10002a26 	beq	r2,zero,80a548 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  80a4a0:	e03ffc15 	stw	zero,-16(fp)
  80a4a4:	00001706 	br	80a504 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  80a4a8:	00a00034 	movhi	r2,32768
  80a4ac:	10bfffc4 	addi	r2,r2,-1
  80a4b0:	10bfffc4 	addi	r2,r2,-1
  80a4b4:	103ffe1e 	bne	r2,zero,80a4b0 <__alt_mem_onchip_mem+0xff8024b0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  80a4b8:	e0fffd17 	ldw	r3,-12(fp)
  80a4bc:	008003f4 	movhi	r2,15
  80a4c0:	10909004 	addi	r2,r2,16960
  80a4c4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80a4c8:	100b883a 	mov	r5,r2
  80a4cc:	0100bef4 	movhi	r4,763
  80a4d0:	213c2004 	addi	r4,r4,-3968
  80a4d4:	0805ba00 	call	805ba0 <__udivsi3>
  80a4d8:	100b883a 	mov	r5,r2
  80a4dc:	01200034 	movhi	r4,32768
  80a4e0:	213fffc4 	addi	r4,r4,-1
  80a4e4:	0805ba00 	call	805ba0 <__udivsi3>
  80a4e8:	1007883a 	mov	r3,r2
  80a4ec:	e0bfff17 	ldw	r2,-4(fp)
  80a4f0:	10c5c83a 	sub	r2,r2,r3
  80a4f4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  80a4f8:	e0bffc17 	ldw	r2,-16(fp)
  80a4fc:	10800044 	addi	r2,r2,1
  80a500:	e0bffc15 	stw	r2,-16(fp)
  80a504:	e0fffc17 	ldw	r3,-16(fp)
  80a508:	e0bffe17 	ldw	r2,-8(fp)
  80a50c:	18bfe616 	blt	r3,r2,80a4a8 <__alt_mem_onchip_mem+0xff8024a8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80a510:	e0fffd17 	ldw	r3,-12(fp)
  80a514:	008003f4 	movhi	r2,15
  80a518:	10909004 	addi	r2,r2,16960
  80a51c:	1885383a 	mul	r2,r3,r2
  80a520:	100b883a 	mov	r5,r2
  80a524:	0100bef4 	movhi	r4,763
  80a528:	213c2004 	addi	r4,r4,-3968
  80a52c:	0805ba00 	call	805ba0 <__udivsi3>
  80a530:	1007883a 	mov	r3,r2
  80a534:	e0bfff17 	ldw	r2,-4(fp)
  80a538:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80a53c:	10bfffc4 	addi	r2,r2,-1
  80a540:	103ffe1e 	bne	r2,zero,80a53c <__alt_mem_onchip_mem+0xff80253c>
  80a544:	00000d06 	br	80a57c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80a548:	e0fffd17 	ldw	r3,-12(fp)
  80a54c:	008003f4 	movhi	r2,15
  80a550:	10909004 	addi	r2,r2,16960
  80a554:	1885383a 	mul	r2,r3,r2
  80a558:	100b883a 	mov	r5,r2
  80a55c:	0100bef4 	movhi	r4,763
  80a560:	213c2004 	addi	r4,r4,-3968
  80a564:	0805ba00 	call	805ba0 <__udivsi3>
  80a568:	1007883a 	mov	r3,r2
  80a56c:	e0bfff17 	ldw	r2,-4(fp)
  80a570:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80a574:	10bfffc4 	addi	r2,r2,-1
  80a578:	00bffe16 	blt	zero,r2,80a574 <__alt_mem_onchip_mem+0xff802574>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80a57c:	0005883a 	mov	r2,zero
}
  80a580:	e037883a 	mov	sp,fp
  80a584:	dfc00117 	ldw	ra,4(sp)
  80a588:	df000017 	ldw	fp,0(sp)
  80a58c:	dec00204 	addi	sp,sp,8
  80a590:	f800283a 	ret

0080a594 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80a594:	defffa04 	addi	sp,sp,-24
  80a598:	dfc00515 	stw	ra,20(sp)
  80a59c:	df000415 	stw	fp,16(sp)
  80a5a0:	df000404 	addi	fp,sp,16
  80a5a4:	e13ffe15 	stw	r4,-8(fp)
  80a5a8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80a5ac:	e0bfff17 	ldw	r2,-4(fp)
  80a5b0:	10800017 	ldw	r2,0(r2)
  80a5b4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80a5b8:	e13ffe17 	ldw	r4,-8(fp)
  80a5bc:	080ab980 	call	80ab98 <strlen>
  80a5c0:	10800044 	addi	r2,r2,1
  80a5c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80a5c8:	00000d06 	br	80a600 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80a5cc:	e0bffc17 	ldw	r2,-16(fp)
  80a5d0:	10800217 	ldw	r2,8(r2)
  80a5d4:	e0fffd17 	ldw	r3,-12(fp)
  80a5d8:	180d883a 	mov	r6,r3
  80a5dc:	e17ffe17 	ldw	r5,-8(fp)
  80a5e0:	1009883a 	mov	r4,r2
  80a5e4:	080a8ac0 	call	80a8ac <memcmp>
  80a5e8:	1000021e 	bne	r2,zero,80a5f4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80a5ec:	e0bffc17 	ldw	r2,-16(fp)
  80a5f0:	00000706 	br	80a610 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80a5f4:	e0bffc17 	ldw	r2,-16(fp)
  80a5f8:	10800017 	ldw	r2,0(r2)
  80a5fc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80a600:	e0fffc17 	ldw	r3,-16(fp)
  80a604:	e0bfff17 	ldw	r2,-4(fp)
  80a608:	18bff01e 	bne	r3,r2,80a5cc <__alt_mem_onchip_mem+0xff8025cc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80a60c:	0005883a 	mov	r2,zero
}
  80a610:	e037883a 	mov	sp,fp
  80a614:	dfc00117 	ldw	ra,4(sp)
  80a618:	df000017 	ldw	fp,0(sp)
  80a61c:	dec00204 	addi	sp,sp,8
  80a620:	f800283a 	ret

0080a624 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80a624:	defffb04 	addi	sp,sp,-20
  80a628:	dfc00415 	stw	ra,16(sp)
  80a62c:	df000315 	stw	fp,12(sp)
  80a630:	df000304 	addi	fp,sp,12
  80a634:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80a638:	d0a00217 	ldw	r2,-32760(gp)
  80a63c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80a640:	00003106 	br	80a708 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  80a644:	e0bffd17 	ldw	r2,-12(fp)
  80a648:	10800217 	ldw	r2,8(r2)
  80a64c:	1009883a 	mov	r4,r2
  80a650:	080ab980 	call	80ab98 <strlen>
  80a654:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80a658:	e0bffd17 	ldw	r2,-12(fp)
  80a65c:	10c00217 	ldw	r3,8(r2)
  80a660:	e0bffe17 	ldw	r2,-8(fp)
  80a664:	10bfffc4 	addi	r2,r2,-1
  80a668:	1885883a 	add	r2,r3,r2
  80a66c:	10800003 	ldbu	r2,0(r2)
  80a670:	10803fcc 	andi	r2,r2,255
  80a674:	1080201c 	xori	r2,r2,128
  80a678:	10bfe004 	addi	r2,r2,-128
  80a67c:	10800bd8 	cmpnei	r2,r2,47
  80a680:	1000031e 	bne	r2,zero,80a690 <alt_find_file+0x6c>
    {
      len -= 1;
  80a684:	e0bffe17 	ldw	r2,-8(fp)
  80a688:	10bfffc4 	addi	r2,r2,-1
  80a68c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80a690:	e0bffe17 	ldw	r2,-8(fp)
  80a694:	e0ffff17 	ldw	r3,-4(fp)
  80a698:	1885883a 	add	r2,r3,r2
  80a69c:	10800003 	ldbu	r2,0(r2)
  80a6a0:	10803fcc 	andi	r2,r2,255
  80a6a4:	1080201c 	xori	r2,r2,128
  80a6a8:	10bfe004 	addi	r2,r2,-128
  80a6ac:	10800be0 	cmpeqi	r2,r2,47
  80a6b0:	1000081e 	bne	r2,zero,80a6d4 <alt_find_file+0xb0>
  80a6b4:	e0bffe17 	ldw	r2,-8(fp)
  80a6b8:	e0ffff17 	ldw	r3,-4(fp)
  80a6bc:	1885883a 	add	r2,r3,r2
  80a6c0:	10800003 	ldbu	r2,0(r2)
  80a6c4:	10803fcc 	andi	r2,r2,255
  80a6c8:	1080201c 	xori	r2,r2,128
  80a6cc:	10bfe004 	addi	r2,r2,-128
  80a6d0:	10000a1e 	bne	r2,zero,80a6fc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  80a6d4:	e0bffd17 	ldw	r2,-12(fp)
  80a6d8:	10800217 	ldw	r2,8(r2)
  80a6dc:	e0fffe17 	ldw	r3,-8(fp)
  80a6e0:	180d883a 	mov	r6,r3
  80a6e4:	e17fff17 	ldw	r5,-4(fp)
  80a6e8:	1009883a 	mov	r4,r2
  80a6ec:	080a8ac0 	call	80a8ac <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80a6f0:	1000021e 	bne	r2,zero,80a6fc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80a6f4:	e0bffd17 	ldw	r2,-12(fp)
  80a6f8:	00000706 	br	80a718 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  80a6fc:	e0bffd17 	ldw	r2,-12(fp)
  80a700:	10800017 	ldw	r2,0(r2)
  80a704:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80a708:	e0fffd17 	ldw	r3,-12(fp)
  80a70c:	d0a00204 	addi	r2,gp,-32760
  80a710:	18bfcc1e 	bne	r3,r2,80a644 <__alt_mem_onchip_mem+0xff802644>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80a714:	0005883a 	mov	r2,zero
}
  80a718:	e037883a 	mov	sp,fp
  80a71c:	dfc00117 	ldw	ra,4(sp)
  80a720:	df000017 	ldw	fp,0(sp)
  80a724:	dec00204 	addi	sp,sp,8
  80a728:	f800283a 	ret

0080a72c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80a72c:	defffc04 	addi	sp,sp,-16
  80a730:	df000315 	stw	fp,12(sp)
  80a734:	df000304 	addi	fp,sp,12
  80a738:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80a73c:	00bffa04 	movi	r2,-24
  80a740:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80a744:	e03ffd15 	stw	zero,-12(fp)
  80a748:	00001906 	br	80a7b0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  80a74c:	00802074 	movhi	r2,129
  80a750:	10b14c04 	addi	r2,r2,-15056
  80a754:	e0fffd17 	ldw	r3,-12(fp)
  80a758:	18c00324 	muli	r3,r3,12
  80a75c:	10c5883a 	add	r2,r2,r3
  80a760:	10800017 	ldw	r2,0(r2)
  80a764:	10000f1e 	bne	r2,zero,80a7a4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  80a768:	00802074 	movhi	r2,129
  80a76c:	10b14c04 	addi	r2,r2,-15056
  80a770:	e0fffd17 	ldw	r3,-12(fp)
  80a774:	18c00324 	muli	r3,r3,12
  80a778:	10c5883a 	add	r2,r2,r3
  80a77c:	e0ffff17 	ldw	r3,-4(fp)
  80a780:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  80a784:	d0e00617 	ldw	r3,-32744(gp)
  80a788:	e0bffd17 	ldw	r2,-12(fp)
  80a78c:	1880020e 	bge	r3,r2,80a798 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  80a790:	e0bffd17 	ldw	r2,-12(fp)
  80a794:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
  80a798:	e0bffd17 	ldw	r2,-12(fp)
  80a79c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  80a7a0:	00000606 	br	80a7bc <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80a7a4:	e0bffd17 	ldw	r2,-12(fp)
  80a7a8:	10800044 	addi	r2,r2,1
  80a7ac:	e0bffd15 	stw	r2,-12(fp)
  80a7b0:	e0bffd17 	ldw	r2,-12(fp)
  80a7b4:	10800810 	cmplti	r2,r2,32
  80a7b8:	103fe41e 	bne	r2,zero,80a74c <__alt_mem_onchip_mem+0xff80274c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80a7bc:	e0bffe17 	ldw	r2,-8(fp)
}
  80a7c0:	e037883a 	mov	sp,fp
  80a7c4:	df000017 	ldw	fp,0(sp)
  80a7c8:	dec00104 	addi	sp,sp,4
  80a7cc:	f800283a 	ret

0080a7d0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80a7d0:	defffb04 	addi	sp,sp,-20
  80a7d4:	df000415 	stw	fp,16(sp)
  80a7d8:	df000404 	addi	fp,sp,16
  80a7dc:	e13ffe15 	stw	r4,-8(fp)
  80a7e0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80a7e4:	e0bfff17 	ldw	r2,-4(fp)
  80a7e8:	10840070 	cmpltui	r2,r2,4097
  80a7ec:	1000021e 	bne	r2,zero,80a7f8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80a7f0:	00840004 	movi	r2,4096
  80a7f4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80a7f8:	e0fffe17 	ldw	r3,-8(fp)
  80a7fc:	e0bfff17 	ldw	r2,-4(fp)
  80a800:	1885883a 	add	r2,r3,r2
  80a804:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80a808:	e0bffe17 	ldw	r2,-8(fp)
  80a80c:	e0bffc15 	stw	r2,-16(fp)
  80a810:	00000506 	br	80a828 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80a814:	e0bffc17 	ldw	r2,-16(fp)
  80a818:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80a81c:	e0bffc17 	ldw	r2,-16(fp)
  80a820:	10800804 	addi	r2,r2,32
  80a824:	e0bffc15 	stw	r2,-16(fp)
  80a828:	e0fffc17 	ldw	r3,-16(fp)
  80a82c:	e0bffd17 	ldw	r2,-12(fp)
  80a830:	18bff836 	bltu	r3,r2,80a814 <__alt_mem_onchip_mem+0xff802814>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80a834:	e0bffe17 	ldw	r2,-8(fp)
  80a838:	108007cc 	andi	r2,r2,31
  80a83c:	10000226 	beq	r2,zero,80a848 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80a840:	e0bffc17 	ldw	r2,-16(fp)
  80a844:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80a848:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80a84c:	0001883a 	nop
  80a850:	e037883a 	mov	sp,fp
  80a854:	df000017 	ldw	fp,0(sp)
  80a858:	dec00104 	addi	sp,sp,4
  80a85c:	f800283a 	ret

0080a860 <atexit>:
  80a860:	200b883a 	mov	r5,r4
  80a864:	000f883a 	mov	r7,zero
  80a868:	000d883a 	mov	r6,zero
  80a86c:	0009883a 	mov	r4,zero
  80a870:	080ac301 	jmpi	80ac30 <__register_exitproc>

0080a874 <exit>:
  80a874:	defffe04 	addi	sp,sp,-8
  80a878:	000b883a 	mov	r5,zero
  80a87c:	dc000015 	stw	r16,0(sp)
  80a880:	dfc00115 	stw	ra,4(sp)
  80a884:	2021883a 	mov	r16,r4
  80a888:	080ad480 	call	80ad48 <__call_exitprocs>
  80a88c:	00802074 	movhi	r2,129
  80a890:	10b2c004 	addi	r2,r2,-13568
  80a894:	11000017 	ldw	r4,0(r2)
  80a898:	20800f17 	ldw	r2,60(r4)
  80a89c:	10000126 	beq	r2,zero,80a8a4 <exit+0x30>
  80a8a0:	103ee83a 	callr	r2
  80a8a4:	8009883a 	mov	r4,r16
  80a8a8:	080aec80 	call	80aec8 <_exit>

0080a8ac <memcmp>:
  80a8ac:	01c000c4 	movi	r7,3
  80a8b0:	3980192e 	bgeu	r7,r6,80a918 <memcmp+0x6c>
  80a8b4:	2144b03a 	or	r2,r4,r5
  80a8b8:	11c4703a 	and	r2,r2,r7
  80a8bc:	10000f26 	beq	r2,zero,80a8fc <memcmp+0x50>
  80a8c0:	20800003 	ldbu	r2,0(r4)
  80a8c4:	28c00003 	ldbu	r3,0(r5)
  80a8c8:	10c0151e 	bne	r2,r3,80a920 <memcmp+0x74>
  80a8cc:	31bfff84 	addi	r6,r6,-2
  80a8d0:	01ffffc4 	movi	r7,-1
  80a8d4:	00000406 	br	80a8e8 <memcmp+0x3c>
  80a8d8:	20800003 	ldbu	r2,0(r4)
  80a8dc:	28c00003 	ldbu	r3,0(r5)
  80a8e0:	31bfffc4 	addi	r6,r6,-1
  80a8e4:	10c00e1e 	bne	r2,r3,80a920 <memcmp+0x74>
  80a8e8:	21000044 	addi	r4,r4,1
  80a8ec:	29400044 	addi	r5,r5,1
  80a8f0:	31fff91e 	bne	r6,r7,80a8d8 <__alt_mem_onchip_mem+0xff8028d8>
  80a8f4:	0005883a 	mov	r2,zero
  80a8f8:	f800283a 	ret
  80a8fc:	20c00017 	ldw	r3,0(r4)
  80a900:	28800017 	ldw	r2,0(r5)
  80a904:	18bfee1e 	bne	r3,r2,80a8c0 <__alt_mem_onchip_mem+0xff8028c0>
  80a908:	31bfff04 	addi	r6,r6,-4
  80a90c:	21000104 	addi	r4,r4,4
  80a910:	29400104 	addi	r5,r5,4
  80a914:	39bff936 	bltu	r7,r6,80a8fc <__alt_mem_onchip_mem+0xff8028fc>
  80a918:	303fe91e 	bne	r6,zero,80a8c0 <__alt_mem_onchip_mem+0xff8028c0>
  80a91c:	003ff506 	br	80a8f4 <__alt_mem_onchip_mem+0xff8028f4>
  80a920:	10c5c83a 	sub	r2,r2,r3
  80a924:	f800283a 	ret

0080a928 <memcpy>:
  80a928:	defffd04 	addi	sp,sp,-12
  80a92c:	dfc00215 	stw	ra,8(sp)
  80a930:	dc400115 	stw	r17,4(sp)
  80a934:	dc000015 	stw	r16,0(sp)
  80a938:	00c003c4 	movi	r3,15
  80a93c:	2005883a 	mov	r2,r4
  80a940:	1980452e 	bgeu	r3,r6,80aa58 <memcpy+0x130>
  80a944:	2906b03a 	or	r3,r5,r4
  80a948:	18c000cc 	andi	r3,r3,3
  80a94c:	1800441e 	bne	r3,zero,80aa60 <memcpy+0x138>
  80a950:	347ffc04 	addi	r17,r6,-16
  80a954:	8822d13a 	srli	r17,r17,4
  80a958:	28c00104 	addi	r3,r5,4
  80a95c:	23400104 	addi	r13,r4,4
  80a960:	8820913a 	slli	r16,r17,4
  80a964:	2b000204 	addi	r12,r5,8
  80a968:	22c00204 	addi	r11,r4,8
  80a96c:	84000504 	addi	r16,r16,20
  80a970:	2a800304 	addi	r10,r5,12
  80a974:	22400304 	addi	r9,r4,12
  80a978:	2c21883a 	add	r16,r5,r16
  80a97c:	2811883a 	mov	r8,r5
  80a980:	200f883a 	mov	r7,r4
  80a984:	41000017 	ldw	r4,0(r8)
  80a988:	1fc00017 	ldw	ra,0(r3)
  80a98c:	63c00017 	ldw	r15,0(r12)
  80a990:	39000015 	stw	r4,0(r7)
  80a994:	53800017 	ldw	r14,0(r10)
  80a998:	6fc00015 	stw	ra,0(r13)
  80a99c:	5bc00015 	stw	r15,0(r11)
  80a9a0:	4b800015 	stw	r14,0(r9)
  80a9a4:	18c00404 	addi	r3,r3,16
  80a9a8:	39c00404 	addi	r7,r7,16
  80a9ac:	42000404 	addi	r8,r8,16
  80a9b0:	6b400404 	addi	r13,r13,16
  80a9b4:	63000404 	addi	r12,r12,16
  80a9b8:	5ac00404 	addi	r11,r11,16
  80a9bc:	52800404 	addi	r10,r10,16
  80a9c0:	4a400404 	addi	r9,r9,16
  80a9c4:	1c3fef1e 	bne	r3,r16,80a984 <__alt_mem_onchip_mem+0xff802984>
  80a9c8:	89c00044 	addi	r7,r17,1
  80a9cc:	380e913a 	slli	r7,r7,4
  80a9d0:	310003cc 	andi	r4,r6,15
  80a9d4:	02c000c4 	movi	r11,3
  80a9d8:	11c7883a 	add	r3,r2,r7
  80a9dc:	29cb883a 	add	r5,r5,r7
  80a9e0:	5900212e 	bgeu	r11,r4,80aa68 <memcpy+0x140>
  80a9e4:	1813883a 	mov	r9,r3
  80a9e8:	2811883a 	mov	r8,r5
  80a9ec:	200f883a 	mov	r7,r4
  80a9f0:	42800017 	ldw	r10,0(r8)
  80a9f4:	4a400104 	addi	r9,r9,4
  80a9f8:	39ffff04 	addi	r7,r7,-4
  80a9fc:	4abfff15 	stw	r10,-4(r9)
  80aa00:	42000104 	addi	r8,r8,4
  80aa04:	59fffa36 	bltu	r11,r7,80a9f0 <__alt_mem_onchip_mem+0xff8029f0>
  80aa08:	213fff04 	addi	r4,r4,-4
  80aa0c:	2008d0ba 	srli	r4,r4,2
  80aa10:	318000cc 	andi	r6,r6,3
  80aa14:	21000044 	addi	r4,r4,1
  80aa18:	2109883a 	add	r4,r4,r4
  80aa1c:	2109883a 	add	r4,r4,r4
  80aa20:	1907883a 	add	r3,r3,r4
  80aa24:	290b883a 	add	r5,r5,r4
  80aa28:	30000626 	beq	r6,zero,80aa44 <memcpy+0x11c>
  80aa2c:	198d883a 	add	r6,r3,r6
  80aa30:	29c00003 	ldbu	r7,0(r5)
  80aa34:	18c00044 	addi	r3,r3,1
  80aa38:	29400044 	addi	r5,r5,1
  80aa3c:	19ffffc5 	stb	r7,-1(r3)
  80aa40:	19bffb1e 	bne	r3,r6,80aa30 <__alt_mem_onchip_mem+0xff802a30>
  80aa44:	dfc00217 	ldw	ra,8(sp)
  80aa48:	dc400117 	ldw	r17,4(sp)
  80aa4c:	dc000017 	ldw	r16,0(sp)
  80aa50:	dec00304 	addi	sp,sp,12
  80aa54:	f800283a 	ret
  80aa58:	2007883a 	mov	r3,r4
  80aa5c:	003ff206 	br	80aa28 <__alt_mem_onchip_mem+0xff802a28>
  80aa60:	2007883a 	mov	r3,r4
  80aa64:	003ff106 	br	80aa2c <__alt_mem_onchip_mem+0xff802a2c>
  80aa68:	200d883a 	mov	r6,r4
  80aa6c:	003fee06 	br	80aa28 <__alt_mem_onchip_mem+0xff802a28>

0080aa70 <memset>:
  80aa70:	20c000cc 	andi	r3,r4,3
  80aa74:	2005883a 	mov	r2,r4
  80aa78:	18004426 	beq	r3,zero,80ab8c <memset+0x11c>
  80aa7c:	31ffffc4 	addi	r7,r6,-1
  80aa80:	30004026 	beq	r6,zero,80ab84 <memset+0x114>
  80aa84:	2813883a 	mov	r9,r5
  80aa88:	200d883a 	mov	r6,r4
  80aa8c:	2007883a 	mov	r3,r4
  80aa90:	00000406 	br	80aaa4 <memset+0x34>
  80aa94:	3a3fffc4 	addi	r8,r7,-1
  80aa98:	31800044 	addi	r6,r6,1
  80aa9c:	38003926 	beq	r7,zero,80ab84 <memset+0x114>
  80aaa0:	400f883a 	mov	r7,r8
  80aaa4:	18c00044 	addi	r3,r3,1
  80aaa8:	32400005 	stb	r9,0(r6)
  80aaac:	1a0000cc 	andi	r8,r3,3
  80aab0:	403ff81e 	bne	r8,zero,80aa94 <__alt_mem_onchip_mem+0xff802a94>
  80aab4:	010000c4 	movi	r4,3
  80aab8:	21c02d2e 	bgeu	r4,r7,80ab70 <memset+0x100>
  80aabc:	29003fcc 	andi	r4,r5,255
  80aac0:	200c923a 	slli	r6,r4,8
  80aac4:	3108b03a 	or	r4,r6,r4
  80aac8:	200c943a 	slli	r6,r4,16
  80aacc:	218cb03a 	or	r6,r4,r6
  80aad0:	010003c4 	movi	r4,15
  80aad4:	21c0182e 	bgeu	r4,r7,80ab38 <memset+0xc8>
  80aad8:	3b3ffc04 	addi	r12,r7,-16
  80aadc:	6018d13a 	srli	r12,r12,4
  80aae0:	1a000104 	addi	r8,r3,4
  80aae4:	1ac00204 	addi	r11,r3,8
  80aae8:	6008913a 	slli	r4,r12,4
  80aaec:	1a800304 	addi	r10,r3,12
  80aaf0:	1813883a 	mov	r9,r3
  80aaf4:	21000504 	addi	r4,r4,20
  80aaf8:	1909883a 	add	r4,r3,r4
  80aafc:	49800015 	stw	r6,0(r9)
  80ab00:	41800015 	stw	r6,0(r8)
  80ab04:	59800015 	stw	r6,0(r11)
  80ab08:	51800015 	stw	r6,0(r10)
  80ab0c:	42000404 	addi	r8,r8,16
  80ab10:	4a400404 	addi	r9,r9,16
  80ab14:	5ac00404 	addi	r11,r11,16
  80ab18:	52800404 	addi	r10,r10,16
  80ab1c:	413ff71e 	bne	r8,r4,80aafc <__alt_mem_onchip_mem+0xff802afc>
  80ab20:	63000044 	addi	r12,r12,1
  80ab24:	6018913a 	slli	r12,r12,4
  80ab28:	39c003cc 	andi	r7,r7,15
  80ab2c:	010000c4 	movi	r4,3
  80ab30:	1b07883a 	add	r3,r3,r12
  80ab34:	21c00e2e 	bgeu	r4,r7,80ab70 <memset+0x100>
  80ab38:	1813883a 	mov	r9,r3
  80ab3c:	3811883a 	mov	r8,r7
  80ab40:	010000c4 	movi	r4,3
  80ab44:	49800015 	stw	r6,0(r9)
  80ab48:	423fff04 	addi	r8,r8,-4
  80ab4c:	4a400104 	addi	r9,r9,4
  80ab50:	223ffc36 	bltu	r4,r8,80ab44 <__alt_mem_onchip_mem+0xff802b44>
  80ab54:	393fff04 	addi	r4,r7,-4
  80ab58:	2008d0ba 	srli	r4,r4,2
  80ab5c:	39c000cc 	andi	r7,r7,3
  80ab60:	21000044 	addi	r4,r4,1
  80ab64:	2109883a 	add	r4,r4,r4
  80ab68:	2109883a 	add	r4,r4,r4
  80ab6c:	1907883a 	add	r3,r3,r4
  80ab70:	38000526 	beq	r7,zero,80ab88 <memset+0x118>
  80ab74:	19cf883a 	add	r7,r3,r7
  80ab78:	19400005 	stb	r5,0(r3)
  80ab7c:	18c00044 	addi	r3,r3,1
  80ab80:	38fffd1e 	bne	r7,r3,80ab78 <__alt_mem_onchip_mem+0xff802b78>
  80ab84:	f800283a 	ret
  80ab88:	f800283a 	ret
  80ab8c:	2007883a 	mov	r3,r4
  80ab90:	300f883a 	mov	r7,r6
  80ab94:	003fc706 	br	80aab4 <__alt_mem_onchip_mem+0xff802ab4>

0080ab98 <strlen>:
  80ab98:	208000cc 	andi	r2,r4,3
  80ab9c:	10002026 	beq	r2,zero,80ac20 <strlen+0x88>
  80aba0:	20800007 	ldb	r2,0(r4)
  80aba4:	10002026 	beq	r2,zero,80ac28 <strlen+0x90>
  80aba8:	2005883a 	mov	r2,r4
  80abac:	00000206 	br	80abb8 <strlen+0x20>
  80abb0:	10c00007 	ldb	r3,0(r2)
  80abb4:	18001826 	beq	r3,zero,80ac18 <strlen+0x80>
  80abb8:	10800044 	addi	r2,r2,1
  80abbc:	10c000cc 	andi	r3,r2,3
  80abc0:	183ffb1e 	bne	r3,zero,80abb0 <__alt_mem_onchip_mem+0xff802bb0>
  80abc4:	10c00017 	ldw	r3,0(r2)
  80abc8:	01ffbff4 	movhi	r7,65279
  80abcc:	39ffbfc4 	addi	r7,r7,-257
  80abd0:	00ca303a 	nor	r5,zero,r3
  80abd4:	01a02074 	movhi	r6,32897
  80abd8:	19c7883a 	add	r3,r3,r7
  80abdc:	31a02004 	addi	r6,r6,-32640
  80abe0:	1946703a 	and	r3,r3,r5
  80abe4:	1986703a 	and	r3,r3,r6
  80abe8:	1800091e 	bne	r3,zero,80ac10 <strlen+0x78>
  80abec:	10800104 	addi	r2,r2,4
  80abf0:	10c00017 	ldw	r3,0(r2)
  80abf4:	19cb883a 	add	r5,r3,r7
  80abf8:	00c6303a 	nor	r3,zero,r3
  80abfc:	28c6703a 	and	r3,r5,r3
  80ac00:	1986703a 	and	r3,r3,r6
  80ac04:	183ff926 	beq	r3,zero,80abec <__alt_mem_onchip_mem+0xff802bec>
  80ac08:	00000106 	br	80ac10 <strlen+0x78>
  80ac0c:	10800044 	addi	r2,r2,1
  80ac10:	10c00007 	ldb	r3,0(r2)
  80ac14:	183ffd1e 	bne	r3,zero,80ac0c <__alt_mem_onchip_mem+0xff802c0c>
  80ac18:	1105c83a 	sub	r2,r2,r4
  80ac1c:	f800283a 	ret
  80ac20:	2005883a 	mov	r2,r4
  80ac24:	003fe706 	br	80abc4 <__alt_mem_onchip_mem+0xff802bc4>
  80ac28:	0005883a 	mov	r2,zero
  80ac2c:	f800283a 	ret

0080ac30 <__register_exitproc>:
  80ac30:	defffa04 	addi	sp,sp,-24
  80ac34:	dc000315 	stw	r16,12(sp)
  80ac38:	04002074 	movhi	r16,129
  80ac3c:	8432c004 	addi	r16,r16,-13568
  80ac40:	80c00017 	ldw	r3,0(r16)
  80ac44:	dc400415 	stw	r17,16(sp)
  80ac48:	dfc00515 	stw	ra,20(sp)
  80ac4c:	18805217 	ldw	r2,328(r3)
  80ac50:	2023883a 	mov	r17,r4
  80ac54:	10003726 	beq	r2,zero,80ad34 <__register_exitproc+0x104>
  80ac58:	10c00117 	ldw	r3,4(r2)
  80ac5c:	010007c4 	movi	r4,31
  80ac60:	20c00e16 	blt	r4,r3,80ac9c <__register_exitproc+0x6c>
  80ac64:	1a000044 	addi	r8,r3,1
  80ac68:	8800221e 	bne	r17,zero,80acf4 <__register_exitproc+0xc4>
  80ac6c:	18c00084 	addi	r3,r3,2
  80ac70:	18c7883a 	add	r3,r3,r3
  80ac74:	18c7883a 	add	r3,r3,r3
  80ac78:	12000115 	stw	r8,4(r2)
  80ac7c:	10c7883a 	add	r3,r2,r3
  80ac80:	19400015 	stw	r5,0(r3)
  80ac84:	0005883a 	mov	r2,zero
  80ac88:	dfc00517 	ldw	ra,20(sp)
  80ac8c:	dc400417 	ldw	r17,16(sp)
  80ac90:	dc000317 	ldw	r16,12(sp)
  80ac94:	dec00604 	addi	sp,sp,24
  80ac98:	f800283a 	ret
  80ac9c:	00800034 	movhi	r2,0
  80aca0:	10800004 	addi	r2,r2,0
  80aca4:	10002626 	beq	r2,zero,80ad40 <__register_exitproc+0x110>
  80aca8:	01006404 	movi	r4,400
  80acac:	d9400015 	stw	r5,0(sp)
  80acb0:	d9800115 	stw	r6,4(sp)
  80acb4:	d9c00215 	stw	r7,8(sp)
  80acb8:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  80acbc:	d9400017 	ldw	r5,0(sp)
  80acc0:	d9800117 	ldw	r6,4(sp)
  80acc4:	d9c00217 	ldw	r7,8(sp)
  80acc8:	10001d26 	beq	r2,zero,80ad40 <__register_exitproc+0x110>
  80accc:	81000017 	ldw	r4,0(r16)
  80acd0:	10000115 	stw	zero,4(r2)
  80acd4:	02000044 	movi	r8,1
  80acd8:	22405217 	ldw	r9,328(r4)
  80acdc:	0007883a 	mov	r3,zero
  80ace0:	12400015 	stw	r9,0(r2)
  80ace4:	20805215 	stw	r2,328(r4)
  80ace8:	10006215 	stw	zero,392(r2)
  80acec:	10006315 	stw	zero,396(r2)
  80acf0:	883fde26 	beq	r17,zero,80ac6c <__alt_mem_onchip_mem+0xff802c6c>
  80acf4:	18c9883a 	add	r4,r3,r3
  80acf8:	2109883a 	add	r4,r4,r4
  80acfc:	1109883a 	add	r4,r2,r4
  80ad00:	21802215 	stw	r6,136(r4)
  80ad04:	01800044 	movi	r6,1
  80ad08:	12406217 	ldw	r9,392(r2)
  80ad0c:	30cc983a 	sll	r6,r6,r3
  80ad10:	4992b03a 	or	r9,r9,r6
  80ad14:	12406215 	stw	r9,392(r2)
  80ad18:	21c04215 	stw	r7,264(r4)
  80ad1c:	01000084 	movi	r4,2
  80ad20:	893fd21e 	bne	r17,r4,80ac6c <__alt_mem_onchip_mem+0xff802c6c>
  80ad24:	11006317 	ldw	r4,396(r2)
  80ad28:	218cb03a 	or	r6,r4,r6
  80ad2c:	11806315 	stw	r6,396(r2)
  80ad30:	003fce06 	br	80ac6c <__alt_mem_onchip_mem+0xff802c6c>
  80ad34:	18805304 	addi	r2,r3,332
  80ad38:	18805215 	stw	r2,328(r3)
  80ad3c:	003fc606 	br	80ac58 <__alt_mem_onchip_mem+0xff802c58>
  80ad40:	00bfffc4 	movi	r2,-1
  80ad44:	003fd006 	br	80ac88 <__alt_mem_onchip_mem+0xff802c88>

0080ad48 <__call_exitprocs>:
  80ad48:	defff504 	addi	sp,sp,-44
  80ad4c:	df000915 	stw	fp,36(sp)
  80ad50:	dd400615 	stw	r21,24(sp)
  80ad54:	dc800315 	stw	r18,12(sp)
  80ad58:	dfc00a15 	stw	ra,40(sp)
  80ad5c:	ddc00815 	stw	r23,32(sp)
  80ad60:	dd800715 	stw	r22,28(sp)
  80ad64:	dd000515 	stw	r20,20(sp)
  80ad68:	dcc00415 	stw	r19,16(sp)
  80ad6c:	dc400215 	stw	r17,8(sp)
  80ad70:	dc000115 	stw	r16,4(sp)
  80ad74:	d9000015 	stw	r4,0(sp)
  80ad78:	2839883a 	mov	fp,r5
  80ad7c:	04800044 	movi	r18,1
  80ad80:	057fffc4 	movi	r21,-1
  80ad84:	00802074 	movhi	r2,129
  80ad88:	10b2c004 	addi	r2,r2,-13568
  80ad8c:	12000017 	ldw	r8,0(r2)
  80ad90:	45005217 	ldw	r20,328(r8)
  80ad94:	44c05204 	addi	r19,r8,328
  80ad98:	a0001c26 	beq	r20,zero,80ae0c <__call_exitprocs+0xc4>
  80ad9c:	a0800117 	ldw	r2,4(r20)
  80ada0:	15ffffc4 	addi	r23,r2,-1
  80ada4:	b8000d16 	blt	r23,zero,80addc <__call_exitprocs+0x94>
  80ada8:	14000044 	addi	r16,r2,1
  80adac:	8421883a 	add	r16,r16,r16
  80adb0:	8421883a 	add	r16,r16,r16
  80adb4:	84402004 	addi	r17,r16,128
  80adb8:	a463883a 	add	r17,r20,r17
  80adbc:	a421883a 	add	r16,r20,r16
  80adc0:	e0001e26 	beq	fp,zero,80ae3c <__call_exitprocs+0xf4>
  80adc4:	80804017 	ldw	r2,256(r16)
  80adc8:	e0801c26 	beq	fp,r2,80ae3c <__call_exitprocs+0xf4>
  80adcc:	bdffffc4 	addi	r23,r23,-1
  80add0:	843fff04 	addi	r16,r16,-4
  80add4:	8c7fff04 	addi	r17,r17,-4
  80add8:	bd7ff91e 	bne	r23,r21,80adc0 <__alt_mem_onchip_mem+0xff802dc0>
  80addc:	00800034 	movhi	r2,0
  80ade0:	10800004 	addi	r2,r2,0
  80ade4:	10000926 	beq	r2,zero,80ae0c <__call_exitprocs+0xc4>
  80ade8:	a0800117 	ldw	r2,4(r20)
  80adec:	1000301e 	bne	r2,zero,80aeb0 <__call_exitprocs+0x168>
  80adf0:	a0800017 	ldw	r2,0(r20)
  80adf4:	10003226 	beq	r2,zero,80aec0 <__call_exitprocs+0x178>
  80adf8:	a009883a 	mov	r4,r20
  80adfc:	98800015 	stw	r2,0(r19)
  80ae00:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  80ae04:	9d000017 	ldw	r20,0(r19)
  80ae08:	a03fe41e 	bne	r20,zero,80ad9c <__alt_mem_onchip_mem+0xff802d9c>
  80ae0c:	dfc00a17 	ldw	ra,40(sp)
  80ae10:	df000917 	ldw	fp,36(sp)
  80ae14:	ddc00817 	ldw	r23,32(sp)
  80ae18:	dd800717 	ldw	r22,28(sp)
  80ae1c:	dd400617 	ldw	r21,24(sp)
  80ae20:	dd000517 	ldw	r20,20(sp)
  80ae24:	dcc00417 	ldw	r19,16(sp)
  80ae28:	dc800317 	ldw	r18,12(sp)
  80ae2c:	dc400217 	ldw	r17,8(sp)
  80ae30:	dc000117 	ldw	r16,4(sp)
  80ae34:	dec00b04 	addi	sp,sp,44
  80ae38:	f800283a 	ret
  80ae3c:	a0800117 	ldw	r2,4(r20)
  80ae40:	80c00017 	ldw	r3,0(r16)
  80ae44:	10bfffc4 	addi	r2,r2,-1
  80ae48:	15c01426 	beq	r2,r23,80ae9c <__call_exitprocs+0x154>
  80ae4c:	80000015 	stw	zero,0(r16)
  80ae50:	183fde26 	beq	r3,zero,80adcc <__alt_mem_onchip_mem+0xff802dcc>
  80ae54:	95c8983a 	sll	r4,r18,r23
  80ae58:	a0806217 	ldw	r2,392(r20)
  80ae5c:	a5800117 	ldw	r22,4(r20)
  80ae60:	2084703a 	and	r2,r4,r2
  80ae64:	10000b26 	beq	r2,zero,80ae94 <__call_exitprocs+0x14c>
  80ae68:	a0806317 	ldw	r2,396(r20)
  80ae6c:	2088703a 	and	r4,r4,r2
  80ae70:	20000c1e 	bne	r4,zero,80aea4 <__call_exitprocs+0x15c>
  80ae74:	89400017 	ldw	r5,0(r17)
  80ae78:	d9000017 	ldw	r4,0(sp)
  80ae7c:	183ee83a 	callr	r3
  80ae80:	a0800117 	ldw	r2,4(r20)
  80ae84:	15bfbf1e 	bne	r2,r22,80ad84 <__alt_mem_onchip_mem+0xff802d84>
  80ae88:	98800017 	ldw	r2,0(r19)
  80ae8c:	153fcf26 	beq	r2,r20,80adcc <__alt_mem_onchip_mem+0xff802dcc>
  80ae90:	003fbc06 	br	80ad84 <__alt_mem_onchip_mem+0xff802d84>
  80ae94:	183ee83a 	callr	r3
  80ae98:	003ff906 	br	80ae80 <__alt_mem_onchip_mem+0xff802e80>
  80ae9c:	a5c00115 	stw	r23,4(r20)
  80aea0:	003feb06 	br	80ae50 <__alt_mem_onchip_mem+0xff802e50>
  80aea4:	89000017 	ldw	r4,0(r17)
  80aea8:	183ee83a 	callr	r3
  80aeac:	003ff406 	br	80ae80 <__alt_mem_onchip_mem+0xff802e80>
  80aeb0:	a0800017 	ldw	r2,0(r20)
  80aeb4:	a027883a 	mov	r19,r20
  80aeb8:	1029883a 	mov	r20,r2
  80aebc:	003fb606 	br	80ad98 <__alt_mem_onchip_mem+0xff802d98>
  80aec0:	0005883a 	mov	r2,zero
  80aec4:	003ffb06 	br	80aeb4 <__alt_mem_onchip_mem+0xff802eb4>

0080aec8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80aec8:	defffd04 	addi	sp,sp,-12
  80aecc:	df000215 	stw	fp,8(sp)
  80aed0:	df000204 	addi	fp,sp,8
  80aed4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80aed8:	0001883a 	nop
  80aedc:	e0bfff17 	ldw	r2,-4(fp)
  80aee0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80aee4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80aee8:	10000226 	beq	r2,zero,80aef4 <_exit+0x2c>
    ALT_SIM_FAIL();
  80aeec:	002af070 	cmpltui	zero,zero,43969
  80aef0:	00000106 	br	80aef8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  80aef4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80aef8:	003fff06 	br	80aef8 <__alt_mem_onchip_mem+0xff802ef8>
