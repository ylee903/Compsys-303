#include <string.h>
#include <stdio.h>
#include <sys/alt_alarm.h>
#include <sys/alt_irq.h>
#include <altera_avalon_pio_regs.h>
#include "Pacemaker_C.h"
#include <system.h>

/* Module-local state */
static PacemakerC* s_pm_ptr = NULL;
static alt_alarm s_tick_alarm;

/* AEI timer state */
static volatile int s_AEI_armed = 0;

/* Interrupt flags */
static volatile int s_VS_event = 0;
static volatile int s_AS_event = 0;

/* ==================== INTERRUPT SERVICE ROUTINES ==================== */

/* 1ms tick ISR - handles all timer decrements */
static alt_u32 PMc_tick_isr(void* context) {
  PacemakerC* s = (PacemakerC*)context;
  if (!s) return 1;

  /* Decrement LED timers */
  if (s->AP_led_ms > 0) s->AP_led_ms--;
  if (s->VP_led_ms > 0) s->VP_led_ms--;

  /* Decrement VRP if active */
  if (s->VRP > 0) s->VRP--;

  /* Decrement AEI if active */
  if (s->AEI > 0) {
    s->AEI--;

    /* Check if AEI expired while armed -> trigger AP */
    if (s->AEI == 0 && s_AEI_armed) {
      s->AP = 1;
      s->AP_fired = 1;
      s->AP_led_ms = s->led_pulse_ms;
      s_AEI_armed = 0; /* Disarm after firing */
    }
  }

  return 1; /* Re-schedule in 1ms */
}

/* Ventricular Sense ISR */
#ifdef VENTRICULAR_SENSE_BASE
static void PMc_VS_isr(void* context) {
  (void)context;

  /* Clear the interrupt */
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(VENTRICULAR_SENSE_BASE, 0x1);

  /* Process VS event */
  if (s_pm_ptr && s_pm_ptr->VRP == 0) {
    s_pm_ptr->VS = 1;

    /* Start VRP period */
    s_pm_ptr->VRP = VRP_VALUE;

    /* Arm and start AEI timer */
    s_pm_ptr->AEI = AEI_VALUE;
    s_AEI_armed = 1;
  }
}
#endif

/* Atrial Sense ISR */
#ifdef ATRIAL_SENSE_BASE
static void PMc_AS_isr(void* context) {
  (void)context;

  /* Clear the interrupt */
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(ATRIAL_SENSE_BASE, 0x1);

  /* Process AS event - disarms AEI */
  if (s_pm_ptr) {
    s_pm_ptr->AS = 1;
    s_AEI_armed = 0; /* Disarm AEI on AS */
  }
}
#endif

/* ==================== INITIALIZATION ==================== */

void PMc_init(PacemakerC* s) {
  memset(s, 0, sizeof(*s));
  s->led_pulse_ms = 25;
  s->VRP = 0; /* Start with VRP = 0 as required */
  s->AEI = 0;
  s_AEI_armed = 0;
}

int PMc_start_1ms_alarm(void) {
  return 0; /* Deprecated */
}

int PMc_start_1ms_alarm_with_state(PacemakerC* s) {
  int status = 0;

  if (!s) return -1;

  s_pm_ptr = s;

  /* Register 1ms tick interrupt */
  status = alt_alarm_start(&s_tick_alarm, 1, PMc_tick_isr, s);
  if (status != 0) {
    printf("[AEI-MODE] ERROR: Failed to start tick timer\n");
    return status;
  }

  /* Configure Ventricular Sense interrupt */
#ifdef VENTRICULAR_SENSE_BASE
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(VENTRICULAR_SENSE_BASE, 0x1);
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(VENTRICULAR_SENSE_BASE, 0x1);

  status = alt_ic_isr_register(
    VENTRICULAR_SENSE_IRQ_INTERRUPT_CONTROLLER_ID,
    VENTRICULAR_SENSE_IRQ,
    PMc_VS_isr,
    NULL,
    NULL
  );

  if (status != 0) {
    printf("[AEI-MODE] ERROR: Failed to register VS interrupt\n");
    return status;
  }
#endif

  /* Configure Atrial Sense interrupt */
#ifdef ATRIAL_SENSE_BASE
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(ATRIAL_SENSE_BASE, 0x1);
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(ATRIAL_SENSE_BASE, 0x1);

  status = alt_ic_isr_register(
    ATRIAL_SENSE_IRQ_INTERRUPT_CONTROLLER_ID,
    ATRIAL_SENSE_IRQ,
    PMc_AS_isr,
    NULL,
    NULL
  );

  if (status != 0) {
    printf("[AEI-MODE] ERROR: Failed to register AS interrupt\n");
    return status;
  }
#endif

  printf("[AEI-MODE] ISR-based pacemaker initialized\n");
  printf("  - VS/VP + VRP==0 -> Arms AEI timer\n");
  printf("  - AS -> Disarms AEI\n");
  printf("  - AEI expiry (armed) -> Triggers AP\n");
  fflush(stdout);

  return 0;
}

/* ==================== HELPER FUNCTIONS (STUBS) ==================== */

void PMc_enable_interrupts(void) {
  /* Stub - interrupts already enabled in PMc_start_1ms_alarm_with_state */
}

void PMc_set_led_pulse_ms(PacemakerC* s, int ms) {
  if (s) s->led_pulse_ms = ms;
}

void PMc_set_senses(PacemakerC* s, int AS_val, int VS_val) {
  if (!s) return;

  /* Handle AS - disarms AEI */
  if (AS_val && !s->AS) {
    s->AS = AS_val;
    s_AEI_armed = 0;
  }

  /* Handle VS - arms AEI if VRP == 0 */
  if (VS_val && !s->VS && s->VRP == 0) {
    s->VS = VS_val;
    s->VRP = VRP_VALUE;
    s->AEI = AEI_VALUE;
    s_AEI_armed = 1;
  }
}

void PMc_run_for_elapsed_ms(PacemakerC* s) {
  /* Stub - timing handled by interrupts */
  (void)s;
}

void PMc_poll_and_clear_pulses(PacemakerC* s, int* out_AP, int* out_VP) {
  if (!s) return;

  if (out_AP) *out_AP = s->AP_fired;
  if (out_VP) *out_VP = s->VP_fired;

  /* Clear after reading */
  s->AP_fired = 0;
  s->VP_fired = 0;
}

int PMc_led_AP_on(const PacemakerC* s) {
  return (s && s->AP_led_ms > 0) ? 1 : 0;
}

int PMc_led_VP_on(const PacemakerC* s) {
  return (s && s->VP_led_ms > 0) ? 1 : 0;
}

/* ==================== MAIN LOOP ==================== */

void PMc_step(PacemakerC* s) {
  if (!s) return;

  /* Handle VP - arms AEI if VRP == 0 */
  if (s->VP) {
    if (s->VRP == 0) {
      s->VRP = VRP_VALUE;
      s->AEI = AEI_VALUE;
      s_AEI_armed = 1;
    }

    s->VP_fired = 1;
    s->VP_led_ms = s->led_pulse_ms;
    s->VP = 0;
  }

  /* Clear AP flag after LED timer expires */
  if (s->AP_led_ms == 0) {
    s->AP = 0;
  }

  /* Clear sense flags (they're processed in ISRs) */
  s->VS = 0;
  s->AS = 0;
}
