#include <string.h>
#include <stdio.h>
#include <sys/alt_alarm.h>
#include <altera_avalon_pio_regs.h>
#include <system.h>
#include "Pacemaker_C.h"

/* ---------------- 1 ms heartbeat via alt_alarm ---------------- */
static volatile alt_u32 s_ms_ticks = 0;
static alt_alarm s_alarm;
static int banner_once = 0;

static alt_u32 alarm_cb(void* ctx){ (void)ctx; s_ms_ticks++; return 1; }

int PMc_start_1ms_alarm(void){
  int r = alt_alarm_start(&s_alarm, 1, alarm_cb, NULL);
  if(!banner_once){
    banner_once = 1;
    printf("[C] Pacemaker C-mode running (1ms ISR)\n");
    fflush(stdout);
  }
  return r;
}

static inline void dec_if_pos(int* t){ if(*t>0) --*t; }

/* --------------- lifecycle ---------------- */
void PMc_init(PacemakerC* s){
  memset(s, 0, sizeof(*s));
  s->led_pulse_ms = 25;
  s->LRI = LRI_VALUE;            /* LRI is an inhibited backup (V–V) */
}

void PMc_set_led_pulse_ms(PacemakerC* s, int ms){ s->led_pulse_ms = (ms>0)?ms:1; }

void PMc_set_senses(PacemakerC* s, int AS_raw, int VS_raw){
  s->AS_raw = AS_raw;
  s->VS_raw = VS_raw;
}

/* Apply all post-ventricular effects (for VS or VP) */
static inline void post_ventricular(PacemakerC* s, int paced){
  if(paced){
    s->VP = 1; s->VP_fired = 1; s->VP_led_ms = s->led_pulse_ms;
  }

  /* Refractory (strictly POST-V) + restart triggered timers that are V-anchored */
  s->VRP   = VRP_VALUE;          /* Ventricular refractory */
  s->PVARP = PVARP_VALUE;        /* Post-ventricular atrial refractory */
  s->AEI   = AEI_VALUE;          /* V→A escape interval (triggered on V) */
  s->LRI   = LRI_VALUE;          /* V–V lower-rate interval (inhibited backup) */
  s->URI   = URI_VALUE;          /* V–V upper-rate interval (pace limiter) */

  s->AVI = 0;                    /* cancel any A→V countdown on a V */
  s->seen_AS_since_last_V = 0;   /* new V cycle */
  s->vp_waiting_for_URI   = 0;   /* cancel deferred AVI VP */
}

/* --------------- one 1ms step of the algorithm ---------------- */
static void PMc_tick_1ms(PacemakerC* s){
  /* Countdowns & display */
  dec_if_pos(&s->AVI);  dec_if_pos(&s->AEI);  dec_if_pos(&s->PVARP);
  dec_if_pos(&s->VRP);  dec_if_pos(&s->LRI);  dec_if_pos(&s->URI);
  dec_if_pos(&s->AP_led_ms); dec_if_pos(&s->VP_led_ms);

  /* Refractory gating: make AR/VR during PVARP/VRP */
  s->AS = (s->AS_raw && s->PVARP==0);
  s->VS = (s->VS_raw && s->VRP  ==0);

  /* Outputs are 1-ms pulses */
  s->AP = 0; s->VP = 0;

  /* ===== Intrinsic events first ===== */
  if(s->VS){
    /* Any valid V event anchors the V-based timers and refractory */
    post_ventricular(s, /*paced=*/0);
  }

  if(s->AS){
    /* A sensed → start A→V (AVI) — this is a triggered timer */
    s->AVI = AVI_VALUE;
    s->seen_AS_since_last_V = 1;      /* we are A-tracking in this V-cycle */
  }

  /* ===== AEI timeout → AP (triggered V→A path) ===== */
  if(s->AEI==0 && s->seen_AS_since_last_V==0){
    /* No atrial sense since the last V → atrial escape */
    s->AP = 1; s->AP_fired = 1; s->AP_led_ms = s->led_pulse_ms;

    /* AP is an atrial event: start A→V timer, but DO NOT start PVARP */
    s->AVI = AVI_VALUE;
    s->seen_AS_since_last_V = 1;
  }

  /* ===== Ventricular decision (DDD with Triggered + Inhibited + URI) =====
     - AVI is a triggered timer from A; its expiry requests a VP (A-tracking).
       If URI is active, defer exactly one VP until URI ends.
     - LRI is an inhibited backup measured between V events.
       It must NOT fire if we are A-tracking, and it is NEVER deferred by URI. */

  const int avi_requests_vp = (s->AVI==0 && s->seen_AS_since_last_V);
  const int lri_requests_vp = (s->LRI==0 && s->seen_AS_since_last_V==0);

  /* AVI path (Triggered) */
  if(avi_requests_vp){
    if(s->URI==0){
      post_ventricular(s, /*paced=*/1);
    }else{
      /* Upper-rate extension of AVI: remember one deferred VP */
      s->vp_waiting_for_URI = 1;
    }
  }

  /* LRI path (Inhibited) */
  if(lri_requests_vp && s->URI==0){
    post_ventricular(s, /*paced=*/1);
  }

  /* Deliver the single deferred AVI VP exactly when URI ends (unless a VS occurred) */
  if(s->vp_waiting_for_URI && s->URI==0){
    post_ventricular(s, /*paced=*/1);
  }

  /* Raw senses are one-ms pulses */
  s->AS_raw = 0; s->VS_raw = 0;
}

/* --------------- public stepping API ---------------- */
void PMc_run_for_elapsed_ms(PacemakerC* s){
  while(s_ms_ticks){ PMc_tick_1ms(s); s_ms_ticks--; }
}

void PMc_poll_and_clear_pulses(PacemakerC* s, int* AP_any, int* VP_any){
  if(AP_any) *AP_any = s->AP_fired;
  if(VP_any) *VP_any = s->VP_fired;
  s->AP_fired = 0; s->VP_fired = 0;
}

int PMc_led_AP_on(const PacemakerC* s){ return s->AP_led_ms>0; }
int PMc_led_VP_on(const PacemakerC* s){ return s->VP_led_ms>0; }
