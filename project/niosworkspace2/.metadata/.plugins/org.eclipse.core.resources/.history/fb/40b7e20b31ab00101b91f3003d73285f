#ifndef PACEMAKER_C_H
#define PACEMAKER_C_H

#include <alt_types.h>
#include "timing.h"  /* AVI_VALUE, AEI_VALUE, PVARP_VALUE, VRP_VALUE, LRI_VALUE, URI_VALUE */

#ifdef __cplusplus
extern "C" {
#endif

/* Hand-written DDD pacemaker state for C mode (SW0 = 1), using rising counters */
typedef struct {
  /* Raw one-tick inputs for this millisecond (set by caller before stepping) */
  int AS_raw;      /* atrial sense pulse (0/1) */
  int VS_raw;      /* ventricular sense pulse (0/1) */

  /* Gated one-tick events (after refractory handling) */
  int A_EVT;       /* accepted atrial event this tick (0/1) */
  int V_EVT;       /* accepted ventricular event this tick (0/1) */

  /* One-tick outputs generated by the algorithm */
  int AP;          /* atrial pace pulse this tick (0/1) */
  int VP;          /* ventricular pace pulse this tick (0/1) */

  /* Sticky flags so the caller can batch-send UART bytes after a step window */
  int AP_fired;    /* became 1 at least once since last poll */
  int VP_fired;

  /* Refractory/gate flags */
  int atrial_ref;  /* PVARP active (1) */
  int vent_ref;    /* VRP active (1) */
  int uri_active;  /* URI gate active (1) */

  /* Free-running millisecond counters (rise from 0 upward) */
  unsigned AVI, AEI, PVARP, VRP, LRI, URI;

  /* URI deferral bookkeeping: remember why VP is owed while URI is active */
  int pending_vp_avi;   /* 1 if AVI expired and we owe a VP, but URI blocked it */
  int pending_vp_lri;   /* 1 if LRI expired and we owe a VP, but URI blocked it */

  /* Aâ†’V cycle book-keeping: have we seen an A since the last V? */
  int seen_A_since_last_V;

  /* LED stretch (visual only) */
  int led_pulse_ms;     /* default 25 ms */
  int AP_led_ms;
  int VP_led_ms;
} PacemakerC;

/* ---- Lifecycle ---- */
void PMc_init(PacemakerC* s);
void PMc_set_led_pulse_ms(PacemakerC* s, int ms);

/* ---- 1 ms timing (module-local ISR ticker) ---- */
int  PMc_start_1ms_alarm(void);
void PMc_run_for_elapsed_ms(PacemakerC* s);

/* ---- Inputs for next ms window ---- */
void PMc_set_senses(PacemakerC* s, int AS_raw, int VS_raw);

/* ---- Outputs / status ---- */
void PMc_poll_and_clear_pulses(PacemakerC* s, int* AP_any, int* VP_any);
int  PMc_led_AP_on(const PacemakerC* s);
int  PMc_led_VP_on(const PacemakerC* s);

#ifdef __cplusplus
}
#endif

#endif /* PACEMAKER_C_H */
