/*
 * main.c — COMPSYS 303 Pacemaker (SCCharts) with button self‑test prints
 *
 * Adds: in **Buttons mode** (SW1=0), print to Nios II Console whenever
 *       KEY1 (AS) or KEY0 (VS) is **pressed** (edge‑detected, active‑low).
 *       This is only a debug aid; UART behaviour is unchanged and prints
 *       still go to JTAG UART (STDOUT=/dev/jtag_uart).
 */

#include <stdio.h>
#include <string.h>
#include <system.h>
#include "Pacemaker.h"
#include "Pacemaker_C.h"
#include "timing.h"
#include <altera_avalon_pio_regs.h>
#include <alt_types.h>
#include <sys/alt_irq.h>
#include <sys/alt_timestamp.h>
#include "sys/alt_alarm.h"
#include <fcntl.h>
#include <unistd.h>

#ifndef UART_NAME
  #define UART_NAME "/dev/uart"
#endif

#define HEARTBEAT_MS 1000

static TickData g_pm;
static int      g_uart_fd = -1;
static alt_u32  g_last_tick = 0;
static alt_u32  g_last_hb_ms = 0;
static alt_u32  g_prev_keys = 0xFFFFFFFF; // init to all 1s (no press)

static inline alt_u32 ms_now(void){
  alt_u64 t = alt_timestamp();
  alt_u32 f = alt_timestamp_freq();
  return (alt_u32)((t * 1000ULL) / (f ? f : 1));
}

static void leds_show_mode(alt_u32 sw){
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, (sw & 0x03));
}

static void leds_show_pace(int AP, int VP){
  alt_u32 g = 0;
  if (AP) g |= 0x02; // LEDG1
  if (VP) g |= 0x01; // LEDG0
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, g);
}

// Buttons path: active‑low, **edge‑detect presses** to avoid printing repeatedly
static void handle_buttons_inputs_with_debug(void){
  alt_u32 keys = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
  // Press detected on KEY1 (AS) = prev high -> now low
  int as_pressed =  ((g_prev_keys & 0x02) != 0) && ((keys & 0x02) == 0);
  int vs_pressed =  ((g_prev_keys & 0x01) != 0) && ((keys & 0x01) == 0);

  if (as_pressed){
    g_pm.AS = 1; // one‑tick pulse
    printf("[BTN] AS pressed (KEY1) @ %ums\n", ms_now());
  }
  if (vs_pressed){
    g_pm.VS = 1; // one‑tick pulse
    printf("[BTN] VS pressed (KEY0) @ %ums\n", ms_now());
  }

  g_prev_keys = keys; // remember for next edge detect
}

static void handle_uart_inputs(void){
  char ch; int n;
  while ((n = read(g_uart_fd, &ch, 1)) > 0){
    if (ch == 'A' || ch == 'a') g_pm.AS = 1;
    if (ch == 'V' || ch == 'v') g_pm.VS = 1;
  }
}

static void uart_send_probe(void){
  if (g_uart_fd >= 0) {
    const char *probe = "HELLO_FROM_BOARD\r\n";
    (void)write(g_uart_fd, probe, (int)strlen(probe));
  }
}

static void uart_send_pace_bytes_if_enabled(int uart_enabled, int AP, int VP){
  if (!uart_enabled || g_uart_fd < 0) return;
  if (AP) { const char A = 'A'; (void)write(g_uart_fd, &A, 1); }
  if (VP) { const char V = 'V'; (void)write(g_uart_fd, &V, 1); }
}

static void heartbeat_stdout(void){
  alt_u32 now = ms_now();
  if (now - g_last_hb_ms >= HEARTBEAT_MS){
    g_last_hb_ms = now;
    printf("[HB] t=%ums\n", now);
    fflush(stdout);
  }
}

int main(void){
  reset(&g_pm);

  if (alt_timestamp_start() < 0){
    printf("[ERR] alt_timestamp_start failed\n");
  }
  g_last_tick = alt_timestamp();
  g_last_hb_ms = 0;
  g_prev_keys = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE); // seed edge detector

  printf("\n==== COMPSYS303 Pacemaker (SCCharts) ====.\n");
  printf("UART dev: %s (115200 8N1)\n", UART_NAME);
  printf("Timings: AVI=%d AEI=%d PVARP=%d VRP=%d LRI=%d URI=%d (ms)\n",
         AVI_VALUE, AEI_VALUE, PVARP_VALUE, VRP_VALUE, LRI_VALUE, URI_VALUE);
  printf("SW0: 0=SCCharts,1=C  |  SW1: 0=Buttons,1=UART\n");
  fflush(stdout);

  g_uart_fd = open(UART_NAME, O_RDWR | O_NONBLOCK);
  if (g_uart_fd < 0) {
    printf("[ERR] open(%s) failed — check SOPC name/pins/cable.\n", UART_NAME);
  } else {
    printf("[OK ] %s opened.\n", UART_NAME);
    uart_send_probe();
  }
  fflush(stdout);

  while (1){
    alt_u32 sw = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
    leds_show_mode(sw);

    int sccharts_mode = ((sw & 0x01) == 0); // SW0=0 -> SCCharts
    int uart_source   = ((sw & 0x02) != 0); // SW1=1 -> UART

    alt_u32 now_ticks = alt_timestamp();
    alt_u32 elapsed   = now_ticks - g_last_tick;
    g_last_tick       = now_ticks;
    g_pm.deltaT = (double)elapsed * 1000.0 / (double)alt_timestamp_freq();

    if (sccharts_mode){
      if (uart_source) {
        handle_uart_inputs();
      } else {
        handle_buttons_inputs_with_debug(); // <— prints on KEY presses
      }

      tick(&g_pm);
      leds_show_pace(g_pm.AP, g_pm.VP);
      uart_send_pace_bytes_if_enabled(uart_source, g_pm.AP, g_pm.VP);

      g_pm.AS = 0;
      g_pm.VS = 0;
    } else {
      leds_show_pace(0,0); // C impl later
    }

    heartbeat_stdout();
  }

  return 0;
}
