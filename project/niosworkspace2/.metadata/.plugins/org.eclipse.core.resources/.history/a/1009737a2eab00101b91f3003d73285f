#include <string.h>
#include <stdio.h>
#include <sys/alt_alarm.h>
#include <altera_avalon_pio_regs.h>
#include <system.h>
#include "Pacemaker_C.h"

/* ---------- 1 ms ticker ---------- */
static volatile alt_u32 s_ms_ticks = 0;
static alt_alarm s_alarm;
static int s_banner_printed = 0;

static alt_u32 PMc_alarm_cb(void* ctx) { (void)ctx; s_ms_ticks++; return 1; }

int PMc_start_1ms_alarm(void){
  int r = alt_alarm_start(&s_alarm, 1, PMc_alarm_cb, NULL);
  if(!s_banner_printed){
    s_banner_printed = 1;
    printf("[C-MODE] Pacemaker C started (1 ms ISR)\n");
    fflush(stdout);
  }
  return r;
}

static inline void dec_if_pos(int* t){ if(*t>0) --*t; }

/* ---------- lifecycle ---------- */
void PMc_init(PacemakerC* s){
  memset(s,0,sizeof(*s));
  s->led_pulse_ms = 25;   /* visible LED pulse */
  s->LRI = LRI_VALUE;     /* ensure backup starts finite */
}

void PMc_set_led_pulse_ms(PacemakerC* s,int ms){ s->led_pulse_ms = (ms>0)?ms:1; }

void PMc_set_senses(PacemakerC* s,int AS_raw,int VS_raw){
  s->AS_raw = AS_raw;
  s->VS_raw = VS_raw;

  /* Optional field sanity probe via KEY2 */
  alt_u32 keys = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
  if((keys & 0x04)==0){
    static int once=0; if(!once){ printf("[C-MODE] KEY2 sanity press\n"); fflush(stdout); once=1; }
  }
}

/* Helper: apply post-ventricular effects for either VS or VP */
static inline void do_post_ventricular(PacemakerC* s, int paced){
  if(paced){
    s->VP = 1; s->VP_fired = 1; s->VP_led_ms = s->led_pulse_ms;
  }
  /* POST-V resets (matches timing diagram) */
  s->VRP   = VRP_VALUE;
  s->AEI   = AEI_VALUE;
  s->LRI   = LRI_VALUE;
  s->URI   = URI_VALUE;
  s->PVARP = PVARP_VALUE;       /* post-ventricular atrial refractory */
  s->AVI   = 0;

  s->seen_AS_since_last_V = 0;  /* new V cycle begins */
  s->vp_waiting_for_URI   = 0;  /* cancel any deferred AVI VP */
}

/* ---------- one 1 ms algorithm step ---------- */
static void PMc_tick_1ms(PacemakerC* s){
  /* timers & LEDs */
  dec_if_pos(&s->AVI);  dec_if_pos(&s->AEI);  dec_if_pos(&s->PVARP);
  dec_if_pos(&s->VRP);  dec_if_pos(&s->LRI);  dec_if_pos(&s->URI);
  dec_if_pos(&s->AP_led_ms); dec_if_pos(&s->VP_led_ms);

  /* gate senses by refractory */
  s->AS = (s->AS_raw && s->PVARP==0);
  s->VS = (s->VS_raw && s->VRP  ==0);

  /* default outputs this ms */
  s->AP = 0; s->VP = 0;

  /* ===== Intrinsic events first ===== */
  if(s->VS){
    do_post_ventricular(s, /*paced=*/0);
  }

  if(s->AS){
    /* sensed A starts AV tracking; DO NOT start PVARP here */
    s->AVI = AVI_VALUE;
    s->seen_AS_since_last_V = 1;
  }

  /* AEI timeout → AP (only if no AS since last V), then start AVI */
  if(s->AEI==0 && s->seen_AS_since_last_V==0){
    s->AP = 1; s->AP_fired = 1; s->AP_led_ms = s->led_pulse_ms;
    s->AVI = AVI_VALUE;               /* AP is an atrial event to track */
    s->seen_AS_since_last_V = 1;
  }

  /* ===== Ventricular decision logic (URI-aware) =====
     – AVI may request VP; if URI active, defer exactly one VP.
     – LRI must NOT pace while we’re A-tracking (seen_AS_since_last_V==1).
       If LRI expires with no A-tracking, pace only if URI is idle (no deferral). */
  const int avi_requests_vp = (s->AVI==0 && s->seen_AS_since_last_V);
  const int lri_requests_vp = (s->LRI==0 && s->seen_AS_since_last_V==0);

  /* AVI path */
  if(avi_requests_vp){
    if(s->URI==0){
      do_post_ventricular(s, /*paced=*/1);
    }else{
      /* true “URI extension”: remember to deliver *one* VP after URI */
      s->vp_waiting_for_URI = 1;
    }
  }

  /* LRI path — inhibited by A-tracking; never deferred for URI */
  if(lri_requests_vp && s->URI==0){
    do_post_ventricular(s, /*paced=*/1);
  }

  /* Deliver deferred AVI VP exactly when URI ends (unless a V already occurred) */
  if(s->vp_waiting_for_URI && s->URI==0){
    do_post_ventricular(s, /*paced=*/1);
  }

  /* raw senses are one-ms pulses */
  s->AS_raw = 0; s->VS_raw = 0;
}

/* ---------- public stepping ---------- */
void PMc_run_for_elapsed_ms(PacemakerC* s){
  while(s_ms_ticks){ PMc_tick_1ms(s); s_ms_ticks--; }
}

void PMc_poll_and_clear_pulses(PacemakerC* s,int* AP_any,int* VP_any){
  if(AP_any) *AP_any = s->AP_fired;
  if(VP_any) *VP_any = s->VP_fired;
  s->AP_fired = 0; s->VP_fired = 0;
}

int PMc_led_AP_on(const PacemakerC* s){ return s->AP_led_ms>0; }
int PMc_led_VP_on(const PacemakerC* s){ return s->VP_led_ms>0; }
