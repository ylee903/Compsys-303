
niosproject2.elf:     file format elf32-littlenios2
niosproject2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00017628 memsz 0x00017628 flags r-x
    LOAD off    0x00018648 vaddr 0x00817648 paddr 0x0081932c align 2**12
         filesz 0x00001ce4 memsz 0x00001ce4 flags rw-
    LOAD off    0x0001b010 vaddr 0x0081b010 paddr 0x0081b010 align 2**12
         filesz 0x00000000 memsz 0x00000348 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00016ca8  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000075c  00816eec  00816eec  00017eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ce4  00817648  0081932c  00018648  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000348  0081b010  0081b010  0001b010  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0081b358  0081b358  0001a32c  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01008000  01008000  0001a32c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001a32c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001068  00000000  00000000  0001a350  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00028033  00000000  00000000  0001b3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009fc2  00000000  00000000  000433eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000dc25  00000000  00000000  0004d3ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000027d8  00000000  00000000  0005afd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004833  00000000  00000000  0005d7ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017995  00000000  00000000  00061fdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00079974  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018f0  00000000  00000000  000799d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007ecd5  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0007ecd8  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007ecdb  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007ecdc  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0007ecdd  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0007ece6  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0007ecef  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  0007ecf8  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000002c  00000000  00000000  0007ed04  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006b17b  00000000  00000000  0007ed30  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00816eec l    d  .rodata	00000000 .rodata
00817648 l    d  .rwdata	00000000 .rwdata
0081b010 l    d  .bss	00000000 .bss
0081b358 l    d  .sdram	00000000 .sdram
01008000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../niosproject2_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Pacemaker.c
00000000 l    df *ABS*	00000000 Pacemaker_C.c
0081b010 l     O .bss	00000004 s_ms_counter
0081b014 l     O .bss	00000004 s_AP_pulse
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 main.c
0081b060 l     O .bss	000001d0 g_pm
008192d8 l     O .rwdata	00000004 g_uart_fd
0081b018 l     O .bss	00000004 g_last_tick
0081b01c l     O .bss	00000004 g_last_hb_ms
008192dc l     O .rwdata	00000004 g_prev_keys
008192e0 l     O .rwdata	00000004 g_c_last_ms
00805ab8 l     F .text	000000b0 ms_now
00805b68 l     F .text	00000038 leds_show_mode
00805ba0 l     F .text	00000064 leds_show_pace
00805c04 l     F .text	000000e8 handle_buttons_inputs_with_debug
00805cec l     F .text	000000d0 handle_uart_inputs
00805dbc l     F .text	00000060 uart_send_probe
00805e1c l     F .text	00000094 uart_send_pace_bytes_if_enabled
00805eb0 l     F .text	0000006c heartbeat_stdout
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008092b0 l     F .text	00000008 __fp_unlock
008092c4 l     F .text	0000019c __sinit.part.1
00809460 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00817648 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00817202 l     O .rodata	00000010 zeroes.4404
0080cabc l     F .text	000000bc __sbprintf
00817212 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
0080cd80 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00817e94 l     O .rwdata	00000020 lc_ctype_charset
00817e74 l     O .rwdata	00000020 lc_message_charset
00817eb4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00817240 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00810958 l     F .text	000000fc __sprint_r.part.0
00817374 l     O .rodata	00000010 blanks.4348
00817364 l     O .rodata	00000010 zeroes.4349
00811ee4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 alt_close.c
00812c9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00812da8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00812dd4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00812ec0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00812fa0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0081308c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00813260 l     F .text	0000003c alt_get_errno
0081329c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
008134b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00819314 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00813700 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00813834 l     F .text	00000034 alt_dev_reg
00818094 l     O .rwdata	00001060 jtag_uart
008190f4 l     O .rwdata	00000120 lcd
00819214 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00813b74 l     F .text	0000020c altera_avalon_jtag_uart_irq
00813d80 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00819318 l     O .rwdata	00000004 colstart
008143b8 l     F .text	000000b8 lcd_write_command
00814470 l     F .text	000000d8 lcd_write_data
00814548 l     F .text	000000d0 lcd_clear_screen
00814618 l     F .text	000001ec lcd_repaint_screen
00814804 l     F .text	000000cc lcd_scroll_up
008148d0 l     F .text	000002ac lcd_handle_escape
00815054 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00815294 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0081565c l     F .text	0000009c altera_avalon_uart_irq
008156f8 l     F .text	000000e4 altera_avalon_uart_rxirq
008157dc l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00815978 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00815b90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00815eec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0081659c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
008174c7 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0081b05c g     O .bss	00000004 alt_instruction_exception_handler
008100cc g     F .text	00000074 _mprec_log10
008101b8 g     F .text	0000008c __any_on
008122c8 g     F .text	00000054 _isatty_r
0081724c g     O .rodata	00000028 __mprec_tinytens
0081319c g     F .text	0000007c alt_main
0080a5ac g     F .text	000000c0 _puts_r
0081b258 g     O .bss	00000100 alt_irq
0080eca4 g     F .text	00000060 _lseek_r
0081932c g       *ABS*	00000000 __flash_rwdata_start
00812b94 g     F .text	00000088 .hidden __eqdf2
0081b358 g       *ABS*	00000000 __alt_heap_start
0080a570 g     F .text	0000003c printf
00812474 g     F .text	0000009c _wcrtomb_r
0080a7ac g     F .text	0000005c __sseek
00809600 g     F .text	00000010 __sinit
0081231c g     F .text	00000140 __swbuf_r
0080ebc8 g     F .text	0000007c _setlocale_r
00809468 g     F .text	00000068 __sfmoreglue
0081323c g     F .text	00000024 __malloc_unlock
0081b04c g     O .bss	00000004 altera_avalon_timer_ts_freq
0080f0ec g     F .text	0000015c memmove
008095e8 g     F .text	00000018 _cleanup
0080f248 g     F .text	000000a8 _Balloc
00807c3c g     F .text	000000dc .hidden __gtdf2
008168b0 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
0081226c g     F .text	0000005c _fstat_r
0081b02c g     O .bss	00000004 errno
0080a728 g     F .text	00000008 __seofread
0081b040 g     O .bss	00000004 alt_argv
008212d8 g       *ABS*	00000000 _gp
00816880 g     F .text	00000030 usleep
0080545c g     F .text	000002cc reset
00817f14 g     O .rwdata	00000180 alt_fd_list
0081608c g     F .text	00000090 alt_find_dev
0080efa4 g     F .text	00000148 memcpy
008092b8 g     F .text	0000000c _cleanup_r
00808e20 g     F .text	000000dc .hidden __floatsidf
00816660 g     F .text	0000007c alt_io_redirect
00807d18 g     F .text	000000f4 .hidden __ltdf2
00816eec g       *ABS*	00000000 __DTOR_END__
0080a66c g     F .text	00000014 puts
00816abc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00810808 g     F .text	00000074 __fpclassifyd
00810028 g     F .text	000000a4 __ratio
00811ec8 g     F .text	0000001c __vfiprintf_internal
00813f78 g     F .text	0000021c altera_avalon_jtag_uart_read
0080a540 g     F .text	00000030 _printf_r
008069ec g     F .text	00000064 .hidden __udivsi3
00812efc g     F .text	000000a4 isatty
0081729c g     O .rodata	000000c8 __mprec_tens
0080ec44 g     F .text	0000000c __locale_charset
00816a2c g     F .text	00000090 alt_icache_flush
0081b028 g     O .bss	00000004 __malloc_top_pad
008192f4 g     O .rwdata	00000004 __mb_cur_max
0080ec74 g     F .text	0000000c _localeconv_r
0080f654 g     F .text	0000003c __i2b
0080e70c g     F .text	000004bc __sfvwrite_r
0080a680 g     F .text	00000054 _sbrk_r
00810244 g     F .text	00000060 _read_r
0081930c g     O .rwdata	00000004 alt_max_fd
0080e608 g     F .text	000000f0 _fclose_r
00809280 g     F .text	00000030 fflush
0081b024 g     O .bss	00000004 __malloc_max_sbrked_mem
00806aa8 g     F .text	000008ac .hidden __adddf3
0080fdd0 g     F .text	0000010c __b2d
0081265c g     F .text	00000538 .hidden __umoddi3
008130c8 g     F .text	000000d4 lseek
008192e4 g     O .rwdata	00000004 _global_impure_ptr
008102a4 g     F .text	00000564 _realloc_r
0081b358 g       *ABS*	00000000 __bss_end
008164ac g     F .text	000000f0 alt_iic_isr_register
00816778 g     F .text	00000108 alt_tick
0080637c g     F .text	00000578 .hidden __udivdi3
008121c8 g     F .text	00000024 _fputwc_r
00817274 g     O .rodata	00000028 __mprec_bigtens
0080f438 g     F .text	00000104 __s2b
00808efc g     F .text	000000a8 .hidden __floatunsidf
00805984 g     F .text	00000028 PMc_init
0080fb10 g     F .text	00000060 __mcmp
008155b0 g     F .text	000000ac altera_avalon_uart_init
00809620 g     F .text	00000018 __fp_lock_all
00816460 g     F .text	0000004c alt_ic_irq_enabled
008166dc g     F .text	0000009c alt_alarm_stop
0081b050 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00817eec g     O .rwdata	00000028 alt_dev_null
00815ea4 g     F .text	00000048 alt_dcache_flush_all
0080f53c g     F .text	00000068 __hi0bits
00812c1c g     F .text	00000080 .hidden __fixdfsi
0081932c g       *ABS*	00000000 __ram_rwdata_end
008059f4 g     F .text	00000074 PMc_run_for_elapsed_ms
00805a68 g     F .text	00000050 PMc_poll_and_clear_pulses
00819304 g     O .rwdata	00000008 alt_dev_list
0081373c g     F .text	000000f8 write
00815480 g     F .text	00000020 alt_timestamp_freq
00817648 g       *ABS*	00000000 __ram_rodata_end
00812e10 g     F .text	000000b0 fstat
00807d18 g     F .text	000000f4 .hidden __ledf2
0080f888 g     F .text	00000140 __pow5mult
00810a6c g     F .text	0000145c ___vfiprintf_internal_r
0081b038 g     O .bss	00000004 __nlocale_changed
00806a50 g     F .text	00000058 .hidden __umodsi3
0081b358 g       *ABS*	00000000 end
00814b7c g     F .text	000004d8 altera_avalon_lcd_16207_write
00815bcc g     F .text	000001ac altera_avalon_uart_write
00813ab4 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
008059ac g     F .text	00000020 PMc_start_1ms_alarm
00816eec g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0081530c g     F .text	0000007c alt_avalon_timer_sc_init
00815500 g     F .text	00000060 altera_avalon_uart_write_fd
00808fa4 g     F .text	00000064 .hidden __clzsi2
00815560 g     F .text	00000050 altera_avalon_uart_close_fd
00814194 g     F .text	00000224 altera_avalon_jtag_uart_write
00809610 g     F .text	00000004 __sfp_lock_acquire
0080eec0 g     F .text	000000e4 memchr
0080a8a8 g     F .text	000021f8 ___vfprintf_internal_r
00809774 g     F .text	00000310 _free_r
0080ec50 g     F .text	00000010 __locale_mb_cur_max
00816d38 g     F .text	00000180 __call_exitprocs
0081b034 g     O .bss	00000004 __mlocale_changed
008192ec g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
0081b054 g     O .bss	00000004 _alt_tick_rate
0080f9c8 g     F .text	00000148 __lshift
0081b058 g     O .bss	00000004 _alt_nticks
008134f0 g     F .text	000000fc read
008138a0 g     F .text	000000b0 alt_sys_init
008059cc g     F .text	00000028 PMc_set_senses
00816c20 g     F .text	00000118 __register_exitproc
0080f690 g     F .text	000001f8 __multiply
00813e20 g     F .text	00000068 altera_avalon_jtag_uart_close
00817648 g       *ABS*	00000000 __ram_rwdata_start
00816eec g       *ABS*	00000000 __ram_rodata_start
0081b230 g     O .bss	00000028 __malloc_current_mallinfo
0080fedc g     F .text	0000014c __d2b
00813950 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00816224 g     F .text	000000a4 alt_get_fd
008168d4 g     F .text	00000158 alt_busy_sleep
0080cd2c g     F .text	00000054 _close_r
00816ba4 g     F .text	0000007c memcmp
00813a10 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0081b358 g       *ABS*	00000000 __alt_stack_base
00813a60 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0080cbd8 g     F .text	00000154 __swsetup_r
00805728 g     F .text	0000025c tick
00807354 g     F .text	000008e8 .hidden __divdf3
008094d0 g     F .text	00000118 __sfp
00810140 g     F .text	00000078 __copybits
00817a6c g     O .rwdata	00000408 __malloc_av_
0080961c g     F .text	00000004 __sinit_lock_release
00807e0c g     F .text	00000718 .hidden __muldf3
0080a6d4 g     F .text	00000054 __sread
0081611c g     F .text	00000108 alt_find_file
00815f28 g     F .text	000000a4 alt_dev_llist_insert
00813218 g     F .text	00000024 __malloc_lock
00813650 g     F .text	000000b0 sbrk
00809224 g     F .text	0000005c _fflush_r
00811fa0 g     F .text	000000c4 _calloc_r
0081b010 g       *ABS*	00000000 __bss_start
0080a418 g     F .text	00000128 memset
00805f1c g     F .text	00000400 main
0081b044 g     O .bss	00000004 alt_envp
0081b020 g     O .bss	00000004 __malloc_max_total_mem
008139b0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0081245c g     F .text	00000018 __swbuf
00815100 g     F .text	00000134 altera_avalon_lcd_16207_init
0080a808 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080e6f8 g     F .text	00000014 fclose
00815388 g     F .text	00000078 alt_timestamp_start
0080cf80 g     F .text	00001688 _dtoa_r
00809c0c g     F .text	0000080c _malloc_r
008125d0 g     F .text	00000030 __ascii_wctomb
00819310 g     O .rwdata	00000004 alt_errno
00809a84 g     F .text	000000c4 _fwalk
008068f4 g     F .text	00000084 .hidden __divsi3
00809650 g     F .text	00000124 _malloc_trim_r
00816eec g       *ABS*	00000000 __CTOR_END__
0081087c g     F .text	000000dc strcmp
00816eec g       *ABS*	00000000 __flash_rodata_start
00816eec g       *ABS*	00000000 __DTOR_LIST__
00812b94 g     F .text	00000088 .hidden __nedf2
00813868 g     F .text	00000038 alt_irq_init
008135ec g     F .text	00000064 alt_release_fd
008170b6 g     O .rodata	00000100 .hidden __clz_tab
0081b030 g     O .bss	00000004 _PathLocale
00816b58 g     F .text	00000014 atexit
0080cb78 g     F .text	00000060 _write_r
0080ec80 g     F .text	00000018 setlocale
008192e8 g     O .rwdata	00000004 _impure_ptr
0081b03c g     O .bss	00000004 alt_argc
00809008 g     F .text	0000021c __sflush_r
0081b048 g     O .bss	00000004 altera_avalon_timer_ts_base
0081602c g     F .text	00000060 _do_dtors
0080ec6c g     F .text	00000008 __locale_cjk_lang
00800020 g       .exceptions	00000000 alt_irq_entry
0080fd6c g     F .text	00000064 __ulp
00809638 g     F .text	00000018 __fp_unlock_all
00815234 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
008192fc g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080ec98 g     F .text	0000000c localeconv
00815400 g     F .text	00000080 alt_timestamp
008162fc g     F .text	00000050 alt_ic_isr_register
0081932c g       *ABS*	00000000 _edata
008154a0 g     F .text	00000060 altera_avalon_uart_read_fd
0081b358 g       *ABS*	00000000 _end
00812064 g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
00813e88 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
008163d4 g     F .text	0000008c alt_ic_irq_disable
0080a730 g     F .text	0000007c __swrite
008192f0 g     O .rwdata	00000004 __malloc_trim_threshold
0080ec60 g     F .text	0000000c __locale_msgcharset
00816b6c g     F .text	00000038 exit
00809b48 g     F .text	000000c4 _fwalk_reent
0080fb70 g     F .text	000001fc __mdiff
00806978 g     F .text	00000074 .hidden __modsi3
00800290 g     F .text	000051cc logic
00819328 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00809614 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
008173c6 g     O .rodata	00000101 _ctype_
00815924 g     F .text	00000054 altera_avalon_uart_close
00816eb8 g     F .text	00000034 _exit
00815d78 g     F .text	0000012c alt_alarm_start
0080631c g     F .text	00000060 .hidden __muldi3
0080ed04 g     F .text	000001bc __smakebuf_r
0080a810 g     F .text	00000098 strlen
00813360 g     F .text	00000154 open
00807c3c g     F .text	000000dc .hidden __gedf2
008192f8 g     O .rwdata	00000004 __wctomb
00810a54 g     F .text	00000018 __sprint_r
008162c8 g     F .text	00000034 alt_icache_flush_all
0081931c g     O .rwdata	00000004 alt_priority_mask
0081634c g     F .text	00000088 alt_ic_irq_enable
0080caa0 g     F .text	0000001c __vfprintf_internal
008159b4 g     F .text	000001dc altera_avalon_uart_read
00812600 g     F .text	0000005c _wctomb_r
00808524 g     F .text	000008fc .hidden __subdf3
0080f5a4 g     F .text	000000b0 __lo0bits
00819320 g     O .rwdata	00000008 alt_alarm_list
00815fcc g     F .text	00000060 _do_ctors
00812510 g     F .text	000000c0 wcrtomb
00812cd8 g     F .text	000000d0 close
00813008 g     F .text	00000084 alt_load
008121ec g     F .text	00000080 fputwc
00809618 g     F .text	00000004 __sinit_lock_acquire
0080f318 g     F .text	00000120 __multadd
0080f2f0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff7f8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	008020b4 	movhi	r2,130
  800140:	10ac9604 	addi	r2,r2,-19880
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	008020b4 	movhi	r2,130
  800158:	10ac9604 	addi	r2,r2,-19880
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff7f812c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff7f8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a76117 	ldw	r2,-25212(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a76117 	ldw	r2,-25212(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff7f8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  800260:	d684b614 	ori	gp,gp,4824
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10ac0414 	ori	r2,r2,45072

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18ecd614 	ori	r3,r3,45912

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff7f8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	08130080 	call	813008 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	081319c0 	call	81319c <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff7f828c>

00800290 <logic>:

#include "timing.h"

#include "Pacemaker.h"

void logic(TickData* d) {
  800290:	defffa04 	addi	sp,sp,-24
  800294:	dfc00515 	stw	ra,20(sp)
  800298:	df000415 	stw	fp,16(sp)
  80029c:	dc800315 	stw	r18,12(sp)
  8002a0:	dc400215 	stw	r17,8(sp)
  8002a4:	dc000115 	stw	r16,4(sp)
  8002a8:	df000404 	addi	fp,sp,16
  8002ac:	e13ffc15 	stw	r4,-16(fp)
  d->_g16 = d->_pg8;
  8002b0:	e0bffc17 	ldw	r2,-16(fp)
  8002b4:	10c06ac3 	ldbu	r3,427(r2)
  8002b8:	e0bffc17 	ldw	r2,-16(fp)
  8002bc:	10c03945 	stb	r3,229(r2)
  d->_g10 = d->_pg29;
  8002c0:	e0bffc17 	ldw	r2,-16(fp)
  8002c4:	10c06b03 	ldbu	r3,428(r2)
  8002c8:	e0bffc17 	ldw	r2,-16(fp)
  8002cc:	10c03805 	stb	r3,224(r2)
  d->_g13_e1 = !(d->_g16 || d->_g10);
  8002d0:	e0bffc17 	ldw	r2,-16(fp)
  8002d4:	10803943 	ldbu	r2,229(r2)
  8002d8:	10803fcc 	andi	r2,r2,255
  8002dc:	1080201c 	xori	r2,r2,128
  8002e0:	10bfe004 	addi	r2,r2,-128
  8002e4:	1000081e 	bne	r2,zero,800308 <logic+0x78>
  8002e8:	e0bffc17 	ldw	r2,-16(fp)
  8002ec:	10803803 	ldbu	r2,224(r2)
  8002f0:	10803fcc 	andi	r2,r2,255
  8002f4:	1080201c 	xori	r2,r2,128
  8002f8:	10bfe004 	addi	r2,r2,-128
  8002fc:	1000021e 	bne	r2,zero,800308 <logic+0x78>
  800300:	00800044 	movi	r2,1
  800304:	00000106 	br	80030c <logic+0x7c>
  800308:	0005883a 	mov	r2,zero
  80030c:	1007883a 	mov	r3,r2
  800310:	e0bffc17 	ldw	r2,-16(fp)
  800314:	10c06785 	stb	r3,414(r2)
  d->_g20 = d->_pg17;
  800318:	e0bffc17 	ldw	r2,-16(fp)
  80031c:	10c06b43 	ldbu	r3,429(r2)
  800320:	e0bffc17 	ldw	r2,-16(fp)
  800324:	10c039c5 	stb	r3,231(r2)
  d->_g21 = d->_g20 && d->VS;
  800328:	e0bffc17 	ldw	r2,-16(fp)
  80032c:	108039c3 	ldbu	r2,231(r2)
  800330:	10803fcc 	andi	r2,r2,255
  800334:	1080201c 	xori	r2,r2,128
  800338:	10bfe004 	addi	r2,r2,-128
  80033c:	10000826 	beq	r2,zero,800360 <logic+0xd0>
  800340:	e0bffc17 	ldw	r2,-16(fp)
  800344:	10803143 	ldbu	r2,197(r2)
  800348:	10803fcc 	andi	r2,r2,255
  80034c:	1080201c 	xori	r2,r2,128
  800350:	10bfe004 	addi	r2,r2,-128
  800354:	10000226 	beq	r2,zero,800360 <logic+0xd0>
  800358:	00800044 	movi	r2,1
  80035c:	00000106 	br	800364 <logic+0xd4>
  800360:	0005883a 	mov	r2,zero
  800364:	1007883a 	mov	r3,r2
  800368:	e0bffc17 	ldw	r2,-16(fp)
  80036c:	10c03a05 	stb	r3,232(r2)
  if (d->_g21) {
  800370:	e0bffc17 	ldw	r2,-16(fp)
  800374:	10803a03 	ldbu	r2,232(r2)
  800378:	10803fcc 	andi	r2,r2,255
  80037c:	1080201c 	xori	r2,r2,128
  800380:	10bfe004 	addi	r2,r2,-128
  800384:	10000326 	beq	r2,zero,800394 <logic+0x104>
    d->_Pacemaker_local__Atrig = 1;
  800388:	e0bffc17 	ldw	r2,-16(fp)
  80038c:	00c00044 	movi	r3,1
  800390:	10c03405 	stb	r3,208(r2)
  }
  d->_g181 = d->_pg151;
  800394:	e0bffc17 	ldw	r2,-16(fp)
  800398:	10c06b83 	ldbu	r3,430(r2)
  80039c:	e0bffc17 	ldw	r2,-16(fp)
  8003a0:	10c056c5 	stb	r3,347(r2)
  if (d->_g181) {
  8003a4:	e0bffc17 	ldw	r2,-16(fp)
  8003a8:	108056c3 	ldbu	r2,347(r2)
  8003ac:	10803fcc 	andi	r2,r2,255
  8003b0:	1080201c 	xori	r2,r2,128
  8003b4:	10bfe004 	addi	r2,r2,-128
  8003b8:	10001226 	beq	r2,zero,800404 <logic+0x174>
    d->_region0_VRefrac_t += d->deltaT;
  8003bc:	e13ffc17 	ldw	r4,-16(fp)
  8003c0:	20802117 	ldw	r2,132(r4)
  8003c4:	20c02217 	ldw	r3,136(r4)
  8003c8:	e1bffc17 	ldw	r6,-16(fp)
  8003cc:	31002d17 	ldw	r4,180(r6)
  8003d0:	31402e17 	ldw	r5,184(r6)
  8003d4:	200d883a 	mov	r6,r4
  8003d8:	280f883a 	mov	r7,r5
  8003dc:	1009883a 	mov	r4,r2
  8003e0:	180b883a 	mov	r5,r3
  8003e4:	0806aa80 	call	806aa8 <__adddf3>
  8003e8:	1009883a 	mov	r4,r2
  8003ec:	180b883a 	mov	r5,r3
  8003f0:	2005883a 	mov	r2,r4
  8003f4:	2807883a 	mov	r3,r5
  8003f8:	e13ffc17 	ldw	r4,-16(fp)
  8003fc:	20802115 	stw	r2,132(r4)
  800400:	20c02215 	stw	r3,136(r4)
  }
  d->_g23 = d->_g20 && !d->VS;
  800404:	e0bffc17 	ldw	r2,-16(fp)
  800408:	108039c3 	ldbu	r2,231(r2)
  80040c:	10803fcc 	andi	r2,r2,255
  800410:	1080201c 	xori	r2,r2,128
  800414:	10bfe004 	addi	r2,r2,-128
  800418:	10000826 	beq	r2,zero,80043c <logic+0x1ac>
  80041c:	e0bffc17 	ldw	r2,-16(fp)
  800420:	10803143 	ldbu	r2,197(r2)
  800424:	10803fcc 	andi	r2,r2,255
  800428:	1080201c 	xori	r2,r2,128
  80042c:	10bfe004 	addi	r2,r2,-128
  800430:	1000021e 	bne	r2,zero,80043c <logic+0x1ac>
  800434:	00800044 	movi	r2,1
  800438:	00000106 	br	800440 <logic+0x1b0>
  80043c:	0005883a 	mov	r2,zero
  800440:	1007883a 	mov	r3,r2
  800444:	e0bffc17 	ldw	r2,-16(fp)
  800448:	10c03a85 	stb	r3,234(r2)
  d->_cg23 = d->_region0_VRefrac_t >= d->T_VRP;
  80044c:	e0bffc17 	ldw	r2,-16(fp)
  800450:	14002117 	ldw	r16,132(r2)
  800454:	14402217 	ldw	r17,136(r2)
  800458:	e0bffc17 	ldw	r2,-16(fp)
  80045c:	10800417 	ldw	r2,16(r2)
  800460:	1009883a 	mov	r4,r2
  800464:	0808e200 	call	808e20 <__floatsidf>
  800468:	1009883a 	mov	r4,r2
  80046c:	180b883a 	mov	r5,r3
  800470:	04800044 	movi	r18,1
  800474:	200d883a 	mov	r6,r4
  800478:	280f883a 	mov	r7,r5
  80047c:	8009883a 	mov	r4,r16
  800480:	880b883a 	mov	r5,r17
  800484:	0807c3c0 	call	807c3c <__gedf2>
  800488:	1000010e 	bge	r2,zero,800490 <logic+0x200>
  80048c:	0025883a 	mov	r18,zero
  800490:	9007883a 	mov	r3,r18
  800494:	e0bffc17 	ldw	r2,-16(fp)
  800498:	10c05a45 	stb	r3,361(r2)
  d->_g24 = d->_g23 && d->_cg23;
  80049c:	e0bffc17 	ldw	r2,-16(fp)
  8004a0:	10803a83 	ldbu	r2,234(r2)
  8004a4:	10803fcc 	andi	r2,r2,255
  8004a8:	1080201c 	xori	r2,r2,128
  8004ac:	10bfe004 	addi	r2,r2,-128
  8004b0:	10000826 	beq	r2,zero,8004d4 <logic+0x244>
  8004b4:	e0bffc17 	ldw	r2,-16(fp)
  8004b8:	10805a43 	ldbu	r2,361(r2)
  8004bc:	10803fcc 	andi	r2,r2,255
  8004c0:	1080201c 	xori	r2,r2,128
  8004c4:	10bfe004 	addi	r2,r2,-128
  8004c8:	10000226 	beq	r2,zero,8004d4 <logic+0x244>
  8004cc:	00800044 	movi	r2,1
  8004d0:	00000106 	br	8004d8 <logic+0x248>
  8004d4:	0005883a 	mov	r2,zero
  8004d8:	1007883a 	mov	r3,r2
  8004dc:	e0bffc17 	ldw	r2,-16(fp)
  8004e0:	10c03ac5 	stb	r3,235(r2)
  if (d->_g24) {
  8004e4:	e0bffc17 	ldw	r2,-16(fp)
  8004e8:	10803ac3 	ldbu	r2,235(r2)
  8004ec:	10803fcc 	andi	r2,r2,255
  8004f0:	1080201c 	xori	r2,r2,128
  8004f4:	10bfe004 	addi	r2,r2,-128
  8004f8:	10000326 	beq	r2,zero,800508 <logic+0x278>
    d->_Pacemaker_local__Atrig1 = 1;
  8004fc:	e0bffc17 	ldw	r2,-16(fp)
  800500:	00c00044 	movi	r3,1
  800504:	10c03445 	stb	r3,209(r2)
  }
  d->sleepT = 1000.0;
  800508:	e0fffc17 	ldw	r3,-16(fp)
  80050c:	18002f15 	stw	zero,188(r3)
  800510:	009023f4 	movhi	r2,16527
  800514:	10900004 	addi	r2,r2,16384
  800518:	18803015 	stw	r2,192(r3)
  d->_g16 = d->_g10 || d->_g16;
  80051c:	e0bffc17 	ldw	r2,-16(fp)
  800520:	10803803 	ldbu	r2,224(r2)
  800524:	10803fcc 	andi	r2,r2,255
  800528:	1080201c 	xori	r2,r2,128
  80052c:	10bfe004 	addi	r2,r2,-128
  800530:	1000061e 	bne	r2,zero,80054c <logic+0x2bc>
  800534:	e0bffc17 	ldw	r2,-16(fp)
  800538:	10803943 	ldbu	r2,229(r2)
  80053c:	10803fcc 	andi	r2,r2,255
  800540:	1080201c 	xori	r2,r2,128
  800544:	10bfe004 	addi	r2,r2,-128
  800548:	10000226 	beq	r2,zero,800554 <logic+0x2c4>
  80054c:	00800044 	movi	r2,1
  800550:	00000106 	br	800558 <logic+0x2c8>
  800554:	0005883a 	mov	r2,zero
  800558:	1007883a 	mov	r3,r2
  80055c:	e0bffc17 	ldw	r2,-16(fp)
  800560:	10c03945 	stb	r3,229(r2)
  d->_cg11 = d->_region0_VRefrac_t < d->T_VRP;
  800564:	e0bffc17 	ldw	r2,-16(fp)
  800568:	14002117 	ldw	r16,132(r2)
  80056c:	14402217 	ldw	r17,136(r2)
  800570:	e0bffc17 	ldw	r2,-16(fp)
  800574:	10800417 	ldw	r2,16(r2)
  800578:	1009883a 	mov	r4,r2
  80057c:	0808e200 	call	808e20 <__floatsidf>
  800580:	1009883a 	mov	r4,r2
  800584:	180b883a 	mov	r5,r3
  800588:	04800044 	movi	r18,1
  80058c:	200d883a 	mov	r6,r4
  800590:	280f883a 	mov	r7,r5
  800594:	8009883a 	mov	r4,r16
  800598:	880b883a 	mov	r5,r17
  80059c:	0807d180 	call	807d18 <__ledf2>
  8005a0:	10000116 	blt	r2,zero,8005a8 <logic+0x318>
  8005a4:	0025883a 	mov	r18,zero
  8005a8:	9007883a 	mov	r3,r18
  8005ac:	e0bffc17 	ldw	r2,-16(fp)
  8005b0:	10c05985 	stb	r3,358(r2)
  d->_g10 = d->_g16 && d->_cg11;
  8005b4:	e0bffc17 	ldw	r2,-16(fp)
  8005b8:	10803943 	ldbu	r2,229(r2)
  8005bc:	10803fcc 	andi	r2,r2,255
  8005c0:	1080201c 	xori	r2,r2,128
  8005c4:	10bfe004 	addi	r2,r2,-128
  8005c8:	10000826 	beq	r2,zero,8005ec <logic+0x35c>
  8005cc:	e0bffc17 	ldw	r2,-16(fp)
  8005d0:	10805983 	ldbu	r2,358(r2)
  8005d4:	10803fcc 	andi	r2,r2,255
  8005d8:	1080201c 	xori	r2,r2,128
  8005dc:	10bfe004 	addi	r2,r2,-128
  8005e0:	10000226 	beq	r2,zero,8005ec <logic+0x35c>
  8005e4:	00800044 	movi	r2,1
  8005e8:	00000106 	br	8005f0 <logic+0x360>
  8005ec:	0005883a 	mov	r2,zero
  8005f0:	1007883a 	mov	r3,r2
  8005f4:	e0bffc17 	ldw	r2,-16(fp)
  8005f8:	10c03805 	stb	r3,224(r2)
  if (d->_g10) {
  8005fc:	e0bffc17 	ldw	r2,-16(fp)
  800600:	10803803 	ldbu	r2,224(r2)
  800604:	10803fcc 	andi	r2,r2,255
  800608:	1080201c 	xori	r2,r2,128
  80060c:	10bfe004 	addi	r2,r2,-128
  800610:	10003426 	beq	r2,zero,8006e4 <logic+0x454>
    d->sleepT = (d->sleepT < (d->T_VRP - d->_region0_VRefrac_t)) ? d->sleepT : (d->T_VRP - d->_region0_VRefrac_t);
  800614:	e0bffc17 	ldw	r2,-16(fp)
  800618:	14002f17 	ldw	r16,188(r2)
  80061c:	14403017 	ldw	r17,192(r2)
  800620:	e0bffc17 	ldw	r2,-16(fp)
  800624:	10800417 	ldw	r2,16(r2)
  800628:	1009883a 	mov	r4,r2
  80062c:	0808e200 	call	808e20 <__floatsidf>
  800630:	1011883a 	mov	r8,r2
  800634:	1813883a 	mov	r9,r3
  800638:	e13ffc17 	ldw	r4,-16(fp)
  80063c:	20802117 	ldw	r2,132(r4)
  800640:	20c02217 	ldw	r3,136(r4)
  800644:	100d883a 	mov	r6,r2
  800648:	180f883a 	mov	r7,r3
  80064c:	4009883a 	mov	r4,r8
  800650:	480b883a 	mov	r5,r9
  800654:	08085240 	call	808524 <__subdf3>
  800658:	1009883a 	mov	r4,r2
  80065c:	180b883a 	mov	r5,r3
  800660:	2005883a 	mov	r2,r4
  800664:	2807883a 	mov	r3,r5
  800668:	100d883a 	mov	r6,r2
  80066c:	180f883a 	mov	r7,r3
  800670:	8009883a 	mov	r4,r16
  800674:	880b883a 	mov	r5,r17
  800678:	0807d180 	call	807d18 <__ledf2>
  80067c:	1000040e 	bge	r2,zero,800690 <logic+0x400>
  800680:	e13ffc17 	ldw	r4,-16(fp)
  800684:	20802f17 	ldw	r2,188(r4)
  800688:	20c03017 	ldw	r3,192(r4)
  80068c:	00001206 	br	8006d8 <logic+0x448>
  800690:	e0bffc17 	ldw	r2,-16(fp)
  800694:	10800417 	ldw	r2,16(r2)
  800698:	1009883a 	mov	r4,r2
  80069c:	0808e200 	call	808e20 <__floatsidf>
  8006a0:	1011883a 	mov	r8,r2
  8006a4:	1813883a 	mov	r9,r3
  8006a8:	e13ffc17 	ldw	r4,-16(fp)
  8006ac:	20802117 	ldw	r2,132(r4)
  8006b0:	20c02217 	ldw	r3,136(r4)
  8006b4:	100d883a 	mov	r6,r2
  8006b8:	180f883a 	mov	r7,r3
  8006bc:	4009883a 	mov	r4,r8
  8006c0:	480b883a 	mov	r5,r9
  8006c4:	08085240 	call	808524 <__subdf3>
  8006c8:	1009883a 	mov	r4,r2
  8006cc:	180b883a 	mov	r5,r3
  8006d0:	2005883a 	mov	r2,r4
  8006d4:	2807883a 	mov	r3,r5
  8006d8:	e13ffc17 	ldw	r4,-16(fp)
  8006dc:	20802f15 	stw	r2,188(r4)
  8006e0:	20c03015 	stw	r3,192(r4)
  }
  d->_cg12 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  8006e4:	e0bffc17 	ldw	r2,-16(fp)
  8006e8:	10803403 	ldbu	r2,208(r2)
  8006ec:	10803fcc 	andi	r2,r2,255
  8006f0:	1080201c 	xori	r2,r2,128
  8006f4:	10bfe004 	addi	r2,r2,-128
  8006f8:	1000061e 	bne	r2,zero,800714 <logic+0x484>
  8006fc:	e0bffc17 	ldw	r2,-16(fp)
  800700:	10803443 	ldbu	r2,209(r2)
  800704:	10803fcc 	andi	r2,r2,255
  800708:	1080201c 	xori	r2,r2,128
  80070c:	10bfe004 	addi	r2,r2,-128
  800710:	10000226 	beq	r2,zero,80071c <logic+0x48c>
  800714:	00800044 	movi	r2,1
  800718:	00000106 	br	800720 <logic+0x490>
  80071c:	0005883a 	mov	r2,zero
  800720:	1007883a 	mov	r3,r2
  800724:	e0bffc17 	ldw	r2,-16(fp)
  800728:	10c05945 	stb	r3,357(r2)
  d->_g11 = d->_g16 && !d->_cg11;
  80072c:	e0bffc17 	ldw	r2,-16(fp)
  800730:	10803943 	ldbu	r2,229(r2)
  800734:	10803fcc 	andi	r2,r2,255
  800738:	1080201c 	xori	r2,r2,128
  80073c:	10bfe004 	addi	r2,r2,-128
  800740:	10000826 	beq	r2,zero,800764 <logic+0x4d4>
  800744:	e0bffc17 	ldw	r2,-16(fp)
  800748:	10805983 	ldbu	r2,358(r2)
  80074c:	10803fcc 	andi	r2,r2,255
  800750:	1080201c 	xori	r2,r2,128
  800754:	10bfe004 	addi	r2,r2,-128
  800758:	1000021e 	bne	r2,zero,800764 <logic+0x4d4>
  80075c:	00800044 	movi	r2,1
  800760:	00000106 	br	800768 <logic+0x4d8>
  800764:	0005883a 	mov	r2,zero
  800768:	1007883a 	mov	r3,r2
  80076c:	e0bffc17 	ldw	r2,-16(fp)
  800770:	10c03845 	stb	r3,225(r2)
  d->_cg14 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  800774:	e0bffc17 	ldw	r2,-16(fp)
  800778:	10803403 	ldbu	r2,208(r2)
  80077c:	10803fcc 	andi	r2,r2,255
  800780:	1080201c 	xori	r2,r2,128
  800784:	10bfe004 	addi	r2,r2,-128
  800788:	1000061e 	bne	r2,zero,8007a4 <logic+0x514>
  80078c:	e0bffc17 	ldw	r2,-16(fp)
  800790:	10803443 	ldbu	r2,209(r2)
  800794:	10803fcc 	andi	r2,r2,255
  800798:	1080201c 	xori	r2,r2,128
  80079c:	10bfe004 	addi	r2,r2,-128
  8007a0:	10000226 	beq	r2,zero,8007ac <logic+0x51c>
  8007a4:	00800044 	movi	r2,1
  8007a8:	00000106 	br	8007b0 <logic+0x520>
  8007ac:	0005883a 	mov	r2,zero
  8007b0:	1007883a 	mov	r3,r2
  8007b4:	e0bffc17 	ldw	r2,-16(fp)
  8007b8:	10c059c5 	stb	r3,359(r2)
  d->_g13 = d->_g10 && d->_cg12 || d->_g11 && d->_cg14;
  8007bc:	e0bffc17 	ldw	r2,-16(fp)
  8007c0:	10803803 	ldbu	r2,224(r2)
  8007c4:	10803fcc 	andi	r2,r2,255
  8007c8:	1080201c 	xori	r2,r2,128
  8007cc:	10bfe004 	addi	r2,r2,-128
  8007d0:	10000626 	beq	r2,zero,8007ec <logic+0x55c>
  8007d4:	e0bffc17 	ldw	r2,-16(fp)
  8007d8:	10805943 	ldbu	r2,357(r2)
  8007dc:	10803fcc 	andi	r2,r2,255
  8007e0:	1080201c 	xori	r2,r2,128
  8007e4:	10bfe004 	addi	r2,r2,-128
  8007e8:	10000c1e 	bne	r2,zero,80081c <logic+0x58c>
  8007ec:	e0bffc17 	ldw	r2,-16(fp)
  8007f0:	10803843 	ldbu	r2,225(r2)
  8007f4:	10803fcc 	andi	r2,r2,255
  8007f8:	1080201c 	xori	r2,r2,128
  8007fc:	10bfe004 	addi	r2,r2,-128
  800800:	10000826 	beq	r2,zero,800824 <logic+0x594>
  800804:	e0bffc17 	ldw	r2,-16(fp)
  800808:	108059c3 	ldbu	r2,359(r2)
  80080c:	10803fcc 	andi	r2,r2,255
  800810:	1080201c 	xori	r2,r2,128
  800814:	10bfe004 	addi	r2,r2,-128
  800818:	10000226 	beq	r2,zero,800824 <logic+0x594>
  80081c:	00800044 	movi	r2,1
  800820:	00000106 	br	800828 <logic+0x598>
  800824:	0005883a 	mov	r2,zero
  800828:	1007883a 	mov	r3,r2
  80082c:	e0bffc17 	ldw	r2,-16(fp)
  800830:	10c038c5 	stb	r3,227(r2)
  d->_g20 = !d->_g20;
  800834:	e0bffc17 	ldw	r2,-16(fp)
  800838:	108039c3 	ldbu	r2,231(r2)
  80083c:	10803fcc 	andi	r2,r2,255
  800840:	1080201c 	xori	r2,r2,128
  800844:	10bfe004 	addi	r2,r2,-128
  800848:	1005003a 	cmpeq	r2,r2,zero
  80084c:	1007883a 	mov	r3,r2
  800850:	e0bffc17 	ldw	r2,-16(fp)
  800854:	10c039c5 	stb	r3,231(r2)
  d->_g24 = d->_g21 || d->_g24;
  800858:	e0bffc17 	ldw	r2,-16(fp)
  80085c:	10803a03 	ldbu	r2,232(r2)
  800860:	10803fcc 	andi	r2,r2,255
  800864:	1080201c 	xori	r2,r2,128
  800868:	10bfe004 	addi	r2,r2,-128
  80086c:	1000061e 	bne	r2,zero,800888 <logic+0x5f8>
  800870:	e0bffc17 	ldw	r2,-16(fp)
  800874:	10803ac3 	ldbu	r2,235(r2)
  800878:	10803fcc 	andi	r2,r2,255
  80087c:	1080201c 	xori	r2,r2,128
  800880:	10bfe004 	addi	r2,r2,-128
  800884:	10000226 	beq	r2,zero,800890 <logic+0x600>
  800888:	00800044 	movi	r2,1
  80088c:	00000106 	br	800894 <logic+0x604>
  800890:	0005883a 	mov	r2,zero
  800894:	1007883a 	mov	r3,r2
  800898:	e0bffc17 	ldw	r2,-16(fp)
  80089c:	10c03ac5 	stb	r3,235(r2)
  d->_g21 = (d->_g13_e1 || d->_g13) && (d->_g20 || d->_g24) && (d->_g13 || d->_g24);
  8008a0:	e0bffc17 	ldw	r2,-16(fp)
  8008a4:	10806783 	ldbu	r2,414(r2)
  8008a8:	10803fcc 	andi	r2,r2,255
  8008ac:	1080201c 	xori	r2,r2,128
  8008b0:	10bfe004 	addi	r2,r2,-128
  8008b4:	1000061e 	bne	r2,zero,8008d0 <logic+0x640>
  8008b8:	e0bffc17 	ldw	r2,-16(fp)
  8008bc:	108038c3 	ldbu	r2,227(r2)
  8008c0:	10803fcc 	andi	r2,r2,255
  8008c4:	1080201c 	xori	r2,r2,128
  8008c8:	10bfe004 	addi	r2,r2,-128
  8008cc:	10001a26 	beq	r2,zero,800938 <logic+0x6a8>
  8008d0:	e0bffc17 	ldw	r2,-16(fp)
  8008d4:	108039c3 	ldbu	r2,231(r2)
  8008d8:	10803fcc 	andi	r2,r2,255
  8008dc:	1080201c 	xori	r2,r2,128
  8008e0:	10bfe004 	addi	r2,r2,-128
  8008e4:	1000061e 	bne	r2,zero,800900 <logic+0x670>
  8008e8:	e0bffc17 	ldw	r2,-16(fp)
  8008ec:	10803ac3 	ldbu	r2,235(r2)
  8008f0:	10803fcc 	andi	r2,r2,255
  8008f4:	1080201c 	xori	r2,r2,128
  8008f8:	10bfe004 	addi	r2,r2,-128
  8008fc:	10000e26 	beq	r2,zero,800938 <logic+0x6a8>
  800900:	e0bffc17 	ldw	r2,-16(fp)
  800904:	108038c3 	ldbu	r2,227(r2)
  800908:	10803fcc 	andi	r2,r2,255
  80090c:	1080201c 	xori	r2,r2,128
  800910:	10bfe004 	addi	r2,r2,-128
  800914:	1000061e 	bne	r2,zero,800930 <logic+0x6a0>
  800918:	e0bffc17 	ldw	r2,-16(fp)
  80091c:	10803ac3 	ldbu	r2,235(r2)
  800920:	10803fcc 	andi	r2,r2,255
  800924:	1080201c 	xori	r2,r2,128
  800928:	10bfe004 	addi	r2,r2,-128
  80092c:	10000226 	beq	r2,zero,800938 <logic+0x6a8>
  800930:	00800044 	movi	r2,1
  800934:	00000106 	br	80093c <logic+0x6ac>
  800938:	0005883a 	mov	r2,zero
  80093c:	1007883a 	mov	r3,r2
  800940:	e0bffc17 	ldw	r2,-16(fp)
  800944:	10c03a05 	stb	r3,232(r2)
  d->_cg25 = d->_Pacemaker_local__Atrig;
  800948:	e0bffc17 	ldw	r2,-16(fp)
  80094c:	10c03403 	ldbu	r3,208(r2)
  800950:	e0bffc17 	ldw	r2,-16(fp)
  800954:	10c05ac5 	stb	r3,363(r2)
  d->_g22 = d->_g21 && !d->_cg25;
  800958:	e0bffc17 	ldw	r2,-16(fp)
  80095c:	10803a03 	ldbu	r2,232(r2)
  800960:	10803fcc 	andi	r2,r2,255
  800964:	1080201c 	xori	r2,r2,128
  800968:	10bfe004 	addi	r2,r2,-128
  80096c:	10000826 	beq	r2,zero,800990 <logic+0x700>
  800970:	e0bffc17 	ldw	r2,-16(fp)
  800974:	10805ac3 	ldbu	r2,363(r2)
  800978:	10803fcc 	andi	r2,r2,255
  80097c:	1080201c 	xori	r2,r2,128
  800980:	10bfe004 	addi	r2,r2,-128
  800984:	1000021e 	bne	r2,zero,800990 <logic+0x700>
  800988:	00800044 	movi	r2,1
  80098c:	00000106 	br	800994 <logic+0x704>
  800990:	0005883a 	mov	r2,zero
  800994:	1007883a 	mov	r3,r2
  800998:	e0bffc17 	ldw	r2,-16(fp)
  80099c:	10c03a45 	stb	r3,233(r2)
  if (d->_g22) {
  8009a0:	e0bffc17 	ldw	r2,-16(fp)
  8009a4:	10803a43 	ldbu	r2,233(r2)
  8009a8:	10803fcc 	andi	r2,r2,255
  8009ac:	1080201c 	xori	r2,r2,128
  8009b0:	10bfe004 	addi	r2,r2,-128
  8009b4:	10000526 	beq	r2,zero,8009cc <logic+0x73c>
    d->_taken_transitions[3] += 1;
  8009b8:	e0bffc17 	ldw	r2,-16(fp)
  8009bc:	10800a17 	ldw	r2,40(r2)
  8009c0:	10c00044 	addi	r3,r2,1
  8009c4:	e0bffc17 	ldw	r2,-16(fp)
  8009c8:	10c00a15 	stw	r3,40(r2)
  }
  d->_g13 = d->_pg13_e1;
  8009cc:	e0bffc17 	ldw	r2,-16(fp)
  8009d0:	10c06bc3 	ldbu	r3,431(r2)
  8009d4:	e0bffc17 	ldw	r2,-16(fp)
  8009d8:	10c038c5 	stb	r3,227(r2)
  d->_g13_e1 = d->_GO || d->_g13;
  8009dc:	e0bffc17 	ldw	r2,-16(fp)
  8009e0:	10805803 	ldbu	r2,352(r2)
  8009e4:	10803fcc 	andi	r2,r2,255
  8009e8:	1080201c 	xori	r2,r2,128
  8009ec:	10bfe004 	addi	r2,r2,-128
  8009f0:	1000061e 	bne	r2,zero,800a0c <logic+0x77c>
  8009f4:	e0bffc17 	ldw	r2,-16(fp)
  8009f8:	108038c3 	ldbu	r2,227(r2)
  8009fc:	10803fcc 	andi	r2,r2,255
  800a00:	1080201c 	xori	r2,r2,128
  800a04:	10bfe004 	addi	r2,r2,-128
  800a08:	10000226 	beq	r2,zero,800a14 <logic+0x784>
  800a0c:	00800044 	movi	r2,1
  800a10:	00000106 	br	800a18 <logic+0x788>
  800a14:	0005883a 	mov	r2,zero
  800a18:	1007883a 	mov	r3,r2
  800a1c:	e0bffc17 	ldw	r2,-16(fp)
  800a20:	10c06785 	stb	r3,414(r2)
  if (d->_g13_e1) {
  800a24:	e0bffc17 	ldw	r2,-16(fp)
  800a28:	10806783 	ldbu	r2,414(r2)
  800a2c:	10803fcc 	andi	r2,r2,255
  800a30:	1080201c 	xori	r2,r2,128
  800a34:	10bfe004 	addi	r2,r2,-128
  800a38:	10000426 	beq	r2,zero,800a4c <logic+0x7bc>
    d->_pre_VP = d->_reg_VP;
  800a3c:	e0bffc17 	ldw	r2,-16(fp)
  800a40:	10c03383 	ldbu	r3,206(r2)
  800a44:	e0bffc17 	ldw	r2,-16(fp)
  800a48:	10c033c5 	stb	r3,207(r2)
  }
  d->_g22_e2 = d->_pg27;
  800a4c:	e0bffc17 	ldw	r2,-16(fp)
  800a50:	10c06c03 	ldbu	r3,432(r2)
  800a54:	e0bffc17 	ldw	r2,-16(fp)
  800a58:	10c067c5 	stb	r3,415(r2)
  d->_g217 = d->_g22_e2 && !d->VS;
  800a5c:	e0bffc17 	ldw	r2,-16(fp)
  800a60:	108067c3 	ldbu	r2,415(r2)
  800a64:	10803fcc 	andi	r2,r2,255
  800a68:	1080201c 	xori	r2,r2,128
  800a6c:	10bfe004 	addi	r2,r2,-128
  800a70:	10000826 	beq	r2,zero,800a94 <logic+0x804>
  800a74:	e0bffc17 	ldw	r2,-16(fp)
  800a78:	10803143 	ldbu	r2,197(r2)
  800a7c:	10803fcc 	andi	r2,r2,255
  800a80:	1080201c 	xori	r2,r2,128
  800a84:	10bfe004 	addi	r2,r2,-128
  800a88:	1000021e 	bne	r2,zero,800a94 <logic+0x804>
  800a8c:	00800044 	movi	r2,1
  800a90:	00000106 	br	800a98 <logic+0x808>
  800a94:	0005883a 	mov	r2,zero
  800a98:	1007883a 	mov	r3,r2
  800a9c:	e0bffc17 	ldw	r2,-16(fp)
  800aa0:	10c057c5 	stb	r3,351(r2)
  d->_cg28 = d->_pre_VP;
  800aa4:	e0bffc17 	ldw	r2,-16(fp)
  800aa8:	10c033c3 	ldbu	r3,207(r2)
  800aac:	e0bffc17 	ldw	r2,-16(fp)
  800ab0:	10c05845 	stb	r3,353(r2)
  d->_g27 = d->_GO || d->_g22 || d->_g217 && !d->_cg28;
  800ab4:	e0bffc17 	ldw	r2,-16(fp)
  800ab8:	10805803 	ldbu	r2,352(r2)
  800abc:	10803fcc 	andi	r2,r2,255
  800ac0:	1080201c 	xori	r2,r2,128
  800ac4:	10bfe004 	addi	r2,r2,-128
  800ac8:	1000121e 	bne	r2,zero,800b14 <logic+0x884>
  800acc:	e0bffc17 	ldw	r2,-16(fp)
  800ad0:	10803a43 	ldbu	r2,233(r2)
  800ad4:	10803fcc 	andi	r2,r2,255
  800ad8:	1080201c 	xori	r2,r2,128
  800adc:	10bfe004 	addi	r2,r2,-128
  800ae0:	10000c1e 	bne	r2,zero,800b14 <logic+0x884>
  800ae4:	e0bffc17 	ldw	r2,-16(fp)
  800ae8:	108057c3 	ldbu	r2,351(r2)
  800aec:	10803fcc 	andi	r2,r2,255
  800af0:	1080201c 	xori	r2,r2,128
  800af4:	10bfe004 	addi	r2,r2,-128
  800af8:	10000826 	beq	r2,zero,800b1c <logic+0x88c>
  800afc:	e0bffc17 	ldw	r2,-16(fp)
  800b00:	10805843 	ldbu	r2,353(r2)
  800b04:	10803fcc 	andi	r2,r2,255
  800b08:	1080201c 	xori	r2,r2,128
  800b0c:	10bfe004 	addi	r2,r2,-128
  800b10:	1000021e 	bne	r2,zero,800b1c <logic+0x88c>
  800b14:	00800044 	movi	r2,1
  800b18:	00000106 	br	800b20 <logic+0x890>
  800b1c:	0005883a 	mov	r2,zero
  800b20:	1007883a 	mov	r3,r2
  800b24:	e0bffc17 	ldw	r2,-16(fp)
  800b28:	10c03b85 	stb	r3,238(r2)
  d->AP = 0;
  800b2c:	e0bffc17 	ldw	r2,-16(fp)
  800b30:	10003185 	stb	zero,198(r2)
  d->VP = 0;
  800b34:	e0bffc17 	ldw	r2,-16(fp)
  800b38:	100031c5 	stb	zero,199(r2)
  d->A_EVT = 0;
  800b3c:	e0bffc17 	ldw	r2,-16(fp)
  800b40:	10003205 	stb	zero,200(r2)
  d->V_EVT = 0;
  800b44:	e0bffc17 	ldw	r2,-16(fp)
  800b48:	10003245 	stb	zero,201(r2)
  d->A_REFR = 0;
  800b4c:	e0bffc17 	ldw	r2,-16(fp)
  800b50:	10003285 	stb	zero,202(r2)
  d->V_REFR = 0;
  800b54:	e0bffc17 	ldw	r2,-16(fp)
  800b58:	100032c5 	stb	zero,203(r2)
  d->_g4 = d->_g22_e2 && d->VS;
  800b5c:	e0bffc17 	ldw	r2,-16(fp)
  800b60:	108067c3 	ldbu	r2,415(r2)
  800b64:	10803fcc 	andi	r2,r2,255
  800b68:	1080201c 	xori	r2,r2,128
  800b6c:	10bfe004 	addi	r2,r2,-128
  800b70:	10000826 	beq	r2,zero,800b94 <logic+0x904>
  800b74:	e0bffc17 	ldw	r2,-16(fp)
  800b78:	10803143 	ldbu	r2,197(r2)
  800b7c:	10803fcc 	andi	r2,r2,255
  800b80:	1080201c 	xori	r2,r2,128
  800b84:	10bfe004 	addi	r2,r2,-128
  800b88:	10000226 	beq	r2,zero,800b94 <logic+0x904>
  800b8c:	00800044 	movi	r2,1
  800b90:	00000106 	br	800b98 <logic+0x908>
  800b94:	0005883a 	mov	r2,zero
  800b98:	1007883a 	mov	r3,r2
  800b9c:	e0bffc17 	ldw	r2,-16(fp)
  800ba0:	10c03705 	stb	r3,220(r2)
  if (d->_g4) {
  800ba4:	e0bffc17 	ldw	r2,-16(fp)
  800ba8:	10803703 	ldbu	r2,220(r2)
  800bac:	10803fcc 	andi	r2,r2,255
  800bb0:	1080201c 	xori	r2,r2,128
  800bb4:	10bfe004 	addi	r2,r2,-128
  800bb8:	10000e26 	beq	r2,zero,800bf4 <logic+0x964>
    d->V_EVT |= 1;
  800bbc:	e0bffc17 	ldw	r2,-16(fp)
  800bc0:	10803243 	ldbu	r2,201(r2)
  800bc4:	10800054 	ori	r2,r2,1
  800bc8:	1007883a 	mov	r3,r2
  800bcc:	e0bffc17 	ldw	r2,-16(fp)
  800bd0:	10c03245 	stb	r3,201(r2)
    d->_region0_VRefrac_t = 0;
  800bd4:	e0bffc17 	ldw	r2,-16(fp)
  800bd8:	10002115 	stw	zero,132(r2)
  800bdc:	10002215 	stw	zero,136(r2)
    d->_taken_transitions[0] += 1;
  800be0:	e0bffc17 	ldw	r2,-16(fp)
  800be4:	10800717 	ldw	r2,28(r2)
  800be8:	10c00044 	addi	r3,r2,1
  800bec:	e0bffc17 	ldw	r2,-16(fp)
  800bf0:	10c00715 	stw	r3,28(r2)
  }
  d->_g25 = d->_g21 && d->_cg25;
  800bf4:	e0bffc17 	ldw	r2,-16(fp)
  800bf8:	10803a03 	ldbu	r2,232(r2)
  800bfc:	10803fcc 	andi	r2,r2,255
  800c00:	1080201c 	xori	r2,r2,128
  800c04:	10bfe004 	addi	r2,r2,-128
  800c08:	10000826 	beq	r2,zero,800c2c <logic+0x99c>
  800c0c:	e0bffc17 	ldw	r2,-16(fp)
  800c10:	10805ac3 	ldbu	r2,363(r2)
  800c14:	10803fcc 	andi	r2,r2,255
  800c18:	1080201c 	xori	r2,r2,128
  800c1c:	10bfe004 	addi	r2,r2,-128
  800c20:	10000226 	beq	r2,zero,800c2c <logic+0x99c>
  800c24:	00800044 	movi	r2,1
  800c28:	00000106 	br	800c30 <logic+0x9a0>
  800c2c:	0005883a 	mov	r2,zero
  800c30:	1007883a 	mov	r3,r2
  800c34:	e0bffc17 	ldw	r2,-16(fp)
  800c38:	10c03b05 	stb	r3,236(r2)
  if (d->_g25) {
  800c3c:	e0bffc17 	ldw	r2,-16(fp)
  800c40:	10803b03 	ldbu	r2,236(r2)
  800c44:	10803fcc 	andi	r2,r2,255
  800c48:	1080201c 	xori	r2,r2,128
  800c4c:	10bfe004 	addi	r2,r2,-128
  800c50:	10000b26 	beq	r2,zero,800c80 <logic+0x9f0>
    d->V_REFR |= 1;
  800c54:	e0bffc17 	ldw	r2,-16(fp)
  800c58:	108032c3 	ldbu	r2,203(r2)
  800c5c:	10800054 	ori	r2,r2,1
  800c60:	1007883a 	mov	r3,r2
  800c64:	e0bffc17 	ldw	r2,-16(fp)
  800c68:	10c032c5 	stb	r3,203(r2)
    d->_taken_transitions[2] += 1;
  800c6c:	e0bffc17 	ldw	r2,-16(fp)
  800c70:	10800917 	ldw	r2,36(r2)
  800c74:	10c00044 	addi	r3,r2,1
  800c78:	e0bffc17 	ldw	r2,-16(fp)
  800c7c:	10c00915 	stw	r3,36(r2)
  }
  d->_g28 = d->_g217 && d->_cg28;
  800c80:	e0bffc17 	ldw	r2,-16(fp)
  800c84:	108057c3 	ldbu	r2,351(r2)
  800c88:	10803fcc 	andi	r2,r2,255
  800c8c:	1080201c 	xori	r2,r2,128
  800c90:	10bfe004 	addi	r2,r2,-128
  800c94:	10000826 	beq	r2,zero,800cb8 <logic+0xa28>
  800c98:	e0bffc17 	ldw	r2,-16(fp)
  800c9c:	10805843 	ldbu	r2,353(r2)
  800ca0:	10803fcc 	andi	r2,r2,255
  800ca4:	1080201c 	xori	r2,r2,128
  800ca8:	10bfe004 	addi	r2,r2,-128
  800cac:	10000226 	beq	r2,zero,800cb8 <logic+0xa28>
  800cb0:	00800044 	movi	r2,1
  800cb4:	00000106 	br	800cbc <logic+0xa2c>
  800cb8:	0005883a 	mov	r2,zero
  800cbc:	1007883a 	mov	r3,r2
  800cc0:	e0bffc17 	ldw	r2,-16(fp)
  800cc4:	10c03bc5 	stb	r3,239(r2)
  if (d->_g28) {
  800cc8:	e0bffc17 	ldw	r2,-16(fp)
  800ccc:	10803bc3 	ldbu	r2,239(r2)
  800cd0:	10803fcc 	andi	r2,r2,255
  800cd4:	1080201c 	xori	r2,r2,128
  800cd8:	10bfe004 	addi	r2,r2,-128
  800cdc:	10000e26 	beq	r2,zero,800d18 <logic+0xa88>
    d->V_EVT |= 1;
  800ce0:	e0bffc17 	ldw	r2,-16(fp)
  800ce4:	10803243 	ldbu	r2,201(r2)
  800ce8:	10800054 	ori	r2,r2,1
  800cec:	1007883a 	mov	r3,r2
  800cf0:	e0bffc17 	ldw	r2,-16(fp)
  800cf4:	10c03245 	stb	r3,201(r2)
    d->_region0_VRefrac_t = 0;
  800cf8:	e0bffc17 	ldw	r2,-16(fp)
  800cfc:	10002115 	stw	zero,132(r2)
  800d00:	10002215 	stw	zero,136(r2)
    d->_taken_transitions[1] += 1;
  800d04:	e0bffc17 	ldw	r2,-16(fp)
  800d08:	10800817 	ldw	r2,32(r2)
  800d0c:	10c00044 	addi	r3,r2,1
  800d10:	e0bffc17 	ldw	r2,-16(fp)
  800d14:	10c00815 	stw	r3,32(r2)
  }
  d->_g26 = d->_g4 || d->_g25 || d->_g28;
  800d18:	e0bffc17 	ldw	r2,-16(fp)
  800d1c:	10803703 	ldbu	r2,220(r2)
  800d20:	10803fcc 	andi	r2,r2,255
  800d24:	1080201c 	xori	r2,r2,128
  800d28:	10bfe004 	addi	r2,r2,-128
  800d2c:	10000c1e 	bne	r2,zero,800d60 <logic+0xad0>
  800d30:	e0bffc17 	ldw	r2,-16(fp)
  800d34:	10803b03 	ldbu	r2,236(r2)
  800d38:	10803fcc 	andi	r2,r2,255
  800d3c:	1080201c 	xori	r2,r2,128
  800d40:	10bfe004 	addi	r2,r2,-128
  800d44:	1000061e 	bne	r2,zero,800d60 <logic+0xad0>
  800d48:	e0bffc17 	ldw	r2,-16(fp)
  800d4c:	10803bc3 	ldbu	r2,239(r2)
  800d50:	10803fcc 	andi	r2,r2,255
  800d54:	1080201c 	xori	r2,r2,128
  800d58:	10bfe004 	addi	r2,r2,-128
  800d5c:	10000226 	beq	r2,zero,800d68 <logic+0xad8>
  800d60:	00800044 	movi	r2,1
  800d64:	00000106 	br	800d6c <logic+0xadc>
  800d68:	0005883a 	mov	r2,zero
  800d6c:	1007883a 	mov	r3,r2
  800d70:	e0bffc17 	ldw	r2,-16(fp)
  800d74:	10c03b45 	stb	r3,237(r2)
  if (d->_g26) {
  800d78:	e0bffc17 	ldw	r2,-16(fp)
  800d7c:	10803b43 	ldbu	r2,237(r2)
  800d80:	10803fcc 	andi	r2,r2,255
  800d84:	1080201c 	xori	r2,r2,128
  800d88:	10bfe004 	addi	r2,r2,-128
  800d8c:	10000426 	beq	r2,zero,800da0 <logic+0xb10>
    d->_Pacemaker_local__Atrig = 0;
  800d90:	e0bffc17 	ldw	r2,-16(fp)
  800d94:	10003405 	stb	zero,208(r2)
    d->_Pacemaker_local__Atrig1 = 0;
  800d98:	e0bffc17 	ldw	r2,-16(fp)
  800d9c:	10003445 	stb	zero,209(r2)
  }
  d->_cg7 = d->_region0_VRefrac_t < d->T_VRP;
  800da0:	e0bffc17 	ldw	r2,-16(fp)
  800da4:	14002117 	ldw	r16,132(r2)
  800da8:	14402217 	ldw	r17,136(r2)
  800dac:	e0bffc17 	ldw	r2,-16(fp)
  800db0:	10800417 	ldw	r2,16(r2)
  800db4:	1009883a 	mov	r4,r2
  800db8:	0808e200 	call	808e20 <__floatsidf>
  800dbc:	1009883a 	mov	r4,r2
  800dc0:	180b883a 	mov	r5,r3
  800dc4:	04800044 	movi	r18,1
  800dc8:	200d883a 	mov	r6,r4
  800dcc:	280f883a 	mov	r7,r5
  800dd0:	8009883a 	mov	r4,r16
  800dd4:	880b883a 	mov	r5,r17
  800dd8:	0807d180 	call	807d18 <__ledf2>
  800ddc:	10000116 	blt	r2,zero,800de4 <logic+0xb54>
  800de0:	0025883a 	mov	r18,zero
  800de4:	9007883a 	mov	r3,r18
  800de8:	e0bffc17 	ldw	r2,-16(fp)
  800dec:	10c058c5 	stb	r3,355(r2)
  d->_g5 = d->_g26 && d->_cg7;
  800df0:	e0bffc17 	ldw	r2,-16(fp)
  800df4:	10803b43 	ldbu	r2,237(r2)
  800df8:	10803fcc 	andi	r2,r2,255
  800dfc:	1080201c 	xori	r2,r2,128
  800e00:	10bfe004 	addi	r2,r2,-128
  800e04:	10000826 	beq	r2,zero,800e28 <logic+0xb98>
  800e08:	e0bffc17 	ldw	r2,-16(fp)
  800e0c:	108058c3 	ldbu	r2,355(r2)
  800e10:	10803fcc 	andi	r2,r2,255
  800e14:	1080201c 	xori	r2,r2,128
  800e18:	10bfe004 	addi	r2,r2,-128
  800e1c:	10000226 	beq	r2,zero,800e28 <logic+0xb98>
  800e20:	00800044 	movi	r2,1
  800e24:	00000106 	br	800e2c <logic+0xb9c>
  800e28:	0005883a 	mov	r2,zero
  800e2c:	1007883a 	mov	r3,r2
  800e30:	e0bffc17 	ldw	r2,-16(fp)
  800e34:	10c03745 	stb	r3,221(r2)
  if (d->_g5) {
  800e38:	e0bffc17 	ldw	r2,-16(fp)
  800e3c:	10803743 	ldbu	r2,221(r2)
  800e40:	10803fcc 	andi	r2,r2,255
  800e44:	1080201c 	xori	r2,r2,128
  800e48:	10bfe004 	addi	r2,r2,-128
  800e4c:	10003426 	beq	r2,zero,800f20 <logic+0xc90>
    d->sleepT = (d->sleepT < (d->T_VRP - d->_region0_VRefrac_t)) ? d->sleepT : (d->T_VRP - d->_region0_VRefrac_t);
  800e50:	e0bffc17 	ldw	r2,-16(fp)
  800e54:	14002f17 	ldw	r16,188(r2)
  800e58:	14403017 	ldw	r17,192(r2)
  800e5c:	e0bffc17 	ldw	r2,-16(fp)
  800e60:	10800417 	ldw	r2,16(r2)
  800e64:	1009883a 	mov	r4,r2
  800e68:	0808e200 	call	808e20 <__floatsidf>
  800e6c:	1011883a 	mov	r8,r2
  800e70:	1813883a 	mov	r9,r3
  800e74:	e13ffc17 	ldw	r4,-16(fp)
  800e78:	20802117 	ldw	r2,132(r4)
  800e7c:	20c02217 	ldw	r3,136(r4)
  800e80:	100d883a 	mov	r6,r2
  800e84:	180f883a 	mov	r7,r3
  800e88:	4009883a 	mov	r4,r8
  800e8c:	480b883a 	mov	r5,r9
  800e90:	08085240 	call	808524 <__subdf3>
  800e94:	1009883a 	mov	r4,r2
  800e98:	180b883a 	mov	r5,r3
  800e9c:	2005883a 	mov	r2,r4
  800ea0:	2807883a 	mov	r3,r5
  800ea4:	100d883a 	mov	r6,r2
  800ea8:	180f883a 	mov	r7,r3
  800eac:	8009883a 	mov	r4,r16
  800eb0:	880b883a 	mov	r5,r17
  800eb4:	0807d180 	call	807d18 <__ledf2>
  800eb8:	1000040e 	bge	r2,zero,800ecc <logic+0xc3c>
  800ebc:	e13ffc17 	ldw	r4,-16(fp)
  800ec0:	20802f17 	ldw	r2,188(r4)
  800ec4:	20c03017 	ldw	r3,192(r4)
  800ec8:	00001206 	br	800f14 <logic+0xc84>
  800ecc:	e0bffc17 	ldw	r2,-16(fp)
  800ed0:	10800417 	ldw	r2,16(r2)
  800ed4:	1009883a 	mov	r4,r2
  800ed8:	0808e200 	call	808e20 <__floatsidf>
  800edc:	1011883a 	mov	r8,r2
  800ee0:	1813883a 	mov	r9,r3
  800ee4:	e13ffc17 	ldw	r4,-16(fp)
  800ee8:	20802117 	ldw	r2,132(r4)
  800eec:	20c02217 	ldw	r3,136(r4)
  800ef0:	100d883a 	mov	r6,r2
  800ef4:	180f883a 	mov	r7,r3
  800ef8:	4009883a 	mov	r4,r8
  800efc:	480b883a 	mov	r5,r9
  800f00:	08085240 	call	808524 <__subdf3>
  800f04:	1009883a 	mov	r4,r2
  800f08:	180b883a 	mov	r5,r3
  800f0c:	2005883a 	mov	r2,r4
  800f10:	2807883a 	mov	r3,r5
  800f14:	e13ffc17 	ldw	r4,-16(fp)
  800f18:	20802f15 	stw	r2,188(r4)
  800f1c:	20c03015 	stw	r3,192(r4)
  }
  d->_cg8 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  800f20:	e0bffc17 	ldw	r2,-16(fp)
  800f24:	10803403 	ldbu	r2,208(r2)
  800f28:	10803fcc 	andi	r2,r2,255
  800f2c:	1080201c 	xori	r2,r2,128
  800f30:	10bfe004 	addi	r2,r2,-128
  800f34:	1000061e 	bne	r2,zero,800f50 <logic+0xcc0>
  800f38:	e0bffc17 	ldw	r2,-16(fp)
  800f3c:	10803443 	ldbu	r2,209(r2)
  800f40:	10803fcc 	andi	r2,r2,255
  800f44:	1080201c 	xori	r2,r2,128
  800f48:	10bfe004 	addi	r2,r2,-128
  800f4c:	10000226 	beq	r2,zero,800f58 <logic+0xcc8>
  800f50:	00800044 	movi	r2,1
  800f54:	00000106 	br	800f5c <logic+0xccc>
  800f58:	0005883a 	mov	r2,zero
  800f5c:	1007883a 	mov	r3,r2
  800f60:	e0bffc17 	ldw	r2,-16(fp)
  800f64:	10c05905 	stb	r3,356(r2)
  d->_g29 = d->_g5 && !d->_cg8 || d->_g10 && !d->_cg12;
  800f68:	e0bffc17 	ldw	r2,-16(fp)
  800f6c:	10803743 	ldbu	r2,221(r2)
  800f70:	10803fcc 	andi	r2,r2,255
  800f74:	1080201c 	xori	r2,r2,128
  800f78:	10bfe004 	addi	r2,r2,-128
  800f7c:	10000626 	beq	r2,zero,800f98 <logic+0xd08>
  800f80:	e0bffc17 	ldw	r2,-16(fp)
  800f84:	10805903 	ldbu	r2,356(r2)
  800f88:	10803fcc 	andi	r2,r2,255
  800f8c:	1080201c 	xori	r2,r2,128
  800f90:	10bfe004 	addi	r2,r2,-128
  800f94:	10000c26 	beq	r2,zero,800fc8 <logic+0xd38>
  800f98:	e0bffc17 	ldw	r2,-16(fp)
  800f9c:	10803803 	ldbu	r2,224(r2)
  800fa0:	10803fcc 	andi	r2,r2,255
  800fa4:	1080201c 	xori	r2,r2,128
  800fa8:	10bfe004 	addi	r2,r2,-128
  800fac:	10000826 	beq	r2,zero,800fd0 <logic+0xd40>
  800fb0:	e0bffc17 	ldw	r2,-16(fp)
  800fb4:	10805943 	ldbu	r2,357(r2)
  800fb8:	10803fcc 	andi	r2,r2,255
  800fbc:	1080201c 	xori	r2,r2,128
  800fc0:	10bfe004 	addi	r2,r2,-128
  800fc4:	1000021e 	bne	r2,zero,800fd0 <logic+0xd40>
  800fc8:	00800044 	movi	r2,1
  800fcc:	00000106 	br	800fd4 <logic+0xd44>
  800fd0:	0005883a 	mov	r2,zero
  800fd4:	1007883a 	mov	r3,r2
  800fd8:	e0bffc17 	ldw	r2,-16(fp)
  800fdc:	10c03c05 	stb	r3,240(r2)
  d->_g12 = d->_g26 && !d->_cg7;
  800fe0:	e0bffc17 	ldw	r2,-16(fp)
  800fe4:	10803b43 	ldbu	r2,237(r2)
  800fe8:	10803fcc 	andi	r2,r2,255
  800fec:	1080201c 	xori	r2,r2,128
  800ff0:	10bfe004 	addi	r2,r2,-128
  800ff4:	10000826 	beq	r2,zero,801018 <logic+0xd88>
  800ff8:	e0bffc17 	ldw	r2,-16(fp)
  800ffc:	108058c3 	ldbu	r2,355(r2)
  801000:	10803fcc 	andi	r2,r2,255
  801004:	1080201c 	xori	r2,r2,128
  801008:	10bfe004 	addi	r2,r2,-128
  80100c:	1000021e 	bne	r2,zero,801018 <logic+0xd88>
  801010:	00800044 	movi	r2,1
  801014:	00000106 	br	80101c <logic+0xd8c>
  801018:	0005883a 	mov	r2,zero
  80101c:	1007883a 	mov	r3,r2
  801020:	e0bffc17 	ldw	r2,-16(fp)
  801024:	10c03885 	stb	r3,226(r2)
  d->_cg17 = d->_Pacemaker_local__Atrig || d->_Pacemaker_local__Atrig1;
  801028:	e0bffc17 	ldw	r2,-16(fp)
  80102c:	10803403 	ldbu	r2,208(r2)
  801030:	10803fcc 	andi	r2,r2,255
  801034:	1080201c 	xori	r2,r2,128
  801038:	10bfe004 	addi	r2,r2,-128
  80103c:	1000061e 	bne	r2,zero,801058 <logic+0xdc8>
  801040:	e0bffc17 	ldw	r2,-16(fp)
  801044:	10803443 	ldbu	r2,209(r2)
  801048:	10803fcc 	andi	r2,r2,255
  80104c:	1080201c 	xori	r2,r2,128
  801050:	10bfe004 	addi	r2,r2,-128
  801054:	10000226 	beq	r2,zero,801060 <logic+0xdd0>
  801058:	00800044 	movi	r2,1
  80105c:	00000106 	br	801064 <logic+0xdd4>
  801060:	0005883a 	mov	r2,zero
  801064:	1007883a 	mov	r3,r2
  801068:	e0bffc17 	ldw	r2,-16(fp)
  80106c:	10c05a05 	stb	r3,360(r2)
  d->_g8 = d->_g11 && !d->_cg14 || d->_g12 && !d->_cg17;
  801070:	e0bffc17 	ldw	r2,-16(fp)
  801074:	10803843 	ldbu	r2,225(r2)
  801078:	10803fcc 	andi	r2,r2,255
  80107c:	1080201c 	xori	r2,r2,128
  801080:	10bfe004 	addi	r2,r2,-128
  801084:	10000626 	beq	r2,zero,8010a0 <logic+0xe10>
  801088:	e0bffc17 	ldw	r2,-16(fp)
  80108c:	108059c3 	ldbu	r2,359(r2)
  801090:	10803fcc 	andi	r2,r2,255
  801094:	1080201c 	xori	r2,r2,128
  801098:	10bfe004 	addi	r2,r2,-128
  80109c:	10000c26 	beq	r2,zero,8010d0 <logic+0xe40>
  8010a0:	e0bffc17 	ldw	r2,-16(fp)
  8010a4:	10803883 	ldbu	r2,226(r2)
  8010a8:	10803fcc 	andi	r2,r2,255
  8010ac:	1080201c 	xori	r2,r2,128
  8010b0:	10bfe004 	addi	r2,r2,-128
  8010b4:	10000826 	beq	r2,zero,8010d8 <logic+0xe48>
  8010b8:	e0bffc17 	ldw	r2,-16(fp)
  8010bc:	10805a03 	ldbu	r2,360(r2)
  8010c0:	10803fcc 	andi	r2,r2,255
  8010c4:	1080201c 	xori	r2,r2,128
  8010c8:	10bfe004 	addi	r2,r2,-128
  8010cc:	1000021e 	bne	r2,zero,8010d8 <logic+0xe48>
  8010d0:	00800044 	movi	r2,1
  8010d4:	00000106 	br	8010dc <logic+0xe4c>
  8010d8:	0005883a 	mov	r2,zero
  8010dc:	1007883a 	mov	r3,r2
  8010e0:	e0bffc17 	ldw	r2,-16(fp)
  8010e4:	10c037c5 	stb	r3,223(r2)
  d->_g17 = d->_g26 || d->_g23 && !d->_cg23;
  8010e8:	e0bffc17 	ldw	r2,-16(fp)
  8010ec:	10803b43 	ldbu	r2,237(r2)
  8010f0:	10803fcc 	andi	r2,r2,255
  8010f4:	1080201c 	xori	r2,r2,128
  8010f8:	10bfe004 	addi	r2,r2,-128
  8010fc:	10000c1e 	bne	r2,zero,801130 <logic+0xea0>
  801100:	e0bffc17 	ldw	r2,-16(fp)
  801104:	10803a83 	ldbu	r2,234(r2)
  801108:	10803fcc 	andi	r2,r2,255
  80110c:	1080201c 	xori	r2,r2,128
  801110:	10bfe004 	addi	r2,r2,-128
  801114:	10000826 	beq	r2,zero,801138 <logic+0xea8>
  801118:	e0bffc17 	ldw	r2,-16(fp)
  80111c:	10805a43 	ldbu	r2,361(r2)
  801120:	10803fcc 	andi	r2,r2,255
  801124:	1080201c 	xori	r2,r2,128
  801128:	10bfe004 	addi	r2,r2,-128
  80112c:	1000021e 	bne	r2,zero,801138 <logic+0xea8>
  801130:	00800044 	movi	r2,1
  801134:	00000106 	br	80113c <logic+0xeac>
  801138:	0005883a 	mov	r2,zero
  80113c:	1007883a 	mov	r3,r2
  801140:	e0bffc17 	ldw	r2,-16(fp)
  801144:	10c03985 	stb	r3,230(r2)
  d->_g14 = d->_pg37;
  801148:	e0bffc17 	ldw	r2,-16(fp)
  80114c:	10c06c43 	ldbu	r3,433(r2)
  801150:	e0bffc17 	ldw	r2,-16(fp)
  801154:	10c03905 	stb	r3,228(r2)
  d->_g23 = d->_pg34;
  801158:	e0bffc17 	ldw	r2,-16(fp)
  80115c:	10c06c83 	ldbu	r3,434(r2)
  801160:	e0bffc17 	ldw	r2,-16(fp)
  801164:	10c03a85 	stb	r3,234(r2)
  d->_g6 = !(d->_g14 || d->_g23);
  801168:	e0bffc17 	ldw	r2,-16(fp)
  80116c:	10803903 	ldbu	r2,228(r2)
  801170:	10803fcc 	andi	r2,r2,255
  801174:	1080201c 	xori	r2,r2,128
  801178:	10bfe004 	addi	r2,r2,-128
  80117c:	1000081e 	bne	r2,zero,8011a0 <logic+0xf10>
  801180:	e0bffc17 	ldw	r2,-16(fp)
  801184:	10803a83 	ldbu	r2,234(r2)
  801188:	10803fcc 	andi	r2,r2,255
  80118c:	1080201c 	xori	r2,r2,128
  801190:	10bfe004 	addi	r2,r2,-128
  801194:	1000021e 	bne	r2,zero,8011a0 <logic+0xf10>
  801198:	00800044 	movi	r2,1
  80119c:	00000106 	br	8011a4 <logic+0xf14>
  8011a0:	0005883a 	mov	r2,zero
  8011a4:	1007883a 	mov	r3,r2
  8011a8:	e0bffc17 	ldw	r2,-16(fp)
  8011ac:	10c03785 	stb	r3,222(r2)
  d->_g49 = d->_pg41;
  8011b0:	e0bffc17 	ldw	r2,-16(fp)
  8011b4:	10c06cc3 	ldbu	r3,435(r2)
  8011b8:	e0bffc17 	ldw	r2,-16(fp)
  8011bc:	10c03f05 	stb	r3,252(r2)
  d->_g50 = d->_g49 && d->AS;
  8011c0:	e0bffc17 	ldw	r2,-16(fp)
  8011c4:	10803f03 	ldbu	r2,252(r2)
  8011c8:	10803fcc 	andi	r2,r2,255
  8011cc:	1080201c 	xori	r2,r2,128
  8011d0:	10bfe004 	addi	r2,r2,-128
  8011d4:	10000826 	beq	r2,zero,8011f8 <logic+0xf68>
  8011d8:	e0bffc17 	ldw	r2,-16(fp)
  8011dc:	10803103 	ldbu	r2,196(r2)
  8011e0:	10803fcc 	andi	r2,r2,255
  8011e4:	1080201c 	xori	r2,r2,128
  8011e8:	10bfe004 	addi	r2,r2,-128
  8011ec:	10000226 	beq	r2,zero,8011f8 <logic+0xf68>
  8011f0:	00800044 	movi	r2,1
  8011f4:	00000106 	br	8011fc <logic+0xf6c>
  8011f8:	0005883a 	mov	r2,zero
  8011fc:	1007883a 	mov	r3,r2
  801200:	e0bffc17 	ldw	r2,-16(fp)
  801204:	10c03f45 	stb	r3,253(r2)
  if (d->_g50) {
  801208:	e0bffc17 	ldw	r2,-16(fp)
  80120c:	10803f43 	ldbu	r2,253(r2)
  801210:	10803fcc 	andi	r2,r2,255
  801214:	1080201c 	xori	r2,r2,128
  801218:	10bfe004 	addi	r2,r2,-128
  80121c:	10000326 	beq	r2,zero,80122c <logic+0xf9c>
    d->_Pacemaker_local__Atrig2 = 1;
  801220:	e0bffc17 	ldw	r2,-16(fp)
  801224:	00c00044 	movi	r3,1
  801228:	10c03485 	stb	r3,210(r2)
  }
  d->_g185 = d->_pg154;
  80122c:	e0bffc17 	ldw	r2,-16(fp)
  801230:	10c06d03 	ldbu	r3,436(r2)
  801234:	e0bffc17 	ldw	r2,-16(fp)
  801238:	10c05705 	stb	r3,348(r2)
  if (d->_g185) {
  80123c:	e0bffc17 	ldw	r2,-16(fp)
  801240:	10805703 	ldbu	r2,348(r2)
  801244:	10803fcc 	andi	r2,r2,255
  801248:	1080201c 	xori	r2,r2,128
  80124c:	10bfe004 	addi	r2,r2,-128
  801250:	10001226 	beq	r2,zero,80129c <logic+0x100c>
    d->_region1_ARefrac_t += d->deltaT;
  801254:	e13ffc17 	ldw	r4,-16(fp)
  801258:	20802317 	ldw	r2,140(r4)
  80125c:	20c02417 	ldw	r3,144(r4)
  801260:	e1bffc17 	ldw	r6,-16(fp)
  801264:	31002d17 	ldw	r4,180(r6)
  801268:	31402e17 	ldw	r5,184(r6)
  80126c:	200d883a 	mov	r6,r4
  801270:	280f883a 	mov	r7,r5
  801274:	1009883a 	mov	r4,r2
  801278:	180b883a 	mov	r5,r3
  80127c:	0806aa80 	call	806aa8 <__adddf3>
  801280:	1009883a 	mov	r4,r2
  801284:	180b883a 	mov	r5,r3
  801288:	2005883a 	mov	r2,r4
  80128c:	2807883a 	mov	r3,r5
  801290:	e13ffc17 	ldw	r4,-16(fp)
  801294:	20802315 	stw	r2,140(r4)
  801298:	20c02415 	stw	r3,144(r4)
  }
  d->_g52 = d->_g49 && !d->AS;
  80129c:	e0bffc17 	ldw	r2,-16(fp)
  8012a0:	10803f03 	ldbu	r2,252(r2)
  8012a4:	10803fcc 	andi	r2,r2,255
  8012a8:	1080201c 	xori	r2,r2,128
  8012ac:	10bfe004 	addi	r2,r2,-128
  8012b0:	10000826 	beq	r2,zero,8012d4 <logic+0x1044>
  8012b4:	e0bffc17 	ldw	r2,-16(fp)
  8012b8:	10803103 	ldbu	r2,196(r2)
  8012bc:	10803fcc 	andi	r2,r2,255
  8012c0:	1080201c 	xori	r2,r2,128
  8012c4:	10bfe004 	addi	r2,r2,-128
  8012c8:	1000021e 	bne	r2,zero,8012d4 <logic+0x1044>
  8012cc:	00800044 	movi	r2,1
  8012d0:	00000106 	br	8012d8 <logic+0x1048>
  8012d4:	0005883a 	mov	r2,zero
  8012d8:	1007883a 	mov	r3,r2
  8012dc:	e0bffc17 	ldw	r2,-16(fp)
  8012e0:	10c03fc5 	stb	r3,255(r2)
  d->_cg52 = d->_region1_ARefrac_t >= d->T_PVAR;
  8012e4:	e0bffc17 	ldw	r2,-16(fp)
  8012e8:	14002317 	ldw	r16,140(r2)
  8012ec:	14402417 	ldw	r17,144(r2)
  8012f0:	e0bffc17 	ldw	r2,-16(fp)
  8012f4:	10800317 	ldw	r2,12(r2)
  8012f8:	1009883a 	mov	r4,r2
  8012fc:	0808e200 	call	808e20 <__floatsidf>
  801300:	1009883a 	mov	r4,r2
  801304:	180b883a 	mov	r5,r3
  801308:	04800044 	movi	r18,1
  80130c:	200d883a 	mov	r6,r4
  801310:	280f883a 	mov	r7,r5
  801314:	8009883a 	mov	r4,r16
  801318:	880b883a 	mov	r5,r17
  80131c:	0807c3c0 	call	807c3c <__gedf2>
  801320:	1000010e 	bge	r2,zero,801328 <logic+0x1098>
  801324:	0025883a 	mov	r18,zero
  801328:	9007883a 	mov	r3,r18
  80132c:	e0bffc17 	ldw	r2,-16(fp)
  801330:	10c05d05 	stb	r3,372(r2)
  d->_g53 = d->_g52 && d->_cg52;
  801334:	e0bffc17 	ldw	r2,-16(fp)
  801338:	10803fc3 	ldbu	r2,255(r2)
  80133c:	10803fcc 	andi	r2,r2,255
  801340:	1080201c 	xori	r2,r2,128
  801344:	10bfe004 	addi	r2,r2,-128
  801348:	10000826 	beq	r2,zero,80136c <logic+0x10dc>
  80134c:	e0bffc17 	ldw	r2,-16(fp)
  801350:	10805d03 	ldbu	r2,372(r2)
  801354:	10803fcc 	andi	r2,r2,255
  801358:	1080201c 	xori	r2,r2,128
  80135c:	10bfe004 	addi	r2,r2,-128
  801360:	10000226 	beq	r2,zero,80136c <logic+0x10dc>
  801364:	00800044 	movi	r2,1
  801368:	00000106 	br	801370 <logic+0x10e0>
  80136c:	0005883a 	mov	r2,zero
  801370:	1007883a 	mov	r3,r2
  801374:	e0bffc17 	ldw	r2,-16(fp)
  801378:	10c04005 	stb	r3,256(r2)
  if (d->_g53) {
  80137c:	e0bffc17 	ldw	r2,-16(fp)
  801380:	10804003 	ldbu	r2,256(r2)
  801384:	10803fcc 	andi	r2,r2,255
  801388:	1080201c 	xori	r2,r2,128
  80138c:	10bfe004 	addi	r2,r2,-128
  801390:	10000326 	beq	r2,zero,8013a0 <logic+0x1110>
    d->_Pacemaker_local__Atrig3 = 1;
  801394:	e0bffc17 	ldw	r2,-16(fp)
  801398:	00c00044 	movi	r3,1
  80139c:	10c034c5 	stb	r3,211(r2)
  }
  d->_g45 = d->_g23 || d->_g14;
  8013a0:	e0bffc17 	ldw	r2,-16(fp)
  8013a4:	10803a83 	ldbu	r2,234(r2)
  8013a8:	10803fcc 	andi	r2,r2,255
  8013ac:	1080201c 	xori	r2,r2,128
  8013b0:	10bfe004 	addi	r2,r2,-128
  8013b4:	1000061e 	bne	r2,zero,8013d0 <logic+0x1140>
  8013b8:	e0bffc17 	ldw	r2,-16(fp)
  8013bc:	10803903 	ldbu	r2,228(r2)
  8013c0:	10803fcc 	andi	r2,r2,255
  8013c4:	1080201c 	xori	r2,r2,128
  8013c8:	10bfe004 	addi	r2,r2,-128
  8013cc:	10000226 	beq	r2,zero,8013d8 <logic+0x1148>
  8013d0:	00800044 	movi	r2,1
  8013d4:	00000106 	br	8013dc <logic+0x114c>
  8013d8:	0005883a 	mov	r2,zero
  8013dc:	1007883a 	mov	r3,r2
  8013e0:	e0bffc17 	ldw	r2,-16(fp)
  8013e4:	10c03e85 	stb	r3,250(r2)
  d->_cg40 = d->_region1_ARefrac_t < d->T_PVAR;
  8013e8:	e0bffc17 	ldw	r2,-16(fp)
  8013ec:	14002317 	ldw	r16,140(r2)
  8013f0:	14402417 	ldw	r17,144(r2)
  8013f4:	e0bffc17 	ldw	r2,-16(fp)
  8013f8:	10800317 	ldw	r2,12(r2)
  8013fc:	1009883a 	mov	r4,r2
  801400:	0808e200 	call	808e20 <__floatsidf>
  801404:	1009883a 	mov	r4,r2
  801408:	180b883a 	mov	r5,r3
  80140c:	04800044 	movi	r18,1
  801410:	200d883a 	mov	r6,r4
  801414:	280f883a 	mov	r7,r5
  801418:	8009883a 	mov	r4,r16
  80141c:	880b883a 	mov	r5,r17
  801420:	0807d180 	call	807d18 <__ledf2>
  801424:	10000116 	blt	r2,zero,80142c <logic+0x119c>
  801428:	0025883a 	mov	r18,zero
  80142c:	9007883a 	mov	r3,r18
  801430:	e0bffc17 	ldw	r2,-16(fp)
  801434:	10c05c45 	stb	r3,369(r2)
  d->_g39 = d->_g45 && d->_cg40;
  801438:	e0bffc17 	ldw	r2,-16(fp)
  80143c:	10803e83 	ldbu	r2,250(r2)
  801440:	10803fcc 	andi	r2,r2,255
  801444:	1080201c 	xori	r2,r2,128
  801448:	10bfe004 	addi	r2,r2,-128
  80144c:	10000826 	beq	r2,zero,801470 <logic+0x11e0>
  801450:	e0bffc17 	ldw	r2,-16(fp)
  801454:	10805c43 	ldbu	r2,369(r2)
  801458:	10803fcc 	andi	r2,r2,255
  80145c:	1080201c 	xori	r2,r2,128
  801460:	10bfe004 	addi	r2,r2,-128
  801464:	10000226 	beq	r2,zero,801470 <logic+0x11e0>
  801468:	00800044 	movi	r2,1
  80146c:	00000106 	br	801474 <logic+0x11e4>
  801470:	0005883a 	mov	r2,zero
  801474:	1007883a 	mov	r3,r2
  801478:	e0bffc17 	ldw	r2,-16(fp)
  80147c:	10c03d45 	stb	r3,245(r2)
  if (d->_g39) {
  801480:	e0bffc17 	ldw	r2,-16(fp)
  801484:	10803d43 	ldbu	r2,245(r2)
  801488:	10803fcc 	andi	r2,r2,255
  80148c:	1080201c 	xori	r2,r2,128
  801490:	10bfe004 	addi	r2,r2,-128
  801494:	10003426 	beq	r2,zero,801568 <logic+0x12d8>
    d->sleepT = (d->sleepT < (d->T_PVAR - d->_region1_ARefrac_t)) ? d->sleepT : (d->T_PVAR - d->_region1_ARefrac_t);
  801498:	e0bffc17 	ldw	r2,-16(fp)
  80149c:	14002f17 	ldw	r16,188(r2)
  8014a0:	14403017 	ldw	r17,192(r2)
  8014a4:	e0bffc17 	ldw	r2,-16(fp)
  8014a8:	10800317 	ldw	r2,12(r2)
  8014ac:	1009883a 	mov	r4,r2
  8014b0:	0808e200 	call	808e20 <__floatsidf>
  8014b4:	1011883a 	mov	r8,r2
  8014b8:	1813883a 	mov	r9,r3
  8014bc:	e13ffc17 	ldw	r4,-16(fp)
  8014c0:	20802317 	ldw	r2,140(r4)
  8014c4:	20c02417 	ldw	r3,144(r4)
  8014c8:	100d883a 	mov	r6,r2
  8014cc:	180f883a 	mov	r7,r3
  8014d0:	4009883a 	mov	r4,r8
  8014d4:	480b883a 	mov	r5,r9
  8014d8:	08085240 	call	808524 <__subdf3>
  8014dc:	1009883a 	mov	r4,r2
  8014e0:	180b883a 	mov	r5,r3
  8014e4:	2005883a 	mov	r2,r4
  8014e8:	2807883a 	mov	r3,r5
  8014ec:	100d883a 	mov	r6,r2
  8014f0:	180f883a 	mov	r7,r3
  8014f4:	8009883a 	mov	r4,r16
  8014f8:	880b883a 	mov	r5,r17
  8014fc:	0807d180 	call	807d18 <__ledf2>
  801500:	1000040e 	bge	r2,zero,801514 <logic+0x1284>
  801504:	e13ffc17 	ldw	r4,-16(fp)
  801508:	20802f17 	ldw	r2,188(r4)
  80150c:	20c03017 	ldw	r3,192(r4)
  801510:	00001206 	br	80155c <logic+0x12cc>
  801514:	e0bffc17 	ldw	r2,-16(fp)
  801518:	10800317 	ldw	r2,12(r2)
  80151c:	1009883a 	mov	r4,r2
  801520:	0808e200 	call	808e20 <__floatsidf>
  801524:	1011883a 	mov	r8,r2
  801528:	1813883a 	mov	r9,r3
  80152c:	e13ffc17 	ldw	r4,-16(fp)
  801530:	20802317 	ldw	r2,140(r4)
  801534:	20c02417 	ldw	r3,144(r4)
  801538:	100d883a 	mov	r6,r2
  80153c:	180f883a 	mov	r7,r3
  801540:	4009883a 	mov	r4,r8
  801544:	480b883a 	mov	r5,r9
  801548:	08085240 	call	808524 <__subdf3>
  80154c:	1009883a 	mov	r4,r2
  801550:	180b883a 	mov	r5,r3
  801554:	2005883a 	mov	r2,r4
  801558:	2807883a 	mov	r3,r5
  80155c:	e13ffc17 	ldw	r4,-16(fp)
  801560:	20802f15 	stw	r2,188(r4)
  801564:	20c03015 	stw	r3,192(r4)
  }
  d->_cg41 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  801568:	e0bffc17 	ldw	r2,-16(fp)
  80156c:	10803483 	ldbu	r2,210(r2)
  801570:	10803fcc 	andi	r2,r2,255
  801574:	1080201c 	xori	r2,r2,128
  801578:	10bfe004 	addi	r2,r2,-128
  80157c:	1000061e 	bne	r2,zero,801598 <logic+0x1308>
  801580:	e0bffc17 	ldw	r2,-16(fp)
  801584:	108034c3 	ldbu	r2,211(r2)
  801588:	10803fcc 	andi	r2,r2,255
  80158c:	1080201c 	xori	r2,r2,128
  801590:	10bfe004 	addi	r2,r2,-128
  801594:	10000226 	beq	r2,zero,8015a0 <logic+0x1310>
  801598:	00800044 	movi	r2,1
  80159c:	00000106 	br	8015a4 <logic+0x1314>
  8015a0:	0005883a 	mov	r2,zero
  8015a4:	1007883a 	mov	r3,r2
  8015a8:	e0bffc17 	ldw	r2,-16(fp)
  8015ac:	10c05c05 	stb	r3,368(r2)
  d->_g40 = d->_g45 && !d->_cg40;
  8015b0:	e0bffc17 	ldw	r2,-16(fp)
  8015b4:	10803e83 	ldbu	r2,250(r2)
  8015b8:	10803fcc 	andi	r2,r2,255
  8015bc:	1080201c 	xori	r2,r2,128
  8015c0:	10bfe004 	addi	r2,r2,-128
  8015c4:	10000826 	beq	r2,zero,8015e8 <logic+0x1358>
  8015c8:	e0bffc17 	ldw	r2,-16(fp)
  8015cc:	10805c43 	ldbu	r2,369(r2)
  8015d0:	10803fcc 	andi	r2,r2,255
  8015d4:	1080201c 	xori	r2,r2,128
  8015d8:	10bfe004 	addi	r2,r2,-128
  8015dc:	1000021e 	bne	r2,zero,8015e8 <logic+0x1358>
  8015e0:	00800044 	movi	r2,1
  8015e4:	00000106 	br	8015ec <logic+0x135c>
  8015e8:	0005883a 	mov	r2,zero
  8015ec:	1007883a 	mov	r3,r2
  8015f0:	e0bffc17 	ldw	r2,-16(fp)
  8015f4:	10c03d85 	stb	r3,246(r2)
  d->_cg43 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  8015f8:	e0bffc17 	ldw	r2,-16(fp)
  8015fc:	10803483 	ldbu	r2,210(r2)
  801600:	10803fcc 	andi	r2,r2,255
  801604:	1080201c 	xori	r2,r2,128
  801608:	10bfe004 	addi	r2,r2,-128
  80160c:	1000061e 	bne	r2,zero,801628 <logic+0x1398>
  801610:	e0bffc17 	ldw	r2,-16(fp)
  801614:	108034c3 	ldbu	r2,211(r2)
  801618:	10803fcc 	andi	r2,r2,255
  80161c:	1080201c 	xori	r2,r2,128
  801620:	10bfe004 	addi	r2,r2,-128
  801624:	10000226 	beq	r2,zero,801630 <logic+0x13a0>
  801628:	00800044 	movi	r2,1
  80162c:	00000106 	br	801634 <logic+0x13a4>
  801630:	0005883a 	mov	r2,zero
  801634:	1007883a 	mov	r3,r2
  801638:	e0bffc17 	ldw	r2,-16(fp)
  80163c:	10c05c85 	stb	r3,370(r2)
  d->_g42 = d->_g39 && d->_cg41 || d->_g40 && d->_cg43;
  801640:	e0bffc17 	ldw	r2,-16(fp)
  801644:	10803d43 	ldbu	r2,245(r2)
  801648:	10803fcc 	andi	r2,r2,255
  80164c:	1080201c 	xori	r2,r2,128
  801650:	10bfe004 	addi	r2,r2,-128
  801654:	10000626 	beq	r2,zero,801670 <logic+0x13e0>
  801658:	e0bffc17 	ldw	r2,-16(fp)
  80165c:	10805c03 	ldbu	r2,368(r2)
  801660:	10803fcc 	andi	r2,r2,255
  801664:	1080201c 	xori	r2,r2,128
  801668:	10bfe004 	addi	r2,r2,-128
  80166c:	10000c1e 	bne	r2,zero,8016a0 <logic+0x1410>
  801670:	e0bffc17 	ldw	r2,-16(fp)
  801674:	10803d83 	ldbu	r2,246(r2)
  801678:	10803fcc 	andi	r2,r2,255
  80167c:	1080201c 	xori	r2,r2,128
  801680:	10bfe004 	addi	r2,r2,-128
  801684:	10000826 	beq	r2,zero,8016a8 <logic+0x1418>
  801688:	e0bffc17 	ldw	r2,-16(fp)
  80168c:	10805c83 	ldbu	r2,370(r2)
  801690:	10803fcc 	andi	r2,r2,255
  801694:	1080201c 	xori	r2,r2,128
  801698:	10bfe004 	addi	r2,r2,-128
  80169c:	10000226 	beq	r2,zero,8016a8 <logic+0x1418>
  8016a0:	00800044 	movi	r2,1
  8016a4:	00000106 	br	8016ac <logic+0x141c>
  8016a8:	0005883a 	mov	r2,zero
  8016ac:	1007883a 	mov	r3,r2
  8016b0:	e0bffc17 	ldw	r2,-16(fp)
  8016b4:	10c03e05 	stb	r3,248(r2)
  d->_g49 = !d->_g49;
  8016b8:	e0bffc17 	ldw	r2,-16(fp)
  8016bc:	10803f03 	ldbu	r2,252(r2)
  8016c0:	10803fcc 	andi	r2,r2,255
  8016c4:	1080201c 	xori	r2,r2,128
  8016c8:	10bfe004 	addi	r2,r2,-128
  8016cc:	1005003a 	cmpeq	r2,r2,zero
  8016d0:	1007883a 	mov	r3,r2
  8016d4:	e0bffc17 	ldw	r2,-16(fp)
  8016d8:	10c03f05 	stb	r3,252(r2)
  d->_g53 = d->_g50 || d->_g53;
  8016dc:	e0bffc17 	ldw	r2,-16(fp)
  8016e0:	10803f43 	ldbu	r2,253(r2)
  8016e4:	10803fcc 	andi	r2,r2,255
  8016e8:	1080201c 	xori	r2,r2,128
  8016ec:	10bfe004 	addi	r2,r2,-128
  8016f0:	1000061e 	bne	r2,zero,80170c <logic+0x147c>
  8016f4:	e0bffc17 	ldw	r2,-16(fp)
  8016f8:	10804003 	ldbu	r2,256(r2)
  8016fc:	10803fcc 	andi	r2,r2,255
  801700:	1080201c 	xori	r2,r2,128
  801704:	10bfe004 	addi	r2,r2,-128
  801708:	10000226 	beq	r2,zero,801714 <logic+0x1484>
  80170c:	00800044 	movi	r2,1
  801710:	00000106 	br	801718 <logic+0x1488>
  801714:	0005883a 	mov	r2,zero
  801718:	1007883a 	mov	r3,r2
  80171c:	e0bffc17 	ldw	r2,-16(fp)
  801720:	10c04005 	stb	r3,256(r2)
  d->_g50 = (d->_g6 || d->_g42) && (d->_g49 || d->_g53) && (d->_g42 || d->_g53);
  801724:	e0bffc17 	ldw	r2,-16(fp)
  801728:	10803783 	ldbu	r2,222(r2)
  80172c:	10803fcc 	andi	r2,r2,255
  801730:	1080201c 	xori	r2,r2,128
  801734:	10bfe004 	addi	r2,r2,-128
  801738:	1000061e 	bne	r2,zero,801754 <logic+0x14c4>
  80173c:	e0bffc17 	ldw	r2,-16(fp)
  801740:	10803e03 	ldbu	r2,248(r2)
  801744:	10803fcc 	andi	r2,r2,255
  801748:	1080201c 	xori	r2,r2,128
  80174c:	10bfe004 	addi	r2,r2,-128
  801750:	10001a26 	beq	r2,zero,8017bc <logic+0x152c>
  801754:	e0bffc17 	ldw	r2,-16(fp)
  801758:	10803f03 	ldbu	r2,252(r2)
  80175c:	10803fcc 	andi	r2,r2,255
  801760:	1080201c 	xori	r2,r2,128
  801764:	10bfe004 	addi	r2,r2,-128
  801768:	1000061e 	bne	r2,zero,801784 <logic+0x14f4>
  80176c:	e0bffc17 	ldw	r2,-16(fp)
  801770:	10804003 	ldbu	r2,256(r2)
  801774:	10803fcc 	andi	r2,r2,255
  801778:	1080201c 	xori	r2,r2,128
  80177c:	10bfe004 	addi	r2,r2,-128
  801780:	10000e26 	beq	r2,zero,8017bc <logic+0x152c>
  801784:	e0bffc17 	ldw	r2,-16(fp)
  801788:	10803e03 	ldbu	r2,248(r2)
  80178c:	10803fcc 	andi	r2,r2,255
  801790:	1080201c 	xori	r2,r2,128
  801794:	10bfe004 	addi	r2,r2,-128
  801798:	1000061e 	bne	r2,zero,8017b4 <logic+0x1524>
  80179c:	e0bffc17 	ldw	r2,-16(fp)
  8017a0:	10804003 	ldbu	r2,256(r2)
  8017a4:	10803fcc 	andi	r2,r2,255
  8017a8:	1080201c 	xori	r2,r2,128
  8017ac:	10bfe004 	addi	r2,r2,-128
  8017b0:	10000226 	beq	r2,zero,8017bc <logic+0x152c>
  8017b4:	00800044 	movi	r2,1
  8017b8:	00000106 	br	8017c0 <logic+0x1530>
  8017bc:	0005883a 	mov	r2,zero
  8017c0:	1007883a 	mov	r3,r2
  8017c4:	e0bffc17 	ldw	r2,-16(fp)
  8017c8:	10c03f45 	stb	r3,253(r2)
  d->_cg54 = d->_Pacemaker_local__Atrig2;
  8017cc:	e0bffc17 	ldw	r2,-16(fp)
  8017d0:	10c03483 	ldbu	r3,210(r2)
  8017d4:	e0bffc17 	ldw	r2,-16(fp)
  8017d8:	10c05d85 	stb	r3,374(r2)
  d->_g51 = d->_g50 && !d->_cg54;
  8017dc:	e0bffc17 	ldw	r2,-16(fp)
  8017e0:	10803f43 	ldbu	r2,253(r2)
  8017e4:	10803fcc 	andi	r2,r2,255
  8017e8:	1080201c 	xori	r2,r2,128
  8017ec:	10bfe004 	addi	r2,r2,-128
  8017f0:	10000826 	beq	r2,zero,801814 <logic+0x1584>
  8017f4:	e0bffc17 	ldw	r2,-16(fp)
  8017f8:	10805d83 	ldbu	r2,374(r2)
  8017fc:	10803fcc 	andi	r2,r2,255
  801800:	1080201c 	xori	r2,r2,128
  801804:	10bfe004 	addi	r2,r2,-128
  801808:	1000021e 	bne	r2,zero,801814 <logic+0x1584>
  80180c:	00800044 	movi	r2,1
  801810:	00000106 	br	801818 <logic+0x1588>
  801814:	0005883a 	mov	r2,zero
  801818:	1007883a 	mov	r3,r2
  80181c:	e0bffc17 	ldw	r2,-16(fp)
  801820:	10c03f85 	stb	r3,254(r2)
  if (d->_g51) {
  801824:	e0bffc17 	ldw	r2,-16(fp)
  801828:	10803f83 	ldbu	r2,254(r2)
  80182c:	10803fcc 	andi	r2,r2,255
  801830:	1080201c 	xori	r2,r2,128
  801834:	10bfe004 	addi	r2,r2,-128
  801838:	10000526 	beq	r2,zero,801850 <logic+0x15c0>
    d->_taken_transitions[9] += 1;
  80183c:	e0bffc17 	ldw	r2,-16(fp)
  801840:	10801017 	ldw	r2,64(r2)
  801844:	10c00044 	addi	r3,r2,1
  801848:	e0bffc17 	ldw	r2,-16(fp)
  80184c:	10c01015 	stw	r3,64(r2)
  }
  d->_g42 = d->_pg52;
  801850:	e0bffc17 	ldw	r2,-16(fp)
  801854:	10c06d43 	ldbu	r3,437(r2)
  801858:	e0bffc17 	ldw	r2,-16(fp)
  80185c:	10c03e05 	stb	r3,248(r2)
  if (d->_g42) {
  801860:	e0bffc17 	ldw	r2,-16(fp)
  801864:	10803e03 	ldbu	r2,248(r2)
  801868:	10803fcc 	andi	r2,r2,255
  80186c:	1080201c 	xori	r2,r2,128
  801870:	10bfe004 	addi	r2,r2,-128
  801874:	10000b26 	beq	r2,zero,8018a4 <logic+0x1614>
    d->A_EVT |= 1;
  801878:	e0bffc17 	ldw	r2,-16(fp)
  80187c:	10803203 	ldbu	r2,200(r2)
  801880:	10800054 	ori	r2,r2,1
  801884:	1007883a 	mov	r3,r2
  801888:	e0bffc17 	ldw	r2,-16(fp)
  80188c:	10c03205 	stb	r3,200(r2)
    d->_taken_transitions[10] += 1;
  801890:	e0bffc17 	ldw	r2,-16(fp)
  801894:	10801117 	ldw	r2,68(r2)
  801898:	10c00044 	addi	r3,r2,1
  80189c:	e0bffc17 	ldw	r2,-16(fp)
  8018a0:	10c01115 	stw	r3,68(r2)
  }
  d->_g51_e2 = d->_pg42_e1;
  8018a4:	e0bffc17 	ldw	r2,-16(fp)
  8018a8:	10c06d83 	ldbu	r3,438(r2)
  8018ac:	e0bffc17 	ldw	r2,-16(fp)
  8018b0:	10c06845 	stb	r3,417(r2)
  d->_g42_e1 = d->_GO || d->_g51_e2;
  8018b4:	e0bffc17 	ldw	r2,-16(fp)
  8018b8:	10805803 	ldbu	r2,352(r2)
  8018bc:	10803fcc 	andi	r2,r2,255
  8018c0:	1080201c 	xori	r2,r2,128
  8018c4:	10bfe004 	addi	r2,r2,-128
  8018c8:	1000061e 	bne	r2,zero,8018e4 <logic+0x1654>
  8018cc:	e0bffc17 	ldw	r2,-16(fp)
  8018d0:	10806843 	ldbu	r2,417(r2)
  8018d4:	10803fcc 	andi	r2,r2,255
  8018d8:	1080201c 	xori	r2,r2,128
  8018dc:	10bfe004 	addi	r2,r2,-128
  8018e0:	10000226 	beq	r2,zero,8018ec <logic+0x165c>
  8018e4:	00800044 	movi	r2,1
  8018e8:	00000106 	br	8018f0 <logic+0x1660>
  8018ec:	0005883a 	mov	r2,zero
  8018f0:	1007883a 	mov	r3,r2
  8018f4:	e0bffc17 	ldw	r2,-16(fp)
  8018f8:	10c06805 	stb	r3,416(r2)
  if (d->_g42_e1) {
  8018fc:	e0bffc17 	ldw	r2,-16(fp)
  801900:	10806803 	ldbu	r2,416(r2)
  801904:	10803fcc 	andi	r2,r2,255
  801908:	1080201c 	xori	r2,r2,128
  80190c:	10bfe004 	addi	r2,r2,-128
  801910:	10000426 	beq	r2,zero,801924 <logic+0x1694>
    d->_pre_AP = d->_reg_AP;
  801914:	e0bffc17 	ldw	r2,-16(fp)
  801918:	10c03303 	ldbu	r3,204(r2)
  80191c:	e0bffc17 	ldw	r2,-16(fp)
  801920:	10c03345 	stb	r3,205(r2)
  }
  d->_g213 = d->_pg62;
  801924:	e0bffc17 	ldw	r2,-16(fp)
  801928:	10c06dc3 	ldbu	r3,439(r2)
  80192c:	e0bffc17 	ldw	r2,-16(fp)
  801930:	10c05785 	stb	r3,350(r2)
  d->_g57 = d->_g213 && !d->VS;
  801934:	e0bffc17 	ldw	r2,-16(fp)
  801938:	10805783 	ldbu	r2,350(r2)
  80193c:	10803fcc 	andi	r2,r2,255
  801940:	1080201c 	xori	r2,r2,128
  801944:	10bfe004 	addi	r2,r2,-128
  801948:	10000826 	beq	r2,zero,80196c <logic+0x16dc>
  80194c:	e0bffc17 	ldw	r2,-16(fp)
  801950:	10803143 	ldbu	r2,197(r2)
  801954:	10803fcc 	andi	r2,r2,255
  801958:	1080201c 	xori	r2,r2,128
  80195c:	10bfe004 	addi	r2,r2,-128
  801960:	1000021e 	bne	r2,zero,80196c <logic+0x16dc>
  801964:	00800044 	movi	r2,1
  801968:	00000106 	br	801970 <logic+0x16e0>
  80196c:	0005883a 	mov	r2,zero
  801970:	1007883a 	mov	r3,r2
  801974:	e0bffc17 	ldw	r2,-16(fp)
  801978:	10c04105 	stb	r3,260(r2)
  d->_cg57 = d->_pre_VP;
  80197c:	e0bffc17 	ldw	r2,-16(fp)
  801980:	10c033c3 	ldbu	r3,207(r2)
  801984:	e0bffc17 	ldw	r2,-16(fp)
  801988:	10c05dc5 	stb	r3,375(r2)
  d->_g59 = d->_g57 && !d->_cg57;
  80198c:	e0bffc17 	ldw	r2,-16(fp)
  801990:	10804103 	ldbu	r2,260(r2)
  801994:	10803fcc 	andi	r2,r2,255
  801998:	1080201c 	xori	r2,r2,128
  80199c:	10bfe004 	addi	r2,r2,-128
  8019a0:	10000826 	beq	r2,zero,8019c4 <logic+0x1734>
  8019a4:	e0bffc17 	ldw	r2,-16(fp)
  8019a8:	10805dc3 	ldbu	r2,375(r2)
  8019ac:	10803fcc 	andi	r2,r2,255
  8019b0:	1080201c 	xori	r2,r2,128
  8019b4:	10bfe004 	addi	r2,r2,-128
  8019b8:	1000021e 	bne	r2,zero,8019c4 <logic+0x1734>
  8019bc:	00800044 	movi	r2,1
  8019c0:	00000106 	br	8019c8 <logic+0x1738>
  8019c4:	0005883a 	mov	r2,zero
  8019c8:	1007883a 	mov	r3,r2
  8019cc:	e0bffc17 	ldw	r2,-16(fp)
  8019d0:	10c04185 	stb	r3,262(r2)
  d->_g63 = d->_g59 && !d->AS;
  8019d4:	e0bffc17 	ldw	r2,-16(fp)
  8019d8:	10804183 	ldbu	r2,262(r2)
  8019dc:	10803fcc 	andi	r2,r2,255
  8019e0:	1080201c 	xori	r2,r2,128
  8019e4:	10bfe004 	addi	r2,r2,-128
  8019e8:	10000826 	beq	r2,zero,801a0c <logic+0x177c>
  8019ec:	e0bffc17 	ldw	r2,-16(fp)
  8019f0:	10803103 	ldbu	r2,196(r2)
  8019f4:	10803fcc 	andi	r2,r2,255
  8019f8:	1080201c 	xori	r2,r2,128
  8019fc:	10bfe004 	addi	r2,r2,-128
  801a00:	1000021e 	bne	r2,zero,801a0c <logic+0x177c>
  801a04:	00800044 	movi	r2,1
  801a08:	00000106 	br	801a10 <logic+0x1780>
  801a0c:	0005883a 	mov	r2,zero
  801a10:	1007883a 	mov	r3,r2
  801a14:	e0bffc17 	ldw	r2,-16(fp)
  801a18:	10c04245 	stb	r3,265(r2)
  d->_cg63 = d->_pre_AP;
  801a1c:	e0bffc17 	ldw	r2,-16(fp)
  801a20:	10c03343 	ldbu	r3,205(r2)
  801a24:	e0bffc17 	ldw	r2,-16(fp)
  801a28:	10c05b05 	stb	r3,364(r2)
  d->_g62 = d->_GO || d->_g51 || d->_g42 || d->_g63 && !d->_cg63;
  801a2c:	e0bffc17 	ldw	r2,-16(fp)
  801a30:	10805803 	ldbu	r2,352(r2)
  801a34:	10803fcc 	andi	r2,r2,255
  801a38:	1080201c 	xori	r2,r2,128
  801a3c:	10bfe004 	addi	r2,r2,-128
  801a40:	1000181e 	bne	r2,zero,801aa4 <logic+0x1814>
  801a44:	e0bffc17 	ldw	r2,-16(fp)
  801a48:	10803f83 	ldbu	r2,254(r2)
  801a4c:	10803fcc 	andi	r2,r2,255
  801a50:	1080201c 	xori	r2,r2,128
  801a54:	10bfe004 	addi	r2,r2,-128
  801a58:	1000121e 	bne	r2,zero,801aa4 <logic+0x1814>
  801a5c:	e0bffc17 	ldw	r2,-16(fp)
  801a60:	10803e03 	ldbu	r2,248(r2)
  801a64:	10803fcc 	andi	r2,r2,255
  801a68:	1080201c 	xori	r2,r2,128
  801a6c:	10bfe004 	addi	r2,r2,-128
  801a70:	10000c1e 	bne	r2,zero,801aa4 <logic+0x1814>
  801a74:	e0bffc17 	ldw	r2,-16(fp)
  801a78:	10804243 	ldbu	r2,265(r2)
  801a7c:	10803fcc 	andi	r2,r2,255
  801a80:	1080201c 	xori	r2,r2,128
  801a84:	10bfe004 	addi	r2,r2,-128
  801a88:	10000826 	beq	r2,zero,801aac <logic+0x181c>
  801a8c:	e0bffc17 	ldw	r2,-16(fp)
  801a90:	10805b03 	ldbu	r2,364(r2)
  801a94:	10803fcc 	andi	r2,r2,255
  801a98:	1080201c 	xori	r2,r2,128
  801a9c:	10bfe004 	addi	r2,r2,-128
  801aa0:	1000021e 	bne	r2,zero,801aac <logic+0x181c>
  801aa4:	00800044 	movi	r2,1
  801aa8:	00000106 	br	801ab0 <logic+0x1820>
  801aac:	0005883a 	mov	r2,zero
  801ab0:	1007883a 	mov	r3,r2
  801ab4:	e0bffc17 	ldw	r2,-16(fp)
  801ab8:	10c04205 	stb	r3,264(r2)
  d->_g56 = d->_g213 && d->VS;
  801abc:	e0bffc17 	ldw	r2,-16(fp)
  801ac0:	10805783 	ldbu	r2,350(r2)
  801ac4:	10803fcc 	andi	r2,r2,255
  801ac8:	1080201c 	xori	r2,r2,128
  801acc:	10bfe004 	addi	r2,r2,-128
  801ad0:	10000826 	beq	r2,zero,801af4 <logic+0x1864>
  801ad4:	e0bffc17 	ldw	r2,-16(fp)
  801ad8:	10803143 	ldbu	r2,197(r2)
  801adc:	10803fcc 	andi	r2,r2,255
  801ae0:	1080201c 	xori	r2,r2,128
  801ae4:	10bfe004 	addi	r2,r2,-128
  801ae8:	10000226 	beq	r2,zero,801af4 <logic+0x1864>
  801aec:	00800044 	movi	r2,1
  801af0:	00000106 	br	801af8 <logic+0x1868>
  801af4:	0005883a 	mov	r2,zero
  801af8:	1007883a 	mov	r3,r2
  801afc:	e0bffc17 	ldw	r2,-16(fp)
  801b00:	10c040c5 	stb	r3,259(r2)
  if (d->_g56) {
  801b04:	e0bffc17 	ldw	r2,-16(fp)
  801b08:	108040c3 	ldbu	r2,259(r2)
  801b0c:	10803fcc 	andi	r2,r2,255
  801b10:	1080201c 	xori	r2,r2,128
  801b14:	10bfe004 	addi	r2,r2,-128
  801b18:	10000826 	beq	r2,zero,801b3c <logic+0x18ac>
    d->_region1_ARefrac_t = 0;
  801b1c:	e0bffc17 	ldw	r2,-16(fp)
  801b20:	10002315 	stw	zero,140(r2)
  801b24:	10002415 	stw	zero,144(r2)
    d->_taken_transitions[4] += 1;
  801b28:	e0bffc17 	ldw	r2,-16(fp)
  801b2c:	10800b17 	ldw	r2,44(r2)
  801b30:	10c00044 	addi	r3,r2,1
  801b34:	e0bffc17 	ldw	r2,-16(fp)
  801b38:	10c00b15 	stw	r3,44(r2)
  }
  d->_g33 = d->_g50 && d->_cg54;
  801b3c:	e0bffc17 	ldw	r2,-16(fp)
  801b40:	10803f43 	ldbu	r2,253(r2)
  801b44:	10803fcc 	andi	r2,r2,255
  801b48:	1080201c 	xori	r2,r2,128
  801b4c:	10bfe004 	addi	r2,r2,-128
  801b50:	10000826 	beq	r2,zero,801b74 <logic+0x18e4>
  801b54:	e0bffc17 	ldw	r2,-16(fp)
  801b58:	10805d83 	ldbu	r2,374(r2)
  801b5c:	10803fcc 	andi	r2,r2,255
  801b60:	1080201c 	xori	r2,r2,128
  801b64:	10bfe004 	addi	r2,r2,-128
  801b68:	10000226 	beq	r2,zero,801b74 <logic+0x18e4>
  801b6c:	00800044 	movi	r2,1
  801b70:	00000106 	br	801b78 <logic+0x18e8>
  801b74:	0005883a 	mov	r2,zero
  801b78:	1007883a 	mov	r3,r2
  801b7c:	e0bffc17 	ldw	r2,-16(fp)
  801b80:	10c03c45 	stb	r3,241(r2)
  if (d->_g33) {
  801b84:	e0bffc17 	ldw	r2,-16(fp)
  801b88:	10803c43 	ldbu	r2,241(r2)
  801b8c:	10803fcc 	andi	r2,r2,255
  801b90:	1080201c 	xori	r2,r2,128
  801b94:	10bfe004 	addi	r2,r2,-128
  801b98:	10000b26 	beq	r2,zero,801bc8 <logic+0x1938>
    d->A_REFR |= 1;
  801b9c:	e0bffc17 	ldw	r2,-16(fp)
  801ba0:	10803283 	ldbu	r2,202(r2)
  801ba4:	10800054 	ori	r2,r2,1
  801ba8:	1007883a 	mov	r3,r2
  801bac:	e0bffc17 	ldw	r2,-16(fp)
  801bb0:	10c03285 	stb	r3,202(r2)
    d->_taken_transitions[8] += 1;
  801bb4:	e0bffc17 	ldw	r2,-16(fp)
  801bb8:	10800f17 	ldw	r2,60(r2)
  801bbc:	10c00044 	addi	r3,r2,1
  801bc0:	e0bffc17 	ldw	r2,-16(fp)
  801bc4:	10c00f15 	stw	r3,60(r2)
  }
  d->_g54 = d->_g57 && d->_cg57;
  801bc8:	e0bffc17 	ldw	r2,-16(fp)
  801bcc:	10804103 	ldbu	r2,260(r2)
  801bd0:	10803fcc 	andi	r2,r2,255
  801bd4:	1080201c 	xori	r2,r2,128
  801bd8:	10bfe004 	addi	r2,r2,-128
  801bdc:	10000826 	beq	r2,zero,801c00 <logic+0x1970>
  801be0:	e0bffc17 	ldw	r2,-16(fp)
  801be4:	10805dc3 	ldbu	r2,375(r2)
  801be8:	10803fcc 	andi	r2,r2,255
  801bec:	1080201c 	xori	r2,r2,128
  801bf0:	10bfe004 	addi	r2,r2,-128
  801bf4:	10000226 	beq	r2,zero,801c00 <logic+0x1970>
  801bf8:	00800044 	movi	r2,1
  801bfc:	00000106 	br	801c04 <logic+0x1974>
  801c00:	0005883a 	mov	r2,zero
  801c04:	1007883a 	mov	r3,r2
  801c08:	e0bffc17 	ldw	r2,-16(fp)
  801c0c:	10c04045 	stb	r3,257(r2)
  if (d->_g54) {
  801c10:	e0bffc17 	ldw	r2,-16(fp)
  801c14:	10804043 	ldbu	r2,257(r2)
  801c18:	10803fcc 	andi	r2,r2,255
  801c1c:	1080201c 	xori	r2,r2,128
  801c20:	10bfe004 	addi	r2,r2,-128
  801c24:	10000826 	beq	r2,zero,801c48 <logic+0x19b8>
    d->_region1_ARefrac_t = 0;
  801c28:	e0bffc17 	ldw	r2,-16(fp)
  801c2c:	10002315 	stw	zero,140(r2)
  801c30:	10002415 	stw	zero,144(r2)
    d->_taken_transitions[5] += 1;
  801c34:	e0bffc17 	ldw	r2,-16(fp)
  801c38:	10800c17 	ldw	r2,48(r2)
  801c3c:	10c00044 	addi	r3,r2,1
  801c40:	e0bffc17 	ldw	r2,-16(fp)
  801c44:	10c00c15 	stw	r3,48(r2)
  }
  d->_g57 = d->_g56 || d->_g33 || d->_g54;
  801c48:	e0bffc17 	ldw	r2,-16(fp)
  801c4c:	108040c3 	ldbu	r2,259(r2)
  801c50:	10803fcc 	andi	r2,r2,255
  801c54:	1080201c 	xori	r2,r2,128
  801c58:	10bfe004 	addi	r2,r2,-128
  801c5c:	10000c1e 	bne	r2,zero,801c90 <logic+0x1a00>
  801c60:	e0bffc17 	ldw	r2,-16(fp)
  801c64:	10803c43 	ldbu	r2,241(r2)
  801c68:	10803fcc 	andi	r2,r2,255
  801c6c:	1080201c 	xori	r2,r2,128
  801c70:	10bfe004 	addi	r2,r2,-128
  801c74:	1000061e 	bne	r2,zero,801c90 <logic+0x1a00>
  801c78:	e0bffc17 	ldw	r2,-16(fp)
  801c7c:	10804043 	ldbu	r2,257(r2)
  801c80:	10803fcc 	andi	r2,r2,255
  801c84:	1080201c 	xori	r2,r2,128
  801c88:	10bfe004 	addi	r2,r2,-128
  801c8c:	10000226 	beq	r2,zero,801c98 <logic+0x1a08>
  801c90:	00800044 	movi	r2,1
  801c94:	00000106 	br	801c9c <logic+0x1a0c>
  801c98:	0005883a 	mov	r2,zero
  801c9c:	1007883a 	mov	r3,r2
  801ca0:	e0bffc17 	ldw	r2,-16(fp)
  801ca4:	10c04105 	stb	r3,260(r2)
  if (d->_g57) {
  801ca8:	e0bffc17 	ldw	r2,-16(fp)
  801cac:	10804103 	ldbu	r2,260(r2)
  801cb0:	10803fcc 	andi	r2,r2,255
  801cb4:	1080201c 	xori	r2,r2,128
  801cb8:	10bfe004 	addi	r2,r2,-128
  801cbc:	10000426 	beq	r2,zero,801cd0 <logic+0x1a40>
    d->_Pacemaker_local__Atrig2 = 0;
  801cc0:	e0bffc17 	ldw	r2,-16(fp)
  801cc4:	10003485 	stb	zero,210(r2)
    d->_Pacemaker_local__Atrig3 = 0;
  801cc8:	e0bffc17 	ldw	r2,-16(fp)
  801ccc:	100034c5 	stb	zero,211(r2)
  }
  d->_cg36 = d->_region1_ARefrac_t < d->T_PVAR;
  801cd0:	e0bffc17 	ldw	r2,-16(fp)
  801cd4:	14002317 	ldw	r16,140(r2)
  801cd8:	14402417 	ldw	r17,144(r2)
  801cdc:	e0bffc17 	ldw	r2,-16(fp)
  801ce0:	10800317 	ldw	r2,12(r2)
  801ce4:	1009883a 	mov	r4,r2
  801ce8:	0808e200 	call	808e20 <__floatsidf>
  801cec:	1009883a 	mov	r4,r2
  801cf0:	180b883a 	mov	r5,r3
  801cf4:	04800044 	movi	r18,1
  801cf8:	200d883a 	mov	r6,r4
  801cfc:	280f883a 	mov	r7,r5
  801d00:	8009883a 	mov	r4,r16
  801d04:	880b883a 	mov	r5,r17
  801d08:	0807d180 	call	807d18 <__ledf2>
  801d0c:	10000116 	blt	r2,zero,801d14 <logic+0x1a84>
  801d10:	0025883a 	mov	r18,zero
  801d14:	9007883a 	mov	r3,r18
  801d18:	e0bffc17 	ldw	r2,-16(fp)
  801d1c:	10c05b85 	stb	r3,366(r2)
  d->_g55 = d->_g57 && d->_cg36;
  801d20:	e0bffc17 	ldw	r2,-16(fp)
  801d24:	10804103 	ldbu	r2,260(r2)
  801d28:	10803fcc 	andi	r2,r2,255
  801d2c:	1080201c 	xori	r2,r2,128
  801d30:	10bfe004 	addi	r2,r2,-128
  801d34:	10000826 	beq	r2,zero,801d58 <logic+0x1ac8>
  801d38:	e0bffc17 	ldw	r2,-16(fp)
  801d3c:	10805b83 	ldbu	r2,366(r2)
  801d40:	10803fcc 	andi	r2,r2,255
  801d44:	1080201c 	xori	r2,r2,128
  801d48:	10bfe004 	addi	r2,r2,-128
  801d4c:	10000226 	beq	r2,zero,801d58 <logic+0x1ac8>
  801d50:	00800044 	movi	r2,1
  801d54:	00000106 	br	801d5c <logic+0x1acc>
  801d58:	0005883a 	mov	r2,zero
  801d5c:	1007883a 	mov	r3,r2
  801d60:	e0bffc17 	ldw	r2,-16(fp)
  801d64:	10c04085 	stb	r3,258(r2)
  if (d->_g55) {
  801d68:	e0bffc17 	ldw	r2,-16(fp)
  801d6c:	10804083 	ldbu	r2,258(r2)
  801d70:	10803fcc 	andi	r2,r2,255
  801d74:	1080201c 	xori	r2,r2,128
  801d78:	10bfe004 	addi	r2,r2,-128
  801d7c:	10003426 	beq	r2,zero,801e50 <logic+0x1bc0>
    d->sleepT = (d->sleepT < (d->T_PVAR - d->_region1_ARefrac_t)) ? d->sleepT : (d->T_PVAR - d->_region1_ARefrac_t);
  801d80:	e0bffc17 	ldw	r2,-16(fp)
  801d84:	14002f17 	ldw	r16,188(r2)
  801d88:	14403017 	ldw	r17,192(r2)
  801d8c:	e0bffc17 	ldw	r2,-16(fp)
  801d90:	10800317 	ldw	r2,12(r2)
  801d94:	1009883a 	mov	r4,r2
  801d98:	0808e200 	call	808e20 <__floatsidf>
  801d9c:	1011883a 	mov	r8,r2
  801da0:	1813883a 	mov	r9,r3
  801da4:	e13ffc17 	ldw	r4,-16(fp)
  801da8:	20802317 	ldw	r2,140(r4)
  801dac:	20c02417 	ldw	r3,144(r4)
  801db0:	100d883a 	mov	r6,r2
  801db4:	180f883a 	mov	r7,r3
  801db8:	4009883a 	mov	r4,r8
  801dbc:	480b883a 	mov	r5,r9
  801dc0:	08085240 	call	808524 <__subdf3>
  801dc4:	1009883a 	mov	r4,r2
  801dc8:	180b883a 	mov	r5,r3
  801dcc:	2005883a 	mov	r2,r4
  801dd0:	2807883a 	mov	r3,r5
  801dd4:	100d883a 	mov	r6,r2
  801dd8:	180f883a 	mov	r7,r3
  801ddc:	8009883a 	mov	r4,r16
  801de0:	880b883a 	mov	r5,r17
  801de4:	0807d180 	call	807d18 <__ledf2>
  801de8:	1000040e 	bge	r2,zero,801dfc <logic+0x1b6c>
  801dec:	e13ffc17 	ldw	r4,-16(fp)
  801df0:	20802f17 	ldw	r2,188(r4)
  801df4:	20c03017 	ldw	r3,192(r4)
  801df8:	00001206 	br	801e44 <logic+0x1bb4>
  801dfc:	e0bffc17 	ldw	r2,-16(fp)
  801e00:	10800317 	ldw	r2,12(r2)
  801e04:	1009883a 	mov	r4,r2
  801e08:	0808e200 	call	808e20 <__floatsidf>
  801e0c:	1011883a 	mov	r8,r2
  801e10:	1813883a 	mov	r9,r3
  801e14:	e13ffc17 	ldw	r4,-16(fp)
  801e18:	20802317 	ldw	r2,140(r4)
  801e1c:	20c02417 	ldw	r3,144(r4)
  801e20:	100d883a 	mov	r6,r2
  801e24:	180f883a 	mov	r7,r3
  801e28:	4009883a 	mov	r4,r8
  801e2c:	480b883a 	mov	r5,r9
  801e30:	08085240 	call	808524 <__subdf3>
  801e34:	1009883a 	mov	r4,r2
  801e38:	180b883a 	mov	r5,r3
  801e3c:	2005883a 	mov	r2,r4
  801e40:	2807883a 	mov	r3,r5
  801e44:	e13ffc17 	ldw	r4,-16(fp)
  801e48:	20802f15 	stw	r2,188(r4)
  801e4c:	20c03015 	stw	r3,192(r4)
  }
  d->_cg37 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  801e50:	e0bffc17 	ldw	r2,-16(fp)
  801e54:	10803483 	ldbu	r2,210(r2)
  801e58:	10803fcc 	andi	r2,r2,255
  801e5c:	1080201c 	xori	r2,r2,128
  801e60:	10bfe004 	addi	r2,r2,-128
  801e64:	1000061e 	bne	r2,zero,801e80 <logic+0x1bf0>
  801e68:	e0bffc17 	ldw	r2,-16(fp)
  801e6c:	108034c3 	ldbu	r2,211(r2)
  801e70:	10803fcc 	andi	r2,r2,255
  801e74:	1080201c 	xori	r2,r2,128
  801e78:	10bfe004 	addi	r2,r2,-128
  801e7c:	10000226 	beq	r2,zero,801e88 <logic+0x1bf8>
  801e80:	00800044 	movi	r2,1
  801e84:	00000106 	br	801e8c <logic+0x1bfc>
  801e88:	0005883a 	mov	r2,zero
  801e8c:	1007883a 	mov	r3,r2
  801e90:	e0bffc17 	ldw	r2,-16(fp)
  801e94:	10c05bc5 	stb	r3,367(r2)
  d->_g34 = d->_g55 && !d->_cg37 || d->_g39 && !d->_cg41;
  801e98:	e0bffc17 	ldw	r2,-16(fp)
  801e9c:	10804083 	ldbu	r2,258(r2)
  801ea0:	10803fcc 	andi	r2,r2,255
  801ea4:	1080201c 	xori	r2,r2,128
  801ea8:	10bfe004 	addi	r2,r2,-128
  801eac:	10000626 	beq	r2,zero,801ec8 <logic+0x1c38>
  801eb0:	e0bffc17 	ldw	r2,-16(fp)
  801eb4:	10805bc3 	ldbu	r2,367(r2)
  801eb8:	10803fcc 	andi	r2,r2,255
  801ebc:	1080201c 	xori	r2,r2,128
  801ec0:	10bfe004 	addi	r2,r2,-128
  801ec4:	10000c26 	beq	r2,zero,801ef8 <logic+0x1c68>
  801ec8:	e0bffc17 	ldw	r2,-16(fp)
  801ecc:	10803d43 	ldbu	r2,245(r2)
  801ed0:	10803fcc 	andi	r2,r2,255
  801ed4:	1080201c 	xori	r2,r2,128
  801ed8:	10bfe004 	addi	r2,r2,-128
  801edc:	10000826 	beq	r2,zero,801f00 <logic+0x1c70>
  801ee0:	e0bffc17 	ldw	r2,-16(fp)
  801ee4:	10805c03 	ldbu	r2,368(r2)
  801ee8:	10803fcc 	andi	r2,r2,255
  801eec:	1080201c 	xori	r2,r2,128
  801ef0:	10bfe004 	addi	r2,r2,-128
  801ef4:	1000021e 	bne	r2,zero,801f00 <logic+0x1c70>
  801ef8:	00800044 	movi	r2,1
  801efc:	00000106 	br	801f04 <logic+0x1c74>
  801f00:	0005883a 	mov	r2,zero
  801f04:	1007883a 	mov	r3,r2
  801f08:	e0bffc17 	ldw	r2,-16(fp)
  801f0c:	10c03c85 	stb	r3,242(r2)
  d->_g58 = d->_g57 && !d->_cg36;
  801f10:	e0bffc17 	ldw	r2,-16(fp)
  801f14:	10804103 	ldbu	r2,260(r2)
  801f18:	10803fcc 	andi	r2,r2,255
  801f1c:	1080201c 	xori	r2,r2,128
  801f20:	10bfe004 	addi	r2,r2,-128
  801f24:	10000826 	beq	r2,zero,801f48 <logic+0x1cb8>
  801f28:	e0bffc17 	ldw	r2,-16(fp)
  801f2c:	10805b83 	ldbu	r2,366(r2)
  801f30:	10803fcc 	andi	r2,r2,255
  801f34:	1080201c 	xori	r2,r2,128
  801f38:	10bfe004 	addi	r2,r2,-128
  801f3c:	1000021e 	bne	r2,zero,801f48 <logic+0x1cb8>
  801f40:	00800044 	movi	r2,1
  801f44:	00000106 	br	801f4c <logic+0x1cbc>
  801f48:	0005883a 	mov	r2,zero
  801f4c:	1007883a 	mov	r3,r2
  801f50:	e0bffc17 	ldw	r2,-16(fp)
  801f54:	10c04145 	stb	r3,261(r2)
  d->_cg46 = d->_Pacemaker_local__Atrig2 || d->_Pacemaker_local__Atrig3;
  801f58:	e0bffc17 	ldw	r2,-16(fp)
  801f5c:	10803483 	ldbu	r2,210(r2)
  801f60:	10803fcc 	andi	r2,r2,255
  801f64:	1080201c 	xori	r2,r2,128
  801f68:	10bfe004 	addi	r2,r2,-128
  801f6c:	1000061e 	bne	r2,zero,801f88 <logic+0x1cf8>
  801f70:	e0bffc17 	ldw	r2,-16(fp)
  801f74:	108034c3 	ldbu	r2,211(r2)
  801f78:	10803fcc 	andi	r2,r2,255
  801f7c:	1080201c 	xori	r2,r2,128
  801f80:	10bfe004 	addi	r2,r2,-128
  801f84:	10000226 	beq	r2,zero,801f90 <logic+0x1d00>
  801f88:	00800044 	movi	r2,1
  801f8c:	00000106 	br	801f94 <logic+0x1d04>
  801f90:	0005883a 	mov	r2,zero
  801f94:	1007883a 	mov	r3,r2
  801f98:	e0bffc17 	ldw	r2,-16(fp)
  801f9c:	10c05cc5 	stb	r3,371(r2)
  d->_g37 = d->_g40 && !d->_cg43 || d->_g58 && !d->_cg46;
  801fa0:	e0bffc17 	ldw	r2,-16(fp)
  801fa4:	10803d83 	ldbu	r2,246(r2)
  801fa8:	10803fcc 	andi	r2,r2,255
  801fac:	1080201c 	xori	r2,r2,128
  801fb0:	10bfe004 	addi	r2,r2,-128
  801fb4:	10000626 	beq	r2,zero,801fd0 <logic+0x1d40>
  801fb8:	e0bffc17 	ldw	r2,-16(fp)
  801fbc:	10805c83 	ldbu	r2,370(r2)
  801fc0:	10803fcc 	andi	r2,r2,255
  801fc4:	1080201c 	xori	r2,r2,128
  801fc8:	10bfe004 	addi	r2,r2,-128
  801fcc:	10000c26 	beq	r2,zero,802000 <logic+0x1d70>
  801fd0:	e0bffc17 	ldw	r2,-16(fp)
  801fd4:	10804143 	ldbu	r2,261(r2)
  801fd8:	10803fcc 	andi	r2,r2,255
  801fdc:	1080201c 	xori	r2,r2,128
  801fe0:	10bfe004 	addi	r2,r2,-128
  801fe4:	10000826 	beq	r2,zero,802008 <logic+0x1d78>
  801fe8:	e0bffc17 	ldw	r2,-16(fp)
  801fec:	10805cc3 	ldbu	r2,371(r2)
  801ff0:	10803fcc 	andi	r2,r2,255
  801ff4:	1080201c 	xori	r2,r2,128
  801ff8:	10bfe004 	addi	r2,r2,-128
  801ffc:	1000021e 	bne	r2,zero,802008 <logic+0x1d78>
  802000:	00800044 	movi	r2,1
  802004:	00000106 	br	80200c <logic+0x1d7c>
  802008:	0005883a 	mov	r2,zero
  80200c:	1007883a 	mov	r3,r2
  802010:	e0bffc17 	ldw	r2,-16(fp)
  802014:	10c03d05 	stb	r3,244(r2)
  d->_g41 = d->_g57 || d->_g52 && !d->_cg52;
  802018:	e0bffc17 	ldw	r2,-16(fp)
  80201c:	10804103 	ldbu	r2,260(r2)
  802020:	10803fcc 	andi	r2,r2,255
  802024:	1080201c 	xori	r2,r2,128
  802028:	10bfe004 	addi	r2,r2,-128
  80202c:	10000c1e 	bne	r2,zero,802060 <logic+0x1dd0>
  802030:	e0bffc17 	ldw	r2,-16(fp)
  802034:	10803fc3 	ldbu	r2,255(r2)
  802038:	10803fcc 	andi	r2,r2,255
  80203c:	1080201c 	xori	r2,r2,128
  802040:	10bfe004 	addi	r2,r2,-128
  802044:	10000826 	beq	r2,zero,802068 <logic+0x1dd8>
  802048:	e0bffc17 	ldw	r2,-16(fp)
  80204c:	10805d03 	ldbu	r2,372(r2)
  802050:	10803fcc 	andi	r2,r2,255
  802054:	1080201c 	xori	r2,r2,128
  802058:	10bfe004 	addi	r2,r2,-128
  80205c:	1000021e 	bne	r2,zero,802068 <logic+0x1dd8>
  802060:	00800044 	movi	r2,1
  802064:	00000106 	br	80206c <logic+0x1ddc>
  802068:	0005883a 	mov	r2,zero
  80206c:	1007883a 	mov	r3,r2
  802070:	e0bffc17 	ldw	r2,-16(fp)
  802074:	10c03dc5 	stb	r3,247(r2)
  d->_g46 = d->_g59 && d->AS;
  802078:	e0bffc17 	ldw	r2,-16(fp)
  80207c:	10804183 	ldbu	r2,262(r2)
  802080:	10803fcc 	andi	r2,r2,255
  802084:	1080201c 	xori	r2,r2,128
  802088:	10bfe004 	addi	r2,r2,-128
  80208c:	10000826 	beq	r2,zero,8020b0 <logic+0x1e20>
  802090:	e0bffc17 	ldw	r2,-16(fp)
  802094:	10803103 	ldbu	r2,196(r2)
  802098:	10803fcc 	andi	r2,r2,255
  80209c:	1080201c 	xori	r2,r2,128
  8020a0:	10bfe004 	addi	r2,r2,-128
  8020a4:	10000226 	beq	r2,zero,8020b0 <logic+0x1e20>
  8020a8:	00800044 	movi	r2,1
  8020ac:	00000106 	br	8020b4 <logic+0x1e24>
  8020b0:	0005883a 	mov	r2,zero
  8020b4:	1007883a 	mov	r3,r2
  8020b8:	e0bffc17 	ldw	r2,-16(fp)
  8020bc:	10c03ec5 	stb	r3,251(r2)
  if (d->_g46) {
  8020c0:	e0bffc17 	ldw	r2,-16(fp)
  8020c4:	10803ec3 	ldbu	r2,251(r2)
  8020c8:	10803fcc 	andi	r2,r2,255
  8020cc:	1080201c 	xori	r2,r2,128
  8020d0:	10bfe004 	addi	r2,r2,-128
  8020d4:	10000526 	beq	r2,zero,8020ec <logic+0x1e5c>
    d->_taken_transitions[6] += 1;
  8020d8:	e0bffc17 	ldw	r2,-16(fp)
  8020dc:	10800d17 	ldw	r2,52(r2)
  8020e0:	10c00044 	addi	r3,r2,1
  8020e4:	e0bffc17 	ldw	r2,-16(fp)
  8020e8:	10c00d15 	stw	r3,52(r2)
  }
  d->_g43 = d->_g63 && d->_cg63;
  8020ec:	e0bffc17 	ldw	r2,-16(fp)
  8020f0:	10804243 	ldbu	r2,265(r2)
  8020f4:	10803fcc 	andi	r2,r2,255
  8020f8:	1080201c 	xori	r2,r2,128
  8020fc:	10bfe004 	addi	r2,r2,-128
  802100:	10000826 	beq	r2,zero,802124 <logic+0x1e94>
  802104:	e0bffc17 	ldw	r2,-16(fp)
  802108:	10805b03 	ldbu	r2,364(r2)
  80210c:	10803fcc 	andi	r2,r2,255
  802110:	1080201c 	xori	r2,r2,128
  802114:	10bfe004 	addi	r2,r2,-128
  802118:	10000226 	beq	r2,zero,802124 <logic+0x1e94>
  80211c:	00800044 	movi	r2,1
  802120:	00000106 	br	802128 <logic+0x1e98>
  802124:	0005883a 	mov	r2,zero
  802128:	1007883a 	mov	r3,r2
  80212c:	e0bffc17 	ldw	r2,-16(fp)
  802130:	10c03e45 	stb	r3,249(r2)
  if (d->_g43) {
  802134:	e0bffc17 	ldw	r2,-16(fp)
  802138:	10803e43 	ldbu	r2,249(r2)
  80213c:	10803fcc 	andi	r2,r2,255
  802140:	1080201c 	xori	r2,r2,128
  802144:	10bfe004 	addi	r2,r2,-128
  802148:	10000526 	beq	r2,zero,802160 <logic+0x1ed0>
    d->_taken_transitions[7] += 1;
  80214c:	e0bffc17 	ldw	r2,-16(fp)
  802150:	10800e17 	ldw	r2,56(r2)
  802154:	10c00044 	addi	r3,r2,1
  802158:	e0bffc17 	ldw	r2,-16(fp)
  80215c:	10c00e15 	stw	r3,56(r2)
  }
  d->_g52 = d->_g46 || d->_g43;
  802160:	e0bffc17 	ldw	r2,-16(fp)
  802164:	10803ec3 	ldbu	r2,251(r2)
  802168:	10803fcc 	andi	r2,r2,255
  80216c:	1080201c 	xori	r2,r2,128
  802170:	10bfe004 	addi	r2,r2,-128
  802174:	1000061e 	bne	r2,zero,802190 <logic+0x1f00>
  802178:	e0bffc17 	ldw	r2,-16(fp)
  80217c:	10803e43 	ldbu	r2,249(r2)
  802180:	10803fcc 	andi	r2,r2,255
  802184:	1080201c 	xori	r2,r2,128
  802188:	10bfe004 	addi	r2,r2,-128
  80218c:	10000226 	beq	r2,zero,802198 <logic+0x1f08>
  802190:	00800044 	movi	r2,1
  802194:	00000106 	br	80219c <logic+0x1f0c>
  802198:	0005883a 	mov	r2,zero
  80219c:	1007883a 	mov	r3,r2
  8021a0:	e0bffc17 	ldw	r2,-16(fp)
  8021a4:	10c03fc5 	stb	r3,255(r2)
  d->_g35 = d->_pg72;
  8021a8:	e0bffc17 	ldw	r2,-16(fp)
  8021ac:	10c06e03 	ldbu	r3,440(r2)
  8021b0:	e0bffc17 	ldw	r2,-16(fp)
  8021b4:	10c03cc5 	stb	r3,243(r2)
  d->_cg81 = d->A_EVT;
  8021b8:	e0bffc17 	ldw	r2,-16(fp)
  8021bc:	10c03203 	ldbu	r3,200(r2)
  8021c0:	e0bffc17 	ldw	r2,-16(fp)
  8021c4:	10c05f85 	stb	r3,382(r2)
  d->_g59 = d->_g35 && d->_cg81;
  8021c8:	e0bffc17 	ldw	r2,-16(fp)
  8021cc:	10803cc3 	ldbu	r2,243(r2)
  8021d0:	10803fcc 	andi	r2,r2,255
  8021d4:	1080201c 	xori	r2,r2,128
  8021d8:	10bfe004 	addi	r2,r2,-128
  8021dc:	10000826 	beq	r2,zero,802200 <logic+0x1f70>
  8021e0:	e0bffc17 	ldw	r2,-16(fp)
  8021e4:	10805f83 	ldbu	r2,382(r2)
  8021e8:	10803fcc 	andi	r2,r2,255
  8021ec:	1080201c 	xori	r2,r2,128
  8021f0:	10bfe004 	addi	r2,r2,-128
  8021f4:	10000226 	beq	r2,zero,802200 <logic+0x1f70>
  8021f8:	00800044 	movi	r2,1
  8021fc:	00000106 	br	802204 <logic+0x1f74>
  802200:	0005883a 	mov	r2,zero
  802204:	1007883a 	mov	r3,r2
  802208:	e0bffc17 	ldw	r2,-16(fp)
  80220c:	10c04185 	stb	r3,262(r2)
  if (d->_g59) {
  802210:	e0bffc17 	ldw	r2,-16(fp)
  802214:	10804183 	ldbu	r2,262(r2)
  802218:	10803fcc 	andi	r2,r2,255
  80221c:	1080201c 	xori	r2,r2,128
  802220:	10bfe004 	addi	r2,r2,-128
  802224:	10000326 	beq	r2,zero,802234 <logic+0x1fa4>
    d->_Pacemaker_local__Atrig4 = 1;
  802228:	e0bffc17 	ldw	r2,-16(fp)
  80222c:	00c00044 	movi	r3,1
  802230:	10c03505 	stb	r3,212(r2)
  }
  d->_g63 = d->_pg158;
  802234:	e0bffc17 	ldw	r2,-16(fp)
  802238:	10c06e43 	ldbu	r3,441(r2)
  80223c:	e0bffc17 	ldw	r2,-16(fp)
  802240:	10c04245 	stb	r3,265(r2)
  if (d->_g63) {
  802244:	e0bffc17 	ldw	r2,-16(fp)
  802248:	10804243 	ldbu	r2,265(r2)
  80224c:	10803fcc 	andi	r2,r2,255
  802250:	1080201c 	xori	r2,r2,128
  802254:	10bfe004 	addi	r2,r2,-128
  802258:	10001226 	beq	r2,zero,8022a4 <logic+0x2014>
    d->_region2_AEI_t += d->deltaT;
  80225c:	e13ffc17 	ldw	r4,-16(fp)
  802260:	20802517 	ldw	r2,148(r4)
  802264:	20c02617 	ldw	r3,152(r4)
  802268:	e1bffc17 	ldw	r6,-16(fp)
  80226c:	31002d17 	ldw	r4,180(r6)
  802270:	31402e17 	ldw	r5,184(r6)
  802274:	200d883a 	mov	r6,r4
  802278:	280f883a 	mov	r7,r5
  80227c:	1009883a 	mov	r4,r2
  802280:	180b883a 	mov	r5,r3
  802284:	0806aa80 	call	806aa8 <__adddf3>
  802288:	1009883a 	mov	r4,r2
  80228c:	180b883a 	mov	r5,r3
  802290:	2005883a 	mov	r2,r4
  802294:	2807883a 	mov	r3,r5
  802298:	e13ffc17 	ldw	r4,-16(fp)
  80229c:	20802515 	stw	r2,148(r4)
  8022a0:	20c02615 	stw	r3,152(r4)
  }
  d->_g64 = d->_g35 && !d->_cg81;
  8022a4:	e0bffc17 	ldw	r2,-16(fp)
  8022a8:	10803cc3 	ldbu	r2,243(r2)
  8022ac:	10803fcc 	andi	r2,r2,255
  8022b0:	1080201c 	xori	r2,r2,128
  8022b4:	10bfe004 	addi	r2,r2,-128
  8022b8:	10000826 	beq	r2,zero,8022dc <logic+0x204c>
  8022bc:	e0bffc17 	ldw	r2,-16(fp)
  8022c0:	10805f83 	ldbu	r2,382(r2)
  8022c4:	10803fcc 	andi	r2,r2,255
  8022c8:	1080201c 	xori	r2,r2,128
  8022cc:	10bfe004 	addi	r2,r2,-128
  8022d0:	1000021e 	bne	r2,zero,8022dc <logic+0x204c>
  8022d4:	00800044 	movi	r2,1
  8022d8:	00000106 	br	8022e0 <logic+0x2050>
  8022dc:	0005883a 	mov	r2,zero
  8022e0:	1007883a 	mov	r3,r2
  8022e4:	e0bffc17 	ldw	r2,-16(fp)
  8022e8:	10c04285 	stb	r3,266(r2)
  d->_cg84 = d->_region2_AEI_t >= d->T_AEI;
  8022ec:	e0bffc17 	ldw	r2,-16(fp)
  8022f0:	14002517 	ldw	r16,148(r2)
  8022f4:	14402617 	ldw	r17,152(r2)
  8022f8:	e0bffc17 	ldw	r2,-16(fp)
  8022fc:	10800217 	ldw	r2,8(r2)
  802300:	1009883a 	mov	r4,r2
  802304:	0808e200 	call	808e20 <__floatsidf>
  802308:	1009883a 	mov	r4,r2
  80230c:	180b883a 	mov	r5,r3
  802310:	04800044 	movi	r18,1
  802314:	200d883a 	mov	r6,r4
  802318:	280f883a 	mov	r7,r5
  80231c:	8009883a 	mov	r4,r16
  802320:	880b883a 	mov	r5,r17
  802324:	0807c3c0 	call	807c3c <__gedf2>
  802328:	1000010e 	bge	r2,zero,802330 <logic+0x20a0>
  80232c:	0025883a 	mov	r18,zero
  802330:	9007883a 	mov	r3,r18
  802334:	e0bffc17 	ldw	r2,-16(fp)
  802338:	10c05f45 	stb	r3,381(r2)
  d->_g60 = d->_g64 && d->_cg84;
  80233c:	e0bffc17 	ldw	r2,-16(fp)
  802340:	10804283 	ldbu	r2,266(r2)
  802344:	10803fcc 	andi	r2,r2,255
  802348:	1080201c 	xori	r2,r2,128
  80234c:	10bfe004 	addi	r2,r2,-128
  802350:	10000826 	beq	r2,zero,802374 <logic+0x20e4>
  802354:	e0bffc17 	ldw	r2,-16(fp)
  802358:	10805f43 	ldbu	r2,381(r2)
  80235c:	10803fcc 	andi	r2,r2,255
  802360:	1080201c 	xori	r2,r2,128
  802364:	10bfe004 	addi	r2,r2,-128
  802368:	10000226 	beq	r2,zero,802374 <logic+0x20e4>
  80236c:	00800044 	movi	r2,1
  802370:	00000106 	br	802378 <logic+0x20e8>
  802374:	0005883a 	mov	r2,zero
  802378:	1007883a 	mov	r3,r2
  80237c:	e0bffc17 	ldw	r2,-16(fp)
  802380:	10c041c5 	stb	r3,263(r2)
  if (d->_g60) {
  802384:	e0bffc17 	ldw	r2,-16(fp)
  802388:	108041c3 	ldbu	r2,263(r2)
  80238c:	10803fcc 	andi	r2,r2,255
  802390:	1080201c 	xori	r2,r2,128
  802394:	10bfe004 	addi	r2,r2,-128
  802398:	10000326 	beq	r2,zero,8023a8 <logic+0x2118>
    d->_Pacemaker_local__Atrig5 = 1;
  80239c:	e0bffc17 	ldw	r2,-16(fp)
  8023a0:	00c00044 	movi	r3,1
  8023a4:	10c03545 	stb	r3,213(r2)
  }
  d->_g81 = d->_pg83_e2;
  8023a8:	e0bffc17 	ldw	r2,-16(fp)
  8023ac:	10c06e83 	ldbu	r3,442(r2)
  8023b0:	e0bffc17 	ldw	r2,-16(fp)
  8023b4:	10c04545 	stb	r3,277(r2)
  d->_cg68 = d->V_EVT;
  8023b8:	e0bffc17 	ldw	r2,-16(fp)
  8023bc:	10c03243 	ldbu	r3,201(r2)
  8023c0:	e0bffc17 	ldw	r2,-16(fp)
  8023c4:	10c05e45 	stb	r3,377(r2)
  d->_g69 = d->_g81 && d->_cg68;
  8023c8:	e0bffc17 	ldw	r2,-16(fp)
  8023cc:	10804543 	ldbu	r2,277(r2)
  8023d0:	10803fcc 	andi	r2,r2,255
  8023d4:	1080201c 	xori	r2,r2,128
  8023d8:	10bfe004 	addi	r2,r2,-128
  8023dc:	10000826 	beq	r2,zero,802400 <logic+0x2170>
  8023e0:	e0bffc17 	ldw	r2,-16(fp)
  8023e4:	10805e43 	ldbu	r2,377(r2)
  8023e8:	10803fcc 	andi	r2,r2,255
  8023ec:	1080201c 	xori	r2,r2,128
  8023f0:	10bfe004 	addi	r2,r2,-128
  8023f4:	10000226 	beq	r2,zero,802400 <logic+0x2170>
  8023f8:	00800044 	movi	r2,1
  8023fc:	00000106 	br	802404 <logic+0x2174>
  802400:	0005883a 	mov	r2,zero
  802404:	1007883a 	mov	r3,r2
  802408:	e0bffc17 	ldw	r2,-16(fp)
  80240c:	10c04305 	stb	r3,268(r2)
  if (d->_g69) {
  802410:	e0bffc17 	ldw	r2,-16(fp)
  802414:	10804303 	ldbu	r2,268(r2)
  802418:	10803fcc 	andi	r2,r2,255
  80241c:	1080201c 	xori	r2,r2,128
  802420:	10bfe004 	addi	r2,r2,-128
  802424:	10000c26 	beq	r2,zero,802458 <logic+0x21c8>
    d->_region2_AEI_t = 0;
  802428:	e0bffc17 	ldw	r2,-16(fp)
  80242c:	10002515 	stw	zero,148(r2)
  802430:	10002615 	stw	zero,152(r2)
    d->_taken_transitions[11] += 1;
  802434:	e0bffc17 	ldw	r2,-16(fp)
  802438:	10801217 	ldw	r2,72(r2)
  80243c:	10c00044 	addi	r3,r2,1
  802440:	e0bffc17 	ldw	r2,-16(fp)
  802444:	10c01215 	stw	r3,72(r2)
    d->_Pacemaker_local__Atrig4 = 0;
  802448:	e0bffc17 	ldw	r2,-16(fp)
  80244c:	10003505 	stb	zero,212(r2)
    d->_Pacemaker_local__Atrig5 = 0;
  802450:	e0bffc17 	ldw	r2,-16(fp)
  802454:	10003545 	stb	zero,213(r2)
  }
  d->_g75 = d->_pg74;
  802458:	e0bffc17 	ldw	r2,-16(fp)
  80245c:	10c06ec3 	ldbu	r3,443(r2)
  802460:	e0bffc17 	ldw	r2,-16(fp)
  802464:	10c04445 	stb	r3,273(r2)
  d->_g78 = d->_pg77;
  802468:	e0bffc17 	ldw	r2,-16(fp)
  80246c:	10c06f03 	ldbu	r3,444(r2)
  802470:	e0bffc17 	ldw	r2,-16(fp)
  802474:	10c04505 	stb	r3,276(r2)
  d->_g78 = d->_g69 || d->_g75 || d->_g78;
  802478:	e0bffc17 	ldw	r2,-16(fp)
  80247c:	10804303 	ldbu	r2,268(r2)
  802480:	10803fcc 	andi	r2,r2,255
  802484:	1080201c 	xori	r2,r2,128
  802488:	10bfe004 	addi	r2,r2,-128
  80248c:	10000c1e 	bne	r2,zero,8024c0 <logic+0x2230>
  802490:	e0bffc17 	ldw	r2,-16(fp)
  802494:	10804443 	ldbu	r2,273(r2)
  802498:	10803fcc 	andi	r2,r2,255
  80249c:	1080201c 	xori	r2,r2,128
  8024a0:	10bfe004 	addi	r2,r2,-128
  8024a4:	1000061e 	bne	r2,zero,8024c0 <logic+0x2230>
  8024a8:	e0bffc17 	ldw	r2,-16(fp)
  8024ac:	10804503 	ldbu	r2,276(r2)
  8024b0:	10803fcc 	andi	r2,r2,255
  8024b4:	1080201c 	xori	r2,r2,128
  8024b8:	10bfe004 	addi	r2,r2,-128
  8024bc:	10000226 	beq	r2,zero,8024c8 <logic+0x2238>
  8024c0:	00800044 	movi	r2,1
  8024c4:	00000106 	br	8024cc <logic+0x223c>
  8024c8:	0005883a 	mov	r2,zero
  8024cc:	1007883a 	mov	r3,r2
  8024d0:	e0bffc17 	ldw	r2,-16(fp)
  8024d4:	10c04505 	stb	r3,276(r2)
  d->_cg71 = d->_region2_AEI_t < d->T_AEI;
  8024d8:	e0bffc17 	ldw	r2,-16(fp)
  8024dc:	14002517 	ldw	r16,148(r2)
  8024e0:	14402617 	ldw	r17,152(r2)
  8024e4:	e0bffc17 	ldw	r2,-16(fp)
  8024e8:	10800217 	ldw	r2,8(r2)
  8024ec:	1009883a 	mov	r4,r2
  8024f0:	0808e200 	call	808e20 <__floatsidf>
  8024f4:	1009883a 	mov	r4,r2
  8024f8:	180b883a 	mov	r5,r3
  8024fc:	04800044 	movi	r18,1
  802500:	200d883a 	mov	r6,r4
  802504:	280f883a 	mov	r7,r5
  802508:	8009883a 	mov	r4,r16
  80250c:	880b883a 	mov	r5,r17
  802510:	0807d180 	call	807d18 <__ledf2>
  802514:	10000116 	blt	r2,zero,80251c <logic+0x228c>
  802518:	0025883a 	mov	r18,zero
  80251c:	9007883a 	mov	r3,r18
  802520:	e0bffc17 	ldw	r2,-16(fp)
  802524:	10c05e85 	stb	r3,378(r2)
  d->_g75 = d->_g78 && !d->_cg71;
  802528:	e0bffc17 	ldw	r2,-16(fp)
  80252c:	10804503 	ldbu	r2,276(r2)
  802530:	10803fcc 	andi	r2,r2,255
  802534:	1080201c 	xori	r2,r2,128
  802538:	10bfe004 	addi	r2,r2,-128
  80253c:	10000826 	beq	r2,zero,802560 <logic+0x22d0>
  802540:	e0bffc17 	ldw	r2,-16(fp)
  802544:	10805e83 	ldbu	r2,378(r2)
  802548:	10803fcc 	andi	r2,r2,255
  80254c:	1080201c 	xori	r2,r2,128
  802550:	10bfe004 	addi	r2,r2,-128
  802554:	1000021e 	bne	r2,zero,802560 <logic+0x22d0>
  802558:	00800044 	movi	r2,1
  80255c:	00000106 	br	802564 <logic+0x22d4>
  802560:	0005883a 	mov	r2,zero
  802564:	1007883a 	mov	r3,r2
  802568:	e0bffc17 	ldw	r2,-16(fp)
  80256c:	10c04445 	stb	r3,273(r2)
  d->_cg76 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  802570:	e0bffc17 	ldw	r2,-16(fp)
  802574:	10803503 	ldbu	r2,212(r2)
  802578:	10803fcc 	andi	r2,r2,255
  80257c:	1080201c 	xori	r2,r2,128
  802580:	10bfe004 	addi	r2,r2,-128
  802584:	1000061e 	bne	r2,zero,8025a0 <logic+0x2310>
  802588:	e0bffc17 	ldw	r2,-16(fp)
  80258c:	10803543 	ldbu	r2,213(r2)
  802590:	10803fcc 	andi	r2,r2,255
  802594:	1080201c 	xori	r2,r2,128
  802598:	10bfe004 	addi	r2,r2,-128
  80259c:	10000226 	beq	r2,zero,8025a8 <logic+0x2318>
  8025a0:	00800044 	movi	r2,1
  8025a4:	00000106 	br	8025ac <logic+0x231c>
  8025a8:	0005883a 	mov	r2,zero
  8025ac:	1007883a 	mov	r3,r2
  8025b0:	e0bffc17 	ldw	r2,-16(fp)
  8025b4:	10c05f05 	stb	r3,380(r2)
  d->_g77 = d->_g75 && !d->_cg76;
  8025b8:	e0bffc17 	ldw	r2,-16(fp)
  8025bc:	10804443 	ldbu	r2,273(r2)
  8025c0:	10803fcc 	andi	r2,r2,255
  8025c4:	1080201c 	xori	r2,r2,128
  8025c8:	10bfe004 	addi	r2,r2,-128
  8025cc:	10000826 	beq	r2,zero,8025f0 <logic+0x2360>
  8025d0:	e0bffc17 	ldw	r2,-16(fp)
  8025d4:	10805f03 	ldbu	r2,380(r2)
  8025d8:	10803fcc 	andi	r2,r2,255
  8025dc:	1080201c 	xori	r2,r2,128
  8025e0:	10bfe004 	addi	r2,r2,-128
  8025e4:	1000021e 	bne	r2,zero,8025f0 <logic+0x2360>
  8025e8:	00800044 	movi	r2,1
  8025ec:	00000106 	br	8025f4 <logic+0x2364>
  8025f0:	0005883a 	mov	r2,zero
  8025f4:	1007883a 	mov	r3,r2
  8025f8:	e0bffc17 	ldw	r2,-16(fp)
  8025fc:	10c044c5 	stb	r3,275(r2)
  d->_g71 = d->_g78 && d->_cg71;
  802600:	e0bffc17 	ldw	r2,-16(fp)
  802604:	10804503 	ldbu	r2,276(r2)
  802608:	10803fcc 	andi	r2,r2,255
  80260c:	1080201c 	xori	r2,r2,128
  802610:	10bfe004 	addi	r2,r2,-128
  802614:	10000826 	beq	r2,zero,802638 <logic+0x23a8>
  802618:	e0bffc17 	ldw	r2,-16(fp)
  80261c:	10805e83 	ldbu	r2,378(r2)
  802620:	10803fcc 	andi	r2,r2,255
  802624:	1080201c 	xori	r2,r2,128
  802628:	10bfe004 	addi	r2,r2,-128
  80262c:	10000226 	beq	r2,zero,802638 <logic+0x23a8>
  802630:	00800044 	movi	r2,1
  802634:	00000106 	br	80263c <logic+0x23ac>
  802638:	0005883a 	mov	r2,zero
  80263c:	1007883a 	mov	r3,r2
  802640:	e0bffc17 	ldw	r2,-16(fp)
  802644:	10c04345 	stb	r3,269(r2)
  if (d->_g71) {
  802648:	e0bffc17 	ldw	r2,-16(fp)
  80264c:	10804343 	ldbu	r2,269(r2)
  802650:	10803fcc 	andi	r2,r2,255
  802654:	1080201c 	xori	r2,r2,128
  802658:	10bfe004 	addi	r2,r2,-128
  80265c:	10003426 	beq	r2,zero,802730 <logic+0x24a0>
    d->sleepT = (d->sleepT < (d->T_AEI - d->_region2_AEI_t)) ? d->sleepT : (d->T_AEI - d->_region2_AEI_t);
  802660:	e0bffc17 	ldw	r2,-16(fp)
  802664:	14002f17 	ldw	r16,188(r2)
  802668:	14403017 	ldw	r17,192(r2)
  80266c:	e0bffc17 	ldw	r2,-16(fp)
  802670:	10800217 	ldw	r2,8(r2)
  802674:	1009883a 	mov	r4,r2
  802678:	0808e200 	call	808e20 <__floatsidf>
  80267c:	1011883a 	mov	r8,r2
  802680:	1813883a 	mov	r9,r3
  802684:	e13ffc17 	ldw	r4,-16(fp)
  802688:	20802517 	ldw	r2,148(r4)
  80268c:	20c02617 	ldw	r3,152(r4)
  802690:	100d883a 	mov	r6,r2
  802694:	180f883a 	mov	r7,r3
  802698:	4009883a 	mov	r4,r8
  80269c:	480b883a 	mov	r5,r9
  8026a0:	08085240 	call	808524 <__subdf3>
  8026a4:	1009883a 	mov	r4,r2
  8026a8:	180b883a 	mov	r5,r3
  8026ac:	2005883a 	mov	r2,r4
  8026b0:	2807883a 	mov	r3,r5
  8026b4:	100d883a 	mov	r6,r2
  8026b8:	180f883a 	mov	r7,r3
  8026bc:	8009883a 	mov	r4,r16
  8026c0:	880b883a 	mov	r5,r17
  8026c4:	0807d180 	call	807d18 <__ledf2>
  8026c8:	1000040e 	bge	r2,zero,8026dc <logic+0x244c>
  8026cc:	e13ffc17 	ldw	r4,-16(fp)
  8026d0:	20802f17 	ldw	r2,188(r4)
  8026d4:	20c03017 	ldw	r3,192(r4)
  8026d8:	00001206 	br	802724 <logic+0x2494>
  8026dc:	e0bffc17 	ldw	r2,-16(fp)
  8026e0:	10800217 	ldw	r2,8(r2)
  8026e4:	1009883a 	mov	r4,r2
  8026e8:	0808e200 	call	808e20 <__floatsidf>
  8026ec:	1011883a 	mov	r8,r2
  8026f0:	1813883a 	mov	r9,r3
  8026f4:	e13ffc17 	ldw	r4,-16(fp)
  8026f8:	20802517 	ldw	r2,148(r4)
  8026fc:	20c02617 	ldw	r3,152(r4)
  802700:	100d883a 	mov	r6,r2
  802704:	180f883a 	mov	r7,r3
  802708:	4009883a 	mov	r4,r8
  80270c:	480b883a 	mov	r5,r9
  802710:	08085240 	call	808524 <__subdf3>
  802714:	1009883a 	mov	r4,r2
  802718:	180b883a 	mov	r5,r3
  80271c:	2005883a 	mov	r2,r4
  802720:	2807883a 	mov	r3,r5
  802724:	e13ffc17 	ldw	r4,-16(fp)
  802728:	20802f15 	stw	r2,188(r4)
  80272c:	20c03015 	stw	r3,192(r4)
  }
  d->_cg72 = d->_Pacemaker_local__Atrig4 || d->_Pacemaker_local__Atrig5;
  802730:	e0bffc17 	ldw	r2,-16(fp)
  802734:	10803503 	ldbu	r2,212(r2)
  802738:	10803fcc 	andi	r2,r2,255
  80273c:	1080201c 	xori	r2,r2,128
  802740:	10bfe004 	addi	r2,r2,-128
  802744:	1000061e 	bne	r2,zero,802760 <logic+0x24d0>
  802748:	e0bffc17 	ldw	r2,-16(fp)
  80274c:	10803543 	ldbu	r2,213(r2)
  802750:	10803fcc 	andi	r2,r2,255
  802754:	1080201c 	xori	r2,r2,128
  802758:	10bfe004 	addi	r2,r2,-128
  80275c:	10000226 	beq	r2,zero,802768 <logic+0x24d8>
  802760:	00800044 	movi	r2,1
  802764:	00000106 	br	80276c <logic+0x24dc>
  802768:	0005883a 	mov	r2,zero
  80276c:	1007883a 	mov	r3,r2
  802770:	e0bffc17 	ldw	r2,-16(fp)
  802774:	10c05ec5 	stb	r3,379(r2)
  d->_g74 = d->_g71 && !d->_cg72;
  802778:	e0bffc17 	ldw	r2,-16(fp)
  80277c:	10804343 	ldbu	r2,269(r2)
  802780:	10803fcc 	andi	r2,r2,255
  802784:	1080201c 	xori	r2,r2,128
  802788:	10bfe004 	addi	r2,r2,-128
  80278c:	10000826 	beq	r2,zero,8027b0 <logic+0x2520>
  802790:	e0bffc17 	ldw	r2,-16(fp)
  802794:	10805ec3 	ldbu	r2,379(r2)
  802798:	10803fcc 	andi	r2,r2,255
  80279c:	1080201c 	xori	r2,r2,128
  8027a0:	10bfe004 	addi	r2,r2,-128
  8027a4:	1000021e 	bne	r2,zero,8027b0 <logic+0x2520>
  8027a8:	00800044 	movi	r2,1
  8027ac:	00000106 	br	8027b4 <logic+0x2524>
  8027b0:	0005883a 	mov	r2,zero
  8027b4:	1007883a 	mov	r3,r2
  8027b8:	e0bffc17 	ldw	r2,-16(fp)
  8027bc:	10c04405 	stb	r3,272(r2)
  d->_g73_e1 = !(d->_g77 || d->_g74);
  8027c0:	e0bffc17 	ldw	r2,-16(fp)
  8027c4:	108044c3 	ldbu	r2,275(r2)
  8027c8:	10803fcc 	andi	r2,r2,255
  8027cc:	1080201c 	xori	r2,r2,128
  8027d0:	10bfe004 	addi	r2,r2,-128
  8027d4:	1000081e 	bne	r2,zero,8027f8 <logic+0x2568>
  8027d8:	e0bffc17 	ldw	r2,-16(fp)
  8027dc:	10804403 	ldbu	r2,272(r2)
  8027e0:	10803fcc 	andi	r2,r2,255
  8027e4:	1080201c 	xori	r2,r2,128
  8027e8:	10bfe004 	addi	r2,r2,-128
  8027ec:	1000021e 	bne	r2,zero,8027f8 <logic+0x2568>
  8027f0:	00800044 	movi	r2,1
  8027f4:	00000106 	br	8027fc <logic+0x256c>
  8027f8:	0005883a 	mov	r2,zero
  8027fc:	1007883a 	mov	r3,r2
  802800:	e0bffc17 	ldw	r2,-16(fp)
  802804:	10c06885 	stb	r3,418(r2)
  d->_g76 = d->_g71 && d->_cg72 || d->_g75 && d->_cg76;
  802808:	e0bffc17 	ldw	r2,-16(fp)
  80280c:	10804343 	ldbu	r2,269(r2)
  802810:	10803fcc 	andi	r2,r2,255
  802814:	1080201c 	xori	r2,r2,128
  802818:	10bfe004 	addi	r2,r2,-128
  80281c:	10000626 	beq	r2,zero,802838 <logic+0x25a8>
  802820:	e0bffc17 	ldw	r2,-16(fp)
  802824:	10805ec3 	ldbu	r2,379(r2)
  802828:	10803fcc 	andi	r2,r2,255
  80282c:	1080201c 	xori	r2,r2,128
  802830:	10bfe004 	addi	r2,r2,-128
  802834:	10000c1e 	bne	r2,zero,802868 <logic+0x25d8>
  802838:	e0bffc17 	ldw	r2,-16(fp)
  80283c:	10804443 	ldbu	r2,273(r2)
  802840:	10803fcc 	andi	r2,r2,255
  802844:	1080201c 	xori	r2,r2,128
  802848:	10bfe004 	addi	r2,r2,-128
  80284c:	10000826 	beq	r2,zero,802870 <logic+0x25e0>
  802850:	e0bffc17 	ldw	r2,-16(fp)
  802854:	10805f03 	ldbu	r2,380(r2)
  802858:	10803fcc 	andi	r2,r2,255
  80285c:	1080201c 	xori	r2,r2,128
  802860:	10bfe004 	addi	r2,r2,-128
  802864:	10000226 	beq	r2,zero,802870 <logic+0x25e0>
  802868:	00800044 	movi	r2,1
  80286c:	00000106 	br	802874 <logic+0x25e4>
  802870:	0005883a 	mov	r2,zero
  802874:	1007883a 	mov	r3,r2
  802878:	e0bffc17 	ldw	r2,-16(fp)
  80287c:	10c04485 	stb	r3,274(r2)
  d->_g72 = d->_g69 || d->_g64 && !d->_cg84;
  802880:	e0bffc17 	ldw	r2,-16(fp)
  802884:	10804303 	ldbu	r2,268(r2)
  802888:	10803fcc 	andi	r2,r2,255
  80288c:	1080201c 	xori	r2,r2,128
  802890:	10bfe004 	addi	r2,r2,-128
  802894:	10000c1e 	bne	r2,zero,8028c8 <logic+0x2638>
  802898:	e0bffc17 	ldw	r2,-16(fp)
  80289c:	10804283 	ldbu	r2,266(r2)
  8028a0:	10803fcc 	andi	r2,r2,255
  8028a4:	1080201c 	xori	r2,r2,128
  8028a8:	10bfe004 	addi	r2,r2,-128
  8028ac:	10000826 	beq	r2,zero,8028d0 <logic+0x2640>
  8028b0:	e0bffc17 	ldw	r2,-16(fp)
  8028b4:	10805f43 	ldbu	r2,381(r2)
  8028b8:	10803fcc 	andi	r2,r2,255
  8028bc:	1080201c 	xori	r2,r2,128
  8028c0:	10bfe004 	addi	r2,r2,-128
  8028c4:	1000021e 	bne	r2,zero,8028d0 <logic+0x2640>
  8028c8:	00800044 	movi	r2,1
  8028cc:	00000106 	br	8028d4 <logic+0x2644>
  8028d0:	0005883a 	mov	r2,zero
  8028d4:	1007883a 	mov	r3,r2
  8028d8:	e0bffc17 	ldw	r2,-16(fp)
  8028dc:	10c04385 	stb	r3,270(r2)
  d->_g84 = !d->_g72;
  8028e0:	e0bffc17 	ldw	r2,-16(fp)
  8028e4:	10804383 	ldbu	r2,270(r2)
  8028e8:	10803fcc 	andi	r2,r2,255
  8028ec:	1080201c 	xori	r2,r2,128
  8028f0:	10bfe004 	addi	r2,r2,-128
  8028f4:	1005003a 	cmpeq	r2,r2,zero
  8028f8:	1007883a 	mov	r3,r2
  8028fc:	e0bffc17 	ldw	r2,-16(fp)
  802900:	10c04605 	stb	r3,280(r2)
  d->_g69 = d->_g59 || d->_g60;
  802904:	e0bffc17 	ldw	r2,-16(fp)
  802908:	10804183 	ldbu	r2,262(r2)
  80290c:	10803fcc 	andi	r2,r2,255
  802910:	1080201c 	xori	r2,r2,128
  802914:	10bfe004 	addi	r2,r2,-128
  802918:	1000061e 	bne	r2,zero,802934 <logic+0x26a4>
  80291c:	e0bffc17 	ldw	r2,-16(fp)
  802920:	108041c3 	ldbu	r2,263(r2)
  802924:	10803fcc 	andi	r2,r2,255
  802928:	1080201c 	xori	r2,r2,128
  80292c:	10bfe004 	addi	r2,r2,-128
  802930:	10000226 	beq	r2,zero,80293c <logic+0x26ac>
  802934:	00800044 	movi	r2,1
  802938:	00000106 	br	802940 <logic+0x26b0>
  80293c:	0005883a 	mov	r2,zero
  802940:	1007883a 	mov	r3,r2
  802944:	e0bffc17 	ldw	r2,-16(fp)
  802948:	10c04305 	stb	r3,268(r2)
  d->_g85 = (d->_g73_e1 || d->_g76) && (d->_g84 || d->_g69) && (d->_g76 || d->_g69);
  80294c:	e0bffc17 	ldw	r2,-16(fp)
  802950:	10806883 	ldbu	r2,418(r2)
  802954:	10803fcc 	andi	r2,r2,255
  802958:	1080201c 	xori	r2,r2,128
  80295c:	10bfe004 	addi	r2,r2,-128
  802960:	1000061e 	bne	r2,zero,80297c <logic+0x26ec>
  802964:	e0bffc17 	ldw	r2,-16(fp)
  802968:	10804483 	ldbu	r2,274(r2)
  80296c:	10803fcc 	andi	r2,r2,255
  802970:	1080201c 	xori	r2,r2,128
  802974:	10bfe004 	addi	r2,r2,-128
  802978:	10001a26 	beq	r2,zero,8029e4 <logic+0x2754>
  80297c:	e0bffc17 	ldw	r2,-16(fp)
  802980:	10804603 	ldbu	r2,280(r2)
  802984:	10803fcc 	andi	r2,r2,255
  802988:	1080201c 	xori	r2,r2,128
  80298c:	10bfe004 	addi	r2,r2,-128
  802990:	1000061e 	bne	r2,zero,8029ac <logic+0x271c>
  802994:	e0bffc17 	ldw	r2,-16(fp)
  802998:	10804303 	ldbu	r2,268(r2)
  80299c:	10803fcc 	andi	r2,r2,255
  8029a0:	1080201c 	xori	r2,r2,128
  8029a4:	10bfe004 	addi	r2,r2,-128
  8029a8:	10000e26 	beq	r2,zero,8029e4 <logic+0x2754>
  8029ac:	e0bffc17 	ldw	r2,-16(fp)
  8029b0:	10804483 	ldbu	r2,274(r2)
  8029b4:	10803fcc 	andi	r2,r2,255
  8029b8:	1080201c 	xori	r2,r2,128
  8029bc:	10bfe004 	addi	r2,r2,-128
  8029c0:	1000061e 	bne	r2,zero,8029dc <logic+0x274c>
  8029c4:	e0bffc17 	ldw	r2,-16(fp)
  8029c8:	10804303 	ldbu	r2,268(r2)
  8029cc:	10803fcc 	andi	r2,r2,255
  8029d0:	1080201c 	xori	r2,r2,128
  8029d4:	10bfe004 	addi	r2,r2,-128
  8029d8:	10000226 	beq	r2,zero,8029e4 <logic+0x2754>
  8029dc:	00800044 	movi	r2,1
  8029e0:	00000106 	br	8029e8 <logic+0x2758>
  8029e4:	0005883a 	mov	r2,zero
  8029e8:	1007883a 	mov	r3,r2
  8029ec:	e0bffc17 	ldw	r2,-16(fp)
  8029f0:	10c04645 	stb	r3,281(r2)
  d->_cg86 = d->_Pacemaker_local__Atrig4;
  8029f4:	e0bffc17 	ldw	r2,-16(fp)
  8029f8:	10c03503 	ldbu	r3,212(r2)
  8029fc:	e0bffc17 	ldw	r2,-16(fp)
  802a00:	10c05fc5 	stb	r3,383(r2)
  d->_g82 = d->_g85 && d->_cg86;
  802a04:	e0bffc17 	ldw	r2,-16(fp)
  802a08:	10804643 	ldbu	r2,281(r2)
  802a0c:	10803fcc 	andi	r2,r2,255
  802a10:	1080201c 	xori	r2,r2,128
  802a14:	10bfe004 	addi	r2,r2,-128
  802a18:	10000826 	beq	r2,zero,802a3c <logic+0x27ac>
  802a1c:	e0bffc17 	ldw	r2,-16(fp)
  802a20:	10805fc3 	ldbu	r2,383(r2)
  802a24:	10803fcc 	andi	r2,r2,255
  802a28:	1080201c 	xori	r2,r2,128
  802a2c:	10bfe004 	addi	r2,r2,-128
  802a30:	10000226 	beq	r2,zero,802a3c <logic+0x27ac>
  802a34:	00800044 	movi	r2,1
  802a38:	00000106 	br	802a40 <logic+0x27b0>
  802a3c:	0005883a 	mov	r2,zero
  802a40:	1007883a 	mov	r3,r2
  802a44:	e0bffc17 	ldw	r2,-16(fp)
  802a48:	10c04585 	stb	r3,278(r2)
  if (d->_g82) {
  802a4c:	e0bffc17 	ldw	r2,-16(fp)
  802a50:	10804583 	ldbu	r2,278(r2)
  802a54:	10803fcc 	andi	r2,r2,255
  802a58:	1080201c 	xori	r2,r2,128
  802a5c:	10bfe004 	addi	r2,r2,-128
  802a60:	10000526 	beq	r2,zero,802a78 <logic+0x27e8>
    d->_taken_transitions[12] += 1;
  802a64:	e0bffc17 	ldw	r2,-16(fp)
  802a68:	10801317 	ldw	r2,76(r2)
  802a6c:	10c00044 	addi	r3,r2,1
  802a70:	e0bffc17 	ldw	r2,-16(fp)
  802a74:	10c01315 	stw	r3,76(r2)
  }
  d->_g73 = d->_g85 && !d->_cg86;
  802a78:	e0bffc17 	ldw	r2,-16(fp)
  802a7c:	10804643 	ldbu	r2,281(r2)
  802a80:	10803fcc 	andi	r2,r2,255
  802a84:	1080201c 	xori	r2,r2,128
  802a88:	10bfe004 	addi	r2,r2,-128
  802a8c:	10000826 	beq	r2,zero,802ab0 <logic+0x2820>
  802a90:	e0bffc17 	ldw	r2,-16(fp)
  802a94:	10805fc3 	ldbu	r2,383(r2)
  802a98:	10803fcc 	andi	r2,r2,255
  802a9c:	1080201c 	xori	r2,r2,128
  802aa0:	10bfe004 	addi	r2,r2,-128
  802aa4:	1000021e 	bne	r2,zero,802ab0 <logic+0x2820>
  802aa8:	00800044 	movi	r2,1
  802aac:	00000106 	br	802ab4 <logic+0x2824>
  802ab0:	0005883a 	mov	r2,zero
  802ab4:	1007883a 	mov	r3,r2
  802ab8:	e0bffc17 	ldw	r2,-16(fp)
  802abc:	10c043c5 	stb	r3,271(r2)
  if (d->_g73) {
  802ac0:	e0bffc17 	ldw	r2,-16(fp)
  802ac4:	108043c3 	ldbu	r2,271(r2)
  802ac8:	10803fcc 	andi	r2,r2,255
  802acc:	1080201c 	xori	r2,r2,128
  802ad0:	10bfe004 	addi	r2,r2,-128
  802ad4:	10000b26 	beq	r2,zero,802b04 <logic+0x2874>
    d->AP |= 1;
  802ad8:	e0bffc17 	ldw	r2,-16(fp)
  802adc:	10803183 	ldbu	r2,198(r2)
  802ae0:	10800054 	ori	r2,r2,1
  802ae4:	1007883a 	mov	r3,r2
  802ae8:	e0bffc17 	ldw	r2,-16(fp)
  802aec:	10c03185 	stb	r3,198(r2)
    d->_taken_transitions[13] += 1;
  802af0:	e0bffc17 	ldw	r2,-16(fp)
  802af4:	10801417 	ldw	r2,80(r2)
  802af8:	10c00044 	addi	r3,r2,1
  802afc:	e0bffc17 	ldw	r2,-16(fp)
  802b00:	10c01415 	stw	r3,80(r2)
  }
  d->_g83_e2 = d->_GO || d->_g82 || d->_g73 || d->_g81 && !d->_cg68;
  802b04:	e0bffc17 	ldw	r2,-16(fp)
  802b08:	10805803 	ldbu	r2,352(r2)
  802b0c:	10803fcc 	andi	r2,r2,255
  802b10:	1080201c 	xori	r2,r2,128
  802b14:	10bfe004 	addi	r2,r2,-128
  802b18:	1000181e 	bne	r2,zero,802b7c <logic+0x28ec>
  802b1c:	e0bffc17 	ldw	r2,-16(fp)
  802b20:	10804583 	ldbu	r2,278(r2)
  802b24:	10803fcc 	andi	r2,r2,255
  802b28:	1080201c 	xori	r2,r2,128
  802b2c:	10bfe004 	addi	r2,r2,-128
  802b30:	1000121e 	bne	r2,zero,802b7c <logic+0x28ec>
  802b34:	e0bffc17 	ldw	r2,-16(fp)
  802b38:	108043c3 	ldbu	r2,271(r2)
  802b3c:	10803fcc 	andi	r2,r2,255
  802b40:	1080201c 	xori	r2,r2,128
  802b44:	10bfe004 	addi	r2,r2,-128
  802b48:	10000c1e 	bne	r2,zero,802b7c <logic+0x28ec>
  802b4c:	e0bffc17 	ldw	r2,-16(fp)
  802b50:	10804543 	ldbu	r2,277(r2)
  802b54:	10803fcc 	andi	r2,r2,255
  802b58:	1080201c 	xori	r2,r2,128
  802b5c:	10bfe004 	addi	r2,r2,-128
  802b60:	10000826 	beq	r2,zero,802b84 <logic+0x28f4>
  802b64:	e0bffc17 	ldw	r2,-16(fp)
  802b68:	10805e43 	ldbu	r2,377(r2)
  802b6c:	10803fcc 	andi	r2,r2,255
  802b70:	1080201c 	xori	r2,r2,128
  802b74:	10bfe004 	addi	r2,r2,-128
  802b78:	1000021e 	bne	r2,zero,802b84 <logic+0x28f4>
  802b7c:	00800044 	movi	r2,1
  802b80:	00000106 	br	802b88 <logic+0x28f8>
  802b84:	0005883a 	mov	r2,zero
  802b88:	1007883a 	mov	r3,r2
  802b8c:	e0bffc17 	ldw	r2,-16(fp)
  802b90:	10c068c5 	stb	r3,419(r2)
  d->_g73_e1 = d->_pg100;
  802b94:	e0bffc17 	ldw	r2,-16(fp)
  802b98:	10c06f43 	ldbu	r3,445(r2)
  802b9c:	e0bffc17 	ldw	r2,-16(fp)
  802ba0:	10c06885 	stb	r3,418(r2)
  d->_cg105 = d->V_EVT;
  802ba4:	e0bffc17 	ldw	r2,-16(fp)
  802ba8:	10c03243 	ldbu	r3,201(r2)
  802bac:	e0bffc17 	ldw	r2,-16(fp)
  802bb0:	10c06145 	stb	r3,389(r2)
  d->_g83 = d->_g73_e1 && d->_cg105;
  802bb4:	e0bffc17 	ldw	r2,-16(fp)
  802bb8:	10806883 	ldbu	r2,418(r2)
  802bbc:	10803fcc 	andi	r2,r2,255
  802bc0:	1080201c 	xori	r2,r2,128
  802bc4:	10bfe004 	addi	r2,r2,-128
  802bc8:	10000826 	beq	r2,zero,802bec <logic+0x295c>
  802bcc:	e0bffc17 	ldw	r2,-16(fp)
  802bd0:	10806143 	ldbu	r2,389(r2)
  802bd4:	10803fcc 	andi	r2,r2,255
  802bd8:	1080201c 	xori	r2,r2,128
  802bdc:	10bfe004 	addi	r2,r2,-128
  802be0:	10000226 	beq	r2,zero,802bec <logic+0x295c>
  802be4:	00800044 	movi	r2,1
  802be8:	00000106 	br	802bf0 <logic+0x2960>
  802bec:	0005883a 	mov	r2,zero
  802bf0:	1007883a 	mov	r3,r2
  802bf4:	e0bffc17 	ldw	r2,-16(fp)
  802bf8:	10c045c5 	stb	r3,279(r2)
  if (d->_g83) {
  802bfc:	e0bffc17 	ldw	r2,-16(fp)
  802c00:	108045c3 	ldbu	r2,279(r2)
  802c04:	10803fcc 	andi	r2,r2,255
  802c08:	1080201c 	xori	r2,r2,128
  802c0c:	10bfe004 	addi	r2,r2,-128
  802c10:	10000326 	beq	r2,zero,802c20 <logic+0x2990>
    d->_Pacemaker_local__Atrig6 = 1;
  802c14:	e0bffc17 	ldw	r2,-16(fp)
  802c18:	00c00044 	movi	r3,1
  802c1c:	10c03585 	stb	r3,214(r2)
  }
  d->_g86 = d->_pg163;
  802c20:	e0bffc17 	ldw	r2,-16(fp)
  802c24:	10c06f83 	ldbu	r3,446(r2)
  802c28:	e0bffc17 	ldw	r2,-16(fp)
  802c2c:	10c04685 	stb	r3,282(r2)
  if (d->_g86) {
  802c30:	e0bffc17 	ldw	r2,-16(fp)
  802c34:	10804683 	ldbu	r2,282(r2)
  802c38:	10803fcc 	andi	r2,r2,255
  802c3c:	1080201c 	xori	r2,r2,128
  802c40:	10bfe004 	addi	r2,r2,-128
  802c44:	10001226 	beq	r2,zero,802c90 <logic+0x2a00>
    d->_region3_AVI_t += d->deltaT;
  802c48:	e13ffc17 	ldw	r4,-16(fp)
  802c4c:	20802717 	ldw	r2,156(r4)
  802c50:	20c02817 	ldw	r3,160(r4)
  802c54:	e1bffc17 	ldw	r6,-16(fp)
  802c58:	31002d17 	ldw	r4,180(r6)
  802c5c:	31402e17 	ldw	r5,184(r6)
  802c60:	200d883a 	mov	r6,r4
  802c64:	280f883a 	mov	r7,r5
  802c68:	1009883a 	mov	r4,r2
  802c6c:	180b883a 	mov	r5,r3
  802c70:	0806aa80 	call	806aa8 <__adddf3>
  802c74:	1009883a 	mov	r4,r2
  802c78:	180b883a 	mov	r5,r3
  802c7c:	2005883a 	mov	r2,r4
  802c80:	2807883a 	mov	r3,r5
  802c84:	e13ffc17 	ldw	r4,-16(fp)
  802c88:	20802715 	stw	r2,156(r4)
  802c8c:	20c02815 	stw	r3,160(r4)
  }
  d->_g88 = d->_g73_e1 && !d->_cg105;
  802c90:	e0bffc17 	ldw	r2,-16(fp)
  802c94:	10806883 	ldbu	r2,418(r2)
  802c98:	10803fcc 	andi	r2,r2,255
  802c9c:	1080201c 	xori	r2,r2,128
  802ca0:	10bfe004 	addi	r2,r2,-128
  802ca4:	10000826 	beq	r2,zero,802cc8 <logic+0x2a38>
  802ca8:	e0bffc17 	ldw	r2,-16(fp)
  802cac:	10806143 	ldbu	r2,389(r2)
  802cb0:	10803fcc 	andi	r2,r2,255
  802cb4:	1080201c 	xori	r2,r2,128
  802cb8:	10bfe004 	addi	r2,r2,-128
  802cbc:	1000021e 	bne	r2,zero,802cc8 <logic+0x2a38>
  802cc0:	00800044 	movi	r2,1
  802cc4:	00000106 	br	802ccc <logic+0x2a3c>
  802cc8:	0005883a 	mov	r2,zero
  802ccc:	1007883a 	mov	r3,r2
  802cd0:	e0bffc17 	ldw	r2,-16(fp)
  802cd4:	10c04705 	stb	r3,284(r2)
  d->_cg108 = d->_region3_AVI_t >= d->T_AVI;
  802cd8:	e0bffc17 	ldw	r2,-16(fp)
  802cdc:	14002717 	ldw	r16,156(r2)
  802ce0:	14402817 	ldw	r17,160(r2)
  802ce4:	e0bffc17 	ldw	r2,-16(fp)
  802ce8:	10800117 	ldw	r2,4(r2)
  802cec:	1009883a 	mov	r4,r2
  802cf0:	0808e200 	call	808e20 <__floatsidf>
  802cf4:	1009883a 	mov	r4,r2
  802cf8:	180b883a 	mov	r5,r3
  802cfc:	04800044 	movi	r18,1
  802d00:	200d883a 	mov	r6,r4
  802d04:	280f883a 	mov	r7,r5
  802d08:	8009883a 	mov	r4,r16
  802d0c:	880b883a 	mov	r5,r17
  802d10:	0807c3c0 	call	807c3c <__gedf2>
  802d14:	1000010e 	bge	r2,zero,802d1c <logic+0x2a8c>
  802d18:	0025883a 	mov	r18,zero
  802d1c:	9007883a 	mov	r3,r18
  802d20:	e0bffc17 	ldw	r2,-16(fp)
  802d24:	10c06105 	stb	r3,388(r2)
  d->_g68 = d->_g88 && d->_cg108;
  802d28:	e0bffc17 	ldw	r2,-16(fp)
  802d2c:	10804703 	ldbu	r2,284(r2)
  802d30:	10803fcc 	andi	r2,r2,255
  802d34:	1080201c 	xori	r2,r2,128
  802d38:	10bfe004 	addi	r2,r2,-128
  802d3c:	10000826 	beq	r2,zero,802d60 <logic+0x2ad0>
  802d40:	e0bffc17 	ldw	r2,-16(fp)
  802d44:	10806103 	ldbu	r2,388(r2)
  802d48:	10803fcc 	andi	r2,r2,255
  802d4c:	1080201c 	xori	r2,r2,128
  802d50:	10bfe004 	addi	r2,r2,-128
  802d54:	10000226 	beq	r2,zero,802d60 <logic+0x2ad0>
  802d58:	00800044 	movi	r2,1
  802d5c:	00000106 	br	802d64 <logic+0x2ad4>
  802d60:	0005883a 	mov	r2,zero
  802d64:	1007883a 	mov	r3,r2
  802d68:	e0bffc17 	ldw	r2,-16(fp)
  802d6c:	10c042c5 	stb	r3,267(r2)
  if (d->_g68) {
  802d70:	e0bffc17 	ldw	r2,-16(fp)
  802d74:	108042c3 	ldbu	r2,267(r2)
  802d78:	10803fcc 	andi	r2,r2,255
  802d7c:	1080201c 	xori	r2,r2,128
  802d80:	10bfe004 	addi	r2,r2,-128
  802d84:	10000326 	beq	r2,zero,802d94 <logic+0x2b04>
    d->_Pacemaker_local__Atrig7 = 1;
  802d88:	e0bffc17 	ldw	r2,-16(fp)
  802d8c:	00c00044 	movi	r3,1
  802d90:	10c035c5 	stb	r3,215(r2)
  }
  d->_g87 = d->_pg159;
  802d94:	e0bffc17 	ldw	r2,-16(fp)
  802d98:	10c06fc3 	ldbu	r3,447(r2)
  802d9c:	e0bffc17 	ldw	r2,-16(fp)
  802da0:	10c046c5 	stb	r3,283(r2)
  d->_cg92 = d->A_EVT;
  802da4:	e0bffc17 	ldw	r2,-16(fp)
  802da8:	10c03203 	ldbu	r3,200(r2)
  802dac:	e0bffc17 	ldw	r2,-16(fp)
  802db0:	10c06005 	stb	r3,384(r2)
  d->_g105 = d->_g87 && d->_cg92;
  802db4:	e0bffc17 	ldw	r2,-16(fp)
  802db8:	108046c3 	ldbu	r2,283(r2)
  802dbc:	10803fcc 	andi	r2,r2,255
  802dc0:	1080201c 	xori	r2,r2,128
  802dc4:	10bfe004 	addi	r2,r2,-128
  802dc8:	10000826 	beq	r2,zero,802dec <logic+0x2b5c>
  802dcc:	e0bffc17 	ldw	r2,-16(fp)
  802dd0:	10806003 	ldbu	r2,384(r2)
  802dd4:	10803fcc 	andi	r2,r2,255
  802dd8:	1080201c 	xori	r2,r2,128
  802ddc:	10bfe004 	addi	r2,r2,-128
  802de0:	10000226 	beq	r2,zero,802dec <logic+0x2b5c>
  802de4:	00800044 	movi	r2,1
  802de8:	00000106 	br	802df0 <logic+0x2b60>
  802dec:	0005883a 	mov	r2,zero
  802df0:	1007883a 	mov	r3,r2
  802df4:	e0bffc17 	ldw	r2,-16(fp)
  802df8:	10c049c5 	stb	r3,295(r2)
  if (d->_g105) {
  802dfc:	e0bffc17 	ldw	r2,-16(fp)
  802e00:	108049c3 	ldbu	r2,295(r2)
  802e04:	10803fcc 	andi	r2,r2,255
  802e08:	1080201c 	xori	r2,r2,128
  802e0c:	10bfe004 	addi	r2,r2,-128
  802e10:	10000c26 	beq	r2,zero,802e44 <logic+0x2bb4>
    d->_region3_AVI_t = 0;
  802e14:	e0bffc17 	ldw	r2,-16(fp)
  802e18:	10002715 	stw	zero,156(r2)
  802e1c:	10002815 	stw	zero,160(r2)
    d->_taken_transitions[14] += 1;
  802e20:	e0bffc17 	ldw	r2,-16(fp)
  802e24:	10801517 	ldw	r2,84(r2)
  802e28:	10c00044 	addi	r3,r2,1
  802e2c:	e0bffc17 	ldw	r2,-16(fp)
  802e30:	10c01515 	stw	r3,84(r2)
    d->_Pacemaker_local__Atrig6 = 0;
  802e34:	e0bffc17 	ldw	r2,-16(fp)
  802e38:	10003585 	stb	zero,214(r2)
    d->_Pacemaker_local__Atrig7 = 0;
  802e3c:	e0bffc17 	ldw	r2,-16(fp)
  802e40:	100035c5 	stb	zero,215(r2)
  }
  d->_g99 = d->_pg98;
  802e44:	e0bffc17 	ldw	r2,-16(fp)
  802e48:	10c07003 	ldbu	r3,448(r2)
  802e4c:	e0bffc17 	ldw	r2,-16(fp)
  802e50:	10c048c5 	stb	r3,291(r2)
  d->_g102 = d->_pg101;
  802e54:	e0bffc17 	ldw	r2,-16(fp)
  802e58:	10c07043 	ldbu	r3,449(r2)
  802e5c:	e0bffc17 	ldw	r2,-16(fp)
  802e60:	10c04985 	stb	r3,294(r2)
  d->_g99 = d->_g105 || d->_g99 || d->_g102;
  802e64:	e0bffc17 	ldw	r2,-16(fp)
  802e68:	108049c3 	ldbu	r2,295(r2)
  802e6c:	10803fcc 	andi	r2,r2,255
  802e70:	1080201c 	xori	r2,r2,128
  802e74:	10bfe004 	addi	r2,r2,-128
  802e78:	10000c1e 	bne	r2,zero,802eac <logic+0x2c1c>
  802e7c:	e0bffc17 	ldw	r2,-16(fp)
  802e80:	108048c3 	ldbu	r2,291(r2)
  802e84:	10803fcc 	andi	r2,r2,255
  802e88:	1080201c 	xori	r2,r2,128
  802e8c:	10bfe004 	addi	r2,r2,-128
  802e90:	1000061e 	bne	r2,zero,802eac <logic+0x2c1c>
  802e94:	e0bffc17 	ldw	r2,-16(fp)
  802e98:	10804983 	ldbu	r2,294(r2)
  802e9c:	10803fcc 	andi	r2,r2,255
  802ea0:	1080201c 	xori	r2,r2,128
  802ea4:	10bfe004 	addi	r2,r2,-128
  802ea8:	10000226 	beq	r2,zero,802eb4 <logic+0x2c24>
  802eac:	00800044 	movi	r2,1
  802eb0:	00000106 	br	802eb8 <logic+0x2c28>
  802eb4:	0005883a 	mov	r2,zero
  802eb8:	1007883a 	mov	r3,r2
  802ebc:	e0bffc17 	ldw	r2,-16(fp)
  802ec0:	10c048c5 	stb	r3,291(r2)
  d->_cg95 = d->_region3_AVI_t < d->T_AVI;
  802ec4:	e0bffc17 	ldw	r2,-16(fp)
  802ec8:	14002717 	ldw	r16,156(r2)
  802ecc:	14402817 	ldw	r17,160(r2)
  802ed0:	e0bffc17 	ldw	r2,-16(fp)
  802ed4:	10800117 	ldw	r2,4(r2)
  802ed8:	1009883a 	mov	r4,r2
  802edc:	0808e200 	call	808e20 <__floatsidf>
  802ee0:	1009883a 	mov	r4,r2
  802ee4:	180b883a 	mov	r5,r3
  802ee8:	04800044 	movi	r18,1
  802eec:	200d883a 	mov	r6,r4
  802ef0:	280f883a 	mov	r7,r5
  802ef4:	8009883a 	mov	r4,r16
  802ef8:	880b883a 	mov	r5,r17
  802efc:	0807d180 	call	807d18 <__ledf2>
  802f00:	10000116 	blt	r2,zero,802f08 <logic+0x2c78>
  802f04:	0025883a 	mov	r18,zero
  802f08:	9007883a 	mov	r3,r18
  802f0c:	e0bffc17 	ldw	r2,-16(fp)
  802f10:	10c06045 	stb	r3,385(r2)
  d->_g102 = d->_g99 && !d->_cg95;
  802f14:	e0bffc17 	ldw	r2,-16(fp)
  802f18:	108048c3 	ldbu	r2,291(r2)
  802f1c:	10803fcc 	andi	r2,r2,255
  802f20:	1080201c 	xori	r2,r2,128
  802f24:	10bfe004 	addi	r2,r2,-128
  802f28:	10000826 	beq	r2,zero,802f4c <logic+0x2cbc>
  802f2c:	e0bffc17 	ldw	r2,-16(fp)
  802f30:	10806043 	ldbu	r2,385(r2)
  802f34:	10803fcc 	andi	r2,r2,255
  802f38:	1080201c 	xori	r2,r2,128
  802f3c:	10bfe004 	addi	r2,r2,-128
  802f40:	1000021e 	bne	r2,zero,802f4c <logic+0x2cbc>
  802f44:	00800044 	movi	r2,1
  802f48:	00000106 	br	802f50 <logic+0x2cc0>
  802f4c:	0005883a 	mov	r2,zero
  802f50:	1007883a 	mov	r3,r2
  802f54:	e0bffc17 	ldw	r2,-16(fp)
  802f58:	10c04985 	stb	r3,294(r2)
  d->_cg100 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  802f5c:	e0bffc17 	ldw	r2,-16(fp)
  802f60:	10803583 	ldbu	r2,214(r2)
  802f64:	10803fcc 	andi	r2,r2,255
  802f68:	1080201c 	xori	r2,r2,128
  802f6c:	10bfe004 	addi	r2,r2,-128
  802f70:	1000061e 	bne	r2,zero,802f8c <logic+0x2cfc>
  802f74:	e0bffc17 	ldw	r2,-16(fp)
  802f78:	108035c3 	ldbu	r2,215(r2)
  802f7c:	10803fcc 	andi	r2,r2,255
  802f80:	1080201c 	xori	r2,r2,128
  802f84:	10bfe004 	addi	r2,r2,-128
  802f88:	10000226 	beq	r2,zero,802f94 <logic+0x2d04>
  802f8c:	00800044 	movi	r2,1
  802f90:	00000106 	br	802f98 <logic+0x2d08>
  802f94:	0005883a 	mov	r2,zero
  802f98:	1007883a 	mov	r3,r2
  802f9c:	e0bffc17 	ldw	r2,-16(fp)
  802fa0:	10c060c5 	stb	r3,387(r2)
  d->_g101 = d->_g102 && !d->_cg100;
  802fa4:	e0bffc17 	ldw	r2,-16(fp)
  802fa8:	10804983 	ldbu	r2,294(r2)
  802fac:	10803fcc 	andi	r2,r2,255
  802fb0:	1080201c 	xori	r2,r2,128
  802fb4:	10bfe004 	addi	r2,r2,-128
  802fb8:	10000826 	beq	r2,zero,802fdc <logic+0x2d4c>
  802fbc:	e0bffc17 	ldw	r2,-16(fp)
  802fc0:	108060c3 	ldbu	r2,387(r2)
  802fc4:	10803fcc 	andi	r2,r2,255
  802fc8:	1080201c 	xori	r2,r2,128
  802fcc:	10bfe004 	addi	r2,r2,-128
  802fd0:	1000021e 	bne	r2,zero,802fdc <logic+0x2d4c>
  802fd4:	00800044 	movi	r2,1
  802fd8:	00000106 	br	802fe0 <logic+0x2d50>
  802fdc:	0005883a 	mov	r2,zero
  802fe0:	1007883a 	mov	r3,r2
  802fe4:	e0bffc17 	ldw	r2,-16(fp)
  802fe8:	10c04945 	stb	r3,293(r2)
  d->_g95 = d->_g99 && d->_cg95;
  802fec:	e0bffc17 	ldw	r2,-16(fp)
  802ff0:	108048c3 	ldbu	r2,291(r2)
  802ff4:	10803fcc 	andi	r2,r2,255
  802ff8:	1080201c 	xori	r2,r2,128
  802ffc:	10bfe004 	addi	r2,r2,-128
  803000:	10000826 	beq	r2,zero,803024 <logic+0x2d94>
  803004:	e0bffc17 	ldw	r2,-16(fp)
  803008:	10806043 	ldbu	r2,385(r2)
  80300c:	10803fcc 	andi	r2,r2,255
  803010:	1080201c 	xori	r2,r2,128
  803014:	10bfe004 	addi	r2,r2,-128
  803018:	10000226 	beq	r2,zero,803024 <logic+0x2d94>
  80301c:	00800044 	movi	r2,1
  803020:	00000106 	br	803028 <logic+0x2d98>
  803024:	0005883a 	mov	r2,zero
  803028:	1007883a 	mov	r3,r2
  80302c:	e0bffc17 	ldw	r2,-16(fp)
  803030:	10c047c5 	stb	r3,287(r2)
  if (d->_g95) {
  803034:	e0bffc17 	ldw	r2,-16(fp)
  803038:	108047c3 	ldbu	r2,287(r2)
  80303c:	10803fcc 	andi	r2,r2,255
  803040:	1080201c 	xori	r2,r2,128
  803044:	10bfe004 	addi	r2,r2,-128
  803048:	10003426 	beq	r2,zero,80311c <logic+0x2e8c>
    d->sleepT = (d->sleepT < (d->T_AVI - d->_region3_AVI_t)) ? d->sleepT : (d->T_AVI - d->_region3_AVI_t);
  80304c:	e0bffc17 	ldw	r2,-16(fp)
  803050:	14002f17 	ldw	r16,188(r2)
  803054:	14403017 	ldw	r17,192(r2)
  803058:	e0bffc17 	ldw	r2,-16(fp)
  80305c:	10800117 	ldw	r2,4(r2)
  803060:	1009883a 	mov	r4,r2
  803064:	0808e200 	call	808e20 <__floatsidf>
  803068:	1011883a 	mov	r8,r2
  80306c:	1813883a 	mov	r9,r3
  803070:	e13ffc17 	ldw	r4,-16(fp)
  803074:	20802717 	ldw	r2,156(r4)
  803078:	20c02817 	ldw	r3,160(r4)
  80307c:	100d883a 	mov	r6,r2
  803080:	180f883a 	mov	r7,r3
  803084:	4009883a 	mov	r4,r8
  803088:	480b883a 	mov	r5,r9
  80308c:	08085240 	call	808524 <__subdf3>
  803090:	1009883a 	mov	r4,r2
  803094:	180b883a 	mov	r5,r3
  803098:	2005883a 	mov	r2,r4
  80309c:	2807883a 	mov	r3,r5
  8030a0:	100d883a 	mov	r6,r2
  8030a4:	180f883a 	mov	r7,r3
  8030a8:	8009883a 	mov	r4,r16
  8030ac:	880b883a 	mov	r5,r17
  8030b0:	0807d180 	call	807d18 <__ledf2>
  8030b4:	1000040e 	bge	r2,zero,8030c8 <logic+0x2e38>
  8030b8:	e13ffc17 	ldw	r4,-16(fp)
  8030bc:	20802f17 	ldw	r2,188(r4)
  8030c0:	20c03017 	ldw	r3,192(r4)
  8030c4:	00001206 	br	803110 <logic+0x2e80>
  8030c8:	e0bffc17 	ldw	r2,-16(fp)
  8030cc:	10800117 	ldw	r2,4(r2)
  8030d0:	1009883a 	mov	r4,r2
  8030d4:	0808e200 	call	808e20 <__floatsidf>
  8030d8:	1011883a 	mov	r8,r2
  8030dc:	1813883a 	mov	r9,r3
  8030e0:	e13ffc17 	ldw	r4,-16(fp)
  8030e4:	20802717 	ldw	r2,156(r4)
  8030e8:	20c02817 	ldw	r3,160(r4)
  8030ec:	100d883a 	mov	r6,r2
  8030f0:	180f883a 	mov	r7,r3
  8030f4:	4009883a 	mov	r4,r8
  8030f8:	480b883a 	mov	r5,r9
  8030fc:	08085240 	call	808524 <__subdf3>
  803100:	1009883a 	mov	r4,r2
  803104:	180b883a 	mov	r5,r3
  803108:	2005883a 	mov	r2,r4
  80310c:	2807883a 	mov	r3,r5
  803110:	e13ffc17 	ldw	r4,-16(fp)
  803114:	20802f15 	stw	r2,188(r4)
  803118:	20c03015 	stw	r3,192(r4)
  }
  d->_cg96 = d->_Pacemaker_local__Atrig6 || d->_Pacemaker_local__Atrig7;
  80311c:	e0bffc17 	ldw	r2,-16(fp)
  803120:	10803583 	ldbu	r2,214(r2)
  803124:	10803fcc 	andi	r2,r2,255
  803128:	1080201c 	xori	r2,r2,128
  80312c:	10bfe004 	addi	r2,r2,-128
  803130:	1000061e 	bne	r2,zero,80314c <logic+0x2ebc>
  803134:	e0bffc17 	ldw	r2,-16(fp)
  803138:	108035c3 	ldbu	r2,215(r2)
  80313c:	10803fcc 	andi	r2,r2,255
  803140:	1080201c 	xori	r2,r2,128
  803144:	10bfe004 	addi	r2,r2,-128
  803148:	10000226 	beq	r2,zero,803154 <logic+0x2ec4>
  80314c:	00800044 	movi	r2,1
  803150:	00000106 	br	803158 <logic+0x2ec8>
  803154:	0005883a 	mov	r2,zero
  803158:	1007883a 	mov	r3,r2
  80315c:	e0bffc17 	ldw	r2,-16(fp)
  803160:	10c06085 	stb	r3,386(r2)
  d->_g98 = d->_g95 && !d->_cg96;
  803164:	e0bffc17 	ldw	r2,-16(fp)
  803168:	108047c3 	ldbu	r2,287(r2)
  80316c:	10803fcc 	andi	r2,r2,255
  803170:	1080201c 	xori	r2,r2,128
  803174:	10bfe004 	addi	r2,r2,-128
  803178:	10000826 	beq	r2,zero,80319c <logic+0x2f0c>
  80317c:	e0bffc17 	ldw	r2,-16(fp)
  803180:	10806083 	ldbu	r2,386(r2)
  803184:	10803fcc 	andi	r2,r2,255
  803188:	1080201c 	xori	r2,r2,128
  80318c:	10bfe004 	addi	r2,r2,-128
  803190:	1000021e 	bne	r2,zero,80319c <logic+0x2f0c>
  803194:	00800044 	movi	r2,1
  803198:	00000106 	br	8031a0 <logic+0x2f10>
  80319c:	0005883a 	mov	r2,zero
  8031a0:	1007883a 	mov	r3,r2
  8031a4:	e0bffc17 	ldw	r2,-16(fp)
  8031a8:	10c04885 	stb	r3,290(r2)
  d->_g97_e1 = !(d->_g101 || d->_g98);
  8031ac:	e0bffc17 	ldw	r2,-16(fp)
  8031b0:	10804943 	ldbu	r2,293(r2)
  8031b4:	10803fcc 	andi	r2,r2,255
  8031b8:	1080201c 	xori	r2,r2,128
  8031bc:	10bfe004 	addi	r2,r2,-128
  8031c0:	1000081e 	bne	r2,zero,8031e4 <logic+0x2f54>
  8031c4:	e0bffc17 	ldw	r2,-16(fp)
  8031c8:	10804883 	ldbu	r2,290(r2)
  8031cc:	10803fcc 	andi	r2,r2,255
  8031d0:	1080201c 	xori	r2,r2,128
  8031d4:	10bfe004 	addi	r2,r2,-128
  8031d8:	1000021e 	bne	r2,zero,8031e4 <logic+0x2f54>
  8031dc:	00800044 	movi	r2,1
  8031e0:	00000106 	br	8031e8 <logic+0x2f58>
  8031e4:	0005883a 	mov	r2,zero
  8031e8:	1007883a 	mov	r3,r2
  8031ec:	e0bffc17 	ldw	r2,-16(fp)
  8031f0:	10c06905 	stb	r3,420(r2)
  d->_g96 = d->_g95 && d->_cg96 || d->_g102 && d->_cg100;
  8031f4:	e0bffc17 	ldw	r2,-16(fp)
  8031f8:	108047c3 	ldbu	r2,287(r2)
  8031fc:	10803fcc 	andi	r2,r2,255
  803200:	1080201c 	xori	r2,r2,128
  803204:	10bfe004 	addi	r2,r2,-128
  803208:	10000626 	beq	r2,zero,803224 <logic+0x2f94>
  80320c:	e0bffc17 	ldw	r2,-16(fp)
  803210:	10806083 	ldbu	r2,386(r2)
  803214:	10803fcc 	andi	r2,r2,255
  803218:	1080201c 	xori	r2,r2,128
  80321c:	10bfe004 	addi	r2,r2,-128
  803220:	10000c1e 	bne	r2,zero,803254 <logic+0x2fc4>
  803224:	e0bffc17 	ldw	r2,-16(fp)
  803228:	10804983 	ldbu	r2,294(r2)
  80322c:	10803fcc 	andi	r2,r2,255
  803230:	1080201c 	xori	r2,r2,128
  803234:	10bfe004 	addi	r2,r2,-128
  803238:	10000826 	beq	r2,zero,80325c <logic+0x2fcc>
  80323c:	e0bffc17 	ldw	r2,-16(fp)
  803240:	108060c3 	ldbu	r2,387(r2)
  803244:	10803fcc 	andi	r2,r2,255
  803248:	1080201c 	xori	r2,r2,128
  80324c:	10bfe004 	addi	r2,r2,-128
  803250:	10000226 	beq	r2,zero,80325c <logic+0x2fcc>
  803254:	00800044 	movi	r2,1
  803258:	00000106 	br	803260 <logic+0x2fd0>
  80325c:	0005883a 	mov	r2,zero
  803260:	1007883a 	mov	r3,r2
  803264:	e0bffc17 	ldw	r2,-16(fp)
  803268:	10c04805 	stb	r3,288(r2)
  d->_g100 = d->_g105 || d->_g88 && !d->_cg108;
  80326c:	e0bffc17 	ldw	r2,-16(fp)
  803270:	108049c3 	ldbu	r2,295(r2)
  803274:	10803fcc 	andi	r2,r2,255
  803278:	1080201c 	xori	r2,r2,128
  80327c:	10bfe004 	addi	r2,r2,-128
  803280:	10000c1e 	bne	r2,zero,8032b4 <logic+0x3024>
  803284:	e0bffc17 	ldw	r2,-16(fp)
  803288:	10804703 	ldbu	r2,284(r2)
  80328c:	10803fcc 	andi	r2,r2,255
  803290:	1080201c 	xori	r2,r2,128
  803294:	10bfe004 	addi	r2,r2,-128
  803298:	10000826 	beq	r2,zero,8032bc <logic+0x302c>
  80329c:	e0bffc17 	ldw	r2,-16(fp)
  8032a0:	10806103 	ldbu	r2,388(r2)
  8032a4:	10803fcc 	andi	r2,r2,255
  8032a8:	1080201c 	xori	r2,r2,128
  8032ac:	10bfe004 	addi	r2,r2,-128
  8032b0:	1000021e 	bne	r2,zero,8032bc <logic+0x302c>
  8032b4:	00800044 	movi	r2,1
  8032b8:	00000106 	br	8032c0 <logic+0x3030>
  8032bc:	0005883a 	mov	r2,zero
  8032c0:	1007883a 	mov	r3,r2
  8032c4:	e0bffc17 	ldw	r2,-16(fp)
  8032c8:	10c04905 	stb	r3,292(r2)
  d->_g93 = !d->_g100;
  8032cc:	e0bffc17 	ldw	r2,-16(fp)
  8032d0:	10804903 	ldbu	r2,292(r2)
  8032d4:	10803fcc 	andi	r2,r2,255
  8032d8:	1080201c 	xori	r2,r2,128
  8032dc:	10bfe004 	addi	r2,r2,-128
  8032e0:	1005003a 	cmpeq	r2,r2,zero
  8032e4:	1007883a 	mov	r3,r2
  8032e8:	e0bffc17 	ldw	r2,-16(fp)
  8032ec:	10c04785 	stb	r3,286(r2)
  d->_g108 = d->_g83 || d->_g68;
  8032f0:	e0bffc17 	ldw	r2,-16(fp)
  8032f4:	108045c3 	ldbu	r2,279(r2)
  8032f8:	10803fcc 	andi	r2,r2,255
  8032fc:	1080201c 	xori	r2,r2,128
  803300:	10bfe004 	addi	r2,r2,-128
  803304:	1000061e 	bne	r2,zero,803320 <logic+0x3090>
  803308:	e0bffc17 	ldw	r2,-16(fp)
  80330c:	108042c3 	ldbu	r2,267(r2)
  803310:	10803fcc 	andi	r2,r2,255
  803314:	1080201c 	xori	r2,r2,128
  803318:	10bfe004 	addi	r2,r2,-128
  80331c:	10000226 	beq	r2,zero,803328 <logic+0x3098>
  803320:	00800044 	movi	r2,1
  803324:	00000106 	br	80332c <logic+0x309c>
  803328:	0005883a 	mov	r2,zero
  80332c:	1007883a 	mov	r3,r2
  803330:	e0bffc17 	ldw	r2,-16(fp)
  803334:	10c04a85 	stb	r3,298(r2)
  d->_g109 = (d->_g97_e1 || d->_g96) && (d->_g93 || d->_g108) && (d->_g96 || d->_g108);
  803338:	e0bffc17 	ldw	r2,-16(fp)
  80333c:	10806903 	ldbu	r2,420(r2)
  803340:	10803fcc 	andi	r2,r2,255
  803344:	1080201c 	xori	r2,r2,128
  803348:	10bfe004 	addi	r2,r2,-128
  80334c:	1000061e 	bne	r2,zero,803368 <logic+0x30d8>
  803350:	e0bffc17 	ldw	r2,-16(fp)
  803354:	10804803 	ldbu	r2,288(r2)
  803358:	10803fcc 	andi	r2,r2,255
  80335c:	1080201c 	xori	r2,r2,128
  803360:	10bfe004 	addi	r2,r2,-128
  803364:	10001a26 	beq	r2,zero,8033d0 <logic+0x3140>
  803368:	e0bffc17 	ldw	r2,-16(fp)
  80336c:	10804783 	ldbu	r2,286(r2)
  803370:	10803fcc 	andi	r2,r2,255
  803374:	1080201c 	xori	r2,r2,128
  803378:	10bfe004 	addi	r2,r2,-128
  80337c:	1000061e 	bne	r2,zero,803398 <logic+0x3108>
  803380:	e0bffc17 	ldw	r2,-16(fp)
  803384:	10804a83 	ldbu	r2,298(r2)
  803388:	10803fcc 	andi	r2,r2,255
  80338c:	1080201c 	xori	r2,r2,128
  803390:	10bfe004 	addi	r2,r2,-128
  803394:	10000e26 	beq	r2,zero,8033d0 <logic+0x3140>
  803398:	e0bffc17 	ldw	r2,-16(fp)
  80339c:	10804803 	ldbu	r2,288(r2)
  8033a0:	10803fcc 	andi	r2,r2,255
  8033a4:	1080201c 	xori	r2,r2,128
  8033a8:	10bfe004 	addi	r2,r2,-128
  8033ac:	1000061e 	bne	r2,zero,8033c8 <logic+0x3138>
  8033b0:	e0bffc17 	ldw	r2,-16(fp)
  8033b4:	10804a83 	ldbu	r2,298(r2)
  8033b8:	10803fcc 	andi	r2,r2,255
  8033bc:	1080201c 	xori	r2,r2,128
  8033c0:	10bfe004 	addi	r2,r2,-128
  8033c4:	10000226 	beq	r2,zero,8033d0 <logic+0x3140>
  8033c8:	00800044 	movi	r2,1
  8033cc:	00000106 	br	8033d4 <logic+0x3144>
  8033d0:	0005883a 	mov	r2,zero
  8033d4:	1007883a 	mov	r3,r2
  8033d8:	e0bffc17 	ldw	r2,-16(fp)
  8033dc:	10c04ac5 	stb	r3,299(r2)
  d->_cg110 = d->_Pacemaker_local__Atrig6;
  8033e0:	e0bffc17 	ldw	r2,-16(fp)
  8033e4:	10c03583 	ldbu	r3,214(r2)
  8033e8:	e0bffc17 	ldw	r2,-16(fp)
  8033ec:	10c06185 	stb	r3,390(r2)
  d->_g106 = d->_g109 && d->_cg110;
  8033f0:	e0bffc17 	ldw	r2,-16(fp)
  8033f4:	10804ac3 	ldbu	r2,299(r2)
  8033f8:	10803fcc 	andi	r2,r2,255
  8033fc:	1080201c 	xori	r2,r2,128
  803400:	10bfe004 	addi	r2,r2,-128
  803404:	10000826 	beq	r2,zero,803428 <logic+0x3198>
  803408:	e0bffc17 	ldw	r2,-16(fp)
  80340c:	10806183 	ldbu	r2,390(r2)
  803410:	10803fcc 	andi	r2,r2,255
  803414:	1080201c 	xori	r2,r2,128
  803418:	10bfe004 	addi	r2,r2,-128
  80341c:	10000226 	beq	r2,zero,803428 <logic+0x3198>
  803420:	00800044 	movi	r2,1
  803424:	00000106 	br	80342c <logic+0x319c>
  803428:	0005883a 	mov	r2,zero
  80342c:	1007883a 	mov	r3,r2
  803430:	e0bffc17 	ldw	r2,-16(fp)
  803434:	10c04a05 	stb	r3,296(r2)
  if (d->_g106) {
  803438:	e0bffc17 	ldw	r2,-16(fp)
  80343c:	10804a03 	ldbu	r2,296(r2)
  803440:	10803fcc 	andi	r2,r2,255
  803444:	1080201c 	xori	r2,r2,128
  803448:	10bfe004 	addi	r2,r2,-128
  80344c:	10000526 	beq	r2,zero,803464 <logic+0x31d4>
    d->_taken_transitions[15] += 1;
  803450:	e0bffc17 	ldw	r2,-16(fp)
  803454:	10801617 	ldw	r2,88(r2)
  803458:	10c00044 	addi	r3,r2,1
  80345c:	e0bffc17 	ldw	r2,-16(fp)
  803460:	10c01615 	stw	r3,88(r2)
  }
  d->_g107_e2 = d->_pg111;
  803464:	e0bffc17 	ldw	r2,-16(fp)
  803468:	10c07083 	ldbu	r3,450(r2)
  80346c:	e0bffc17 	ldw	r2,-16(fp)
  803470:	10c06945 	stb	r3,421(r2)
  d->_cg114 = d->V_EVT;
  803474:	e0bffc17 	ldw	r2,-16(fp)
  803478:	10c03243 	ldbu	r3,201(r2)
  80347c:	e0bffc17 	ldw	r2,-16(fp)
  803480:	10c06205 	stb	r3,392(r2)
  d->_g97 = d->_g107_e2 && d->_cg114;
  803484:	e0bffc17 	ldw	r2,-16(fp)
  803488:	10806943 	ldbu	r2,421(r2)
  80348c:	10803fcc 	andi	r2,r2,255
  803490:	1080201c 	xori	r2,r2,128
  803494:	10bfe004 	addi	r2,r2,-128
  803498:	10000826 	beq	r2,zero,8034bc <logic+0x322c>
  80349c:	e0bffc17 	ldw	r2,-16(fp)
  8034a0:	10806203 	ldbu	r2,392(r2)
  8034a4:	10803fcc 	andi	r2,r2,255
  8034a8:	1080201c 	xori	r2,r2,128
  8034ac:	10bfe004 	addi	r2,r2,-128
  8034b0:	10000226 	beq	r2,zero,8034bc <logic+0x322c>
  8034b4:	00800044 	movi	r2,1
  8034b8:	00000106 	br	8034c0 <logic+0x3230>
  8034bc:	0005883a 	mov	r2,zero
  8034c0:	1007883a 	mov	r3,r2
  8034c4:	e0bffc17 	ldw	r2,-16(fp)
  8034c8:	10c04845 	stb	r3,289(r2)
  if (d->_g97) {
  8034cc:	e0bffc17 	ldw	r2,-16(fp)
  8034d0:	10804843 	ldbu	r2,289(r2)
  8034d4:	10803fcc 	andi	r2,r2,255
  8034d8:	1080201c 	xori	r2,r2,128
  8034dc:	10bfe004 	addi	r2,r2,-128
  8034e0:	10000526 	beq	r2,zero,8034f8 <logic+0x3268>
    d->_taken_transitions[17] += 1;
  8034e4:	e0bffc17 	ldw	r2,-16(fp)
  8034e8:	10801817 	ldw	r2,96(r2)
  8034ec:	10c00044 	addi	r3,r2,1
  8034f0:	e0bffc17 	ldw	r2,-16(fp)
  8034f4:	10c01815 	stw	r3,96(r2)
  }
  d->_g107 = d->_pg137;
  8034f8:	e0bffc17 	ldw	r2,-16(fp)
  8034fc:	10c070c3 	ldbu	r3,451(r2)
  803500:	e0bffc17 	ldw	r2,-16(fp)
  803504:	10c04a45 	stb	r3,297(r2)
  d->_cg150 = d->V_EVT;
  803508:	e0bffc17 	ldw	r2,-16(fp)
  80350c:	10c03243 	ldbu	r3,201(r2)
  803510:	e0bffc17 	ldw	r2,-16(fp)
  803514:	10c06505 	stb	r3,404(r2)
  d->_g97_e1 = d->_g107 && d->_cg150;
  803518:	e0bffc17 	ldw	r2,-16(fp)
  80351c:	10804a43 	ldbu	r2,297(r2)
  803520:	10803fcc 	andi	r2,r2,255
  803524:	1080201c 	xori	r2,r2,128
  803528:	10bfe004 	addi	r2,r2,-128
  80352c:	10000826 	beq	r2,zero,803550 <logic+0x32c0>
  803530:	e0bffc17 	ldw	r2,-16(fp)
  803534:	10806503 	ldbu	r2,404(r2)
  803538:	10803fcc 	andi	r2,r2,255
  80353c:	1080201c 	xori	r2,r2,128
  803540:	10bfe004 	addi	r2,r2,-128
  803544:	10000226 	beq	r2,zero,803550 <logic+0x32c0>
  803548:	00800044 	movi	r2,1
  80354c:	00000106 	br	803554 <logic+0x32c4>
  803550:	0005883a 	mov	r2,zero
  803554:	1007883a 	mov	r3,r2
  803558:	e0bffc17 	ldw	r2,-16(fp)
  80355c:	10c06905 	stb	r3,420(r2)
  if (d->_g97_e1) {
  803560:	e0bffc17 	ldw	r2,-16(fp)
  803564:	10806903 	ldbu	r2,420(r2)
  803568:	10803fcc 	andi	r2,r2,255
  80356c:	1080201c 	xori	r2,r2,128
  803570:	10bfe004 	addi	r2,r2,-128
  803574:	10000326 	beq	r2,zero,803584 <logic+0x32f4>
    d->uri_active = 1;
  803578:	e0bffc17 	ldw	r2,-16(fp)
  80357c:	00c00044 	movi	r3,1
  803580:	10c00005 	stb	r3,0(r2)
  }
  d->_g162 = d->_pg171;
  803584:	e0bffc17 	ldw	r2,-16(fp)
  803588:	10c07103 	ldbu	r3,452(r2)
  80358c:	e0bffc17 	ldw	r2,-16(fp)
  803590:	10c05445 	stb	r3,337(r2)
  d->_g156 = d->_pg150;
  803594:	e0bffc17 	ldw	r2,-16(fp)
  803598:	10c07143 	ldbu	r3,453(r2)
  80359c:	e0bffc17 	ldw	r2,-16(fp)
  8035a0:	10c05305 	stb	r3,332(r2)
  d->_g159_e1 = !(d->_g162 || d->_g156);
  8035a4:	e0bffc17 	ldw	r2,-16(fp)
  8035a8:	10805443 	ldbu	r2,337(r2)
  8035ac:	10803fcc 	andi	r2,r2,255
  8035b0:	1080201c 	xori	r2,r2,128
  8035b4:	10bfe004 	addi	r2,r2,-128
  8035b8:	1000081e 	bne	r2,zero,8035dc <logic+0x334c>
  8035bc:	e0bffc17 	ldw	r2,-16(fp)
  8035c0:	10805303 	ldbu	r2,332(r2)
  8035c4:	10803fcc 	andi	r2,r2,255
  8035c8:	1080201c 	xori	r2,r2,128
  8035cc:	10bfe004 	addi	r2,r2,-128
  8035d0:	1000021e 	bne	r2,zero,8035dc <logic+0x334c>
  8035d4:	00800044 	movi	r2,1
  8035d8:	00000106 	br	8035e0 <logic+0x3350>
  8035dc:	0005883a 	mov	r2,zero
  8035e0:	1007883a 	mov	r3,r2
  8035e4:	e0bffc17 	ldw	r2,-16(fp)
  8035e8:	10c06a05 	stb	r3,424(r2)
  d->_g166 = d->_pg172;
  8035ec:	e0bffc17 	ldw	r2,-16(fp)
  8035f0:	10c07183 	ldbu	r3,454(r2)
  8035f4:	e0bffc17 	ldw	r2,-16(fp)
  8035f8:	10c054c5 	stb	r3,339(r2)
  d->_cg166 = d->V_EVT;
  8035fc:	e0bffc17 	ldw	r2,-16(fp)
  803600:	10c03243 	ldbu	r3,201(r2)
  803604:	e0bffc17 	ldw	r2,-16(fp)
  803608:	10c06705 	stb	r3,412(r2)
  d->_g167 = d->_g166 && d->_cg166;
  80360c:	e0bffc17 	ldw	r2,-16(fp)
  803610:	108054c3 	ldbu	r2,339(r2)
  803614:	10803fcc 	andi	r2,r2,255
  803618:	1080201c 	xori	r2,r2,128
  80361c:	10bfe004 	addi	r2,r2,-128
  803620:	10000826 	beq	r2,zero,803644 <logic+0x33b4>
  803624:	e0bffc17 	ldw	r2,-16(fp)
  803628:	10806703 	ldbu	r2,412(r2)
  80362c:	10803fcc 	andi	r2,r2,255
  803630:	1080201c 	xori	r2,r2,128
  803634:	10bfe004 	addi	r2,r2,-128
  803638:	10000226 	beq	r2,zero,803644 <logic+0x33b4>
  80363c:	00800044 	movi	r2,1
  803640:	00000106 	br	803648 <logic+0x33b8>
  803644:	0005883a 	mov	r2,zero
  803648:	1007883a 	mov	r3,r2
  80364c:	e0bffc17 	ldw	r2,-16(fp)
  803650:	10c05505 	stb	r3,340(r2)
  if (d->_g167) {
  803654:	e0bffc17 	ldw	r2,-16(fp)
  803658:	10805503 	ldbu	r2,340(r2)
  80365c:	10803fcc 	andi	r2,r2,255
  803660:	1080201c 	xori	r2,r2,128
  803664:	10bfe004 	addi	r2,r2,-128
  803668:	10000326 	beq	r2,zero,803678 <logic+0x33e8>
    d->_Pacemaker_local__Atrig10 = 1;
  80366c:	e0bffc17 	ldw	r2,-16(fp)
  803670:	00c00044 	movi	r3,1
  803674:	10c03685 	stb	r3,218(r2)
  }
  d->_g201 = d->_pg152;
  803678:	e0bffc17 	ldw	r2,-16(fp)
  80367c:	10c071c3 	ldbu	r3,455(r2)
  803680:	e0bffc17 	ldw	r2,-16(fp)
  803684:	10c05745 	stb	r3,349(r2)
  if (d->_g201) {
  803688:	e0bffc17 	ldw	r2,-16(fp)
  80368c:	10805743 	ldbu	r2,349(r2)
  803690:	10803fcc 	andi	r2,r2,255
  803694:	1080201c 	xori	r2,r2,128
  803698:	10bfe004 	addi	r2,r2,-128
  80369c:	10001226 	beq	r2,zero,8036e8 <logic+0x3458>
    d->_region5_URI_t += d->deltaT;
  8036a0:	e13ffc17 	ldw	r4,-16(fp)
  8036a4:	20802b17 	ldw	r2,172(r4)
  8036a8:	20c02c17 	ldw	r3,176(r4)
  8036ac:	e1bffc17 	ldw	r6,-16(fp)
  8036b0:	31002d17 	ldw	r4,180(r6)
  8036b4:	31402e17 	ldw	r5,184(r6)
  8036b8:	200d883a 	mov	r6,r4
  8036bc:	280f883a 	mov	r7,r5
  8036c0:	1009883a 	mov	r4,r2
  8036c4:	180b883a 	mov	r5,r3
  8036c8:	0806aa80 	call	806aa8 <__adddf3>
  8036cc:	1009883a 	mov	r4,r2
  8036d0:	180b883a 	mov	r5,r3
  8036d4:	2005883a 	mov	r2,r4
  8036d8:	2807883a 	mov	r3,r5
  8036dc:	e13ffc17 	ldw	r4,-16(fp)
  8036e0:	20802b15 	stw	r2,172(r4)
  8036e4:	20c02c15 	stw	r3,176(r4)
  }
  d->_g169 = d->_g166 && !d->_cg166;
  8036e8:	e0bffc17 	ldw	r2,-16(fp)
  8036ec:	108054c3 	ldbu	r2,339(r2)
  8036f0:	10803fcc 	andi	r2,r2,255
  8036f4:	1080201c 	xori	r2,r2,128
  8036f8:	10bfe004 	addi	r2,r2,-128
  8036fc:	10000826 	beq	r2,zero,803720 <logic+0x3490>
  803700:	e0bffc17 	ldw	r2,-16(fp)
  803704:	10806703 	ldbu	r2,412(r2)
  803708:	10803fcc 	andi	r2,r2,255
  80370c:	1080201c 	xori	r2,r2,128
  803710:	10bfe004 	addi	r2,r2,-128
  803714:	1000021e 	bne	r2,zero,803720 <logic+0x3490>
  803718:	00800044 	movi	r2,1
  80371c:	00000106 	br	803724 <logic+0x3494>
  803720:	0005883a 	mov	r2,zero
  803724:	1007883a 	mov	r3,r2
  803728:	e0bffc17 	ldw	r2,-16(fp)
  80372c:	10c05585 	stb	r3,342(r2)
  d->_cg169 = d->_region5_URI_t >= d->T_URI;
  803730:	e0bffc17 	ldw	r2,-16(fp)
  803734:	14002b17 	ldw	r16,172(r2)
  803738:	14402c17 	ldw	r17,176(r2)
  80373c:	e0bffc17 	ldw	r2,-16(fp)
  803740:	10800617 	ldw	r2,24(r2)
  803744:	1009883a 	mov	r4,r2
  803748:	0808e200 	call	808e20 <__floatsidf>
  80374c:	1009883a 	mov	r4,r2
  803750:	180b883a 	mov	r5,r3
  803754:	04800044 	movi	r18,1
  803758:	200d883a 	mov	r6,r4
  80375c:	280f883a 	mov	r7,r5
  803760:	8009883a 	mov	r4,r16
  803764:	880b883a 	mov	r5,r17
  803768:	0807c3c0 	call	807c3c <__gedf2>
  80376c:	1000010e 	bge	r2,zero,803774 <logic+0x34e4>
  803770:	0025883a 	mov	r18,zero
  803774:	9007883a 	mov	r3,r18
  803778:	e0bffc17 	ldw	r2,-16(fp)
  80377c:	10c066c5 	stb	r3,411(r2)
  d->_g170 = d->_g169 && d->_cg169;
  803780:	e0bffc17 	ldw	r2,-16(fp)
  803784:	10805583 	ldbu	r2,342(r2)
  803788:	10803fcc 	andi	r2,r2,255
  80378c:	1080201c 	xori	r2,r2,128
  803790:	10bfe004 	addi	r2,r2,-128
  803794:	10000826 	beq	r2,zero,8037b8 <logic+0x3528>
  803798:	e0bffc17 	ldw	r2,-16(fp)
  80379c:	108066c3 	ldbu	r2,411(r2)
  8037a0:	10803fcc 	andi	r2,r2,255
  8037a4:	1080201c 	xori	r2,r2,128
  8037a8:	10bfe004 	addi	r2,r2,-128
  8037ac:	10000226 	beq	r2,zero,8037b8 <logic+0x3528>
  8037b0:	00800044 	movi	r2,1
  8037b4:	00000106 	br	8037bc <logic+0x352c>
  8037b8:	0005883a 	mov	r2,zero
  8037bc:	1007883a 	mov	r3,r2
  8037c0:	e0bffc17 	ldw	r2,-16(fp)
  8037c4:	10c055c5 	stb	r3,343(r2)
  if (d->_g170) {
  8037c8:	e0bffc17 	ldw	r2,-16(fp)
  8037cc:	108055c3 	ldbu	r2,343(r2)
  8037d0:	10803fcc 	andi	r2,r2,255
  8037d4:	1080201c 	xori	r2,r2,128
  8037d8:	10bfe004 	addi	r2,r2,-128
  8037dc:	10000326 	beq	r2,zero,8037ec <logic+0x355c>
    d->_Pacemaker_local__Atrig11 = 1;
  8037e0:	e0bffc17 	ldw	r2,-16(fp)
  8037e4:	00c00044 	movi	r3,1
  8037e8:	10c036c5 	stb	r3,219(r2)
  }
  d->_g156 = d->_g156 || d->_g162;
  8037ec:	e0bffc17 	ldw	r2,-16(fp)
  8037f0:	10805303 	ldbu	r2,332(r2)
  8037f4:	10803fcc 	andi	r2,r2,255
  8037f8:	1080201c 	xori	r2,r2,128
  8037fc:	10bfe004 	addi	r2,r2,-128
  803800:	1000061e 	bne	r2,zero,80381c <logic+0x358c>
  803804:	e0bffc17 	ldw	r2,-16(fp)
  803808:	10805443 	ldbu	r2,337(r2)
  80380c:	10803fcc 	andi	r2,r2,255
  803810:	1080201c 	xori	r2,r2,128
  803814:	10bfe004 	addi	r2,r2,-128
  803818:	10000226 	beq	r2,zero,803824 <logic+0x3594>
  80381c:	00800044 	movi	r2,1
  803820:	00000106 	br	803828 <logic+0x3598>
  803824:	0005883a 	mov	r2,zero
  803828:	1007883a 	mov	r3,r2
  80382c:	e0bffc17 	ldw	r2,-16(fp)
  803830:	10c05305 	stb	r3,332(r2)
  d->_cg157 = d->_region5_URI_t < d->T_URI;
  803834:	e0bffc17 	ldw	r2,-16(fp)
  803838:	14002b17 	ldw	r16,172(r2)
  80383c:	14402c17 	ldw	r17,176(r2)
  803840:	e0bffc17 	ldw	r2,-16(fp)
  803844:	10800617 	ldw	r2,24(r2)
  803848:	1009883a 	mov	r4,r2
  80384c:	0808e200 	call	808e20 <__floatsidf>
  803850:	1009883a 	mov	r4,r2
  803854:	180b883a 	mov	r5,r3
  803858:	04800044 	movi	r18,1
  80385c:	200d883a 	mov	r6,r4
  803860:	280f883a 	mov	r7,r5
  803864:	8009883a 	mov	r4,r16
  803868:	880b883a 	mov	r5,r17
  80386c:	0807d180 	call	807d18 <__ledf2>
  803870:	10000116 	blt	r2,zero,803878 <logic+0x35e8>
  803874:	0025883a 	mov	r18,zero
  803878:	9007883a 	mov	r3,r18
  80387c:	e0bffc17 	ldw	r2,-16(fp)
  803880:	10c06605 	stb	r3,408(r2)
  d->_g162 = d->_g156 && d->_cg157;
  803884:	e0bffc17 	ldw	r2,-16(fp)
  803888:	10805303 	ldbu	r2,332(r2)
  80388c:	10803fcc 	andi	r2,r2,255
  803890:	1080201c 	xori	r2,r2,128
  803894:	10bfe004 	addi	r2,r2,-128
  803898:	10000826 	beq	r2,zero,8038bc <logic+0x362c>
  80389c:	e0bffc17 	ldw	r2,-16(fp)
  8038a0:	10806603 	ldbu	r2,408(r2)
  8038a4:	10803fcc 	andi	r2,r2,255
  8038a8:	1080201c 	xori	r2,r2,128
  8038ac:	10bfe004 	addi	r2,r2,-128
  8038b0:	10000226 	beq	r2,zero,8038bc <logic+0x362c>
  8038b4:	00800044 	movi	r2,1
  8038b8:	00000106 	br	8038c0 <logic+0x3630>
  8038bc:	0005883a 	mov	r2,zero
  8038c0:	1007883a 	mov	r3,r2
  8038c4:	e0bffc17 	ldw	r2,-16(fp)
  8038c8:	10c05445 	stb	r3,337(r2)
  if (d->_g162) {
  8038cc:	e0bffc17 	ldw	r2,-16(fp)
  8038d0:	10805443 	ldbu	r2,337(r2)
  8038d4:	10803fcc 	andi	r2,r2,255
  8038d8:	1080201c 	xori	r2,r2,128
  8038dc:	10bfe004 	addi	r2,r2,-128
  8038e0:	10003426 	beq	r2,zero,8039b4 <logic+0x3724>
    d->sleepT = (d->sleepT < (d->T_URI - d->_region5_URI_t)) ? d->sleepT : (d->T_URI - d->_region5_URI_t);
  8038e4:	e0bffc17 	ldw	r2,-16(fp)
  8038e8:	14002f17 	ldw	r16,188(r2)
  8038ec:	14403017 	ldw	r17,192(r2)
  8038f0:	e0bffc17 	ldw	r2,-16(fp)
  8038f4:	10800617 	ldw	r2,24(r2)
  8038f8:	1009883a 	mov	r4,r2
  8038fc:	0808e200 	call	808e20 <__floatsidf>
  803900:	1011883a 	mov	r8,r2
  803904:	1813883a 	mov	r9,r3
  803908:	e13ffc17 	ldw	r4,-16(fp)
  80390c:	20802b17 	ldw	r2,172(r4)
  803910:	20c02c17 	ldw	r3,176(r4)
  803914:	100d883a 	mov	r6,r2
  803918:	180f883a 	mov	r7,r3
  80391c:	4009883a 	mov	r4,r8
  803920:	480b883a 	mov	r5,r9
  803924:	08085240 	call	808524 <__subdf3>
  803928:	1009883a 	mov	r4,r2
  80392c:	180b883a 	mov	r5,r3
  803930:	2005883a 	mov	r2,r4
  803934:	2807883a 	mov	r3,r5
  803938:	100d883a 	mov	r6,r2
  80393c:	180f883a 	mov	r7,r3
  803940:	8009883a 	mov	r4,r16
  803944:	880b883a 	mov	r5,r17
  803948:	0807d180 	call	807d18 <__ledf2>
  80394c:	1000040e 	bge	r2,zero,803960 <logic+0x36d0>
  803950:	e13ffc17 	ldw	r4,-16(fp)
  803954:	20802f17 	ldw	r2,188(r4)
  803958:	20c03017 	ldw	r3,192(r4)
  80395c:	00001206 	br	8039a8 <logic+0x3718>
  803960:	e0bffc17 	ldw	r2,-16(fp)
  803964:	10800617 	ldw	r2,24(r2)
  803968:	1009883a 	mov	r4,r2
  80396c:	0808e200 	call	808e20 <__floatsidf>
  803970:	1011883a 	mov	r8,r2
  803974:	1813883a 	mov	r9,r3
  803978:	e13ffc17 	ldw	r4,-16(fp)
  80397c:	20802b17 	ldw	r2,172(r4)
  803980:	20c02c17 	ldw	r3,176(r4)
  803984:	100d883a 	mov	r6,r2
  803988:	180f883a 	mov	r7,r3
  80398c:	4009883a 	mov	r4,r8
  803990:	480b883a 	mov	r5,r9
  803994:	08085240 	call	808524 <__subdf3>
  803998:	1009883a 	mov	r4,r2
  80399c:	180b883a 	mov	r5,r3
  8039a0:	2005883a 	mov	r2,r4
  8039a4:	2807883a 	mov	r3,r5
  8039a8:	e13ffc17 	ldw	r4,-16(fp)
  8039ac:	20802f15 	stw	r2,188(r4)
  8039b0:	20c03015 	stw	r3,192(r4)
  }
  d->_cg158 = d->_Pacemaker_local__Atrig10 || d->_Pacemaker_local__Atrig11;
  8039b4:	e0bffc17 	ldw	r2,-16(fp)
  8039b8:	10803683 	ldbu	r2,218(r2)
  8039bc:	10803fcc 	andi	r2,r2,255
  8039c0:	1080201c 	xori	r2,r2,128
  8039c4:	10bfe004 	addi	r2,r2,-128
  8039c8:	1000061e 	bne	r2,zero,8039e4 <logic+0x3754>
  8039cc:	e0bffc17 	ldw	r2,-16(fp)
  8039d0:	108036c3 	ldbu	r2,219(r2)
  8039d4:	10803fcc 	andi	r2,r2,255
  8039d8:	1080201c 	xori	r2,r2,128
  8039dc:	10bfe004 	addi	r2,r2,-128
  8039e0:	10000226 	beq	r2,zero,8039ec <logic+0x375c>
  8039e4:	00800044 	movi	r2,1
  8039e8:	00000106 	br	8039f0 <logic+0x3760>
  8039ec:	0005883a 	mov	r2,zero
  8039f0:	1007883a 	mov	r3,r2
  8039f4:	e0bffc17 	ldw	r2,-16(fp)
  8039f8:	10c065c5 	stb	r3,407(r2)
  d->_g157 = d->_g156 && !d->_cg157;
  8039fc:	e0bffc17 	ldw	r2,-16(fp)
  803a00:	10805303 	ldbu	r2,332(r2)
  803a04:	10803fcc 	andi	r2,r2,255
  803a08:	1080201c 	xori	r2,r2,128
  803a0c:	10bfe004 	addi	r2,r2,-128
  803a10:	10000826 	beq	r2,zero,803a34 <logic+0x37a4>
  803a14:	e0bffc17 	ldw	r2,-16(fp)
  803a18:	10806603 	ldbu	r2,408(r2)
  803a1c:	10803fcc 	andi	r2,r2,255
  803a20:	1080201c 	xori	r2,r2,128
  803a24:	10bfe004 	addi	r2,r2,-128
  803a28:	1000021e 	bne	r2,zero,803a34 <logic+0x37a4>
  803a2c:	00800044 	movi	r2,1
  803a30:	00000106 	br	803a38 <logic+0x37a8>
  803a34:	0005883a 	mov	r2,zero
  803a38:	1007883a 	mov	r3,r2
  803a3c:	e0bffc17 	ldw	r2,-16(fp)
  803a40:	10c05345 	stb	r3,333(r2)
  d->_cg160 = d->_Pacemaker_local__Atrig10 || d->_Pacemaker_local__Atrig11;
  803a44:	e0bffc17 	ldw	r2,-16(fp)
  803a48:	10803683 	ldbu	r2,218(r2)
  803a4c:	10803fcc 	andi	r2,r2,255
  803a50:	1080201c 	xori	r2,r2,128
  803a54:	10bfe004 	addi	r2,r2,-128
  803a58:	1000061e 	bne	r2,zero,803a74 <logic+0x37e4>
  803a5c:	e0bffc17 	ldw	r2,-16(fp)
  803a60:	108036c3 	ldbu	r2,219(r2)
  803a64:	10803fcc 	andi	r2,r2,255
  803a68:	1080201c 	xori	r2,r2,128
  803a6c:	10bfe004 	addi	r2,r2,-128
  803a70:	10000226 	beq	r2,zero,803a7c <logic+0x37ec>
  803a74:	00800044 	movi	r2,1
  803a78:	00000106 	br	803a80 <logic+0x37f0>
  803a7c:	0005883a 	mov	r2,zero
  803a80:	1007883a 	mov	r3,r2
  803a84:	e0bffc17 	ldw	r2,-16(fp)
  803a88:	10c06645 	stb	r3,409(r2)
  d->_g159 = d->_g162 && d->_cg158 || d->_g157 && d->_cg160;
  803a8c:	e0bffc17 	ldw	r2,-16(fp)
  803a90:	10805443 	ldbu	r2,337(r2)
  803a94:	10803fcc 	andi	r2,r2,255
  803a98:	1080201c 	xori	r2,r2,128
  803a9c:	10bfe004 	addi	r2,r2,-128
  803aa0:	10000626 	beq	r2,zero,803abc <logic+0x382c>
  803aa4:	e0bffc17 	ldw	r2,-16(fp)
  803aa8:	108065c3 	ldbu	r2,407(r2)
  803aac:	10803fcc 	andi	r2,r2,255
  803ab0:	1080201c 	xori	r2,r2,128
  803ab4:	10bfe004 	addi	r2,r2,-128
  803ab8:	10000c1e 	bne	r2,zero,803aec <logic+0x385c>
  803abc:	e0bffc17 	ldw	r2,-16(fp)
  803ac0:	10805343 	ldbu	r2,333(r2)
  803ac4:	10803fcc 	andi	r2,r2,255
  803ac8:	1080201c 	xori	r2,r2,128
  803acc:	10bfe004 	addi	r2,r2,-128
  803ad0:	10000826 	beq	r2,zero,803af4 <logic+0x3864>
  803ad4:	e0bffc17 	ldw	r2,-16(fp)
  803ad8:	10806643 	ldbu	r2,409(r2)
  803adc:	10803fcc 	andi	r2,r2,255
  803ae0:	1080201c 	xori	r2,r2,128
  803ae4:	10bfe004 	addi	r2,r2,-128
  803ae8:	10000226 	beq	r2,zero,803af4 <logic+0x3864>
  803aec:	00800044 	movi	r2,1
  803af0:	00000106 	br	803af8 <logic+0x3868>
  803af4:	0005883a 	mov	r2,zero
  803af8:	1007883a 	mov	r3,r2
  803afc:	e0bffc17 	ldw	r2,-16(fp)
  803b00:	10c053c5 	stb	r3,335(r2)
  d->_g166 = !d->_g166;
  803b04:	e0bffc17 	ldw	r2,-16(fp)
  803b08:	108054c3 	ldbu	r2,339(r2)
  803b0c:	10803fcc 	andi	r2,r2,255
  803b10:	1080201c 	xori	r2,r2,128
  803b14:	10bfe004 	addi	r2,r2,-128
  803b18:	1005003a 	cmpeq	r2,r2,zero
  803b1c:	1007883a 	mov	r3,r2
  803b20:	e0bffc17 	ldw	r2,-16(fp)
  803b24:	10c054c5 	stb	r3,339(r2)
  d->_g170 = d->_g167 || d->_g170;
  803b28:	e0bffc17 	ldw	r2,-16(fp)
  803b2c:	10805503 	ldbu	r2,340(r2)
  803b30:	10803fcc 	andi	r2,r2,255
  803b34:	1080201c 	xori	r2,r2,128
  803b38:	10bfe004 	addi	r2,r2,-128
  803b3c:	1000061e 	bne	r2,zero,803b58 <logic+0x38c8>
  803b40:	e0bffc17 	ldw	r2,-16(fp)
  803b44:	108055c3 	ldbu	r2,343(r2)
  803b48:	10803fcc 	andi	r2,r2,255
  803b4c:	1080201c 	xori	r2,r2,128
  803b50:	10bfe004 	addi	r2,r2,-128
  803b54:	10000226 	beq	r2,zero,803b60 <logic+0x38d0>
  803b58:	00800044 	movi	r2,1
  803b5c:	00000106 	br	803b64 <logic+0x38d4>
  803b60:	0005883a 	mov	r2,zero
  803b64:	1007883a 	mov	r3,r2
  803b68:	e0bffc17 	ldw	r2,-16(fp)
  803b6c:	10c055c5 	stb	r3,343(r2)
  d->_g167 = (d->_g159_e1 || d->_g159) && (d->_g166 || d->_g170) && (d->_g159 || d->_g170);
  803b70:	e0bffc17 	ldw	r2,-16(fp)
  803b74:	10806a03 	ldbu	r2,424(r2)
  803b78:	10803fcc 	andi	r2,r2,255
  803b7c:	1080201c 	xori	r2,r2,128
  803b80:	10bfe004 	addi	r2,r2,-128
  803b84:	1000061e 	bne	r2,zero,803ba0 <logic+0x3910>
  803b88:	e0bffc17 	ldw	r2,-16(fp)
  803b8c:	108053c3 	ldbu	r2,335(r2)
  803b90:	10803fcc 	andi	r2,r2,255
  803b94:	1080201c 	xori	r2,r2,128
  803b98:	10bfe004 	addi	r2,r2,-128
  803b9c:	10001a26 	beq	r2,zero,803c08 <logic+0x3978>
  803ba0:	e0bffc17 	ldw	r2,-16(fp)
  803ba4:	108054c3 	ldbu	r2,339(r2)
  803ba8:	10803fcc 	andi	r2,r2,255
  803bac:	1080201c 	xori	r2,r2,128
  803bb0:	10bfe004 	addi	r2,r2,-128
  803bb4:	1000061e 	bne	r2,zero,803bd0 <logic+0x3940>
  803bb8:	e0bffc17 	ldw	r2,-16(fp)
  803bbc:	108055c3 	ldbu	r2,343(r2)
  803bc0:	10803fcc 	andi	r2,r2,255
  803bc4:	1080201c 	xori	r2,r2,128
  803bc8:	10bfe004 	addi	r2,r2,-128
  803bcc:	10000e26 	beq	r2,zero,803c08 <logic+0x3978>
  803bd0:	e0bffc17 	ldw	r2,-16(fp)
  803bd4:	108053c3 	ldbu	r2,335(r2)
  803bd8:	10803fcc 	andi	r2,r2,255
  803bdc:	1080201c 	xori	r2,r2,128
  803be0:	10bfe004 	addi	r2,r2,-128
  803be4:	1000061e 	bne	r2,zero,803c00 <logic+0x3970>
  803be8:	e0bffc17 	ldw	r2,-16(fp)
  803bec:	108055c3 	ldbu	r2,343(r2)
  803bf0:	10803fcc 	andi	r2,r2,255
  803bf4:	1080201c 	xori	r2,r2,128
  803bf8:	10bfe004 	addi	r2,r2,-128
  803bfc:	10000226 	beq	r2,zero,803c08 <logic+0x3978>
  803c00:	00800044 	movi	r2,1
  803c04:	00000106 	br	803c0c <logic+0x397c>
  803c08:	0005883a 	mov	r2,zero
  803c0c:	1007883a 	mov	r3,r2
  803c10:	e0bffc17 	ldw	r2,-16(fp)
  803c14:	10c05505 	stb	r3,340(r2)
  d->_cg171 = d->_Pacemaker_local__Atrig10;
  803c18:	e0bffc17 	ldw	r2,-16(fp)
  803c1c:	10c03683 	ldbu	r3,218(r2)
  803c20:	e0bffc17 	ldw	r2,-16(fp)
  803c24:	10c06745 	stb	r3,413(r2)
  d->_g168 = d->_g167 && !d->_cg171;
  803c28:	e0bffc17 	ldw	r2,-16(fp)
  803c2c:	10805503 	ldbu	r2,340(r2)
  803c30:	10803fcc 	andi	r2,r2,255
  803c34:	1080201c 	xori	r2,r2,128
  803c38:	10bfe004 	addi	r2,r2,-128
  803c3c:	10000826 	beq	r2,zero,803c60 <logic+0x39d0>
  803c40:	e0bffc17 	ldw	r2,-16(fp)
  803c44:	10806743 	ldbu	r2,413(r2)
  803c48:	10803fcc 	andi	r2,r2,255
  803c4c:	1080201c 	xori	r2,r2,128
  803c50:	10bfe004 	addi	r2,r2,-128
  803c54:	1000021e 	bne	r2,zero,803c60 <logic+0x39d0>
  803c58:	00800044 	movi	r2,1
  803c5c:	00000106 	br	803c64 <logic+0x39d4>
  803c60:	0005883a 	mov	r2,zero
  803c64:	1007883a 	mov	r3,r2
  803c68:	e0bffc17 	ldw	r2,-16(fp)
  803c6c:	10c05545 	stb	r3,341(r2)
  if (d->_g168) {
  803c70:	e0bffc17 	ldw	r2,-16(fp)
  803c74:	10805543 	ldbu	r2,341(r2)
  803c78:	10803fcc 	andi	r2,r2,255
  803c7c:	1080201c 	xori	r2,r2,128
  803c80:	10bfe004 	addi	r2,r2,-128
  803c84:	10000726 	beq	r2,zero,803ca4 <logic+0x3a14>
    d->uri_active = 0;
  803c88:	e0bffc17 	ldw	r2,-16(fp)
  803c8c:	10000005 	stb	zero,0(r2)
    d->_taken_transitions[25] += 1;
  803c90:	e0bffc17 	ldw	r2,-16(fp)
  803c94:	10802017 	ldw	r2,128(r2)
  803c98:	10c00044 	addi	r3,r2,1
  803c9c:	e0bffc17 	ldw	r2,-16(fp)
  803ca0:	10c02015 	stw	r3,128(r2)
  }
  d->_g168_e2 = d->_g107_e2 && !d->_cg114;
  803ca4:	e0bffc17 	ldw	r2,-16(fp)
  803ca8:	10806943 	ldbu	r2,421(r2)
  803cac:	10803fcc 	andi	r2,r2,255
  803cb0:	1080201c 	xori	r2,r2,128
  803cb4:	10bfe004 	addi	r2,r2,-128
  803cb8:	10000826 	beq	r2,zero,803cdc <logic+0x3a4c>
  803cbc:	e0bffc17 	ldw	r2,-16(fp)
  803cc0:	10806203 	ldbu	r2,392(r2)
  803cc4:	10803fcc 	andi	r2,r2,255
  803cc8:	1080201c 	xori	r2,r2,128
  803ccc:	10bfe004 	addi	r2,r2,-128
  803cd0:	1000021e 	bne	r2,zero,803cdc <logic+0x3a4c>
  803cd4:	00800044 	movi	r2,1
  803cd8:	00000106 	br	803ce0 <logic+0x3a50>
  803cdc:	0005883a 	mov	r2,zero
  803ce0:	1007883a 	mov	r3,r2
  803ce4:	e0bffc17 	ldw	r2,-16(fp)
  803ce8:	10c06a45 	stb	r3,425(r2)
  d->_cg116 = d->uri_active == 0;
  803cec:	e0bffc17 	ldw	r2,-16(fp)
  803cf0:	10800003 	ldbu	r2,0(r2)
  803cf4:	10803fcc 	andi	r2,r2,255
  803cf8:	1080201c 	xori	r2,r2,128
  803cfc:	10bfe004 	addi	r2,r2,-128
  803d00:	1005003a 	cmpeq	r2,r2,zero
  803d04:	1007883a 	mov	r3,r2
  803d08:	e0bffc17 	ldw	r2,-16(fp)
  803d0c:	10c061c5 	stb	r3,391(r2)
  d->_g159_e1 = d->_g168_e2 && d->_cg116;
  803d10:	e0bffc17 	ldw	r2,-16(fp)
  803d14:	10806a43 	ldbu	r2,425(r2)
  803d18:	10803fcc 	andi	r2,r2,255
  803d1c:	1080201c 	xori	r2,r2,128
  803d20:	10bfe004 	addi	r2,r2,-128
  803d24:	10000826 	beq	r2,zero,803d48 <logic+0x3ab8>
  803d28:	e0bffc17 	ldw	r2,-16(fp)
  803d2c:	108061c3 	ldbu	r2,391(r2)
  803d30:	10803fcc 	andi	r2,r2,255
  803d34:	1080201c 	xori	r2,r2,128
  803d38:	10bfe004 	addi	r2,r2,-128
  803d3c:	10000226 	beq	r2,zero,803d48 <logic+0x3ab8>
  803d40:	00800044 	movi	r2,1
  803d44:	00000106 	br	803d4c <logic+0x3abc>
  803d48:	0005883a 	mov	r2,zero
  803d4c:	1007883a 	mov	r3,r2
  803d50:	e0bffc17 	ldw	r2,-16(fp)
  803d54:	10c06a05 	stb	r3,424(r2)
  if (d->_g159_e1) {
  803d58:	e0bffc17 	ldw	r2,-16(fp)
  803d5c:	10806a03 	ldbu	r2,424(r2)
  803d60:	10803fcc 	andi	r2,r2,255
  803d64:	1080201c 	xori	r2,r2,128
  803d68:	10bfe004 	addi	r2,r2,-128
  803d6c:	10000b26 	beq	r2,zero,803d9c <logic+0x3b0c>
    d->VP |= 1;
  803d70:	e0bffc17 	ldw	r2,-16(fp)
  803d74:	108031c3 	ldbu	r2,199(r2)
  803d78:	10800054 	ori	r2,r2,1
  803d7c:	1007883a 	mov	r3,r2
  803d80:	e0bffc17 	ldw	r2,-16(fp)
  803d84:	10c031c5 	stb	r3,199(r2)
    d->_taken_transitions[18] += 1;
  803d88:	e0bffc17 	ldw	r2,-16(fp)
  803d8c:	10801917 	ldw	r2,100(r2)
  803d90:	10c00044 	addi	r3,r2,1
  803d94:	e0bffc17 	ldw	r2,-16(fp)
  803d98:	10c01915 	stw	r3,100(r2)
  }
  d->_g159 = d->_GO || d->_g106 || d->_g97 || d->_g159_e1 || d->_g87 && !d->_cg92;
  803d9c:	e0bffc17 	ldw	r2,-16(fp)
  803da0:	10805803 	ldbu	r2,352(r2)
  803da4:	10803fcc 	andi	r2,r2,255
  803da8:	1080201c 	xori	r2,r2,128
  803dac:	10bfe004 	addi	r2,r2,-128
  803db0:	10001e1e 	bne	r2,zero,803e2c <logic+0x3b9c>
  803db4:	e0bffc17 	ldw	r2,-16(fp)
  803db8:	10804a03 	ldbu	r2,296(r2)
  803dbc:	10803fcc 	andi	r2,r2,255
  803dc0:	1080201c 	xori	r2,r2,128
  803dc4:	10bfe004 	addi	r2,r2,-128
  803dc8:	1000181e 	bne	r2,zero,803e2c <logic+0x3b9c>
  803dcc:	e0bffc17 	ldw	r2,-16(fp)
  803dd0:	10804843 	ldbu	r2,289(r2)
  803dd4:	10803fcc 	andi	r2,r2,255
  803dd8:	1080201c 	xori	r2,r2,128
  803ddc:	10bfe004 	addi	r2,r2,-128
  803de0:	1000121e 	bne	r2,zero,803e2c <logic+0x3b9c>
  803de4:	e0bffc17 	ldw	r2,-16(fp)
  803de8:	10806a03 	ldbu	r2,424(r2)
  803dec:	10803fcc 	andi	r2,r2,255
  803df0:	1080201c 	xori	r2,r2,128
  803df4:	10bfe004 	addi	r2,r2,-128
  803df8:	10000c1e 	bne	r2,zero,803e2c <logic+0x3b9c>
  803dfc:	e0bffc17 	ldw	r2,-16(fp)
  803e00:	108046c3 	ldbu	r2,283(r2)
  803e04:	10803fcc 	andi	r2,r2,255
  803e08:	1080201c 	xori	r2,r2,128
  803e0c:	10bfe004 	addi	r2,r2,-128
  803e10:	10000826 	beq	r2,zero,803e34 <logic+0x3ba4>
  803e14:	e0bffc17 	ldw	r2,-16(fp)
  803e18:	10806003 	ldbu	r2,384(r2)
  803e1c:	10803fcc 	andi	r2,r2,255
  803e20:	1080201c 	xori	r2,r2,128
  803e24:	10bfe004 	addi	r2,r2,-128
  803e28:	1000021e 	bne	r2,zero,803e34 <logic+0x3ba4>
  803e2c:	00800044 	movi	r2,1
  803e30:	00000106 	br	803e38 <logic+0x3ba8>
  803e34:	0005883a 	mov	r2,zero
  803e38:	1007883a 	mov	r3,r2
  803e3c:	e0bffc17 	ldw	r2,-16(fp)
  803e40:	10c053c5 	stb	r3,335(r2)
  d->_g114 = d->_g109 && !d->_cg110;
  803e44:	e0bffc17 	ldw	r2,-16(fp)
  803e48:	10804ac3 	ldbu	r2,299(r2)
  803e4c:	10803fcc 	andi	r2,r2,255
  803e50:	1080201c 	xori	r2,r2,128
  803e54:	10bfe004 	addi	r2,r2,-128
  803e58:	10000826 	beq	r2,zero,803e7c <logic+0x3bec>
  803e5c:	e0bffc17 	ldw	r2,-16(fp)
  803e60:	10806183 	ldbu	r2,390(r2)
  803e64:	10803fcc 	andi	r2,r2,255
  803e68:	1080201c 	xori	r2,r2,128
  803e6c:	10bfe004 	addi	r2,r2,-128
  803e70:	1000021e 	bne	r2,zero,803e7c <logic+0x3bec>
  803e74:	00800044 	movi	r2,1
  803e78:	00000106 	br	803e80 <logic+0x3bf0>
  803e7c:	0005883a 	mov	r2,zero
  803e80:	1007883a 	mov	r3,r2
  803e84:	e0bffc17 	ldw	r2,-16(fp)
  803e88:	10c04bc5 	stb	r3,303(r2)
  if (d->_g114) {
  803e8c:	e0bffc17 	ldw	r2,-16(fp)
  803e90:	10804bc3 	ldbu	r2,303(r2)
  803e94:	10803fcc 	andi	r2,r2,255
  803e98:	1080201c 	xori	r2,r2,128
  803e9c:	10bfe004 	addi	r2,r2,-128
  803ea0:	10000526 	beq	r2,zero,803eb8 <logic+0x3c28>
    d->_taken_transitions[16] += 1;
  803ea4:	e0bffc17 	ldw	r2,-16(fp)
  803ea8:	10801717 	ldw	r2,92(r2)
  803eac:	10c00044 	addi	r3,r2,1
  803eb0:	e0bffc17 	ldw	r2,-16(fp)
  803eb4:	10c01715 	stw	r3,92(r2)
  }
  d->_g111 = d->_g114 || d->_g168_e2 && !d->_cg116;
  803eb8:	e0bffc17 	ldw	r2,-16(fp)
  803ebc:	10804bc3 	ldbu	r2,303(r2)
  803ec0:	10803fcc 	andi	r2,r2,255
  803ec4:	1080201c 	xori	r2,r2,128
  803ec8:	10bfe004 	addi	r2,r2,-128
  803ecc:	10000c1e 	bne	r2,zero,803f00 <logic+0x3c70>
  803ed0:	e0bffc17 	ldw	r2,-16(fp)
  803ed4:	10806a43 	ldbu	r2,425(r2)
  803ed8:	10803fcc 	andi	r2,r2,255
  803edc:	1080201c 	xori	r2,r2,128
  803ee0:	10bfe004 	addi	r2,r2,-128
  803ee4:	10000826 	beq	r2,zero,803f08 <logic+0x3c78>
  803ee8:	e0bffc17 	ldw	r2,-16(fp)
  803eec:	108061c3 	ldbu	r2,391(r2)
  803ef0:	10803fcc 	andi	r2,r2,255
  803ef4:	1080201c 	xori	r2,r2,128
  803ef8:	10bfe004 	addi	r2,r2,-128
  803efc:	1000021e 	bne	r2,zero,803f08 <logic+0x3c78>
  803f00:	00800044 	movi	r2,1
  803f04:	00000106 	br	803f0c <logic+0x3c7c>
  803f08:	0005883a 	mov	r2,zero
  803f0c:	1007883a 	mov	r3,r2
  803f10:	e0bffc17 	ldw	r2,-16(fp)
  803f14:	10c04b45 	stb	r3,301(r2)
  d->_g92 = d->_pg160;
  803f18:	e0bffc17 	ldw	r2,-16(fp)
  803f1c:	10c07203 	ldbu	r3,456(r2)
  803f20:	e0bffc17 	ldw	r2,-16(fp)
  803f24:	10c04745 	stb	r3,285(r2)
  if (d->_g92) {
  803f28:	e0bffc17 	ldw	r2,-16(fp)
  803f2c:	10804743 	ldbu	r2,285(r2)
  803f30:	10803fcc 	andi	r2,r2,255
  803f34:	1080201c 	xori	r2,r2,128
  803f38:	10bfe004 	addi	r2,r2,-128
  803f3c:	10001226 	beq	r2,zero,803f88 <logic+0x3cf8>
    d->_region4_LRI_t += d->deltaT;
  803f40:	e13ffc17 	ldw	r4,-16(fp)
  803f44:	20802917 	ldw	r2,164(r4)
  803f48:	20c02a17 	ldw	r3,168(r4)
  803f4c:	e1bffc17 	ldw	r6,-16(fp)
  803f50:	31002d17 	ldw	r4,180(r6)
  803f54:	31402e17 	ldw	r5,184(r6)
  803f58:	200d883a 	mov	r6,r4
  803f5c:	280f883a 	mov	r7,r5
  803f60:	1009883a 	mov	r4,r2
  803f64:	180b883a 	mov	r5,r3
  803f68:	0806aa80 	call	806aa8 <__adddf3>
  803f6c:	1009883a 	mov	r4,r2
  803f70:	180b883a 	mov	r5,r3
  803f74:	2005883a 	mov	r2,r4
  803f78:	2807883a 	mov	r3,r5
  803f7c:	e13ffc17 	ldw	r4,-16(fp)
  803f80:	20802915 	stw	r2,164(r4)
  803f84:	20c02a15 	stw	r3,168(r4)
  }
  d->_g117 = d->_pg126;
  803f88:	e0bffc17 	ldw	r2,-16(fp)
  803f8c:	10c07243 	ldbu	r3,457(r2)
  803f90:	e0bffc17 	ldw	r2,-16(fp)
  803f94:	10c04c85 	stb	r3,306(r2)
  d->_g115 = d->_pg140;
  803f98:	e0bffc17 	ldw	r2,-16(fp)
  803f9c:	10c07283 	ldbu	r3,458(r2)
  803fa0:	e0bffc17 	ldw	r2,-16(fp)
  803fa4:	10c04c05 	stb	r3,304(r2)
  d->_g110 = !(d->_g117 || d->_g115);
  803fa8:	e0bffc17 	ldw	r2,-16(fp)
  803fac:	10804c83 	ldbu	r2,306(r2)
  803fb0:	10803fcc 	andi	r2,r2,255
  803fb4:	1080201c 	xori	r2,r2,128
  803fb8:	10bfe004 	addi	r2,r2,-128
  803fbc:	1000081e 	bne	r2,zero,803fe0 <logic+0x3d50>
  803fc0:	e0bffc17 	ldw	r2,-16(fp)
  803fc4:	10804c03 	ldbu	r2,304(r2)
  803fc8:	10803fcc 	andi	r2,r2,255
  803fcc:	1080201c 	xori	r2,r2,128
  803fd0:	10bfe004 	addi	r2,r2,-128
  803fd4:	1000021e 	bne	r2,zero,803fe0 <logic+0x3d50>
  803fd8:	00800044 	movi	r2,1
  803fdc:	00000106 	br	803fe4 <logic+0x3d54>
  803fe0:	0005883a 	mov	r2,zero
  803fe4:	1007883a 	mov	r3,r2
  803fe8:	e0bffc17 	ldw	r2,-16(fp)
  803fec:	10c04b05 	stb	r3,300(r2)
  d->_g112 = d->_pg131;
  803ff0:	e0bffc17 	ldw	r2,-16(fp)
  803ff4:	10c072c3 	ldbu	r3,459(r2)
  803ff8:	e0bffc17 	ldw	r2,-16(fp)
  803ffc:	10c04b85 	stb	r3,302(r2)
  d->_cg134 = d->V_EVT;
  804000:	e0bffc17 	ldw	r2,-16(fp)
  804004:	10c03243 	ldbu	r3,201(r2)
  804008:	e0bffc17 	ldw	r2,-16(fp)
  80400c:	10c06405 	stb	r3,400(r2)
  d->_g116 = d->_g112 && d->_cg134;
  804010:	e0bffc17 	ldw	r2,-16(fp)
  804014:	10804b83 	ldbu	r2,302(r2)
  804018:	10803fcc 	andi	r2,r2,255
  80401c:	1080201c 	xori	r2,r2,128
  804020:	10bfe004 	addi	r2,r2,-128
  804024:	10000826 	beq	r2,zero,804048 <logic+0x3db8>
  804028:	e0bffc17 	ldw	r2,-16(fp)
  80402c:	10806403 	ldbu	r2,400(r2)
  804030:	10803fcc 	andi	r2,r2,255
  804034:	1080201c 	xori	r2,r2,128
  804038:	10bfe004 	addi	r2,r2,-128
  80403c:	10000226 	beq	r2,zero,804048 <logic+0x3db8>
  804040:	00800044 	movi	r2,1
  804044:	00000106 	br	80404c <logic+0x3dbc>
  804048:	0005883a 	mov	r2,zero
  80404c:	1007883a 	mov	r3,r2
  804050:	e0bffc17 	ldw	r2,-16(fp)
  804054:	10c04c45 	stb	r3,305(r2)
  if (d->_g116) {
  804058:	e0bffc17 	ldw	r2,-16(fp)
  80405c:	10804c43 	ldbu	r2,305(r2)
  804060:	10803fcc 	andi	r2,r2,255
  804064:	1080201c 	xori	r2,r2,128
  804068:	10bfe004 	addi	r2,r2,-128
  80406c:	10000326 	beq	r2,zero,80407c <logic+0x3dec>
    d->_Pacemaker_local__Atrig8 = 1;
  804070:	e0bffc17 	ldw	r2,-16(fp)
  804074:	00c00044 	movi	r3,1
  804078:	10c03605 	stb	r3,216(r2)
  }
  d->_g137 = d->_g112 && !d->_cg134;
  80407c:	e0bffc17 	ldw	r2,-16(fp)
  804080:	10804b83 	ldbu	r2,302(r2)
  804084:	10803fcc 	andi	r2,r2,255
  804088:	1080201c 	xori	r2,r2,128
  80408c:	10bfe004 	addi	r2,r2,-128
  804090:	10000826 	beq	r2,zero,8040b4 <logic+0x3e24>
  804094:	e0bffc17 	ldw	r2,-16(fp)
  804098:	10806403 	ldbu	r2,400(r2)
  80409c:	10803fcc 	andi	r2,r2,255
  8040a0:	1080201c 	xori	r2,r2,128
  8040a4:	10bfe004 	addi	r2,r2,-128
  8040a8:	1000021e 	bne	r2,zero,8040b4 <logic+0x3e24>
  8040ac:	00800044 	movi	r2,1
  8040b0:	00000106 	br	8040b8 <logic+0x3e28>
  8040b4:	0005883a 	mov	r2,zero
  8040b8:	1007883a 	mov	r3,r2
  8040bc:	e0bffc17 	ldw	r2,-16(fp)
  8040c0:	10c04fc5 	stb	r3,319(r2)
  d->_cg137 = d->_region4_LRI_t >= d->T_LRI;
  8040c4:	e0bffc17 	ldw	r2,-16(fp)
  8040c8:	14002917 	ldw	r16,164(r2)
  8040cc:	14402a17 	ldw	r17,168(r2)
  8040d0:	e0bffc17 	ldw	r2,-16(fp)
  8040d4:	10800517 	ldw	r2,20(r2)
  8040d8:	1009883a 	mov	r4,r2
  8040dc:	0808e200 	call	808e20 <__floatsidf>
  8040e0:	1009883a 	mov	r4,r2
  8040e4:	180b883a 	mov	r5,r3
  8040e8:	04800044 	movi	r18,1
  8040ec:	200d883a 	mov	r6,r4
  8040f0:	280f883a 	mov	r7,r5
  8040f4:	8009883a 	mov	r4,r16
  8040f8:	880b883a 	mov	r5,r17
  8040fc:	0807c3c0 	call	807c3c <__gedf2>
  804100:	1000010e 	bge	r2,zero,804108 <logic+0x3e78>
  804104:	0025883a 	mov	r18,zero
  804108:	9007883a 	mov	r3,r18
  80410c:	e0bffc17 	ldw	r2,-16(fp)
  804110:	10c063c5 	stb	r3,399(r2)
  d->_g138 = d->_g137 && d->_cg137;
  804114:	e0bffc17 	ldw	r2,-16(fp)
  804118:	10804fc3 	ldbu	r2,319(r2)
  80411c:	10803fcc 	andi	r2,r2,255
  804120:	1080201c 	xori	r2,r2,128
  804124:	10bfe004 	addi	r2,r2,-128
  804128:	10000826 	beq	r2,zero,80414c <logic+0x3ebc>
  80412c:	e0bffc17 	ldw	r2,-16(fp)
  804130:	108063c3 	ldbu	r2,399(r2)
  804134:	10803fcc 	andi	r2,r2,255
  804138:	1080201c 	xori	r2,r2,128
  80413c:	10bfe004 	addi	r2,r2,-128
  804140:	10000226 	beq	r2,zero,80414c <logic+0x3ebc>
  804144:	00800044 	movi	r2,1
  804148:	00000106 	br	804150 <logic+0x3ec0>
  80414c:	0005883a 	mov	r2,zero
  804150:	1007883a 	mov	r3,r2
  804154:	e0bffc17 	ldw	r2,-16(fp)
  804158:	10c05005 	stb	r3,320(r2)
  if (d->_g138) {
  80415c:	e0bffc17 	ldw	r2,-16(fp)
  804160:	10805003 	ldbu	r2,320(r2)
  804164:	10803fcc 	andi	r2,r2,255
  804168:	1080201c 	xori	r2,r2,128
  80416c:	10bfe004 	addi	r2,r2,-128
  804170:	10000326 	beq	r2,zero,804180 <logic+0x3ef0>
    d->_Pacemaker_local__Atrig9 = 1;
  804174:	e0bffc17 	ldw	r2,-16(fp)
  804178:	00c00044 	movi	r3,1
  80417c:	10c03645 	stb	r3,217(r2)
  }
  d->_g130 = d->_g115 || d->_g117;
  804180:	e0bffc17 	ldw	r2,-16(fp)
  804184:	10804c03 	ldbu	r2,304(r2)
  804188:	10803fcc 	andi	r2,r2,255
  80418c:	1080201c 	xori	r2,r2,128
  804190:	10bfe004 	addi	r2,r2,-128
  804194:	1000061e 	bne	r2,zero,8041b0 <logic+0x3f20>
  804198:	e0bffc17 	ldw	r2,-16(fp)
  80419c:	10804c83 	ldbu	r2,306(r2)
  8041a0:	10803fcc 	andi	r2,r2,255
  8041a4:	1080201c 	xori	r2,r2,128
  8041a8:	10bfe004 	addi	r2,r2,-128
  8041ac:	10000226 	beq	r2,zero,8041b8 <logic+0x3f28>
  8041b0:	00800044 	movi	r2,1
  8041b4:	00000106 	br	8041bc <logic+0x3f2c>
  8041b8:	0005883a 	mov	r2,zero
  8041bc:	1007883a 	mov	r3,r2
  8041c0:	e0bffc17 	ldw	r2,-16(fp)
  8041c4:	10c04e85 	stb	r3,314(r2)
  d->_cg125 = d->_region4_LRI_t < d->T_LRI;
  8041c8:	e0bffc17 	ldw	r2,-16(fp)
  8041cc:	14002917 	ldw	r16,164(r2)
  8041d0:	14402a17 	ldw	r17,168(r2)
  8041d4:	e0bffc17 	ldw	r2,-16(fp)
  8041d8:	10800517 	ldw	r2,20(r2)
  8041dc:	1009883a 	mov	r4,r2
  8041e0:	0808e200 	call	808e20 <__floatsidf>
  8041e4:	1009883a 	mov	r4,r2
  8041e8:	180b883a 	mov	r5,r3
  8041ec:	04800044 	movi	r18,1
  8041f0:	200d883a 	mov	r6,r4
  8041f4:	280f883a 	mov	r7,r5
  8041f8:	8009883a 	mov	r4,r16
  8041fc:	880b883a 	mov	r5,r17
  804200:	0807d180 	call	807d18 <__ledf2>
  804204:	10000116 	blt	r2,zero,80420c <logic+0x3f7c>
  804208:	0025883a 	mov	r18,zero
  80420c:	9007883a 	mov	r3,r18
  804210:	e0bffc17 	ldw	r2,-16(fp)
  804214:	10c06305 	stb	r3,396(r2)
  d->_g124 = d->_g130 && d->_cg125;
  804218:	e0bffc17 	ldw	r2,-16(fp)
  80421c:	10804e83 	ldbu	r2,314(r2)
  804220:	10803fcc 	andi	r2,r2,255
  804224:	1080201c 	xori	r2,r2,128
  804228:	10bfe004 	addi	r2,r2,-128
  80422c:	10000826 	beq	r2,zero,804250 <logic+0x3fc0>
  804230:	e0bffc17 	ldw	r2,-16(fp)
  804234:	10806303 	ldbu	r2,396(r2)
  804238:	10803fcc 	andi	r2,r2,255
  80423c:	1080201c 	xori	r2,r2,128
  804240:	10bfe004 	addi	r2,r2,-128
  804244:	10000226 	beq	r2,zero,804250 <logic+0x3fc0>
  804248:	00800044 	movi	r2,1
  80424c:	00000106 	br	804254 <logic+0x3fc4>
  804250:	0005883a 	mov	r2,zero
  804254:	1007883a 	mov	r3,r2
  804258:	e0bffc17 	ldw	r2,-16(fp)
  80425c:	10c04d45 	stb	r3,309(r2)
  if (d->_g124) {
  804260:	e0bffc17 	ldw	r2,-16(fp)
  804264:	10804d43 	ldbu	r2,309(r2)
  804268:	10803fcc 	andi	r2,r2,255
  80426c:	1080201c 	xori	r2,r2,128
  804270:	10bfe004 	addi	r2,r2,-128
  804274:	10003426 	beq	r2,zero,804348 <logic+0x40b8>
    d->sleepT = (d->sleepT < (d->T_LRI - d->_region4_LRI_t)) ? d->sleepT : (d->T_LRI - d->_region4_LRI_t);
  804278:	e0bffc17 	ldw	r2,-16(fp)
  80427c:	14002f17 	ldw	r16,188(r2)
  804280:	14403017 	ldw	r17,192(r2)
  804284:	e0bffc17 	ldw	r2,-16(fp)
  804288:	10800517 	ldw	r2,20(r2)
  80428c:	1009883a 	mov	r4,r2
  804290:	0808e200 	call	808e20 <__floatsidf>
  804294:	1011883a 	mov	r8,r2
  804298:	1813883a 	mov	r9,r3
  80429c:	e13ffc17 	ldw	r4,-16(fp)
  8042a0:	20802917 	ldw	r2,164(r4)
  8042a4:	20c02a17 	ldw	r3,168(r4)
  8042a8:	100d883a 	mov	r6,r2
  8042ac:	180f883a 	mov	r7,r3
  8042b0:	4009883a 	mov	r4,r8
  8042b4:	480b883a 	mov	r5,r9
  8042b8:	08085240 	call	808524 <__subdf3>
  8042bc:	1009883a 	mov	r4,r2
  8042c0:	180b883a 	mov	r5,r3
  8042c4:	2005883a 	mov	r2,r4
  8042c8:	2807883a 	mov	r3,r5
  8042cc:	100d883a 	mov	r6,r2
  8042d0:	180f883a 	mov	r7,r3
  8042d4:	8009883a 	mov	r4,r16
  8042d8:	880b883a 	mov	r5,r17
  8042dc:	0807d180 	call	807d18 <__ledf2>
  8042e0:	1000040e 	bge	r2,zero,8042f4 <logic+0x4064>
  8042e4:	e13ffc17 	ldw	r4,-16(fp)
  8042e8:	20802f17 	ldw	r2,188(r4)
  8042ec:	20c03017 	ldw	r3,192(r4)
  8042f0:	00001206 	br	80433c <logic+0x40ac>
  8042f4:	e0bffc17 	ldw	r2,-16(fp)
  8042f8:	10800517 	ldw	r2,20(r2)
  8042fc:	1009883a 	mov	r4,r2
  804300:	0808e200 	call	808e20 <__floatsidf>
  804304:	1011883a 	mov	r8,r2
  804308:	1813883a 	mov	r9,r3
  80430c:	e13ffc17 	ldw	r4,-16(fp)
  804310:	20802917 	ldw	r2,164(r4)
  804314:	20c02a17 	ldw	r3,168(r4)
  804318:	100d883a 	mov	r6,r2
  80431c:	180f883a 	mov	r7,r3
  804320:	4009883a 	mov	r4,r8
  804324:	480b883a 	mov	r5,r9
  804328:	08085240 	call	808524 <__subdf3>
  80432c:	1009883a 	mov	r4,r2
  804330:	180b883a 	mov	r5,r3
  804334:	2005883a 	mov	r2,r4
  804338:	2807883a 	mov	r3,r5
  80433c:	e13ffc17 	ldw	r4,-16(fp)
  804340:	20802f15 	stw	r2,188(r4)
  804344:	20c03015 	stw	r3,192(r4)
  }
  d->_cg126 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9;
  804348:	e0bffc17 	ldw	r2,-16(fp)
  80434c:	10803603 	ldbu	r2,216(r2)
  804350:	10803fcc 	andi	r2,r2,255
  804354:	1080201c 	xori	r2,r2,128
  804358:	10bfe004 	addi	r2,r2,-128
  80435c:	1000061e 	bne	r2,zero,804378 <logic+0x40e8>
  804360:	e0bffc17 	ldw	r2,-16(fp)
  804364:	10803643 	ldbu	r2,217(r2)
  804368:	10803fcc 	andi	r2,r2,255
  80436c:	1080201c 	xori	r2,r2,128
  804370:	10bfe004 	addi	r2,r2,-128
  804374:	10000226 	beq	r2,zero,804380 <logic+0x40f0>
  804378:	00800044 	movi	r2,1
  80437c:	00000106 	br	804384 <logic+0x40f4>
  804380:	0005883a 	mov	r2,zero
  804384:	1007883a 	mov	r3,r2
  804388:	e0bffc17 	ldw	r2,-16(fp)
  80438c:	10c062c5 	stb	r3,395(r2)
  d->_g125 = d->_g130 && !d->_cg125;
  804390:	e0bffc17 	ldw	r2,-16(fp)
  804394:	10804e83 	ldbu	r2,314(r2)
  804398:	10803fcc 	andi	r2,r2,255
  80439c:	1080201c 	xori	r2,r2,128
  8043a0:	10bfe004 	addi	r2,r2,-128
  8043a4:	10000826 	beq	r2,zero,8043c8 <logic+0x4138>
  8043a8:	e0bffc17 	ldw	r2,-16(fp)
  8043ac:	10806303 	ldbu	r2,396(r2)
  8043b0:	10803fcc 	andi	r2,r2,255
  8043b4:	1080201c 	xori	r2,r2,128
  8043b8:	10bfe004 	addi	r2,r2,-128
  8043bc:	1000021e 	bne	r2,zero,8043c8 <logic+0x4138>
  8043c0:	00800044 	movi	r2,1
  8043c4:	00000106 	br	8043cc <logic+0x413c>
  8043c8:	0005883a 	mov	r2,zero
  8043cc:	1007883a 	mov	r3,r2
  8043d0:	e0bffc17 	ldw	r2,-16(fp)
  8043d4:	10c04d85 	stb	r3,310(r2)
  d->_cg128 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9;
  8043d8:	e0bffc17 	ldw	r2,-16(fp)
  8043dc:	10803603 	ldbu	r2,216(r2)
  8043e0:	10803fcc 	andi	r2,r2,255
  8043e4:	1080201c 	xori	r2,r2,128
  8043e8:	10bfe004 	addi	r2,r2,-128
  8043ec:	1000061e 	bne	r2,zero,804408 <logic+0x4178>
  8043f0:	e0bffc17 	ldw	r2,-16(fp)
  8043f4:	10803643 	ldbu	r2,217(r2)
  8043f8:	10803fcc 	andi	r2,r2,255
  8043fc:	1080201c 	xori	r2,r2,128
  804400:	10bfe004 	addi	r2,r2,-128
  804404:	10000226 	beq	r2,zero,804410 <logic+0x4180>
  804408:	00800044 	movi	r2,1
  80440c:	00000106 	br	804414 <logic+0x4184>
  804410:	0005883a 	mov	r2,zero
  804414:	1007883a 	mov	r3,r2
  804418:	e0bffc17 	ldw	r2,-16(fp)
  80441c:	10c06345 	stb	r3,397(r2)
  d->_g127 = d->_g124 && d->_cg126 || d->_g125 && d->_cg128;
  804420:	e0bffc17 	ldw	r2,-16(fp)
  804424:	10804d43 	ldbu	r2,309(r2)
  804428:	10803fcc 	andi	r2,r2,255
  80442c:	1080201c 	xori	r2,r2,128
  804430:	10bfe004 	addi	r2,r2,-128
  804434:	10000626 	beq	r2,zero,804450 <logic+0x41c0>
  804438:	e0bffc17 	ldw	r2,-16(fp)
  80443c:	108062c3 	ldbu	r2,395(r2)
  804440:	10803fcc 	andi	r2,r2,255
  804444:	1080201c 	xori	r2,r2,128
  804448:	10bfe004 	addi	r2,r2,-128
  80444c:	10000c1e 	bne	r2,zero,804480 <logic+0x41f0>
  804450:	e0bffc17 	ldw	r2,-16(fp)
  804454:	10804d83 	ldbu	r2,310(r2)
  804458:	10803fcc 	andi	r2,r2,255
  80445c:	1080201c 	xori	r2,r2,128
  804460:	10bfe004 	addi	r2,r2,-128
  804464:	10000826 	beq	r2,zero,804488 <logic+0x41f8>
  804468:	e0bffc17 	ldw	r2,-16(fp)
  80446c:	10806343 	ldbu	r2,397(r2)
  804470:	10803fcc 	andi	r2,r2,255
  804474:	1080201c 	xori	r2,r2,128
  804478:	10bfe004 	addi	r2,r2,-128
  80447c:	10000226 	beq	r2,zero,804488 <logic+0x41f8>
  804480:	00800044 	movi	r2,1
  804484:	00000106 	br	80448c <logic+0x41fc>
  804488:	0005883a 	mov	r2,zero
  80448c:	1007883a 	mov	r3,r2
  804490:	e0bffc17 	ldw	r2,-16(fp)
  804494:	10c04e05 	stb	r3,312(r2)
  d->_g134 = !d->_g112;
  804498:	e0bffc17 	ldw	r2,-16(fp)
  80449c:	10804b83 	ldbu	r2,302(r2)
  8044a0:	10803fcc 	andi	r2,r2,255
  8044a4:	1080201c 	xori	r2,r2,128
  8044a8:	10bfe004 	addi	r2,r2,-128
  8044ac:	1005003a 	cmpeq	r2,r2,zero
  8044b0:	1007883a 	mov	r3,r2
  8044b4:	e0bffc17 	ldw	r2,-16(fp)
  8044b8:	10c04f05 	stb	r3,316(r2)
  d->_g138 = d->_g116 || d->_g138;
  8044bc:	e0bffc17 	ldw	r2,-16(fp)
  8044c0:	10804c43 	ldbu	r2,305(r2)
  8044c4:	10803fcc 	andi	r2,r2,255
  8044c8:	1080201c 	xori	r2,r2,128
  8044cc:	10bfe004 	addi	r2,r2,-128
  8044d0:	1000061e 	bne	r2,zero,8044ec <logic+0x425c>
  8044d4:	e0bffc17 	ldw	r2,-16(fp)
  8044d8:	10805003 	ldbu	r2,320(r2)
  8044dc:	10803fcc 	andi	r2,r2,255
  8044e0:	1080201c 	xori	r2,r2,128
  8044e4:	10bfe004 	addi	r2,r2,-128
  8044e8:	10000226 	beq	r2,zero,8044f4 <logic+0x4264>
  8044ec:	00800044 	movi	r2,1
  8044f0:	00000106 	br	8044f8 <logic+0x4268>
  8044f4:	0005883a 	mov	r2,zero
  8044f8:	1007883a 	mov	r3,r2
  8044fc:	e0bffc17 	ldw	r2,-16(fp)
  804500:	10c05005 	stb	r3,320(r2)
  d->_g135 = (d->_g110 || d->_g127) && (d->_g134 || d->_g138) && (d->_g127 || d->_g138);
  804504:	e0bffc17 	ldw	r2,-16(fp)
  804508:	10804b03 	ldbu	r2,300(r2)
  80450c:	10803fcc 	andi	r2,r2,255
  804510:	1080201c 	xori	r2,r2,128
  804514:	10bfe004 	addi	r2,r2,-128
  804518:	1000061e 	bne	r2,zero,804534 <logic+0x42a4>
  80451c:	e0bffc17 	ldw	r2,-16(fp)
  804520:	10804e03 	ldbu	r2,312(r2)
  804524:	10803fcc 	andi	r2,r2,255
  804528:	1080201c 	xori	r2,r2,128
  80452c:	10bfe004 	addi	r2,r2,-128
  804530:	10001a26 	beq	r2,zero,80459c <logic+0x430c>
  804534:	e0bffc17 	ldw	r2,-16(fp)
  804538:	10804f03 	ldbu	r2,316(r2)
  80453c:	10803fcc 	andi	r2,r2,255
  804540:	1080201c 	xori	r2,r2,128
  804544:	10bfe004 	addi	r2,r2,-128
  804548:	1000061e 	bne	r2,zero,804564 <logic+0x42d4>
  80454c:	e0bffc17 	ldw	r2,-16(fp)
  804550:	10805003 	ldbu	r2,320(r2)
  804554:	10803fcc 	andi	r2,r2,255
  804558:	1080201c 	xori	r2,r2,128
  80455c:	10bfe004 	addi	r2,r2,-128
  804560:	10000e26 	beq	r2,zero,80459c <logic+0x430c>
  804564:	e0bffc17 	ldw	r2,-16(fp)
  804568:	10804e03 	ldbu	r2,312(r2)
  80456c:	10803fcc 	andi	r2,r2,255
  804570:	1080201c 	xori	r2,r2,128
  804574:	10bfe004 	addi	r2,r2,-128
  804578:	1000061e 	bne	r2,zero,804594 <logic+0x4304>
  80457c:	e0bffc17 	ldw	r2,-16(fp)
  804580:	10805003 	ldbu	r2,320(r2)
  804584:	10803fcc 	andi	r2,r2,255
  804588:	1080201c 	xori	r2,r2,128
  80458c:	10bfe004 	addi	r2,r2,-128
  804590:	10000226 	beq	r2,zero,80459c <logic+0x430c>
  804594:	00800044 	movi	r2,1
  804598:	00000106 	br	8045a0 <logic+0x4310>
  80459c:	0005883a 	mov	r2,zero
  8045a0:	1007883a 	mov	r3,r2
  8045a4:	e0bffc17 	ldw	r2,-16(fp)
  8045a8:	10c04f45 	stb	r3,317(r2)
  d->_cg139 = d->_Pacemaker_local__Atrig8;
  8045ac:	e0bffc17 	ldw	r2,-16(fp)
  8045b0:	10c03603 	ldbu	r3,216(r2)
  8045b4:	e0bffc17 	ldw	r2,-16(fp)
  8045b8:	10c06445 	stb	r3,401(r2)
  d->_g127 = d->_g135 && d->_cg139;
  8045bc:	e0bffc17 	ldw	r2,-16(fp)
  8045c0:	10804f43 	ldbu	r2,317(r2)
  8045c4:	10803fcc 	andi	r2,r2,255
  8045c8:	1080201c 	xori	r2,r2,128
  8045cc:	10bfe004 	addi	r2,r2,-128
  8045d0:	10000826 	beq	r2,zero,8045f4 <logic+0x4364>
  8045d4:	e0bffc17 	ldw	r2,-16(fp)
  8045d8:	10806443 	ldbu	r2,401(r2)
  8045dc:	10803fcc 	andi	r2,r2,255
  8045e0:	1080201c 	xori	r2,r2,128
  8045e4:	10bfe004 	addi	r2,r2,-128
  8045e8:	10000226 	beq	r2,zero,8045f4 <logic+0x4364>
  8045ec:	00800044 	movi	r2,1
  8045f0:	00000106 	br	8045f8 <logic+0x4368>
  8045f4:	0005883a 	mov	r2,zero
  8045f8:	1007883a 	mov	r3,r2
  8045fc:	e0bffc17 	ldw	r2,-16(fp)
  804600:	10c04e05 	stb	r3,312(r2)
  if (d->_g127) {
  804604:	e0bffc17 	ldw	r2,-16(fp)
  804608:	10804e03 	ldbu	r2,312(r2)
  80460c:	10803fcc 	andi	r2,r2,255
  804610:	1080201c 	xori	r2,r2,128
  804614:	10bfe004 	addi	r2,r2,-128
  804618:	10000826 	beq	r2,zero,80463c <logic+0x43ac>
    d->_region4_LRI_t = 0;
  80461c:	e0bffc17 	ldw	r2,-16(fp)
  804620:	10002915 	stw	zero,164(r2)
  804624:	10002a15 	stw	zero,168(r2)
    d->_taken_transitions[19] += 1;
  804628:	e0bffc17 	ldw	r2,-16(fp)
  80462c:	10801a17 	ldw	r2,104(r2)
  804630:	10c00044 	addi	r3,r2,1
  804634:	e0bffc17 	ldw	r2,-16(fp)
  804638:	10c01a15 	stw	r3,104(r2)
  }
  d->_g127_e1 = d->_pg120;
  80463c:	e0bffc17 	ldw	r2,-16(fp)
  804640:	10c07303 	ldbu	r3,460(r2)
  804644:	e0bffc17 	ldw	r2,-16(fp)
  804648:	10c06985 	stb	r3,422(r2)
  d->_cg143 = d->V_EVT;
  80464c:	e0bffc17 	ldw	r2,-16(fp)
  804650:	10c03243 	ldbu	r3,201(r2)
  804654:	e0bffc17 	ldw	r2,-16(fp)
  804658:	10c064c5 	stb	r3,403(r2)
  d->_g136 = d->_g127_e1 && d->_cg143;
  80465c:	e0bffc17 	ldw	r2,-16(fp)
  804660:	10806983 	ldbu	r2,422(r2)
  804664:	10803fcc 	andi	r2,r2,255
  804668:	1080201c 	xori	r2,r2,128
  80466c:	10bfe004 	addi	r2,r2,-128
  804670:	10000826 	beq	r2,zero,804694 <logic+0x4404>
  804674:	e0bffc17 	ldw	r2,-16(fp)
  804678:	108064c3 	ldbu	r2,403(r2)
  80467c:	10803fcc 	andi	r2,r2,255
  804680:	1080201c 	xori	r2,r2,128
  804684:	10bfe004 	addi	r2,r2,-128
  804688:	10000226 	beq	r2,zero,804694 <logic+0x4404>
  80468c:	00800044 	movi	r2,1
  804690:	00000106 	br	804698 <logic+0x4408>
  804694:	0005883a 	mov	r2,zero
  804698:	1007883a 	mov	r3,r2
  80469c:	e0bffc17 	ldw	r2,-16(fp)
  8046a0:	10c04f85 	stb	r3,318(r2)
  if (d->_g136) {
  8046a4:	e0bffc17 	ldw	r2,-16(fp)
  8046a8:	10804f83 	ldbu	r2,318(r2)
  8046ac:	10803fcc 	andi	r2,r2,255
  8046b0:	1080201c 	xori	r2,r2,128
  8046b4:	10bfe004 	addi	r2,r2,-128
  8046b8:	10000526 	beq	r2,zero,8046d0 <logic+0x4440>
    d->_taken_transitions[21] += 1;
  8046bc:	e0bffc17 	ldw	r2,-16(fp)
  8046c0:	10801c17 	ldw	r2,112(r2)
  8046c4:	10c00044 	addi	r3,r2,1
  8046c8:	e0bffc17 	ldw	r2,-16(fp)
  8046cc:	10c01c15 	stw	r3,112(r2)
  }
  d->_g136_e2 = d->_g127_e1 && !d->_cg143;
  8046d0:	e0bffc17 	ldw	r2,-16(fp)
  8046d4:	10806983 	ldbu	r2,422(r2)
  8046d8:	10803fcc 	andi	r2,r2,255
  8046dc:	1080201c 	xori	r2,r2,128
  8046e0:	10bfe004 	addi	r2,r2,-128
  8046e4:	10000826 	beq	r2,zero,804708 <logic+0x4478>
  8046e8:	e0bffc17 	ldw	r2,-16(fp)
  8046ec:	108064c3 	ldbu	r2,403(r2)
  8046f0:	10803fcc 	andi	r2,r2,255
  8046f4:	1080201c 	xori	r2,r2,128
  8046f8:	10bfe004 	addi	r2,r2,-128
  8046fc:	1000021e 	bne	r2,zero,804708 <logic+0x4478>
  804700:	00800044 	movi	r2,1
  804704:	00000106 	br	80470c <logic+0x447c>
  804708:	0005883a 	mov	r2,zero
  80470c:	1007883a 	mov	r3,r2
  804710:	e0bffc17 	ldw	r2,-16(fp)
  804714:	10c069c5 	stb	r3,423(r2)
  d->_cg145 = d->uri_active == 0;
  804718:	e0bffc17 	ldw	r2,-16(fp)
  80471c:	10800003 	ldbu	r2,0(r2)
  804720:	10803fcc 	andi	r2,r2,255
  804724:	1080201c 	xori	r2,r2,128
  804728:	10bfe004 	addi	r2,r2,-128
  80472c:	1005003a 	cmpeq	r2,r2,zero
  804730:	1007883a 	mov	r3,r2
  804734:	e0bffc17 	ldw	r2,-16(fp)
  804738:	10c06485 	stb	r3,402(r2)
  d->_g143 = d->_g136_e2 && d->_cg145;
  80473c:	e0bffc17 	ldw	r2,-16(fp)
  804740:	108069c3 	ldbu	r2,423(r2)
  804744:	10803fcc 	andi	r2,r2,255
  804748:	1080201c 	xori	r2,r2,128
  80474c:	10bfe004 	addi	r2,r2,-128
  804750:	10000826 	beq	r2,zero,804774 <logic+0x44e4>
  804754:	e0bffc17 	ldw	r2,-16(fp)
  804758:	10806483 	ldbu	r2,402(r2)
  80475c:	10803fcc 	andi	r2,r2,255
  804760:	1080201c 	xori	r2,r2,128
  804764:	10bfe004 	addi	r2,r2,-128
  804768:	10000226 	beq	r2,zero,804774 <logic+0x44e4>
  80476c:	00800044 	movi	r2,1
  804770:	00000106 	br	804778 <logic+0x44e8>
  804774:	0005883a 	mov	r2,zero
  804778:	1007883a 	mov	r3,r2
  80477c:	e0bffc17 	ldw	r2,-16(fp)
  804780:	10c05105 	stb	r3,324(r2)
  if (d->_g143) {
  804784:	e0bffc17 	ldw	r2,-16(fp)
  804788:	10805103 	ldbu	r2,324(r2)
  80478c:	10803fcc 	andi	r2,r2,255
  804790:	1080201c 	xori	r2,r2,128
  804794:	10bfe004 	addi	r2,r2,-128
  804798:	10000e26 	beq	r2,zero,8047d4 <logic+0x4544>
    d->VP |= 1;
  80479c:	e0bffc17 	ldw	r2,-16(fp)
  8047a0:	108031c3 	ldbu	r2,199(r2)
  8047a4:	10800054 	ori	r2,r2,1
  8047a8:	1007883a 	mov	r3,r2
  8047ac:	e0bffc17 	ldw	r2,-16(fp)
  8047b0:	10c031c5 	stb	r3,199(r2)
    d->_region4_LRI_t = 0;
  8047b4:	e0bffc17 	ldw	r2,-16(fp)
  8047b8:	10002915 	stw	zero,164(r2)
  8047bc:	10002a15 	stw	zero,168(r2)
    d->_taken_transitions[22] += 1;
  8047c0:	e0bffc17 	ldw	r2,-16(fp)
  8047c4:	10801d17 	ldw	r2,116(r2)
  8047c8:	10c00044 	addi	r3,r2,1
  8047cc:	e0bffc17 	ldw	r2,-16(fp)
  8047d0:	10c01d15 	stw	r3,116(r2)
  }
  d->_g146 = d->_GO || d->_g127 || d->_g136 || d->_g143;
  8047d4:	e0bffc17 	ldw	r2,-16(fp)
  8047d8:	10805803 	ldbu	r2,352(r2)
  8047dc:	10803fcc 	andi	r2,r2,255
  8047e0:	1080201c 	xori	r2,r2,128
  8047e4:	10bfe004 	addi	r2,r2,-128
  8047e8:	1000121e 	bne	r2,zero,804834 <logic+0x45a4>
  8047ec:	e0bffc17 	ldw	r2,-16(fp)
  8047f0:	10804e03 	ldbu	r2,312(r2)
  8047f4:	10803fcc 	andi	r2,r2,255
  8047f8:	1080201c 	xori	r2,r2,128
  8047fc:	10bfe004 	addi	r2,r2,-128
  804800:	10000c1e 	bne	r2,zero,804834 <logic+0x45a4>
  804804:	e0bffc17 	ldw	r2,-16(fp)
  804808:	10804f83 	ldbu	r2,318(r2)
  80480c:	10803fcc 	andi	r2,r2,255
  804810:	1080201c 	xori	r2,r2,128
  804814:	10bfe004 	addi	r2,r2,-128
  804818:	1000061e 	bne	r2,zero,804834 <logic+0x45a4>
  80481c:	e0bffc17 	ldw	r2,-16(fp)
  804820:	10805103 	ldbu	r2,324(r2)
  804824:	10803fcc 	andi	r2,r2,255
  804828:	1080201c 	xori	r2,r2,128
  80482c:	10bfe004 	addi	r2,r2,-128
  804830:	10000226 	beq	r2,zero,80483c <logic+0x45ac>
  804834:	00800044 	movi	r2,1
  804838:	00000106 	br	804840 <logic+0x45b0>
  80483c:	0005883a 	mov	r2,zero
  804840:	1007883a 	mov	r3,r2
  804844:	e0bffc17 	ldw	r2,-16(fp)
  804848:	10c051c5 	stb	r3,327(r2)
  if (d->_g146) {
  80484c:	e0bffc17 	ldw	r2,-16(fp)
  804850:	108051c3 	ldbu	r2,327(r2)
  804854:	10803fcc 	andi	r2,r2,255
  804858:	1080201c 	xori	r2,r2,128
  80485c:	10bfe004 	addi	r2,r2,-128
  804860:	10000426 	beq	r2,zero,804874 <logic+0x45e4>
    d->_Pacemaker_local__Atrig8 = 0;
  804864:	e0bffc17 	ldw	r2,-16(fp)
  804868:	10003605 	stb	zero,216(r2)
    d->_Pacemaker_local__Atrig9 = 0;
  80486c:	e0bffc17 	ldw	r2,-16(fp)
  804870:	10003645 	stb	zero,217(r2)
  }
  d->_cg121 = d->_region4_LRI_t < d->T_LRI;
  804874:	e0bffc17 	ldw	r2,-16(fp)
  804878:	14002917 	ldw	r16,164(r2)
  80487c:	14402a17 	ldw	r17,168(r2)
  804880:	e0bffc17 	ldw	r2,-16(fp)
  804884:	10800517 	ldw	r2,20(r2)
  804888:	1009883a 	mov	r4,r2
  80488c:	0808e200 	call	808e20 <__floatsidf>
  804890:	1009883a 	mov	r4,r2
  804894:	180b883a 	mov	r5,r3
  804898:	04800044 	movi	r18,1
  80489c:	200d883a 	mov	r6,r4
  8048a0:	280f883a 	mov	r7,r5
  8048a4:	8009883a 	mov	r4,r16
  8048a8:	880b883a 	mov	r5,r17
  8048ac:	0807d180 	call	807d18 <__ledf2>
  8048b0:	10000116 	blt	r2,zero,8048b8 <logic+0x4628>
  8048b4:	0025883a 	mov	r18,zero
  8048b8:	9007883a 	mov	r3,r18
  8048bc:	e0bffc17 	ldw	r2,-16(fp)
  8048c0:	10c06245 	stb	r3,393(r2)
  d->_g144 = d->_g146 && d->_cg121;
  8048c4:	e0bffc17 	ldw	r2,-16(fp)
  8048c8:	108051c3 	ldbu	r2,327(r2)
  8048cc:	10803fcc 	andi	r2,r2,255
  8048d0:	1080201c 	xori	r2,r2,128
  8048d4:	10bfe004 	addi	r2,r2,-128
  8048d8:	10000826 	beq	r2,zero,8048fc <logic+0x466c>
  8048dc:	e0bffc17 	ldw	r2,-16(fp)
  8048e0:	10806243 	ldbu	r2,393(r2)
  8048e4:	10803fcc 	andi	r2,r2,255
  8048e8:	1080201c 	xori	r2,r2,128
  8048ec:	10bfe004 	addi	r2,r2,-128
  8048f0:	10000226 	beq	r2,zero,8048fc <logic+0x466c>
  8048f4:	00800044 	movi	r2,1
  8048f8:	00000106 	br	804900 <logic+0x4670>
  8048fc:	0005883a 	mov	r2,zero
  804900:	1007883a 	mov	r3,r2
  804904:	e0bffc17 	ldw	r2,-16(fp)
  804908:	10c05145 	stb	r3,325(r2)
  if (d->_g144) {
  80490c:	e0bffc17 	ldw	r2,-16(fp)
  804910:	10805143 	ldbu	r2,325(r2)
  804914:	10803fcc 	andi	r2,r2,255
  804918:	1080201c 	xori	r2,r2,128
  80491c:	10bfe004 	addi	r2,r2,-128
  804920:	10003426 	beq	r2,zero,8049f4 <logic+0x4764>
    d->sleepT = (d->sleepT < (d->T_LRI - d->_region4_LRI_t)) ? d->sleepT : (d->T_LRI - d->_region4_LRI_t);
  804924:	e0bffc17 	ldw	r2,-16(fp)
  804928:	14002f17 	ldw	r16,188(r2)
  80492c:	14403017 	ldw	r17,192(r2)
  804930:	e0bffc17 	ldw	r2,-16(fp)
  804934:	10800517 	ldw	r2,20(r2)
  804938:	1009883a 	mov	r4,r2
  80493c:	0808e200 	call	808e20 <__floatsidf>
  804940:	1011883a 	mov	r8,r2
  804944:	1813883a 	mov	r9,r3
  804948:	e13ffc17 	ldw	r4,-16(fp)
  80494c:	20802917 	ldw	r2,164(r4)
  804950:	20c02a17 	ldw	r3,168(r4)
  804954:	100d883a 	mov	r6,r2
  804958:	180f883a 	mov	r7,r3
  80495c:	4009883a 	mov	r4,r8
  804960:	480b883a 	mov	r5,r9
  804964:	08085240 	call	808524 <__subdf3>
  804968:	1009883a 	mov	r4,r2
  80496c:	180b883a 	mov	r5,r3
  804970:	2005883a 	mov	r2,r4
  804974:	2807883a 	mov	r3,r5
  804978:	100d883a 	mov	r6,r2
  80497c:	180f883a 	mov	r7,r3
  804980:	8009883a 	mov	r4,r16
  804984:	880b883a 	mov	r5,r17
  804988:	0807d180 	call	807d18 <__ledf2>
  80498c:	1000040e 	bge	r2,zero,8049a0 <logic+0x4710>
  804990:	e13ffc17 	ldw	r4,-16(fp)
  804994:	20802f17 	ldw	r2,188(r4)
  804998:	20c03017 	ldw	r3,192(r4)
  80499c:	00001206 	br	8049e8 <logic+0x4758>
  8049a0:	e0bffc17 	ldw	r2,-16(fp)
  8049a4:	10800517 	ldw	r2,20(r2)
  8049a8:	1009883a 	mov	r4,r2
  8049ac:	0808e200 	call	808e20 <__floatsidf>
  8049b0:	1011883a 	mov	r8,r2
  8049b4:	1813883a 	mov	r9,r3
  8049b8:	e13ffc17 	ldw	r4,-16(fp)
  8049bc:	20802917 	ldw	r2,164(r4)
  8049c0:	20c02a17 	ldw	r3,168(r4)
  8049c4:	100d883a 	mov	r6,r2
  8049c8:	180f883a 	mov	r7,r3
  8049cc:	4009883a 	mov	r4,r8
  8049d0:	480b883a 	mov	r5,r9
  8049d4:	08085240 	call	808524 <__subdf3>
  8049d8:	1009883a 	mov	r4,r2
  8049dc:	180b883a 	mov	r5,r3
  8049e0:	2005883a 	mov	r2,r4
  8049e4:	2807883a 	mov	r3,r5
  8049e8:	e13ffc17 	ldw	r4,-16(fp)
  8049ec:	20802f15 	stw	r2,188(r4)
  8049f0:	20c03015 	stw	r3,192(r4)
  }
  d->_cg122 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9;
  8049f4:	e0bffc17 	ldw	r2,-16(fp)
  8049f8:	10803603 	ldbu	r2,216(r2)
  8049fc:	10803fcc 	andi	r2,r2,255
  804a00:	1080201c 	xori	r2,r2,128
  804a04:	10bfe004 	addi	r2,r2,-128
  804a08:	1000061e 	bne	r2,zero,804a24 <logic+0x4794>
  804a0c:	e0bffc17 	ldw	r2,-16(fp)
  804a10:	10803643 	ldbu	r2,217(r2)
  804a14:	10803fcc 	andi	r2,r2,255
  804a18:	1080201c 	xori	r2,r2,128
  804a1c:	10bfe004 	addi	r2,r2,-128
  804a20:	10000226 	beq	r2,zero,804a2c <logic+0x479c>
  804a24:	00800044 	movi	r2,1
  804a28:	00000106 	br	804a30 <logic+0x47a0>
  804a2c:	0005883a 	mov	r2,zero
  804a30:	1007883a 	mov	r3,r2
  804a34:	e0bffc17 	ldw	r2,-16(fp)
  804a38:	10c06285 	stb	r3,394(r2)
  d->_g140 = d->_g144 && !d->_cg122 || d->_g124 && !d->_cg126;
  804a3c:	e0bffc17 	ldw	r2,-16(fp)
  804a40:	10805143 	ldbu	r2,325(r2)
  804a44:	10803fcc 	andi	r2,r2,255
  804a48:	1080201c 	xori	r2,r2,128
  804a4c:	10bfe004 	addi	r2,r2,-128
  804a50:	10000626 	beq	r2,zero,804a6c <logic+0x47dc>
  804a54:	e0bffc17 	ldw	r2,-16(fp)
  804a58:	10806283 	ldbu	r2,394(r2)
  804a5c:	10803fcc 	andi	r2,r2,255
  804a60:	1080201c 	xori	r2,r2,128
  804a64:	10bfe004 	addi	r2,r2,-128
  804a68:	10000c26 	beq	r2,zero,804a9c <logic+0x480c>
  804a6c:	e0bffc17 	ldw	r2,-16(fp)
  804a70:	10804d43 	ldbu	r2,309(r2)
  804a74:	10803fcc 	andi	r2,r2,255
  804a78:	1080201c 	xori	r2,r2,128
  804a7c:	10bfe004 	addi	r2,r2,-128
  804a80:	10000826 	beq	r2,zero,804aa4 <logic+0x4814>
  804a84:	e0bffc17 	ldw	r2,-16(fp)
  804a88:	108062c3 	ldbu	r2,395(r2)
  804a8c:	10803fcc 	andi	r2,r2,255
  804a90:	1080201c 	xori	r2,r2,128
  804a94:	10bfe004 	addi	r2,r2,-128
  804a98:	1000021e 	bne	r2,zero,804aa4 <logic+0x4814>
  804a9c:	00800044 	movi	r2,1
  804aa0:	00000106 	br	804aa8 <logic+0x4818>
  804aa4:	0005883a 	mov	r2,zero
  804aa8:	1007883a 	mov	r3,r2
  804aac:	e0bffc17 	ldw	r2,-16(fp)
  804ab0:	10c05085 	stb	r3,322(r2)
  d->_g122 = d->_g146 && !d->_cg121;
  804ab4:	e0bffc17 	ldw	r2,-16(fp)
  804ab8:	108051c3 	ldbu	r2,327(r2)
  804abc:	10803fcc 	andi	r2,r2,255
  804ac0:	1080201c 	xori	r2,r2,128
  804ac4:	10bfe004 	addi	r2,r2,-128
  804ac8:	10000826 	beq	r2,zero,804aec <logic+0x485c>
  804acc:	e0bffc17 	ldw	r2,-16(fp)
  804ad0:	10806243 	ldbu	r2,393(r2)
  804ad4:	10803fcc 	andi	r2,r2,255
  804ad8:	1080201c 	xori	r2,r2,128
  804adc:	10bfe004 	addi	r2,r2,-128
  804ae0:	1000021e 	bne	r2,zero,804aec <logic+0x485c>
  804ae4:	00800044 	movi	r2,1
  804ae8:	00000106 	br	804af0 <logic+0x4860>
  804aec:	0005883a 	mov	r2,zero
  804af0:	1007883a 	mov	r3,r2
  804af4:	e0bffc17 	ldw	r2,-16(fp)
  804af8:	10c04d05 	stb	r3,308(r2)
  d->_cg131 = d->_Pacemaker_local__Atrig8 || d->_Pacemaker_local__Atrig9;
  804afc:	e0bffc17 	ldw	r2,-16(fp)
  804b00:	10803603 	ldbu	r2,216(r2)
  804b04:	10803fcc 	andi	r2,r2,255
  804b08:	1080201c 	xori	r2,r2,128
  804b0c:	10bfe004 	addi	r2,r2,-128
  804b10:	1000061e 	bne	r2,zero,804b2c <logic+0x489c>
  804b14:	e0bffc17 	ldw	r2,-16(fp)
  804b18:	10803643 	ldbu	r2,217(r2)
  804b1c:	10803fcc 	andi	r2,r2,255
  804b20:	1080201c 	xori	r2,r2,128
  804b24:	10bfe004 	addi	r2,r2,-128
  804b28:	10000226 	beq	r2,zero,804b34 <logic+0x48a4>
  804b2c:	00800044 	movi	r2,1
  804b30:	00000106 	br	804b38 <logic+0x48a8>
  804b34:	0005883a 	mov	r2,zero
  804b38:	1007883a 	mov	r3,r2
  804b3c:	e0bffc17 	ldw	r2,-16(fp)
  804b40:	10c06385 	stb	r3,398(r2)
  d->_g126 = d->_g125 && !d->_cg128 || d->_g122 && !d->_cg131;
  804b44:	e0bffc17 	ldw	r2,-16(fp)
  804b48:	10804d83 	ldbu	r2,310(r2)
  804b4c:	10803fcc 	andi	r2,r2,255
  804b50:	1080201c 	xori	r2,r2,128
  804b54:	10bfe004 	addi	r2,r2,-128
  804b58:	10000626 	beq	r2,zero,804b74 <logic+0x48e4>
  804b5c:	e0bffc17 	ldw	r2,-16(fp)
  804b60:	10806343 	ldbu	r2,397(r2)
  804b64:	10803fcc 	andi	r2,r2,255
  804b68:	1080201c 	xori	r2,r2,128
  804b6c:	10bfe004 	addi	r2,r2,-128
  804b70:	10000c26 	beq	r2,zero,804ba4 <logic+0x4914>
  804b74:	e0bffc17 	ldw	r2,-16(fp)
  804b78:	10804d03 	ldbu	r2,308(r2)
  804b7c:	10803fcc 	andi	r2,r2,255
  804b80:	1080201c 	xori	r2,r2,128
  804b84:	10bfe004 	addi	r2,r2,-128
  804b88:	10000826 	beq	r2,zero,804bac <logic+0x491c>
  804b8c:	e0bffc17 	ldw	r2,-16(fp)
  804b90:	10806383 	ldbu	r2,398(r2)
  804b94:	10803fcc 	andi	r2,r2,255
  804b98:	1080201c 	xori	r2,r2,128
  804b9c:	10bfe004 	addi	r2,r2,-128
  804ba0:	1000021e 	bne	r2,zero,804bac <logic+0x491c>
  804ba4:	00800044 	movi	r2,1
  804ba8:	00000106 	br	804bb0 <logic+0x4920>
  804bac:	0005883a 	mov	r2,zero
  804bb0:	1007883a 	mov	r3,r2
  804bb4:	e0bffc17 	ldw	r2,-16(fp)
  804bb8:	10c04dc5 	stb	r3,311(r2)
  d->_g131 = d->_g146 || d->_g137 && !d->_cg137;
  804bbc:	e0bffc17 	ldw	r2,-16(fp)
  804bc0:	108051c3 	ldbu	r2,327(r2)
  804bc4:	10803fcc 	andi	r2,r2,255
  804bc8:	1080201c 	xori	r2,r2,128
  804bcc:	10bfe004 	addi	r2,r2,-128
  804bd0:	10000c1e 	bne	r2,zero,804c04 <logic+0x4974>
  804bd4:	e0bffc17 	ldw	r2,-16(fp)
  804bd8:	10804fc3 	ldbu	r2,319(r2)
  804bdc:	10803fcc 	andi	r2,r2,255
  804be0:	1080201c 	xori	r2,r2,128
  804be4:	10bfe004 	addi	r2,r2,-128
  804be8:	10000826 	beq	r2,zero,804c0c <logic+0x497c>
  804bec:	e0bffc17 	ldw	r2,-16(fp)
  804bf0:	108063c3 	ldbu	r2,399(r2)
  804bf4:	10803fcc 	andi	r2,r2,255
  804bf8:	1080201c 	xori	r2,r2,128
  804bfc:	10bfe004 	addi	r2,r2,-128
  804c00:	1000021e 	bne	r2,zero,804c0c <logic+0x497c>
  804c04:	00800044 	movi	r2,1
  804c08:	00000106 	br	804c10 <logic+0x4980>
  804c0c:	0005883a 	mov	r2,zero
  804c10:	1007883a 	mov	r3,r2
  804c14:	e0bffc17 	ldw	r2,-16(fp)
  804c18:	10c04ec5 	stb	r3,315(r2)
  d->_g128 = d->_g135 && !d->_cg139;
  804c1c:	e0bffc17 	ldw	r2,-16(fp)
  804c20:	10804f43 	ldbu	r2,317(r2)
  804c24:	10803fcc 	andi	r2,r2,255
  804c28:	1080201c 	xori	r2,r2,128
  804c2c:	10bfe004 	addi	r2,r2,-128
  804c30:	10000826 	beq	r2,zero,804c54 <logic+0x49c4>
  804c34:	e0bffc17 	ldw	r2,-16(fp)
  804c38:	10806443 	ldbu	r2,401(r2)
  804c3c:	10803fcc 	andi	r2,r2,255
  804c40:	1080201c 	xori	r2,r2,128
  804c44:	10bfe004 	addi	r2,r2,-128
  804c48:	1000021e 	bne	r2,zero,804c54 <logic+0x49c4>
  804c4c:	00800044 	movi	r2,1
  804c50:	00000106 	br	804c58 <logic+0x49c8>
  804c54:	0005883a 	mov	r2,zero
  804c58:	1007883a 	mov	r3,r2
  804c5c:	e0bffc17 	ldw	r2,-16(fp)
  804c60:	10c04e45 	stb	r3,313(r2)
  if (d->_g128) {
  804c64:	e0bffc17 	ldw	r2,-16(fp)
  804c68:	10804e43 	ldbu	r2,313(r2)
  804c6c:	10803fcc 	andi	r2,r2,255
  804c70:	1080201c 	xori	r2,r2,128
  804c74:	10bfe004 	addi	r2,r2,-128
  804c78:	10000526 	beq	r2,zero,804c90 <logic+0x4a00>
    d->_taken_transitions[20] += 1;
  804c7c:	e0bffc17 	ldw	r2,-16(fp)
  804c80:	10801b17 	ldw	r2,108(r2)
  804c84:	10c00044 	addi	r3,r2,1
  804c88:	e0bffc17 	ldw	r2,-16(fp)
  804c8c:	10c01b15 	stw	r3,108(r2)
  }
  d->_g120 = d->_g128 || d->_g136_e2 && !d->_cg145;
  804c90:	e0bffc17 	ldw	r2,-16(fp)
  804c94:	10804e43 	ldbu	r2,313(r2)
  804c98:	10803fcc 	andi	r2,r2,255
  804c9c:	1080201c 	xori	r2,r2,128
  804ca0:	10bfe004 	addi	r2,r2,-128
  804ca4:	10000c1e 	bne	r2,zero,804cd8 <logic+0x4a48>
  804ca8:	e0bffc17 	ldw	r2,-16(fp)
  804cac:	108069c3 	ldbu	r2,423(r2)
  804cb0:	10803fcc 	andi	r2,r2,255
  804cb4:	1080201c 	xori	r2,r2,128
  804cb8:	10bfe004 	addi	r2,r2,-128
  804cbc:	10000826 	beq	r2,zero,804ce0 <logic+0x4a50>
  804cc0:	e0bffc17 	ldw	r2,-16(fp)
  804cc4:	10806483 	ldbu	r2,402(r2)
  804cc8:	10803fcc 	andi	r2,r2,255
  804ccc:	1080201c 	xori	r2,r2,128
  804cd0:	10bfe004 	addi	r2,r2,-128
  804cd4:	1000021e 	bne	r2,zero,804ce0 <logic+0x4a50>
  804cd8:	00800044 	movi	r2,1
  804cdc:	00000106 	br	804ce4 <logic+0x4a54>
  804ce0:	0005883a 	mov	r2,zero
  804ce4:	1007883a 	mov	r3,r2
  804ce8:	e0bffc17 	ldw	r2,-16(fp)
  804cec:	10c04cc5 	stb	r3,307(r2)
  d->_g137 = d->_GO || d->_g168 || d->_g107 && !d->_cg150;
  804cf0:	e0bffc17 	ldw	r2,-16(fp)
  804cf4:	10805803 	ldbu	r2,352(r2)
  804cf8:	10803fcc 	andi	r2,r2,255
  804cfc:	1080201c 	xori	r2,r2,128
  804d00:	10bfe004 	addi	r2,r2,-128
  804d04:	1000121e 	bne	r2,zero,804d50 <logic+0x4ac0>
  804d08:	e0bffc17 	ldw	r2,-16(fp)
  804d0c:	10805543 	ldbu	r2,341(r2)
  804d10:	10803fcc 	andi	r2,r2,255
  804d14:	1080201c 	xori	r2,r2,128
  804d18:	10bfe004 	addi	r2,r2,-128
  804d1c:	10000c1e 	bne	r2,zero,804d50 <logic+0x4ac0>
  804d20:	e0bffc17 	ldw	r2,-16(fp)
  804d24:	10804a43 	ldbu	r2,297(r2)
  804d28:	10803fcc 	andi	r2,r2,255
  804d2c:	1080201c 	xori	r2,r2,128
  804d30:	10bfe004 	addi	r2,r2,-128
  804d34:	10000826 	beq	r2,zero,804d58 <logic+0x4ac8>
  804d38:	e0bffc17 	ldw	r2,-16(fp)
  804d3c:	10806503 	ldbu	r2,404(r2)
  804d40:	10803fcc 	andi	r2,r2,255
  804d44:	1080201c 	xori	r2,r2,128
  804d48:	10bfe004 	addi	r2,r2,-128
  804d4c:	1000021e 	bne	r2,zero,804d58 <logic+0x4ac8>
  804d50:	00800044 	movi	r2,1
  804d54:	00000106 	br	804d5c <logic+0x4acc>
  804d58:	0005883a 	mov	r2,zero
  804d5c:	1007883a 	mov	r3,r2
  804d60:	e0bffc17 	ldw	r2,-16(fp)
  804d64:	10c04fc5 	stb	r3,319(r2)
  if (d->_g97_e1) {
  804d68:	e0bffc17 	ldw	r2,-16(fp)
  804d6c:	10806903 	ldbu	r2,420(r2)
  804d70:	10803fcc 	andi	r2,r2,255
  804d74:	1080201c 	xori	r2,r2,128
  804d78:	10bfe004 	addi	r2,r2,-128
  804d7c:	10000826 	beq	r2,zero,804da0 <logic+0x4b10>
    d->_region5_URI_t = 0;
  804d80:	e0bffc17 	ldw	r2,-16(fp)
  804d84:	10002b15 	stw	zero,172(r2)
  804d88:	10002c15 	stw	zero,176(r2)
    d->_taken_transitions[23] += 1;
  804d8c:	e0bffc17 	ldw	r2,-16(fp)
  804d90:	10801e17 	ldw	r2,120(r2)
  804d94:	10c00044 	addi	r3,r2,1
  804d98:	e0bffc17 	ldw	r2,-16(fp)
  804d9c:	10c01e15 	stw	r3,120(r2)
  }
  d->_g139 = d->_g167 && d->_cg171;
  804da0:	e0bffc17 	ldw	r2,-16(fp)
  804da4:	10805503 	ldbu	r2,340(r2)
  804da8:	10803fcc 	andi	r2,r2,255
  804dac:	1080201c 	xori	r2,r2,128
  804db0:	10bfe004 	addi	r2,r2,-128
  804db4:	10000826 	beq	r2,zero,804dd8 <logic+0x4b48>
  804db8:	e0bffc17 	ldw	r2,-16(fp)
  804dbc:	10806743 	ldbu	r2,413(r2)
  804dc0:	10803fcc 	andi	r2,r2,255
  804dc4:	1080201c 	xori	r2,r2,128
  804dc8:	10bfe004 	addi	r2,r2,-128
  804dcc:	10000226 	beq	r2,zero,804dd8 <logic+0x4b48>
  804dd0:	00800044 	movi	r2,1
  804dd4:	00000106 	br	804ddc <logic+0x4b4c>
  804dd8:	0005883a 	mov	r2,zero
  804ddc:	1007883a 	mov	r3,r2
  804de0:	e0bffc17 	ldw	r2,-16(fp)
  804de4:	10c05045 	stb	r3,321(r2)
  if (d->_g139) {
  804de8:	e0bffc17 	ldw	r2,-16(fp)
  804dec:	10805043 	ldbu	r2,321(r2)
  804df0:	10803fcc 	andi	r2,r2,255
  804df4:	1080201c 	xori	r2,r2,128
  804df8:	10bfe004 	addi	r2,r2,-128
  804dfc:	10000826 	beq	r2,zero,804e20 <logic+0x4b90>
    d->_region5_URI_t = 0;
  804e00:	e0bffc17 	ldw	r2,-16(fp)
  804e04:	10002b15 	stw	zero,172(r2)
  804e08:	10002c15 	stw	zero,176(r2)
    d->_taken_transitions[24] += 1;
  804e0c:	e0bffc17 	ldw	r2,-16(fp)
  804e10:	10801f17 	ldw	r2,124(r2)
  804e14:	10c00044 	addi	r3,r2,1
  804e18:	e0bffc17 	ldw	r2,-16(fp)
  804e1c:	10c01f15 	stw	r3,124(r2)
  }
  d->_g145 = d->_g97_e1 || d->_g139;
  804e20:	e0bffc17 	ldw	r2,-16(fp)
  804e24:	10806903 	ldbu	r2,420(r2)
  804e28:	10803fcc 	andi	r2,r2,255
  804e2c:	1080201c 	xori	r2,r2,128
  804e30:	10bfe004 	addi	r2,r2,-128
  804e34:	1000061e 	bne	r2,zero,804e50 <logic+0x4bc0>
  804e38:	e0bffc17 	ldw	r2,-16(fp)
  804e3c:	10805043 	ldbu	r2,321(r2)
  804e40:	10803fcc 	andi	r2,r2,255
  804e44:	1080201c 	xori	r2,r2,128
  804e48:	10bfe004 	addi	r2,r2,-128
  804e4c:	10000226 	beq	r2,zero,804e58 <logic+0x4bc8>
  804e50:	00800044 	movi	r2,1
  804e54:	00000106 	br	804e5c <logic+0x4bcc>
  804e58:	0005883a 	mov	r2,zero
  804e5c:	1007883a 	mov	r3,r2
  804e60:	e0bffc17 	ldw	r2,-16(fp)
  804e64:	10c05185 	stb	r3,326(r2)
  if (d->_g145) {
  804e68:	e0bffc17 	ldw	r2,-16(fp)
  804e6c:	10805183 	ldbu	r2,326(r2)
  804e70:	10803fcc 	andi	r2,r2,255
  804e74:	1080201c 	xori	r2,r2,128
  804e78:	10bfe004 	addi	r2,r2,-128
  804e7c:	10000426 	beq	r2,zero,804e90 <logic+0x4c00>
    d->_Pacemaker_local__Atrig10 = 0;
  804e80:	e0bffc17 	ldw	r2,-16(fp)
  804e84:	10003685 	stb	zero,218(r2)
    d->_Pacemaker_local__Atrig11 = 0;
  804e88:	e0bffc17 	ldw	r2,-16(fp)
  804e8c:	100036c5 	stb	zero,219(r2)
  }
  d->_cg153 = d->_region5_URI_t < d->T_URI;
  804e90:	e0bffc17 	ldw	r2,-16(fp)
  804e94:	14002b17 	ldw	r16,172(r2)
  804e98:	14402c17 	ldw	r17,176(r2)
  804e9c:	e0bffc17 	ldw	r2,-16(fp)
  804ea0:	10800617 	ldw	r2,24(r2)
  804ea4:	1009883a 	mov	r4,r2
  804ea8:	0808e200 	call	808e20 <__floatsidf>
  804eac:	1009883a 	mov	r4,r2
  804eb0:	180b883a 	mov	r5,r3
  804eb4:	04800044 	movi	r18,1
  804eb8:	200d883a 	mov	r6,r4
  804ebc:	280f883a 	mov	r7,r5
  804ec0:	8009883a 	mov	r4,r16
  804ec4:	880b883a 	mov	r5,r17
  804ec8:	0807d180 	call	807d18 <__ledf2>
  804ecc:	10000116 	blt	r2,zero,804ed4 <logic+0x4c44>
  804ed0:	0025883a 	mov	r18,zero
  804ed4:	9007883a 	mov	r3,r18
  804ed8:	e0bffc17 	ldw	r2,-16(fp)
  804edc:	10c06545 	stb	r3,405(r2)
  d->_g141 = d->_g145 && d->_cg153;
  804ee0:	e0bffc17 	ldw	r2,-16(fp)
  804ee4:	10805183 	ldbu	r2,326(r2)
  804ee8:	10803fcc 	andi	r2,r2,255
  804eec:	1080201c 	xori	r2,r2,128
  804ef0:	10bfe004 	addi	r2,r2,-128
  804ef4:	10000826 	beq	r2,zero,804f18 <logic+0x4c88>
  804ef8:	e0bffc17 	ldw	r2,-16(fp)
  804efc:	10806543 	ldbu	r2,405(r2)
  804f00:	10803fcc 	andi	r2,r2,255
  804f04:	1080201c 	xori	r2,r2,128
  804f08:	10bfe004 	addi	r2,r2,-128
  804f0c:	10000226 	beq	r2,zero,804f18 <logic+0x4c88>
  804f10:	00800044 	movi	r2,1
  804f14:	00000106 	br	804f1c <logic+0x4c8c>
  804f18:	0005883a 	mov	r2,zero
  804f1c:	1007883a 	mov	r3,r2
  804f20:	e0bffc17 	ldw	r2,-16(fp)
  804f24:	10c050c5 	stb	r3,323(r2)
  if (d->_g141) {
  804f28:	e0bffc17 	ldw	r2,-16(fp)
  804f2c:	108050c3 	ldbu	r2,323(r2)
  804f30:	10803fcc 	andi	r2,r2,255
  804f34:	1080201c 	xori	r2,r2,128
  804f38:	10bfe004 	addi	r2,r2,-128
  804f3c:	10003426 	beq	r2,zero,805010 <logic+0x4d80>
    d->sleepT = (d->sleepT < (d->T_URI - d->_region5_URI_t)) ? d->sleepT : (d->T_URI - d->_region5_URI_t);
  804f40:	e0bffc17 	ldw	r2,-16(fp)
  804f44:	14002f17 	ldw	r16,188(r2)
  804f48:	14403017 	ldw	r17,192(r2)
  804f4c:	e0bffc17 	ldw	r2,-16(fp)
  804f50:	10800617 	ldw	r2,24(r2)
  804f54:	1009883a 	mov	r4,r2
  804f58:	0808e200 	call	808e20 <__floatsidf>
  804f5c:	1011883a 	mov	r8,r2
  804f60:	1813883a 	mov	r9,r3
  804f64:	e13ffc17 	ldw	r4,-16(fp)
  804f68:	20802b17 	ldw	r2,172(r4)
  804f6c:	20c02c17 	ldw	r3,176(r4)
  804f70:	100d883a 	mov	r6,r2
  804f74:	180f883a 	mov	r7,r3
  804f78:	4009883a 	mov	r4,r8
  804f7c:	480b883a 	mov	r5,r9
  804f80:	08085240 	call	808524 <__subdf3>
  804f84:	1009883a 	mov	r4,r2
  804f88:	180b883a 	mov	r5,r3
  804f8c:	2005883a 	mov	r2,r4
  804f90:	2807883a 	mov	r3,r5
  804f94:	100d883a 	mov	r6,r2
  804f98:	180f883a 	mov	r7,r3
  804f9c:	8009883a 	mov	r4,r16
  804fa0:	880b883a 	mov	r5,r17
  804fa4:	0807d180 	call	807d18 <__ledf2>
  804fa8:	1000040e 	bge	r2,zero,804fbc <logic+0x4d2c>
  804fac:	e13ffc17 	ldw	r4,-16(fp)
  804fb0:	20802f17 	ldw	r2,188(r4)
  804fb4:	20c03017 	ldw	r3,192(r4)
  804fb8:	00001206 	br	805004 <logic+0x4d74>
  804fbc:	e0bffc17 	ldw	r2,-16(fp)
  804fc0:	10800617 	ldw	r2,24(r2)
  804fc4:	1009883a 	mov	r4,r2
  804fc8:	0808e200 	call	808e20 <__floatsidf>
  804fcc:	1011883a 	mov	r8,r2
  804fd0:	1813883a 	mov	r9,r3
  804fd4:	e13ffc17 	ldw	r4,-16(fp)
  804fd8:	20802b17 	ldw	r2,172(r4)
  804fdc:	20c02c17 	ldw	r3,176(r4)
  804fe0:	100d883a 	mov	r6,r2
  804fe4:	180f883a 	mov	r7,r3
  804fe8:	4009883a 	mov	r4,r8
  804fec:	480b883a 	mov	r5,r9
  804ff0:	08085240 	call	808524 <__subdf3>
  804ff4:	1009883a 	mov	r4,r2
  804ff8:	180b883a 	mov	r5,r3
  804ffc:	2005883a 	mov	r2,r4
  805000:	2807883a 	mov	r3,r5
  805004:	e13ffc17 	ldw	r4,-16(fp)
  805008:	20802f15 	stw	r2,188(r4)
  80500c:	20c03015 	stw	r3,192(r4)
  }
  d->_cg154 = d->_Pacemaker_local__Atrig10 || d->_Pacemaker_local__Atrig11;
  805010:	e0bffc17 	ldw	r2,-16(fp)
  805014:	10803683 	ldbu	r2,218(r2)
  805018:	10803fcc 	andi	r2,r2,255
  80501c:	1080201c 	xori	r2,r2,128
  805020:	10bfe004 	addi	r2,r2,-128
  805024:	1000061e 	bne	r2,zero,805040 <logic+0x4db0>
  805028:	e0bffc17 	ldw	r2,-16(fp)
  80502c:	108036c3 	ldbu	r2,219(r2)
  805030:	10803fcc 	andi	r2,r2,255
  805034:	1080201c 	xori	r2,r2,128
  805038:	10bfe004 	addi	r2,r2,-128
  80503c:	10000226 	beq	r2,zero,805048 <logic+0x4db8>
  805040:	00800044 	movi	r2,1
  805044:	00000106 	br	80504c <logic+0x4dbc>
  805048:	0005883a 	mov	r2,zero
  80504c:	1007883a 	mov	r3,r2
  805050:	e0bffc17 	ldw	r2,-16(fp)
  805054:	10c06585 	stb	r3,406(r2)
  d->_g150 = d->_g141 && !d->_cg154 || d->_g162 && !d->_cg158;
  805058:	e0bffc17 	ldw	r2,-16(fp)
  80505c:	108050c3 	ldbu	r2,323(r2)
  805060:	10803fcc 	andi	r2,r2,255
  805064:	1080201c 	xori	r2,r2,128
  805068:	10bfe004 	addi	r2,r2,-128
  80506c:	10000626 	beq	r2,zero,805088 <logic+0x4df8>
  805070:	e0bffc17 	ldw	r2,-16(fp)
  805074:	10806583 	ldbu	r2,406(r2)
  805078:	10803fcc 	andi	r2,r2,255
  80507c:	1080201c 	xori	r2,r2,128
  805080:	10bfe004 	addi	r2,r2,-128
  805084:	10000c26 	beq	r2,zero,8050b8 <logic+0x4e28>
  805088:	e0bffc17 	ldw	r2,-16(fp)
  80508c:	10805443 	ldbu	r2,337(r2)
  805090:	10803fcc 	andi	r2,r2,255
  805094:	1080201c 	xori	r2,r2,128
  805098:	10bfe004 	addi	r2,r2,-128
  80509c:	10000826 	beq	r2,zero,8050c0 <logic+0x4e30>
  8050a0:	e0bffc17 	ldw	r2,-16(fp)
  8050a4:	108065c3 	ldbu	r2,407(r2)
  8050a8:	10803fcc 	andi	r2,r2,255
  8050ac:	1080201c 	xori	r2,r2,128
  8050b0:	10bfe004 	addi	r2,r2,-128
  8050b4:	1000021e 	bne	r2,zero,8050c0 <logic+0x4e30>
  8050b8:	00800044 	movi	r2,1
  8050bc:	00000106 	br	8050c4 <logic+0x4e34>
  8050c0:	0005883a 	mov	r2,zero
  8050c4:	1007883a 	mov	r3,r2
  8050c8:	e0bffc17 	ldw	r2,-16(fp)
  8050cc:	10c05205 	stb	r3,328(r2)
  d->_g173 = d->_g145 && !d->_cg153;
  8050d0:	e0bffc17 	ldw	r2,-16(fp)
  8050d4:	10805183 	ldbu	r2,326(r2)
  8050d8:	10803fcc 	andi	r2,r2,255
  8050dc:	1080201c 	xori	r2,r2,128
  8050e0:	10bfe004 	addi	r2,r2,-128
  8050e4:	10000826 	beq	r2,zero,805108 <logic+0x4e78>
  8050e8:	e0bffc17 	ldw	r2,-16(fp)
  8050ec:	10806543 	ldbu	r2,405(r2)
  8050f0:	10803fcc 	andi	r2,r2,255
  8050f4:	1080201c 	xori	r2,r2,128
  8050f8:	10bfe004 	addi	r2,r2,-128
  8050fc:	1000021e 	bne	r2,zero,805108 <logic+0x4e78>
  805100:	00800044 	movi	r2,1
  805104:	00000106 	br	80510c <logic+0x4e7c>
  805108:	0005883a 	mov	r2,zero
  80510c:	1007883a 	mov	r3,r2
  805110:	e0bffc17 	ldw	r2,-16(fp)
  805114:	10c05685 	stb	r3,346(r2)
  d->_cg163 = d->_Pacemaker_local__Atrig10 || d->_Pacemaker_local__Atrig11;
  805118:	e0bffc17 	ldw	r2,-16(fp)
  80511c:	10803683 	ldbu	r2,218(r2)
  805120:	10803fcc 	andi	r2,r2,255
  805124:	1080201c 	xori	r2,r2,128
  805128:	10bfe004 	addi	r2,r2,-128
  80512c:	1000061e 	bne	r2,zero,805148 <logic+0x4eb8>
  805130:	e0bffc17 	ldw	r2,-16(fp)
  805134:	108036c3 	ldbu	r2,219(r2)
  805138:	10803fcc 	andi	r2,r2,255
  80513c:	1080201c 	xori	r2,r2,128
  805140:	10bfe004 	addi	r2,r2,-128
  805144:	10000226 	beq	r2,zero,805150 <logic+0x4ec0>
  805148:	00800044 	movi	r2,1
  80514c:	00000106 	br	805154 <logic+0x4ec4>
  805150:	0005883a 	mov	r2,zero
  805154:	1007883a 	mov	r3,r2
  805158:	e0bffc17 	ldw	r2,-16(fp)
  80515c:	10c06685 	stb	r3,410(r2)
  d->_g171 = d->_g157 && !d->_cg160 || d->_g173 && !d->_cg163;
  805160:	e0bffc17 	ldw	r2,-16(fp)
  805164:	10805343 	ldbu	r2,333(r2)
  805168:	10803fcc 	andi	r2,r2,255
  80516c:	1080201c 	xori	r2,r2,128
  805170:	10bfe004 	addi	r2,r2,-128
  805174:	10000626 	beq	r2,zero,805190 <logic+0x4f00>
  805178:	e0bffc17 	ldw	r2,-16(fp)
  80517c:	10806643 	ldbu	r2,409(r2)
  805180:	10803fcc 	andi	r2,r2,255
  805184:	1080201c 	xori	r2,r2,128
  805188:	10bfe004 	addi	r2,r2,-128
  80518c:	10000c26 	beq	r2,zero,8051c0 <logic+0x4f30>
  805190:	e0bffc17 	ldw	r2,-16(fp)
  805194:	10805683 	ldbu	r2,346(r2)
  805198:	10803fcc 	andi	r2,r2,255
  80519c:	1080201c 	xori	r2,r2,128
  8051a0:	10bfe004 	addi	r2,r2,-128
  8051a4:	10000826 	beq	r2,zero,8051c8 <logic+0x4f38>
  8051a8:	e0bffc17 	ldw	r2,-16(fp)
  8051ac:	10806683 	ldbu	r2,410(r2)
  8051b0:	10803fcc 	andi	r2,r2,255
  8051b4:	1080201c 	xori	r2,r2,128
  8051b8:	10bfe004 	addi	r2,r2,-128
  8051bc:	1000021e 	bne	r2,zero,8051c8 <logic+0x4f38>
  8051c0:	00800044 	movi	r2,1
  8051c4:	00000106 	br	8051cc <logic+0x4f3c>
  8051c8:	0005883a 	mov	r2,zero
  8051cc:	1007883a 	mov	r3,r2
  8051d0:	e0bffc17 	ldw	r2,-16(fp)
  8051d4:	10c05605 	stb	r3,344(r2)
  d->_g172 = d->_g145 || d->_g169 && !d->_cg169;
  8051d8:	e0bffc17 	ldw	r2,-16(fp)
  8051dc:	10805183 	ldbu	r2,326(r2)
  8051e0:	10803fcc 	andi	r2,r2,255
  8051e4:	1080201c 	xori	r2,r2,128
  8051e8:	10bfe004 	addi	r2,r2,-128
  8051ec:	10000c1e 	bne	r2,zero,805220 <logic+0x4f90>
  8051f0:	e0bffc17 	ldw	r2,-16(fp)
  8051f4:	10805583 	ldbu	r2,342(r2)
  8051f8:	10803fcc 	andi	r2,r2,255
  8051fc:	1080201c 	xori	r2,r2,128
  805200:	10bfe004 	addi	r2,r2,-128
  805204:	10000826 	beq	r2,zero,805228 <logic+0x4f98>
  805208:	e0bffc17 	ldw	r2,-16(fp)
  80520c:	108066c3 	ldbu	r2,411(r2)
  805210:	10803fcc 	andi	r2,r2,255
  805214:	1080201c 	xori	r2,r2,128
  805218:	10bfe004 	addi	r2,r2,-128
  80521c:	1000021e 	bne	r2,zero,805228 <logic+0x4f98>
  805220:	00800044 	movi	r2,1
  805224:	00000106 	br	80522c <logic+0x4f9c>
  805228:	0005883a 	mov	r2,zero
  80522c:	1007883a 	mov	r3,r2
  805230:	e0bffc17 	ldw	r2,-16(fp)
  805234:	10c05645 	stb	r3,345(r2)
  d->_g151 = d->_GO || d->_g181;
  805238:	e0bffc17 	ldw	r2,-16(fp)
  80523c:	10805803 	ldbu	r2,352(r2)
  805240:	10803fcc 	andi	r2,r2,255
  805244:	1080201c 	xori	r2,r2,128
  805248:	10bfe004 	addi	r2,r2,-128
  80524c:	1000061e 	bne	r2,zero,805268 <logic+0x4fd8>
  805250:	e0bffc17 	ldw	r2,-16(fp)
  805254:	108056c3 	ldbu	r2,347(r2)
  805258:	10803fcc 	andi	r2,r2,255
  80525c:	1080201c 	xori	r2,r2,128
  805260:	10bfe004 	addi	r2,r2,-128
  805264:	10000226 	beq	r2,zero,805270 <logic+0x4fe0>
  805268:	00800044 	movi	r2,1
  80526c:	00000106 	br	805274 <logic+0x4fe4>
  805270:	0005883a 	mov	r2,zero
  805274:	1007883a 	mov	r3,r2
  805278:	e0bffc17 	ldw	r2,-16(fp)
  80527c:	10c05245 	stb	r3,329(r2)
  d->_g154 = d->_GO || d->_g185;
  805280:	e0bffc17 	ldw	r2,-16(fp)
  805284:	10805803 	ldbu	r2,352(r2)
  805288:	10803fcc 	andi	r2,r2,255
  80528c:	1080201c 	xori	r2,r2,128
  805290:	10bfe004 	addi	r2,r2,-128
  805294:	1000061e 	bne	r2,zero,8052b0 <logic+0x5020>
  805298:	e0bffc17 	ldw	r2,-16(fp)
  80529c:	10805703 	ldbu	r2,348(r2)
  8052a0:	10803fcc 	andi	r2,r2,255
  8052a4:	1080201c 	xori	r2,r2,128
  8052a8:	10bfe004 	addi	r2,r2,-128
  8052ac:	10000226 	beq	r2,zero,8052b8 <logic+0x5028>
  8052b0:	00800044 	movi	r2,1
  8052b4:	00000106 	br	8052bc <logic+0x502c>
  8052b8:	0005883a 	mov	r2,zero
  8052bc:	1007883a 	mov	r3,r2
  8052c0:	e0bffc17 	ldw	r2,-16(fp)
  8052c4:	10c052c5 	stb	r3,331(r2)
  d->_g158 = d->_GO || d->_g63;
  8052c8:	e0bffc17 	ldw	r2,-16(fp)
  8052cc:	10805803 	ldbu	r2,352(r2)
  8052d0:	10803fcc 	andi	r2,r2,255
  8052d4:	1080201c 	xori	r2,r2,128
  8052d8:	10bfe004 	addi	r2,r2,-128
  8052dc:	1000061e 	bne	r2,zero,8052f8 <logic+0x5068>
  8052e0:	e0bffc17 	ldw	r2,-16(fp)
  8052e4:	10804243 	ldbu	r2,265(r2)
  8052e8:	10803fcc 	andi	r2,r2,255
  8052ec:	1080201c 	xori	r2,r2,128
  8052f0:	10bfe004 	addi	r2,r2,-128
  8052f4:	10000226 	beq	r2,zero,805300 <logic+0x5070>
  8052f8:	00800044 	movi	r2,1
  8052fc:	00000106 	br	805304 <logic+0x5074>
  805300:	0005883a 	mov	r2,zero
  805304:	1007883a 	mov	r3,r2
  805308:	e0bffc17 	ldw	r2,-16(fp)
  80530c:	10c05385 	stb	r3,334(r2)
  d->_g163 = d->_GO || d->_g86;
  805310:	e0bffc17 	ldw	r2,-16(fp)
  805314:	10805803 	ldbu	r2,352(r2)
  805318:	10803fcc 	andi	r2,r2,255
  80531c:	1080201c 	xori	r2,r2,128
  805320:	10bfe004 	addi	r2,r2,-128
  805324:	1000061e 	bne	r2,zero,805340 <logic+0x50b0>
  805328:	e0bffc17 	ldw	r2,-16(fp)
  80532c:	10804683 	ldbu	r2,282(r2)
  805330:	10803fcc 	andi	r2,r2,255
  805334:	1080201c 	xori	r2,r2,128
  805338:	10bfe004 	addi	r2,r2,-128
  80533c:	10000226 	beq	r2,zero,805348 <logic+0x50b8>
  805340:	00800044 	movi	r2,1
  805344:	00000106 	br	80534c <logic+0x50bc>
  805348:	0005883a 	mov	r2,zero
  80534c:	1007883a 	mov	r3,r2
  805350:	e0bffc17 	ldw	r2,-16(fp)
  805354:	10c05485 	stb	r3,338(r2)
  d->_g160 = d->_GO || d->_g92;
  805358:	e0bffc17 	ldw	r2,-16(fp)
  80535c:	10805803 	ldbu	r2,352(r2)
  805360:	10803fcc 	andi	r2,r2,255
  805364:	1080201c 	xori	r2,r2,128
  805368:	10bfe004 	addi	r2,r2,-128
  80536c:	1000061e 	bne	r2,zero,805388 <logic+0x50f8>
  805370:	e0bffc17 	ldw	r2,-16(fp)
  805374:	10804743 	ldbu	r2,285(r2)
  805378:	10803fcc 	andi	r2,r2,255
  80537c:	1080201c 	xori	r2,r2,128
  805380:	10bfe004 	addi	r2,r2,-128
  805384:	10000226 	beq	r2,zero,805390 <logic+0x5100>
  805388:	00800044 	movi	r2,1
  80538c:	00000106 	br	805394 <logic+0x5104>
  805390:	0005883a 	mov	r2,zero
  805394:	1007883a 	mov	r3,r2
  805398:	e0bffc17 	ldw	r2,-16(fp)
  80539c:	10c05405 	stb	r3,336(r2)
  d->_g152 = d->_GO || d->_g201;
  8053a0:	e0bffc17 	ldw	r2,-16(fp)
  8053a4:	10805803 	ldbu	r2,352(r2)
  8053a8:	10803fcc 	andi	r2,r2,255
  8053ac:	1080201c 	xori	r2,r2,128
  8053b0:	10bfe004 	addi	r2,r2,-128
  8053b4:	1000061e 	bne	r2,zero,8053d0 <logic+0x5140>
  8053b8:	e0bffc17 	ldw	r2,-16(fp)
  8053bc:	10805743 	ldbu	r2,349(r2)
  8053c0:	10803fcc 	andi	r2,r2,255
  8053c4:	1080201c 	xori	r2,r2,128
  8053c8:	10bfe004 	addi	r2,r2,-128
  8053cc:	10000226 	beq	r2,zero,8053d8 <logic+0x5148>
  8053d0:	00800044 	movi	r2,1
  8053d4:	00000106 	br	8053dc <logic+0x514c>
  8053d8:	0005883a 	mov	r2,zero
  8053dc:	1007883a 	mov	r3,r2
  8053e0:	e0bffc17 	ldw	r2,-16(fp)
  8053e4:	10c05285 	stb	r3,330(r2)
  if (d->_g42_e1) {
  8053e8:	e0bffc17 	ldw	r2,-16(fp)
  8053ec:	10806803 	ldbu	r2,416(r2)
  8053f0:	10803fcc 	andi	r2,r2,255
  8053f4:	1080201c 	xori	r2,r2,128
  8053f8:	10bfe004 	addi	r2,r2,-128
  8053fc:	10000426 	beq	r2,zero,805410 <logic+0x5180>
    d->_reg_AP = d->AP;
  805400:	e0bffc17 	ldw	r2,-16(fp)
  805404:	10c03183 	ldbu	r3,198(r2)
  805408:	e0bffc17 	ldw	r2,-16(fp)
  80540c:	10c03305 	stb	r3,204(r2)
  }
  if (d->_g13_e1) {
  805410:	e0bffc17 	ldw	r2,-16(fp)
  805414:	10806783 	ldbu	r2,414(r2)
  805418:	10803fcc 	andi	r2,r2,255
  80541c:	1080201c 	xori	r2,r2,128
  805420:	10bfe004 	addi	r2,r2,-128
  805424:	10000426 	beq	r2,zero,805438 <logic+0x51a8>
    d->_reg_VP = d->VP;
  805428:	e0bffc17 	ldw	r2,-16(fp)
  80542c:	10c031c3 	ldbu	r3,199(r2)
  805430:	e0bffc17 	ldw	r2,-16(fp)
  805434:	10c03385 	stb	r3,206(r2)
  }
}
  805438:	0001883a 	nop
  80543c:	e6fffd04 	addi	sp,fp,-12
  805440:	dfc00417 	ldw	ra,16(sp)
  805444:	df000317 	ldw	fp,12(sp)
  805448:	dc800217 	ldw	r18,8(sp)
  80544c:	dc400117 	ldw	r17,4(sp)
  805450:	dc000017 	ldw	r16,0(sp)
  805454:	dec00504 	addi	sp,sp,20
  805458:	f800283a 	ret

0080545c <reset>:

void reset(TickData* d) {
  80545c:	defffe04 	addi	sp,sp,-8
  805460:	df000115 	stw	fp,4(sp)
  805464:	df000104 	addi	fp,sp,4
  805468:	e13fff15 	stw	r4,-4(fp)
  d->_GO = 1;
  80546c:	e0bfff17 	ldw	r2,-4(fp)
  805470:	00c00044 	movi	r3,1
  805474:	10c05805 	stb	r3,352(r2)
  d->_TERM = 0;
  805478:	e0bfff17 	ldw	r2,-4(fp)
  80547c:	10006a85 	stb	zero,426(r2)
  d->T_AVI = AVI_VALUE;
  805480:	e0bfff17 	ldw	r2,-4(fp)
  805484:	00c04b04 	movi	r3,300
  805488:	10c00115 	stw	r3,4(r2)
  d->T_AEI = AEI_VALUE;
  80548c:	e0bfff17 	ldw	r2,-4(fp)
  805490:	00c0c804 	movi	r3,800
  805494:	10c00215 	stw	r3,8(r2)
  d->T_PVAR = PVARP_VALUE;
  805498:	e0bfff17 	ldw	r2,-4(fp)
  80549c:	00c00c84 	movi	r3,50
  8054a0:	10c00315 	stw	r3,12(r2)
  d->T_VRP = VRP_VALUE;
  8054a4:	e0bfff17 	ldw	r2,-4(fp)
  8054a8:	00c02584 	movi	r3,150
  8054ac:	10c00415 	stw	r3,16(r2)
  d->T_LRI = LRI_VALUE;
  8054b0:	e0bfff17 	ldw	r2,-4(fp)
  8054b4:	00c0ed84 	movi	r3,950
  8054b8:	10c00515 	stw	r3,20(r2)
  d->T_URI = URI_VALUE;
  8054bc:	e0bfff17 	ldw	r2,-4(fp)
  8054c0:	10000615 	stw	zero,24(r2)
  d->_region0_VRefrac_t = 0;
  8054c4:	e0bfff17 	ldw	r2,-4(fp)
  8054c8:	10002115 	stw	zero,132(r2)
  8054cc:	10002215 	stw	zero,136(r2)
  d->_region1_ARefrac_t = 0;
  8054d0:	e0bfff17 	ldw	r2,-4(fp)
  8054d4:	10002315 	stw	zero,140(r2)
  8054d8:	10002415 	stw	zero,144(r2)
  d->_region2_AEI_t = 0;
  8054dc:	e0bfff17 	ldw	r2,-4(fp)
  8054e0:	10002515 	stw	zero,148(r2)
  8054e4:	10002615 	stw	zero,152(r2)
  d->_region3_AVI_t = 0;
  8054e8:	e0bfff17 	ldw	r2,-4(fp)
  8054ec:	10002715 	stw	zero,156(r2)
  8054f0:	10002815 	stw	zero,160(r2)
  d->_region4_LRI_t = 0;
  8054f4:	e0bfff17 	ldw	r2,-4(fp)
  8054f8:	10002915 	stw	zero,164(r2)
  8054fc:	10002a15 	stw	zero,168(r2)
  d->_region5_URI_t = 0;
  805500:	e0bfff17 	ldw	r2,-4(fp)
  805504:	10002b15 	stw	zero,172(r2)
  805508:	10002c15 	stw	zero,176(r2)
  d->deltaT = 0.0;
  80550c:	e0bfff17 	ldw	r2,-4(fp)
  805510:	10002d15 	stw	zero,180(r2)
  805514:	10002e15 	stw	zero,184(r2)
  d->sleepT = 0.0;
  805518:	e0bfff17 	ldw	r2,-4(fp)
  80551c:	10002f15 	stw	zero,188(r2)
  805520:	10003015 	stw	zero,192(r2)
  d->_reg_AP = 0;
  805524:	e0bfff17 	ldw	r2,-4(fp)
  805528:	10003305 	stb	zero,204(r2)
  d->_reg_VP = 0;
  80552c:	e0bfff17 	ldw	r2,-4(fp)
  805530:	10003385 	stb	zero,206(r2)
  d->_taken_transitions[0] = 0;
  805534:	e0bfff17 	ldw	r2,-4(fp)
  805538:	10000715 	stw	zero,28(r2)
  d->_taken_transitions[1] = 0;
  80553c:	e0bfff17 	ldw	r2,-4(fp)
  805540:	10000815 	stw	zero,32(r2)
  d->_taken_transitions[2] = 0;
  805544:	e0bfff17 	ldw	r2,-4(fp)
  805548:	10000915 	stw	zero,36(r2)
  d->_taken_transitions[3] = 0;
  80554c:	e0bfff17 	ldw	r2,-4(fp)
  805550:	10000a15 	stw	zero,40(r2)
  d->_taken_transitions[4] = 0;
  805554:	e0bfff17 	ldw	r2,-4(fp)
  805558:	10000b15 	stw	zero,44(r2)
  d->_taken_transitions[5] = 0;
  80555c:	e0bfff17 	ldw	r2,-4(fp)
  805560:	10000c15 	stw	zero,48(r2)
  d->_taken_transitions[6] = 0;
  805564:	e0bfff17 	ldw	r2,-4(fp)
  805568:	10000d15 	stw	zero,52(r2)
  d->_taken_transitions[7] = 0;
  80556c:	e0bfff17 	ldw	r2,-4(fp)
  805570:	10000e15 	stw	zero,56(r2)
  d->_taken_transitions[8] = 0;
  805574:	e0bfff17 	ldw	r2,-4(fp)
  805578:	10000f15 	stw	zero,60(r2)
  d->_taken_transitions[9] = 0;
  80557c:	e0bfff17 	ldw	r2,-4(fp)
  805580:	10001015 	stw	zero,64(r2)
  d->_taken_transitions[10] = 0;
  805584:	e0bfff17 	ldw	r2,-4(fp)
  805588:	10001115 	stw	zero,68(r2)
  d->_taken_transitions[11] = 0;
  80558c:	e0bfff17 	ldw	r2,-4(fp)
  805590:	10001215 	stw	zero,72(r2)
  d->_taken_transitions[12] = 0;
  805594:	e0bfff17 	ldw	r2,-4(fp)
  805598:	10001315 	stw	zero,76(r2)
  d->_taken_transitions[13] = 0;
  80559c:	e0bfff17 	ldw	r2,-4(fp)
  8055a0:	10001415 	stw	zero,80(r2)
  d->_taken_transitions[14] = 0;
  8055a4:	e0bfff17 	ldw	r2,-4(fp)
  8055a8:	10001515 	stw	zero,84(r2)
  d->_taken_transitions[15] = 0;
  8055ac:	e0bfff17 	ldw	r2,-4(fp)
  8055b0:	10001615 	stw	zero,88(r2)
  d->_taken_transitions[16] = 0;
  8055b4:	e0bfff17 	ldw	r2,-4(fp)
  8055b8:	10001715 	stw	zero,92(r2)
  d->_taken_transitions[17] = 0;
  8055bc:	e0bfff17 	ldw	r2,-4(fp)
  8055c0:	10001815 	stw	zero,96(r2)
  d->_taken_transitions[18] = 0;
  8055c4:	e0bfff17 	ldw	r2,-4(fp)
  8055c8:	10001915 	stw	zero,100(r2)
  d->_taken_transitions[19] = 0;
  8055cc:	e0bfff17 	ldw	r2,-4(fp)
  8055d0:	10001a15 	stw	zero,104(r2)
  d->_taken_transitions[20] = 0;
  8055d4:	e0bfff17 	ldw	r2,-4(fp)
  8055d8:	10001b15 	stw	zero,108(r2)
  d->_taken_transitions[21] = 0;
  8055dc:	e0bfff17 	ldw	r2,-4(fp)
  8055e0:	10001c15 	stw	zero,112(r2)
  d->_taken_transitions[22] = 0;
  8055e4:	e0bfff17 	ldw	r2,-4(fp)
  8055e8:	10001d15 	stw	zero,116(r2)
  d->_taken_transitions[23] = 0;
  8055ec:	e0bfff17 	ldw	r2,-4(fp)
  8055f0:	10001e15 	stw	zero,120(r2)
  d->_taken_transitions[24] = 0;
  8055f4:	e0bfff17 	ldw	r2,-4(fp)
  8055f8:	10001f15 	stw	zero,124(r2)
  d->_taken_transitions[25] = 0;
  8055fc:	e0bfff17 	ldw	r2,-4(fp)
  805600:	10002015 	stw	zero,128(r2)
  d->_pg8 = 0;
  805604:	e0bfff17 	ldw	r2,-4(fp)
  805608:	10006ac5 	stb	zero,427(r2)
  d->_pg29 = 0;
  80560c:	e0bfff17 	ldw	r2,-4(fp)
  805610:	10006b05 	stb	zero,428(r2)
  d->_pg17 = 0;
  805614:	e0bfff17 	ldw	r2,-4(fp)
  805618:	10006b45 	stb	zero,429(r2)
  d->_pg151 = 0;
  80561c:	e0bfff17 	ldw	r2,-4(fp)
  805620:	10006b85 	stb	zero,430(r2)
  d->_pg13_e1 = 0;
  805624:	e0bfff17 	ldw	r2,-4(fp)
  805628:	10006bc5 	stb	zero,431(r2)
  d->_pg27 = 0;
  80562c:	e0bfff17 	ldw	r2,-4(fp)
  805630:	10006c05 	stb	zero,432(r2)
  d->_pg37 = 0;
  805634:	e0bfff17 	ldw	r2,-4(fp)
  805638:	10006c45 	stb	zero,433(r2)
  d->_pg34 = 0;
  80563c:	e0bfff17 	ldw	r2,-4(fp)
  805640:	10006c85 	stb	zero,434(r2)
  d->_pg41 = 0;
  805644:	e0bfff17 	ldw	r2,-4(fp)
  805648:	10006cc5 	stb	zero,435(r2)
  d->_pg154 = 0;
  80564c:	e0bfff17 	ldw	r2,-4(fp)
  805650:	10006d05 	stb	zero,436(r2)
  d->_pg52 = 0;
  805654:	e0bfff17 	ldw	r2,-4(fp)
  805658:	10006d45 	stb	zero,437(r2)
  d->_pg42_e1 = 0;
  80565c:	e0bfff17 	ldw	r2,-4(fp)
  805660:	10006d85 	stb	zero,438(r2)
  d->_pg62 = 0;
  805664:	e0bfff17 	ldw	r2,-4(fp)
  805668:	10006dc5 	stb	zero,439(r2)
  d->_pg72 = 0;
  80566c:	e0bfff17 	ldw	r2,-4(fp)
  805670:	10006e05 	stb	zero,440(r2)
  d->_pg158 = 0;
  805674:	e0bfff17 	ldw	r2,-4(fp)
  805678:	10006e45 	stb	zero,441(r2)
  d->_pg83_e2 = 0;
  80567c:	e0bfff17 	ldw	r2,-4(fp)
  805680:	10006e85 	stb	zero,442(r2)
  d->_pg74 = 0;
  805684:	e0bfff17 	ldw	r2,-4(fp)
  805688:	10006ec5 	stb	zero,443(r2)
  d->_pg77 = 0;
  80568c:	e0bfff17 	ldw	r2,-4(fp)
  805690:	10006f05 	stb	zero,444(r2)
  d->_pg100 = 0;
  805694:	e0bfff17 	ldw	r2,-4(fp)
  805698:	10006f45 	stb	zero,445(r2)
  d->_pg163 = 0;
  80569c:	e0bfff17 	ldw	r2,-4(fp)
  8056a0:	10006f85 	stb	zero,446(r2)
  d->_pg159 = 0;
  8056a4:	e0bfff17 	ldw	r2,-4(fp)
  8056a8:	10006fc5 	stb	zero,447(r2)
  d->_pg98 = 0;
  8056ac:	e0bfff17 	ldw	r2,-4(fp)
  8056b0:	10007005 	stb	zero,448(r2)
  d->_pg101 = 0;
  8056b4:	e0bfff17 	ldw	r2,-4(fp)
  8056b8:	10007045 	stb	zero,449(r2)
  d->_pg111 = 0;
  8056bc:	e0bfff17 	ldw	r2,-4(fp)
  8056c0:	10007085 	stb	zero,450(r2)
  d->_pg137 = 0;
  8056c4:	e0bfff17 	ldw	r2,-4(fp)
  8056c8:	100070c5 	stb	zero,451(r2)
  d->_pg171 = 0;
  8056cc:	e0bfff17 	ldw	r2,-4(fp)
  8056d0:	10007105 	stb	zero,452(r2)
  d->_pg150 = 0;
  8056d4:	e0bfff17 	ldw	r2,-4(fp)
  8056d8:	10007145 	stb	zero,453(r2)
  d->_pg172 = 0;
  8056dc:	e0bfff17 	ldw	r2,-4(fp)
  8056e0:	10007185 	stb	zero,454(r2)
  d->_pg152 = 0;
  8056e4:	e0bfff17 	ldw	r2,-4(fp)
  8056e8:	100071c5 	stb	zero,455(r2)
  d->_pg160 = 0;
  8056ec:	e0bfff17 	ldw	r2,-4(fp)
  8056f0:	10007205 	stb	zero,456(r2)
  d->_pg126 = 0;
  8056f4:	e0bfff17 	ldw	r2,-4(fp)
  8056f8:	10007245 	stb	zero,457(r2)
  d->_pg140 = 0;
  8056fc:	e0bfff17 	ldw	r2,-4(fp)
  805700:	10007285 	stb	zero,458(r2)
  d->_pg131 = 0;
  805704:	e0bfff17 	ldw	r2,-4(fp)
  805708:	100072c5 	stb	zero,459(r2)
  d->_pg120 = 0;
  80570c:	e0bfff17 	ldw	r2,-4(fp)
  805710:	10007305 	stb	zero,460(r2)
}
  805714:	0001883a 	nop
  805718:	e037883a 	mov	sp,fp
  80571c:	df000017 	ldw	fp,0(sp)
  805720:	dec00104 	addi	sp,sp,4
  805724:	f800283a 	ret

00805728 <tick>:

void tick(TickData* d) {
  805728:	defffd04 	addi	sp,sp,-12
  80572c:	dfc00215 	stw	ra,8(sp)
  805730:	df000115 	stw	fp,4(sp)
  805734:	df000104 	addi	fp,sp,4
  805738:	e13fff15 	stw	r4,-4(fp)
  logic(d);
  80573c:	e13fff17 	ldw	r4,-4(fp)
  805740:	08002900 	call	800290 <logic>

  d->_pg8 = d->_g8;
  805744:	e0bfff17 	ldw	r2,-4(fp)
  805748:	10c037c3 	ldbu	r3,223(r2)
  80574c:	e0bfff17 	ldw	r2,-4(fp)
  805750:	10c06ac5 	stb	r3,427(r2)
  d->_pg29 = d->_g29;
  805754:	e0bfff17 	ldw	r2,-4(fp)
  805758:	10c03c03 	ldbu	r3,240(r2)
  80575c:	e0bfff17 	ldw	r2,-4(fp)
  805760:	10c06b05 	stb	r3,428(r2)
  d->_pg17 = d->_g17;
  805764:	e0bfff17 	ldw	r2,-4(fp)
  805768:	10c03983 	ldbu	r3,230(r2)
  80576c:	e0bfff17 	ldw	r2,-4(fp)
  805770:	10c06b45 	stb	r3,429(r2)
  d->_pg151 = d->_g151;
  805774:	e0bfff17 	ldw	r2,-4(fp)
  805778:	10c05243 	ldbu	r3,329(r2)
  80577c:	e0bfff17 	ldw	r2,-4(fp)
  805780:	10c06b85 	stb	r3,430(r2)
  d->_pg13_e1 = d->_g13_e1;
  805784:	e0bfff17 	ldw	r2,-4(fp)
  805788:	10c06783 	ldbu	r3,414(r2)
  80578c:	e0bfff17 	ldw	r2,-4(fp)
  805790:	10c06bc5 	stb	r3,431(r2)
  d->_pg27 = d->_g27;
  805794:	e0bfff17 	ldw	r2,-4(fp)
  805798:	10c03b83 	ldbu	r3,238(r2)
  80579c:	e0bfff17 	ldw	r2,-4(fp)
  8057a0:	10c06c05 	stb	r3,432(r2)
  d->_pg37 = d->_g37;
  8057a4:	e0bfff17 	ldw	r2,-4(fp)
  8057a8:	10c03d03 	ldbu	r3,244(r2)
  8057ac:	e0bfff17 	ldw	r2,-4(fp)
  8057b0:	10c06c45 	stb	r3,433(r2)
  d->_pg34 = d->_g34;
  8057b4:	e0bfff17 	ldw	r2,-4(fp)
  8057b8:	10c03c83 	ldbu	r3,242(r2)
  8057bc:	e0bfff17 	ldw	r2,-4(fp)
  8057c0:	10c06c85 	stb	r3,434(r2)
  d->_pg41 = d->_g41;
  8057c4:	e0bfff17 	ldw	r2,-4(fp)
  8057c8:	10c03dc3 	ldbu	r3,247(r2)
  8057cc:	e0bfff17 	ldw	r2,-4(fp)
  8057d0:	10c06cc5 	stb	r3,435(r2)
  d->_pg154 = d->_g154;
  8057d4:	e0bfff17 	ldw	r2,-4(fp)
  8057d8:	10c052c3 	ldbu	r3,331(r2)
  8057dc:	e0bfff17 	ldw	r2,-4(fp)
  8057e0:	10c06d05 	stb	r3,436(r2)
  d->_pg52 = d->_g52;
  8057e4:	e0bfff17 	ldw	r2,-4(fp)
  8057e8:	10c03fc3 	ldbu	r3,255(r2)
  8057ec:	e0bfff17 	ldw	r2,-4(fp)
  8057f0:	10c06d45 	stb	r3,437(r2)
  d->_pg42_e1 = d->_g42_e1;
  8057f4:	e0bfff17 	ldw	r2,-4(fp)
  8057f8:	10c06803 	ldbu	r3,416(r2)
  8057fc:	e0bfff17 	ldw	r2,-4(fp)
  805800:	10c06d85 	stb	r3,438(r2)
  d->_pg62 = d->_g62;
  805804:	e0bfff17 	ldw	r2,-4(fp)
  805808:	10c04203 	ldbu	r3,264(r2)
  80580c:	e0bfff17 	ldw	r2,-4(fp)
  805810:	10c06dc5 	stb	r3,439(r2)
  d->_pg72 = d->_g72;
  805814:	e0bfff17 	ldw	r2,-4(fp)
  805818:	10c04383 	ldbu	r3,270(r2)
  80581c:	e0bfff17 	ldw	r2,-4(fp)
  805820:	10c06e05 	stb	r3,440(r2)
  d->_pg158 = d->_g158;
  805824:	e0bfff17 	ldw	r2,-4(fp)
  805828:	10c05383 	ldbu	r3,334(r2)
  80582c:	e0bfff17 	ldw	r2,-4(fp)
  805830:	10c06e45 	stb	r3,441(r2)
  d->_pg83_e2 = d->_g83_e2;
  805834:	e0bfff17 	ldw	r2,-4(fp)
  805838:	10c068c3 	ldbu	r3,419(r2)
  80583c:	e0bfff17 	ldw	r2,-4(fp)
  805840:	10c06e85 	stb	r3,442(r2)
  d->_pg74 = d->_g74;
  805844:	e0bfff17 	ldw	r2,-4(fp)
  805848:	10c04403 	ldbu	r3,272(r2)
  80584c:	e0bfff17 	ldw	r2,-4(fp)
  805850:	10c06ec5 	stb	r3,443(r2)
  d->_pg77 = d->_g77;
  805854:	e0bfff17 	ldw	r2,-4(fp)
  805858:	10c044c3 	ldbu	r3,275(r2)
  80585c:	e0bfff17 	ldw	r2,-4(fp)
  805860:	10c06f05 	stb	r3,444(r2)
  d->_pg100 = d->_g100;
  805864:	e0bfff17 	ldw	r2,-4(fp)
  805868:	10c04903 	ldbu	r3,292(r2)
  80586c:	e0bfff17 	ldw	r2,-4(fp)
  805870:	10c06f45 	stb	r3,445(r2)
  d->_pg163 = d->_g163;
  805874:	e0bfff17 	ldw	r2,-4(fp)
  805878:	10c05483 	ldbu	r3,338(r2)
  80587c:	e0bfff17 	ldw	r2,-4(fp)
  805880:	10c06f85 	stb	r3,446(r2)
  d->_pg159 = d->_g159;
  805884:	e0bfff17 	ldw	r2,-4(fp)
  805888:	10c053c3 	ldbu	r3,335(r2)
  80588c:	e0bfff17 	ldw	r2,-4(fp)
  805890:	10c06fc5 	stb	r3,447(r2)
  d->_pg98 = d->_g98;
  805894:	e0bfff17 	ldw	r2,-4(fp)
  805898:	10c04883 	ldbu	r3,290(r2)
  80589c:	e0bfff17 	ldw	r2,-4(fp)
  8058a0:	10c07005 	stb	r3,448(r2)
  d->_pg101 = d->_g101;
  8058a4:	e0bfff17 	ldw	r2,-4(fp)
  8058a8:	10c04943 	ldbu	r3,293(r2)
  8058ac:	e0bfff17 	ldw	r2,-4(fp)
  8058b0:	10c07045 	stb	r3,449(r2)
  d->_pg111 = d->_g111;
  8058b4:	e0bfff17 	ldw	r2,-4(fp)
  8058b8:	10c04b43 	ldbu	r3,301(r2)
  8058bc:	e0bfff17 	ldw	r2,-4(fp)
  8058c0:	10c07085 	stb	r3,450(r2)
  d->_pg137 = d->_g137;
  8058c4:	e0bfff17 	ldw	r2,-4(fp)
  8058c8:	10c04fc3 	ldbu	r3,319(r2)
  8058cc:	e0bfff17 	ldw	r2,-4(fp)
  8058d0:	10c070c5 	stb	r3,451(r2)
  d->_pg171 = d->_g171;
  8058d4:	e0bfff17 	ldw	r2,-4(fp)
  8058d8:	10c05603 	ldbu	r3,344(r2)
  8058dc:	e0bfff17 	ldw	r2,-4(fp)
  8058e0:	10c07105 	stb	r3,452(r2)
  d->_pg150 = d->_g150;
  8058e4:	e0bfff17 	ldw	r2,-4(fp)
  8058e8:	10c05203 	ldbu	r3,328(r2)
  8058ec:	e0bfff17 	ldw	r2,-4(fp)
  8058f0:	10c07145 	stb	r3,453(r2)
  d->_pg172 = d->_g172;
  8058f4:	e0bfff17 	ldw	r2,-4(fp)
  8058f8:	10c05643 	ldbu	r3,345(r2)
  8058fc:	e0bfff17 	ldw	r2,-4(fp)
  805900:	10c07185 	stb	r3,454(r2)
  d->_pg152 = d->_g152;
  805904:	e0bfff17 	ldw	r2,-4(fp)
  805908:	10c05283 	ldbu	r3,330(r2)
  80590c:	e0bfff17 	ldw	r2,-4(fp)
  805910:	10c071c5 	stb	r3,455(r2)
  d->_pg160 = d->_g160;
  805914:	e0bfff17 	ldw	r2,-4(fp)
  805918:	10c05403 	ldbu	r3,336(r2)
  80591c:	e0bfff17 	ldw	r2,-4(fp)
  805920:	10c07205 	stb	r3,456(r2)
  d->_pg126 = d->_g126;
  805924:	e0bfff17 	ldw	r2,-4(fp)
  805928:	10c04dc3 	ldbu	r3,311(r2)
  80592c:	e0bfff17 	ldw	r2,-4(fp)
  805930:	10c07245 	stb	r3,457(r2)
  d->_pg140 = d->_g140;
  805934:	e0bfff17 	ldw	r2,-4(fp)
  805938:	10c05083 	ldbu	r3,322(r2)
  80593c:	e0bfff17 	ldw	r2,-4(fp)
  805940:	10c07285 	stb	r3,458(r2)
  d->_pg131 = d->_g131;
  805944:	e0bfff17 	ldw	r2,-4(fp)
  805948:	10c04ec3 	ldbu	r3,315(r2)
  80594c:	e0bfff17 	ldw	r2,-4(fp)
  805950:	10c072c5 	stb	r3,459(r2)
  d->_pg120 = d->_g120;
  805954:	e0bfff17 	ldw	r2,-4(fp)
  805958:	10c04cc3 	ldbu	r3,307(r2)
  80595c:	e0bfff17 	ldw	r2,-4(fp)
  805960:	10c07305 	stb	r3,460(r2)
  d->_GO = 0;
  805964:	e0bfff17 	ldw	r2,-4(fp)
  805968:	10005805 	stb	zero,352(r2)
}
  80596c:	0001883a 	nop
  805970:	e037883a 	mov	sp,fp
  805974:	dfc00117 	ldw	ra,4(sp)
  805978:	df000017 	ldw	fp,0(sp)
  80597c:	dec00204 	addi	sp,sp,8
  805980:	f800283a 	ret

00805984 <PMc_init>:
static int s_AP_pulse    = 0;

/* -------------------------------------------------
   API expected by main.c
   ------------------------------------------------- */
int PMc_init(void) {
  805984:	deffff04 	addi	sp,sp,-4
  805988:	df000015 	stw	fp,0(sp)
  80598c:	d839883a 	mov	fp,sp
    s_ms_counter = 0;
  805990:	d0274e15 	stw	zero,-25288(gp)
    s_AP_pulse   = 0;
  805994:	d0274f15 	stw	zero,-25284(gp)
    return 0;
  805998:	0005883a 	mov	r2,zero
}
  80599c:	e037883a 	mov	sp,fp
  8059a0:	df000017 	ldw	fp,0(sp)
  8059a4:	dec00104 	addi	sp,sp,4
  8059a8:	f800283a 	ret

008059ac <PMc_start_1ms_alarm>:

int PMc_start_1ms_alarm(void) {
  8059ac:	deffff04 	addi	sp,sp,-4
  8059b0:	df000015 	stw	fp,0(sp)
  8059b4:	d839883a 	mov	fp,sp
    // no hardware timer; main drives time manually
    return 0;
  8059b8:	0005883a 	mov	r2,zero
}
  8059bc:	e037883a 	mov	sp,fp
  8059c0:	df000017 	ldw	fp,0(sp)
  8059c4:	dec00104 	addi	sp,sp,4
  8059c8:	f800283a 	ret

008059cc <PMc_set_senses>:

void PMc_set_senses(int AS_pulse, int VS_pulse) {
  8059cc:	defffd04 	addi	sp,sp,-12
  8059d0:	df000215 	stw	fp,8(sp)
  8059d4:	df000204 	addi	fp,sp,8
  8059d8:	e13ffe15 	stw	r4,-8(fp)
  8059dc:	e17fff15 	stw	r5,-4(fp)
    (void)AS_pulse;
    (void)VS_pulse;
}
  8059e0:	0001883a 	nop
  8059e4:	e037883a 	mov	sp,fp
  8059e8:	df000017 	ldw	fp,0(sp)
  8059ec:	dec00104 	addi	sp,sp,4
  8059f0:	f800283a 	ret

008059f4 <PMc_run_for_elapsed_ms>:

/* -------------------------------------------------
   Run for N milliseconds (called each loop)
   ------------------------------------------------- */
void PMc_run_for_elapsed_ms(int elapsed_ms) {
  8059f4:	defffd04 	addi	sp,sp,-12
  8059f8:	df000215 	stw	fp,8(sp)
  8059fc:	df000204 	addi	fp,sp,8
  805a00:	e13fff15 	stw	r4,-4(fp)
    if (elapsed_ms <= 0) return;
  805a04:	e0bfff17 	ldw	r2,-4(fp)
  805a08:	0080120e 	bge	zero,r2,805a54 <PMc_run_for_elapsed_ms+0x60>

    for (int i = 0; i < elapsed_ms; ++i) {
  805a0c:	e03ffe15 	stw	zero,-8(fp)
  805a10:	00000c06 	br	805a44 <PMc_run_for_elapsed_ms+0x50>
        s_ms_counter++;
  805a14:	d0a74e17 	ldw	r2,-25288(gp)
  805a18:	10800044 	addi	r2,r2,1
  805a1c:	d0a74e15 	stw	r2,-25288(gp)

        if (s_ms_counter >= 1000) {   /* 1000 ms period */
  805a20:	d0a74e17 	ldw	r2,-25288(gp)
  805a24:	1080fa10 	cmplti	r2,r2,1000
  805a28:	1000031e 	bne	r2,zero,805a38 <PMc_run_for_elapsed_ms+0x44>
            s_ms_counter = 0;
  805a2c:	d0274e15 	stw	zero,-25288(gp)
            s_AP_pulse   = 1;          /* one-tick AP pulse */
  805a30:	00800044 	movi	r2,1
  805a34:	d0a74f15 	stw	r2,-25284(gp)
   Run for N milliseconds (called each loop)
   ------------------------------------------------- */
void PMc_run_for_elapsed_ms(int elapsed_ms) {
    if (elapsed_ms <= 0) return;

    for (int i = 0; i < elapsed_ms; ++i) {
  805a38:	e0bffe17 	ldw	r2,-8(fp)
  805a3c:	10800044 	addi	r2,r2,1
  805a40:	e0bffe15 	stw	r2,-8(fp)
  805a44:	e0fffe17 	ldw	r3,-8(fp)
  805a48:	e0bfff17 	ldw	r2,-4(fp)
  805a4c:	18bff116 	blt	r3,r2,805a14 <__alt_mem_onchip_mem+0xff7fda14>
  805a50:	00000106 	br	805a58 <PMc_run_for_elapsed_ms+0x64>

/* -------------------------------------------------
   Run for N milliseconds (called each loop)
   ------------------------------------------------- */
void PMc_run_for_elapsed_ms(int elapsed_ms) {
    if (elapsed_ms <= 0) return;
  805a54:	0001883a 	nop
        if (s_ms_counter >= 1000) {   /* 1000 ms period */
            s_ms_counter = 0;
            s_AP_pulse   = 1;          /* one-tick AP pulse */
        }
    }
}
  805a58:	e037883a 	mov	sp,fp
  805a5c:	df000017 	ldw	fp,0(sp)
  805a60:	dec00104 	addi	sp,sp,4
  805a64:	f800283a 	ret

00805a68 <PMc_poll_and_clear_pulses>:

/* -------------------------------------------------
   Poll outputs and clear one-shots
   ------------------------------------------------- */
void PMc_poll_and_clear_pulses(int *AP_pulse, int *VP_pulse) {
  805a68:	defffd04 	addi	sp,sp,-12
  805a6c:	df000215 	stw	fp,8(sp)
  805a70:	df000204 	addi	fp,sp,8
  805a74:	e13ffe15 	stw	r4,-8(fp)
  805a78:	e17fff15 	stw	r5,-4(fp)
    if (AP_pulse) *AP_pulse = s_AP_pulse;
  805a7c:	e0bffe17 	ldw	r2,-8(fp)
  805a80:	10000326 	beq	r2,zero,805a90 <PMc_poll_and_clear_pulses+0x28>
  805a84:	d0e74f17 	ldw	r3,-25284(gp)
  805a88:	e0bffe17 	ldw	r2,-8(fp)
  805a8c:	10c00015 	stw	r3,0(r2)
    if (VP_pulse) *VP_pulse = 0;
  805a90:	e0bfff17 	ldw	r2,-4(fp)
  805a94:	10000226 	beq	r2,zero,805aa0 <PMc_poll_and_clear_pulses+0x38>
  805a98:	e0bfff17 	ldw	r2,-4(fp)
  805a9c:	10000015 	stw	zero,0(r2)
    s_AP_pulse = 0;
  805aa0:	d0274f15 	stw	zero,-25284(gp)
}
  805aa4:	0001883a 	nop
  805aa8:	e037883a 	mov	sp,fp
  805aac:	df000017 	ldw	fp,0(sp)
  805ab0:	dec00104 	addi	sp,sp,4
  805ab4:	f800283a 	ret

00805ab8 <ms_now>:
static alt_u32  g_prev_keys = 0xFFFFFFFF; // init to all 1s (no press)

/* ▼ NEW: track ms for C-mode stepping */
static int g_c_last_ms = -1;

static inline alt_u32 ms_now(void){
  805ab8:	defff904 	addi	sp,sp,-28
  805abc:	dfc00615 	stw	ra,24(sp)
  805ac0:	df000515 	stw	fp,20(sp)
  805ac4:	dc400415 	stw	r17,16(sp)
  805ac8:	dc000315 	stw	r16,12(sp)
  805acc:	df000504 	addi	fp,sp,20
  alt_u64 t = alt_timestamp();
  805ad0:	08154000 	call	815400 <alt_timestamp>
  805ad4:	e0bffb15 	stw	r2,-20(fp)
  805ad8:	e03ffc15 	stw	zero,-16(fp)
  alt_u32 f = alt_timestamp_freq();
  805adc:	08154800 	call	815480 <alt_timestamp_freq>
  805ae0:	e0bffd15 	stw	r2,-12(fp)
  return (alt_u32)((t * 1000ULL) / (f ? f : 1));
  805ae4:	0180fa04 	movi	r6,1000
  805ae8:	000f883a 	mov	r7,zero
  805aec:	e13ffb17 	ldw	r4,-20(fp)
  805af0:	e17ffc17 	ldw	r5,-16(fp)
  805af4:	080631c0 	call	80631c <__muldi3>
  805af8:	1009883a 	mov	r4,r2
  805afc:	180b883a 	mov	r5,r3
  805b00:	2005883a 	mov	r2,r4
  805b04:	2807883a 	mov	r3,r5
  805b08:	e13ffd17 	ldw	r4,-12(fp)
  805b0c:	20000426 	beq	r4,zero,805b20 <ms_now+0x68>
  805b10:	e13ffd17 	ldw	r4,-12(fp)
  805b14:	2021883a 	mov	r16,r4
  805b18:	0023883a 	mov	r17,zero
  805b1c:	00000206 	br	805b28 <ms_now+0x70>
  805b20:	04000044 	movi	r16,1
  805b24:	0023883a 	mov	r17,zero
  805b28:	800d883a 	mov	r6,r16
  805b2c:	880f883a 	mov	r7,r17
  805b30:	1009883a 	mov	r4,r2
  805b34:	180b883a 	mov	r5,r3
  805b38:	080637c0 	call	80637c <__udivdi3>
  805b3c:	1009883a 	mov	r4,r2
  805b40:	180b883a 	mov	r5,r3
  805b44:	2005883a 	mov	r2,r4
  805b48:	2807883a 	mov	r3,r5
}
  805b4c:	e6fffe04 	addi	sp,fp,-8
  805b50:	dfc00317 	ldw	ra,12(sp)
  805b54:	df000217 	ldw	fp,8(sp)
  805b58:	dc400117 	ldw	r17,4(sp)
  805b5c:	dc000017 	ldw	r16,0(sp)
  805b60:	dec00404 	addi	sp,sp,16
  805b64:	f800283a 	ret

00805b68 <leds_show_mode>:

static void leds_show_mode(alt_u32 sw){
  805b68:	defffe04 	addi	sp,sp,-8
  805b6c:	df000115 	stw	fp,4(sp)
  805b70:	df000104 	addi	fp,sp,4
  805b74:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, (sw & 0x03));
  805b78:	e0bfff17 	ldw	r2,-4(fp)
  805b7c:	10c000cc 	andi	r3,r2,3
  805b80:	00804074 	movhi	r2,257
  805b84:	10842004 	addi	r2,r2,4224
  805b88:	10c00035 	stwio	r3,0(r2)
}
  805b8c:	0001883a 	nop
  805b90:	e037883a 	mov	sp,fp
  805b94:	df000017 	ldw	fp,0(sp)
  805b98:	dec00104 	addi	sp,sp,4
  805b9c:	f800283a 	ret

00805ba0 <leds_show_pace>:

static void leds_show_pace(int AP, int VP){
  805ba0:	defffc04 	addi	sp,sp,-16
  805ba4:	df000315 	stw	fp,12(sp)
  805ba8:	df000304 	addi	fp,sp,12
  805bac:	e13ffe15 	stw	r4,-8(fp)
  805bb0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 g = 0;
  805bb4:	e03ffd15 	stw	zero,-12(fp)
  if (AP) g |= 0x02; // LEDG1
  805bb8:	e0bffe17 	ldw	r2,-8(fp)
  805bbc:	10000326 	beq	r2,zero,805bcc <leds_show_pace+0x2c>
  805bc0:	e0bffd17 	ldw	r2,-12(fp)
  805bc4:	10800094 	ori	r2,r2,2
  805bc8:	e0bffd15 	stw	r2,-12(fp)
  if (VP) g |= 0x01; // LEDG0
  805bcc:	e0bfff17 	ldw	r2,-4(fp)
  805bd0:	10000326 	beq	r2,zero,805be0 <leds_show_pace+0x40>
  805bd4:	e0bffd17 	ldw	r2,-12(fp)
  805bd8:	10800054 	ori	r2,r2,1
  805bdc:	e0bffd15 	stw	r2,-12(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, g);
  805be0:	e0fffd17 	ldw	r3,-12(fp)
  805be4:	00804074 	movhi	r2,257
  805be8:	10841c04 	addi	r2,r2,4208
  805bec:	10c00035 	stwio	r3,0(r2)
}
  805bf0:	0001883a 	nop
  805bf4:	e037883a 	mov	sp,fp
  805bf8:	df000017 	ldw	fp,0(sp)
  805bfc:	dec00104 	addi	sp,sp,4
  805c00:	f800283a 	ret

00805c04 <handle_buttons_inputs_with_debug>:

// Buttons path: active‑low, edge‑detect presses
static void handle_buttons_inputs_with_debug(void){
  805c04:	defffb04 	addi	sp,sp,-20
  805c08:	dfc00415 	stw	ra,16(sp)
  805c0c:	df000315 	stw	fp,12(sp)
  805c10:	df000304 	addi	fp,sp,12
  alt_u32 keys = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
  805c14:	00804074 	movhi	r2,257
  805c18:	10842804 	addi	r2,r2,4256
  805c1c:	10800037 	ldwio	r2,0(r2)
  805c20:	e0bffd15 	stw	r2,-12(fp)
  int as_pressed =  ((g_prev_keys & 0x02) != 0) && ((keys & 0x02) == 0);
  805c24:	d0a00117 	ldw	r2,-32764(gp)
  805c28:	1080008c 	andi	r2,r2,2
  805c2c:	10000526 	beq	r2,zero,805c44 <handle_buttons_inputs_with_debug+0x40>
  805c30:	e0bffd17 	ldw	r2,-12(fp)
  805c34:	1080008c 	andi	r2,r2,2
  805c38:	1000021e 	bne	r2,zero,805c44 <handle_buttons_inputs_with_debug+0x40>
  805c3c:	00800044 	movi	r2,1
  805c40:	00000106 	br	805c48 <handle_buttons_inputs_with_debug+0x44>
  805c44:	0005883a 	mov	r2,zero
  805c48:	e0bffe15 	stw	r2,-8(fp)
  int vs_pressed =  ((g_prev_keys & 0x01) != 0) && ((keys & 0x01) == 0);
  805c4c:	d0a00117 	ldw	r2,-32764(gp)
  805c50:	1080004c 	andi	r2,r2,1
  805c54:	10000526 	beq	r2,zero,805c6c <handle_buttons_inputs_with_debug+0x68>
  805c58:	e0bffd17 	ldw	r2,-12(fp)
  805c5c:	1080004c 	andi	r2,r2,1
  805c60:	1000021e 	bne	r2,zero,805c6c <handle_buttons_inputs_with_debug+0x68>
  805c64:	00800044 	movi	r2,1
  805c68:	00000106 	br	805c70 <handle_buttons_inputs_with_debug+0x6c>
  805c6c:	0005883a 	mov	r2,zero
  805c70:	e0bfff15 	stw	r2,-4(fp)
  if (as_pressed){ g_pm.AS = 1; printf("[BTN] AS pressed (KEY1) @ %ums\n", ms_now()); }
  805c74:	e0bffe17 	ldw	r2,-8(fp)
  805c78:	10000926 	beq	r2,zero,805ca0 <handle_buttons_inputs_with_debug+0x9c>
  805c7c:	008020b4 	movhi	r2,130
  805c80:	10ac1804 	addi	r2,r2,-20384
  805c84:	00c00044 	movi	r3,1
  805c88:	10c03105 	stb	r3,196(r2)
  805c8c:	0805ab80 	call	805ab8 <ms_now>
  805c90:	100b883a 	mov	r5,r2
  805c94:	01002074 	movhi	r4,129
  805c98:	211bbb04 	addi	r4,r4,28396
  805c9c:	080a5700 	call	80a570 <printf>
  if (vs_pressed){ g_pm.VS = 1; printf("[BTN] VS pressed (KEY0) @ %ums\n", ms_now()); }
  805ca0:	e0bfff17 	ldw	r2,-4(fp)
  805ca4:	10000926 	beq	r2,zero,805ccc <handle_buttons_inputs_with_debug+0xc8>
  805ca8:	008020b4 	movhi	r2,130
  805cac:	10ac1804 	addi	r2,r2,-20384
  805cb0:	00c00044 	movi	r3,1
  805cb4:	10c03145 	stb	r3,197(r2)
  805cb8:	0805ab80 	call	805ab8 <ms_now>
  805cbc:	100b883a 	mov	r5,r2
  805cc0:	01002074 	movhi	r4,129
  805cc4:	211bc304 	addi	r4,r4,28428
  805cc8:	080a5700 	call	80a570 <printf>
  g_prev_keys = keys;
  805ccc:	e0bffd17 	ldw	r2,-12(fp)
  805cd0:	d0a00115 	stw	r2,-32764(gp)
}
  805cd4:	0001883a 	nop
  805cd8:	e037883a 	mov	sp,fp
  805cdc:	dfc00117 	ldw	ra,4(sp)
  805ce0:	df000017 	ldw	fp,0(sp)
  805ce4:	dec00204 	addi	sp,sp,8
  805ce8:	f800283a 	ret

00805cec <handle_uart_inputs>:

static void handle_uart_inputs(void){
  805cec:	defffc04 	addi	sp,sp,-16
  805cf0:	dfc00315 	stw	ra,12(sp)
  805cf4:	df000215 	stw	fp,8(sp)
  805cf8:	df000204 	addi	fp,sp,8
  char ch; int n;
  while ((n = read(g_uart_fd, &ch, 1)) > 0){
  805cfc:	00002006 	br	805d80 <handle_uart_inputs+0x94>
    if (ch == 'A' || ch == 'a') g_pm.AS = 1;
  805d00:	e0bfff03 	ldbu	r2,-4(fp)
  805d04:	10803fcc 	andi	r2,r2,255
  805d08:	1080201c 	xori	r2,r2,128
  805d0c:	10bfe004 	addi	r2,r2,-128
  805d10:	10801060 	cmpeqi	r2,r2,65
  805d14:	1000061e 	bne	r2,zero,805d30 <handle_uart_inputs+0x44>
  805d18:	e0bfff03 	ldbu	r2,-4(fp)
  805d1c:	10803fcc 	andi	r2,r2,255
  805d20:	1080201c 	xori	r2,r2,128
  805d24:	10bfe004 	addi	r2,r2,-128
  805d28:	10801858 	cmpnei	r2,r2,97
  805d2c:	1000041e 	bne	r2,zero,805d40 <handle_uart_inputs+0x54>
  805d30:	008020b4 	movhi	r2,130
  805d34:	10ac1804 	addi	r2,r2,-20384
  805d38:	00c00044 	movi	r3,1
  805d3c:	10c03105 	stb	r3,196(r2)
    if (ch == 'V' || ch == 'v') g_pm.VS = 1;
  805d40:	e0bfff03 	ldbu	r2,-4(fp)
  805d44:	10803fcc 	andi	r2,r2,255
  805d48:	1080201c 	xori	r2,r2,128
  805d4c:	10bfe004 	addi	r2,r2,-128
  805d50:	108015a0 	cmpeqi	r2,r2,86
  805d54:	1000061e 	bne	r2,zero,805d70 <handle_uart_inputs+0x84>
  805d58:	e0bfff03 	ldbu	r2,-4(fp)
  805d5c:	10803fcc 	andi	r2,r2,255
  805d60:	1080201c 	xori	r2,r2,128
  805d64:	10bfe004 	addi	r2,r2,-128
  805d68:	10801d98 	cmpnei	r2,r2,118
  805d6c:	1000041e 	bne	r2,zero,805d80 <handle_uart_inputs+0x94>
  805d70:	008020b4 	movhi	r2,130
  805d74:	10ac1804 	addi	r2,r2,-20384
  805d78:	00c00044 	movi	r3,1
  805d7c:	10c03145 	stb	r3,197(r2)
  g_prev_keys = keys;
}

static void handle_uart_inputs(void){
  char ch; int n;
  while ((n = read(g_uart_fd, &ch, 1)) > 0){
  805d80:	d0a00017 	ldw	r2,-32768(gp)
  805d84:	e0ffff04 	addi	r3,fp,-4
  805d88:	01800044 	movi	r6,1
  805d8c:	180b883a 	mov	r5,r3
  805d90:	1009883a 	mov	r4,r2
  805d94:	08134f00 	call	8134f0 <read>
  805d98:	e0bffe15 	stw	r2,-8(fp)
  805d9c:	e0bffe17 	ldw	r2,-8(fp)
  805da0:	00bfd716 	blt	zero,r2,805d00 <__alt_mem_onchip_mem+0xff7fdd00>
    if (ch == 'A' || ch == 'a') g_pm.AS = 1;
    if (ch == 'V' || ch == 'v') g_pm.VS = 1;
  }
}
  805da4:	0001883a 	nop
  805da8:	e037883a 	mov	sp,fp
  805dac:	dfc00117 	ldw	ra,4(sp)
  805db0:	df000017 	ldw	fp,0(sp)
  805db4:	dec00204 	addi	sp,sp,8
  805db8:	f800283a 	ret

00805dbc <uart_send_probe>:

static void uart_send_probe(void){
  805dbc:	defffc04 	addi	sp,sp,-16
  805dc0:	dfc00315 	stw	ra,12(sp)
  805dc4:	df000215 	stw	fp,8(sp)
  805dc8:	dc000115 	stw	r16,4(sp)
  805dcc:	df000204 	addi	fp,sp,8
  if (g_uart_fd >= 0) {
  805dd0:	d0a00017 	ldw	r2,-32768(gp)
  805dd4:	10000a16 	blt	r2,zero,805e00 <uart_send_probe+0x44>
    const char *probe = "HELLO_FROM_BOARD\r\n";
  805dd8:	00802074 	movhi	r2,129
  805ddc:	109bcb04 	addi	r2,r2,28460
  805de0:	e0bffe15 	stw	r2,-8(fp)
    (void)write(g_uart_fd, probe, (int)strlen(probe));
  805de4:	d4200017 	ldw	r16,-32768(gp)
  805de8:	e13ffe17 	ldw	r4,-8(fp)
  805dec:	080a8100 	call	80a810 <strlen>
  805df0:	100d883a 	mov	r6,r2
  805df4:	e17ffe17 	ldw	r5,-8(fp)
  805df8:	8009883a 	mov	r4,r16
  805dfc:	081373c0 	call	81373c <write>
  }
}
  805e00:	0001883a 	nop
  805e04:	e6ffff04 	addi	sp,fp,-4
  805e08:	dfc00217 	ldw	ra,8(sp)
  805e0c:	df000117 	ldw	fp,4(sp)
  805e10:	dc000017 	ldw	r16,0(sp)
  805e14:	dec00304 	addi	sp,sp,12
  805e18:	f800283a 	ret

00805e1c <uart_send_pace_bytes_if_enabled>:

static void uart_send_pace_bytes_if_enabled(int uart_enabled, int AP, int VP){
  805e1c:	defffa04 	addi	sp,sp,-24
  805e20:	dfc00515 	stw	ra,20(sp)
  805e24:	df000415 	stw	fp,16(sp)
  805e28:	df000404 	addi	fp,sp,16
  805e2c:	e13ffd15 	stw	r4,-12(fp)
  805e30:	e17ffe15 	stw	r5,-8(fp)
  805e34:	e1bfff15 	stw	r6,-4(fp)
  if (!uart_enabled || g_uart_fd < 0) return;
  805e38:	e0bffd17 	ldw	r2,-12(fp)
  805e3c:	10001626 	beq	r2,zero,805e98 <uart_send_pace_bytes_if_enabled+0x7c>
  805e40:	d0a00017 	ldw	r2,-32768(gp)
  805e44:	10001416 	blt	r2,zero,805e98 <uart_send_pace_bytes_if_enabled+0x7c>
  if (AP) { const char A = 'A'; (void)write(g_uart_fd, &A, 1); }
  805e48:	e0bffe17 	ldw	r2,-8(fp)
  805e4c:	10000726 	beq	r2,zero,805e6c <uart_send_pace_bytes_if_enabled+0x50>
  805e50:	00801044 	movi	r2,65
  805e54:	e0bffc05 	stb	r2,-16(fp)
  805e58:	d0a00017 	ldw	r2,-32768(gp)
  805e5c:	01800044 	movi	r6,1
  805e60:	e17ffc04 	addi	r5,fp,-16
  805e64:	1009883a 	mov	r4,r2
  805e68:	081373c0 	call	81373c <write>
  if (VP) { const char V = 'V'; (void)write(g_uart_fd, &V, 1); }
  805e6c:	e0bfff17 	ldw	r2,-4(fp)
  805e70:	10000a26 	beq	r2,zero,805e9c <uart_send_pace_bytes_if_enabled+0x80>
  805e74:	00801584 	movi	r2,86
  805e78:	e0bffc45 	stb	r2,-15(fp)
  805e7c:	d0a00017 	ldw	r2,-32768(gp)
  805e80:	e0fffc44 	addi	r3,fp,-15
  805e84:	01800044 	movi	r6,1
  805e88:	180b883a 	mov	r5,r3
  805e8c:	1009883a 	mov	r4,r2
  805e90:	081373c0 	call	81373c <write>
  805e94:	00000106 	br	805e9c <uart_send_pace_bytes_if_enabled+0x80>
    (void)write(g_uart_fd, probe, (int)strlen(probe));
  }
}

static void uart_send_pace_bytes_if_enabled(int uart_enabled, int AP, int VP){
  if (!uart_enabled || g_uart_fd < 0) return;
  805e98:	0001883a 	nop
  if (AP) { const char A = 'A'; (void)write(g_uart_fd, &A, 1); }
  if (VP) { const char V = 'V'; (void)write(g_uart_fd, &V, 1); }
}
  805e9c:	e037883a 	mov	sp,fp
  805ea0:	dfc00117 	ldw	ra,4(sp)
  805ea4:	df000017 	ldw	fp,0(sp)
  805ea8:	dec00204 	addi	sp,sp,8
  805eac:	f800283a 	ret

00805eb0 <heartbeat_stdout>:

static void heartbeat_stdout(void){
  805eb0:	defffd04 	addi	sp,sp,-12
  805eb4:	dfc00215 	stw	ra,8(sp)
  805eb8:	df000115 	stw	fp,4(sp)
  805ebc:	df000104 	addi	fp,sp,4
  alt_u32 now = ms_now();
  805ec0:	0805ab80 	call	805ab8 <ms_now>
  805ec4:	e0bfff15 	stw	r2,-4(fp)
  if (now - g_last_hb_ms >= HEARTBEAT_MS){
  805ec8:	d0a75117 	ldw	r2,-25276(gp)
  805ecc:	e0ffff17 	ldw	r3,-4(fp)
  805ed0:	1885c83a 	sub	r2,r3,r2
  805ed4:	1080fa30 	cmpltui	r2,r2,1000
  805ed8:	10000a1e 	bne	r2,zero,805f04 <heartbeat_stdout+0x54>
    g_last_hb_ms = now;
  805edc:	e0bfff17 	ldw	r2,-4(fp)
  805ee0:	d0a75115 	stw	r2,-25276(gp)
    printf("[HB] t=%ums\n", now);
  805ee4:	e17fff17 	ldw	r5,-4(fp)
  805ee8:	01002074 	movhi	r4,129
  805eec:	211bd004 	addi	r4,r4,28480
  805ef0:	080a5700 	call	80a570 <printf>
    fflush(stdout);
  805ef4:	d0a00417 	ldw	r2,-32752(gp)
  805ef8:	10800217 	ldw	r2,8(r2)
  805efc:	1009883a 	mov	r4,r2
  805f00:	08092800 	call	809280 <fflush>
  }
}
  805f04:	0001883a 	nop
  805f08:	e037883a 	mov	sp,fp
  805f0c:	dfc00117 	ldw	ra,4(sp)
  805f10:	df000017 	ldw	fp,0(sp)
  805f14:	dec00204 	addi	sp,sp,8
  805f18:	f800283a 	ret

00805f1c <main>:

int main(void){
  805f1c:	deffee04 	addi	sp,sp,-72
  805f20:	dfc01115 	stw	ra,68(sp)
  805f24:	df001015 	stw	fp,64(sp)
  805f28:	dc400f15 	stw	r17,60(sp)
  805f2c:	dc000e15 	stw	r16,56(sp)
  805f30:	df001004 	addi	fp,sp,64
  reset(&g_pm);
  805f34:	010020b4 	movhi	r4,130
  805f38:	212c1804 	addi	r4,r4,-20384
  805f3c:	080545c0 	call	80545c <reset>

  if (alt_timestamp_start() < 0){
  805f40:	08153880 	call	815388 <alt_timestamp_start>
  805f44:	1000030e 	bge	r2,zero,805f54 <main+0x38>
    printf("[ERR] alt_timestamp_start failed\n");
  805f48:	01002074 	movhi	r4,129
  805f4c:	211bd404 	addi	r4,r4,28496
  805f50:	080a66c0 	call	80a66c <puts>
  }
  g_last_tick = alt_timestamp();
  805f54:	08154000 	call	815400 <alt_timestamp>
  805f58:	d0a75015 	stw	r2,-25280(gp)
  g_last_hb_ms = 0;
  805f5c:	d0275115 	stw	zero,-25276(gp)
  g_prev_keys = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
  805f60:	00804074 	movhi	r2,257
  805f64:	10842804 	addi	r2,r2,4256
  805f68:	10800037 	ldwio	r2,0(r2)
  805f6c:	d0a00115 	stw	r2,-32764(gp)

  /* ▼ NEW: init C-mode engine */
  PMc_init();
  805f70:	08059840 	call	805984 <PMc_init>
  g_c_last_ms = ms_now();
  805f74:	0805ab80 	call	805ab8 <ms_now>
  805f78:	d0a00215 	stw	r2,-32760(gp)

  printf("\n==== COMPSYS303 Pacemaker (SCCharts + C-mode) ====\n");
  805f7c:	01002074 	movhi	r4,129
  805f80:	211bdd04 	addi	r4,r4,28532
  805f84:	080a66c0 	call	80a66c <puts>
  printf("UART dev: %s (115200 8N1)\n", UART_NAME);
  805f88:	01402074 	movhi	r5,129
  805f8c:	295bea04 	addi	r5,r5,28584
  805f90:	01002074 	movhi	r4,129
  805f94:	211bed04 	addi	r4,r4,28596
  805f98:	080a5700 	call	80a570 <printf>
  printf("Timings: AVI=%d AEI=%d PVARP=%d VRP=%d LRI=%d URI=%d (ms)\n",
  805f9c:	d8000215 	stw	zero,8(sp)
  805fa0:	0080ed84 	movi	r2,950
  805fa4:	d8800115 	stw	r2,4(sp)
  805fa8:	00802584 	movi	r2,150
  805fac:	d8800015 	stw	r2,0(sp)
  805fb0:	01c00c84 	movi	r7,50
  805fb4:	0180c804 	movi	r6,800
  805fb8:	01404b04 	movi	r5,300
  805fbc:	01002074 	movhi	r4,129
  805fc0:	211bf404 	addi	r4,r4,28624
  805fc4:	080a5700 	call	80a570 <printf>
         AVI_VALUE, AEI_VALUE, PVARP_VALUE, VRP_VALUE, LRI_VALUE, URI_VALUE);
  printf("SW0: 0=SCCharts,1=C  |  SW1: 0=Buttons,1=UART\n");
  805fc8:	01002074 	movhi	r4,129
  805fcc:	211c0304 	addi	r4,r4,28684
  805fd0:	080a66c0 	call	80a66c <puts>
  fflush(stdout);
  805fd4:	d0a00417 	ldw	r2,-32752(gp)
  805fd8:	10800217 	ldw	r2,8(r2)
  805fdc:	1009883a 	mov	r4,r2
  805fe0:	08092800 	call	809280 <fflush>

  g_uart_fd = open(UART_NAME, O_RDWR | O_NONBLOCK);
  805fe4:	01500084 	movi	r5,16386
  805fe8:	01002074 	movhi	r4,129
  805fec:	211bea04 	addi	r4,r4,28584
  805ff0:	08133600 	call	813360 <open>
  805ff4:	d0a00015 	stw	r2,-32768(gp)
  if (g_uart_fd < 0) {
  805ff8:	d0a00017 	ldw	r2,-32768(gp)
  805ffc:	1000060e 	bge	r2,zero,806018 <main+0xfc>
    printf("[ERR] open(%s) failed — check SOPC name/pins/cable.\n", UART_NAME);
  806000:	01402074 	movhi	r5,129
  806004:	295bea04 	addi	r5,r5,28584
  806008:	01002074 	movhi	r4,129
  80600c:	211c0f04 	addi	r4,r4,28732
  806010:	080a5700 	call	80a570 <printf>
  806014:	00000606 	br	806030 <main+0x114>
  } else {
    printf("[OK ] %s opened.\n", UART_NAME);
  806018:	01402074 	movhi	r5,129
  80601c:	295bea04 	addi	r5,r5,28584
  806020:	01002074 	movhi	r4,129
  806024:	211c1d04 	addi	r4,r4,28788
  806028:	080a5700 	call	80a570 <printf>
    uart_send_probe();
  80602c:	0805dbc0 	call	805dbc <uart_send_probe>
  }
  fflush(stdout);
  806030:	d0a00417 	ldw	r2,-32752(gp)
  806034:	10800217 	ldw	r2,8(r2)
  806038:	1009883a 	mov	r4,r2
  80603c:	08092800 	call	809280 <fflush>

  while (1){
    alt_u32 sw = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  806040:	00804074 	movhi	r2,257
  806044:	10842404 	addi	r2,r2,4240
  806048:	10800037 	ldwio	r2,0(r2)
  80604c:	e0bff415 	stw	r2,-48(fp)
    leds_show_mode(sw);
  806050:	e13ff417 	ldw	r4,-48(fp)
  806054:	0805b680 	call	805b68 <leds_show_mode>

    int sccharts_mode = ((sw & 0x01) == 0); // SW0=0 -> SCCharts
  806058:	e0bff417 	ldw	r2,-48(fp)
  80605c:	1080004c 	andi	r2,r2,1
  806060:	1005003a 	cmpeq	r2,r2,zero
  806064:	10803fcc 	andi	r2,r2,255
  806068:	e0bff515 	stw	r2,-44(fp)
    int uart_source   = ((sw & 0x02) != 0); // SW1=1 -> UART
  80606c:	e0bff417 	ldw	r2,-48(fp)
  806070:	1080008c 	andi	r2,r2,2
  806074:	1004c03a 	cmpne	r2,r2,zero
  806078:	10803fcc 	andi	r2,r2,255
  80607c:	e0bff615 	stw	r2,-40(fp)

    alt_u32 now_ticks = alt_timestamp();
  806080:	08154000 	call	815400 <alt_timestamp>
  806084:	e0bff715 	stw	r2,-36(fp)
    alt_u32 elapsed   = now_ticks - g_last_tick;
  806088:	d0a75017 	ldw	r2,-25280(gp)
  80608c:	e0fff717 	ldw	r3,-36(fp)
  806090:	1885c83a 	sub	r2,r3,r2
  806094:	e0bff815 	stw	r2,-32(fp)
    g_last_tick       = now_ticks;
  806098:	e0bff717 	ldw	r2,-36(fp)
  80609c:	d0a75015 	stw	r2,-25280(gp)
    g_pm.deltaT = (double)elapsed * 1000.0 / (double)alt_timestamp_freq();
  8060a0:	e13ff817 	ldw	r4,-32(fp)
  8060a4:	0808efc0 	call	808efc <__floatunsidf>
  8060a8:	1011883a 	mov	r8,r2
  8060ac:	1813883a 	mov	r9,r3
  8060b0:	000d883a 	mov	r6,zero
  8060b4:	01d023f4 	movhi	r7,16527
  8060b8:	39d00004 	addi	r7,r7,16384
  8060bc:	4009883a 	mov	r4,r8
  8060c0:	480b883a 	mov	r5,r9
  8060c4:	0807e0c0 	call	807e0c <__muldf3>
  8060c8:	1009883a 	mov	r4,r2
  8060cc:	180b883a 	mov	r5,r3
  8060d0:	2021883a 	mov	r16,r4
  8060d4:	2823883a 	mov	r17,r5
  8060d8:	08154800 	call	815480 <alt_timestamp_freq>
  8060dc:	1009883a 	mov	r4,r2
  8060e0:	0808efc0 	call	808efc <__floatunsidf>
  8060e4:	1009883a 	mov	r4,r2
  8060e8:	180b883a 	mov	r5,r3
  8060ec:	200d883a 	mov	r6,r4
  8060f0:	280f883a 	mov	r7,r5
  8060f4:	8009883a 	mov	r4,r16
  8060f8:	880b883a 	mov	r5,r17
  8060fc:	08073540 	call	807354 <__divdf3>
  806100:	100b883a 	mov	r5,r2
  806104:	180d883a 	mov	r6,r3
  806108:	2807883a 	mov	r3,r5
  80610c:	3009883a 	mov	r4,r6
  806110:	008020b4 	movhi	r2,130
  806114:	10ac1804 	addi	r2,r2,-20384
  806118:	10c02d15 	stw	r3,180(r2)
  80611c:	11002e15 	stw	r4,184(r2)

    if (sccharts_mode){
  806120:	e0bff517 	ldw	r2,-44(fp)
  806124:	10002e26 	beq	r2,zero,8061e0 <main+0x2c4>
      if (uart_source) { handle_uart_inputs(); } else { handle_buttons_inputs_with_debug(); }
  806128:	e0bff617 	ldw	r2,-40(fp)
  80612c:	10000226 	beq	r2,zero,806138 <main+0x21c>
  806130:	0805cec0 	call	805cec <handle_uart_inputs>
  806134:	00000106 	br	80613c <main+0x220>
  806138:	0805c040 	call	805c04 <handle_buttons_inputs_with_debug>

      tick(&g_pm);
  80613c:	010020b4 	movhi	r4,130
  806140:	212c1804 	addi	r4,r4,-20384
  806144:	08057280 	call	805728 <tick>
      leds_show_pace(g_pm.AP, g_pm.VP);
  806148:	008020b4 	movhi	r2,130
  80614c:	10ac1804 	addi	r2,r2,-20384
  806150:	10803183 	ldbu	r2,198(r2)
  806154:	10c03fcc 	andi	r3,r2,255
  806158:	18c0201c 	xori	r3,r3,128
  80615c:	18ffe004 	addi	r3,r3,-128
  806160:	008020b4 	movhi	r2,130
  806164:	10ac1804 	addi	r2,r2,-20384
  806168:	108031c3 	ldbu	r2,199(r2)
  80616c:	10803fcc 	andi	r2,r2,255
  806170:	1080201c 	xori	r2,r2,128
  806174:	10bfe004 	addi	r2,r2,-128
  806178:	100b883a 	mov	r5,r2
  80617c:	1809883a 	mov	r4,r3
  806180:	0805ba00 	call	805ba0 <leds_show_pace>
      uart_send_pace_bytes_if_enabled(uart_source, g_pm.AP, g_pm.VP);
  806184:	008020b4 	movhi	r2,130
  806188:	10ac1804 	addi	r2,r2,-20384
  80618c:	10803183 	ldbu	r2,198(r2)
  806190:	10c03fcc 	andi	r3,r2,255
  806194:	18c0201c 	xori	r3,r3,128
  806198:	18ffe004 	addi	r3,r3,-128
  80619c:	008020b4 	movhi	r2,130
  8061a0:	10ac1804 	addi	r2,r2,-20384
  8061a4:	108031c3 	ldbu	r2,199(r2)
  8061a8:	10803fcc 	andi	r2,r2,255
  8061ac:	1080201c 	xori	r2,r2,128
  8061b0:	10bfe004 	addi	r2,r2,-128
  8061b4:	100d883a 	mov	r6,r2
  8061b8:	180b883a 	mov	r5,r3
  8061bc:	e13ff617 	ldw	r4,-40(fp)
  8061c0:	0805e1c0 	call	805e1c <uart_send_pace_bytes_if_enabled>

      g_pm.AS = 0;
  8061c4:	008020b4 	movhi	r2,130
  8061c8:	10ac1804 	addi	r2,r2,-20384
  8061cc:	10003105 	stb	zero,196(r2)
      g_pm.VS = 0;
  8061d0:	008020b4 	movhi	r2,130
  8061d4:	10ac1804 	addi	r2,r2,-20384
  8061d8:	10003145 	stb	zero,197(r2)
  8061dc:	00004d06 	br	806314 <main+0x3f8>
    } else {
      /* ▼ C-mode path using Pacemaker_C */
      if (uart_source) { handle_uart_inputs(); } else { handle_buttons_inputs_with_debug(); }
  8061e0:	e0bff617 	ldw	r2,-40(fp)
  8061e4:	10000226 	beq	r2,zero,8061f0 <main+0x2d4>
  8061e8:	0805cec0 	call	805cec <handle_uart_inputs>
  8061ec:	00000106 	br	8061f4 <main+0x2d8>
  8061f0:	0805c040 	call	805c04 <handle_buttons_inputs_with_debug>

      int as = g_pm.AS; // 1-tick pulses captured by input handlers
  8061f4:	008020b4 	movhi	r2,130
  8061f8:	10ac1804 	addi	r2,r2,-20384
  8061fc:	10803103 	ldbu	r2,196(r2)
  806200:	10803fcc 	andi	r2,r2,255
  806204:	1080201c 	xori	r2,r2,128
  806208:	10bfe004 	addi	r2,r2,-128
  80620c:	e0bff915 	stw	r2,-28(fp)
      int vs = g_pm.VS;
  806210:	008020b4 	movhi	r2,130
  806214:	10ac1804 	addi	r2,r2,-20384
  806218:	10803143 	ldbu	r2,197(r2)
  80621c:	10803fcc 	andi	r2,r2,255
  806220:	1080201c 	xori	r2,r2,128
  806224:	10bfe004 	addi	r2,r2,-128
  806228:	e0bffa15 	stw	r2,-24(fp)
      g_pm.AS = g_pm.VS = 0; // consumed
  80622c:	008020b4 	movhi	r2,130
  806230:	10ac1804 	addi	r2,r2,-20384
  806234:	10003145 	stb	zero,197(r2)
  806238:	008020b4 	movhi	r2,130
  80623c:	10ac1804 	addi	r2,r2,-20384
  806240:	10c03143 	ldbu	r3,197(r2)
  806244:	008020b4 	movhi	r2,130
  806248:	10ac1804 	addi	r2,r2,-20384
  80624c:	10c03105 	stb	r3,196(r2)

      PMc_set_senses(as, vs);
  806250:	e17ffa17 	ldw	r5,-24(fp)
  806254:	e13ff917 	ldw	r4,-28(fp)
  806258:	08059cc0 	call	8059cc <PMc_set_senses>

      int now_ms = (int)ms_now();
  80625c:	0805ab80 	call	805ab8 <ms_now>
  806260:	e0bffb15 	stw	r2,-20(fp)
      int elapsed_ms = (g_c_last_ms < 0) ? 1 : (now_ms - g_c_last_ms);
  806264:	d0a00217 	ldw	r2,-32760(gp)
  806268:	10000416 	blt	r2,zero,80627c <main+0x360>
  80626c:	d0a00217 	ldw	r2,-32760(gp)
  806270:	e0fffb17 	ldw	r3,-20(fp)
  806274:	1885c83a 	sub	r2,r3,r2
  806278:	00000106 	br	806280 <main+0x364>
  80627c:	00800044 	movi	r2,1
  806280:	e0bff315 	stw	r2,-52(fp)
      if (elapsed_ms < 0) elapsed_ms = 0;           // guard wrap
  806284:	e0bff317 	ldw	r2,-52(fp)
  806288:	1000010e 	bge	r2,zero,806290 <main+0x374>
  80628c:	e03ff315 	stw	zero,-52(fp)
      if (elapsed_ms > 20) elapsed_ms = 20;         // clamp to keep loop responsive
  806290:	e0bff317 	ldw	r2,-52(fp)
  806294:	10800550 	cmplti	r2,r2,21
  806298:	1000021e 	bne	r2,zero,8062a4 <main+0x388>
  80629c:	00800504 	movi	r2,20
  8062a0:	e0bff315 	stw	r2,-52(fp)
      g_c_last_ms = now_ms;
  8062a4:	e0bffb17 	ldw	r2,-20(fp)
  8062a8:	d0a00215 	stw	r2,-32760(gp)

      PMc_run_for_elapsed_ms(elapsed_ms);
  8062ac:	e13ff317 	ldw	r4,-52(fp)
  8062b0:	08059f40 	call	8059f4 <PMc_run_for_elapsed_ms>

      int AP=0, VP=0;
  8062b4:	e03ffc15 	stw	zero,-16(fp)
  8062b8:	e03ffd15 	stw	zero,-12(fp)
      PMc_poll_and_clear_pulses(&AP, &VP);
  8062bc:	e0fffd04 	addi	r3,fp,-12
  8062c0:	e0bffc04 	addi	r2,fp,-16
  8062c4:	180b883a 	mov	r5,r3
  8062c8:	1009883a 	mov	r4,r2
  8062cc:	0805a680 	call	805a68 <PMc_poll_and_clear_pulses>

      leds_show_pace(AP, VP);
  8062d0:	e0bffc17 	ldw	r2,-16(fp)
  8062d4:	e0fffd17 	ldw	r3,-12(fp)
  8062d8:	180b883a 	mov	r5,r3
  8062dc:	1009883a 	mov	r4,r2
  8062e0:	0805ba00 	call	805ba0 <leds_show_pace>
      uart_send_pace_bytes_if_enabled(uart_source, AP, VP);
  8062e4:	e0bffc17 	ldw	r2,-16(fp)
  8062e8:	e0fffd17 	ldw	r3,-12(fp)
  8062ec:	180d883a 	mov	r6,r3
  8062f0:	100b883a 	mov	r5,r2
  8062f4:	e13ff617 	ldw	r4,-40(fp)
  8062f8:	0805e1c0 	call	805e1c <uart_send_pace_bytes_if_enabled>

      if (AP) printf("[C ] AP fired after AEI=%dms (VS/VP earlier)\n", AEI_VALUE);
  8062fc:	e0bffc17 	ldw	r2,-16(fp)
  806300:	10000426 	beq	r2,zero,806314 <main+0x3f8>
  806304:	0140c804 	movi	r5,800
  806308:	01002074 	movhi	r4,129
  80630c:	211c2204 	addi	r4,r4,28808
  806310:	080a5700 	call	80a570 <printf>
    }

    heartbeat_stdout();
  806314:	0805eb00 	call	805eb0 <heartbeat_stdout>
  }
  806318:	003f4906 	br	806040 <__alt_mem_onchip_mem+0xff7fe040>

0080631c <__muldi3>:
  80631c:	223fffcc 	andi	r8,r4,65535
  806320:	2006d43a 	srli	r3,r4,16
  806324:	32bfffcc 	andi	r10,r6,65535
  806328:	3012d43a 	srli	r9,r6,16
  80632c:	4297383a 	mul	r11,r8,r10
  806330:	1a95383a 	mul	r10,r3,r10
  806334:	4251383a 	mul	r8,r8,r9
  806338:	5804d43a 	srli	r2,r11,16
  80633c:	4291883a 	add	r8,r8,r10
  806340:	1205883a 	add	r2,r2,r8
  806344:	1a51383a 	mul	r8,r3,r9
  806348:	1280022e 	bgeu	r2,r10,806354 <__muldi3+0x38>
  80634c:	00c00074 	movhi	r3,1
  806350:	40d1883a 	add	r8,r8,r3
  806354:	1006d43a 	srli	r3,r2,16
  806358:	21cf383a 	mul	r7,r4,r7
  80635c:	314b383a 	mul	r5,r6,r5
  806360:	1004943a 	slli	r2,r2,16
  806364:	1a11883a 	add	r8,r3,r8
  806368:	5affffcc 	andi	r11,r11,65535
  80636c:	3947883a 	add	r3,r7,r5
  806370:	12c5883a 	add	r2,r2,r11
  806374:	1a07883a 	add	r3,r3,r8
  806378:	f800283a 	ret

0080637c <__udivdi3>:
  80637c:	defff504 	addi	sp,sp,-44
  806380:	dcc00415 	stw	r19,16(sp)
  806384:	dc000115 	stw	r16,4(sp)
  806388:	dfc00a15 	stw	ra,40(sp)
  80638c:	df000915 	stw	fp,36(sp)
  806390:	ddc00815 	stw	r23,32(sp)
  806394:	dd800715 	stw	r22,28(sp)
  806398:	dd400615 	stw	r21,24(sp)
  80639c:	dd000515 	stw	r20,20(sp)
  8063a0:	dc800315 	stw	r18,12(sp)
  8063a4:	dc400215 	stw	r17,8(sp)
  8063a8:	2027883a 	mov	r19,r4
  8063ac:	2821883a 	mov	r16,r5
  8063b0:	3800411e 	bne	r7,zero,8064b8 <__udivdi3+0x13c>
  8063b4:	3023883a 	mov	r17,r6
  8063b8:	2025883a 	mov	r18,r4
  8063bc:	2980522e 	bgeu	r5,r6,806508 <__udivdi3+0x18c>
  8063c0:	00bfffd4 	movui	r2,65535
  8063c4:	282d883a 	mov	r22,r5
  8063c8:	1180a836 	bltu	r2,r6,80666c <__udivdi3+0x2f0>
  8063cc:	00803fc4 	movi	r2,255
  8063d0:	1185803a 	cmpltu	r2,r2,r6
  8063d4:	100490fa 	slli	r2,r2,3
  8063d8:	3086d83a 	srl	r3,r6,r2
  8063dc:	01002074 	movhi	r4,129
  8063e0:	211c2d84 	addi	r4,r4,28854
  8063e4:	20c7883a 	add	r3,r4,r3
  8063e8:	18c00003 	ldbu	r3,0(r3)
  8063ec:	1885883a 	add	r2,r3,r2
  8063f0:	00c00804 	movi	r3,32
  8063f4:	1887c83a 	sub	r3,r3,r2
  8063f8:	18000526 	beq	r3,zero,806410 <__udivdi3+0x94>
  8063fc:	80e0983a 	sll	r16,r16,r3
  806400:	9884d83a 	srl	r2,r19,r2
  806404:	30e2983a 	sll	r17,r6,r3
  806408:	98e4983a 	sll	r18,r19,r3
  80640c:	142cb03a 	or	r22,r2,r16
  806410:	882ad43a 	srli	r21,r17,16
  806414:	b009883a 	mov	r4,r22
  806418:	8d3fffcc 	andi	r20,r17,65535
  80641c:	a80b883a 	mov	r5,r21
  806420:	0806a500 	call	806a50 <__umodsi3>
  806424:	b009883a 	mov	r4,r22
  806428:	a80b883a 	mov	r5,r21
  80642c:	1027883a 	mov	r19,r2
  806430:	08069ec0 	call	8069ec <__udivsi3>
  806434:	102d883a 	mov	r22,r2
  806438:	9826943a 	slli	r19,r19,16
  80643c:	9004d43a 	srli	r2,r18,16
  806440:	a5a1383a 	mul	r16,r20,r22
  806444:	14c4b03a 	or	r2,r2,r19
  806448:	1400052e 	bgeu	r2,r16,806460 <__udivdi3+0xe4>
  80644c:	1445883a 	add	r2,r2,r17
  806450:	b0ffffc4 	addi	r3,r22,-1
  806454:	14400136 	bltu	r2,r17,80645c <__udivdi3+0xe0>
  806458:	14012336 	bltu	r2,r16,8068e8 <__udivdi3+0x56c>
  80645c:	182d883a 	mov	r22,r3
  806460:	1421c83a 	sub	r16,r2,r16
  806464:	a80b883a 	mov	r5,r21
  806468:	8009883a 	mov	r4,r16
  80646c:	0806a500 	call	806a50 <__umodsi3>
  806470:	1027883a 	mov	r19,r2
  806474:	a80b883a 	mov	r5,r21
  806478:	8009883a 	mov	r4,r16
  80647c:	08069ec0 	call	8069ec <__udivsi3>
  806480:	9826943a 	slli	r19,r19,16
  806484:	a0a9383a 	mul	r20,r20,r2
  806488:	94bfffcc 	andi	r18,r18,65535
  80648c:	94e4b03a 	or	r18,r18,r19
  806490:	9500052e 	bgeu	r18,r20,8064a8 <__udivdi3+0x12c>
  806494:	8ca5883a 	add	r18,r17,r18
  806498:	10ffffc4 	addi	r3,r2,-1
  80649c:	9440f136 	bltu	r18,r17,806864 <__udivdi3+0x4e8>
  8064a0:	9500f02e 	bgeu	r18,r20,806864 <__udivdi3+0x4e8>
  8064a4:	10bfff84 	addi	r2,r2,-2
  8064a8:	b00c943a 	slli	r6,r22,16
  8064ac:	0007883a 	mov	r3,zero
  8064b0:	3084b03a 	or	r2,r6,r2
  8064b4:	00005906 	br	80661c <__udivdi3+0x2a0>
  8064b8:	29c05636 	bltu	r5,r7,806614 <__udivdi3+0x298>
  8064bc:	00bfffd4 	movui	r2,65535
  8064c0:	11c0622e 	bgeu	r2,r7,80664c <__udivdi3+0x2d0>
  8064c4:	00804034 	movhi	r2,256
  8064c8:	10bfffc4 	addi	r2,r2,-1
  8064cc:	11c0ee36 	bltu	r2,r7,806888 <__udivdi3+0x50c>
  8064d0:	00800404 	movi	r2,16
  8064d4:	3886d83a 	srl	r3,r7,r2
  8064d8:	01002074 	movhi	r4,129
  8064dc:	211c2d84 	addi	r4,r4,28854
  8064e0:	20c7883a 	add	r3,r4,r3
  8064e4:	18c00003 	ldbu	r3,0(r3)
  8064e8:	05400804 	movi	r21,32
  8064ec:	1885883a 	add	r2,r3,r2
  8064f0:	a8abc83a 	sub	r21,r21,r2
  8064f4:	a800621e 	bne	r21,zero,806680 <__udivdi3+0x304>
  8064f8:	3c00e936 	bltu	r7,r16,8068a0 <__udivdi3+0x524>
  8064fc:	9985403a 	cmpgeu	r2,r19,r6
  806500:	0007883a 	mov	r3,zero
  806504:	00004506 	br	80661c <__udivdi3+0x2a0>
  806508:	3000041e 	bne	r6,zero,80651c <__udivdi3+0x1a0>
  80650c:	000b883a 	mov	r5,zero
  806510:	01000044 	movi	r4,1
  806514:	08069ec0 	call	8069ec <__udivsi3>
  806518:	1023883a 	mov	r17,r2
  80651c:	00bfffd4 	movui	r2,65535
  806520:	14404e2e 	bgeu	r2,r17,80665c <__udivdi3+0x2e0>
  806524:	00804034 	movhi	r2,256
  806528:	10bfffc4 	addi	r2,r2,-1
  80652c:	1440d836 	bltu	r2,r17,806890 <__udivdi3+0x514>
  806530:	00800404 	movi	r2,16
  806534:	8886d83a 	srl	r3,r17,r2
  806538:	01002074 	movhi	r4,129
  80653c:	211c2d84 	addi	r4,r4,28854
  806540:	20c7883a 	add	r3,r4,r3
  806544:	18c00003 	ldbu	r3,0(r3)
  806548:	1885883a 	add	r2,r3,r2
  80654c:	00c00804 	movi	r3,32
  806550:	1887c83a 	sub	r3,r3,r2
  806554:	18008f1e 	bne	r3,zero,806794 <__udivdi3+0x418>
  806558:	882ad43a 	srli	r21,r17,16
  80655c:	8461c83a 	sub	r16,r16,r17
  806560:	8d3fffcc 	andi	r20,r17,65535
  806564:	00c00044 	movi	r3,1
  806568:	8009883a 	mov	r4,r16
  80656c:	a80b883a 	mov	r5,r21
  806570:	d8c00015 	stw	r3,0(sp)
  806574:	0806a500 	call	806a50 <__umodsi3>
  806578:	8009883a 	mov	r4,r16
  80657c:	a80b883a 	mov	r5,r21
  806580:	1027883a 	mov	r19,r2
  806584:	08069ec0 	call	8069ec <__udivsi3>
  806588:	9826943a 	slli	r19,r19,16
  80658c:	9008d43a 	srli	r4,r18,16
  806590:	1521383a 	mul	r16,r2,r20
  806594:	102d883a 	mov	r22,r2
  806598:	24c8b03a 	or	r4,r4,r19
  80659c:	d8c00017 	ldw	r3,0(sp)
  8065a0:	2400052e 	bgeu	r4,r16,8065b8 <__udivdi3+0x23c>
  8065a4:	2449883a 	add	r4,r4,r17
  8065a8:	b0bfffc4 	addi	r2,r22,-1
  8065ac:	24400136 	bltu	r4,r17,8065b4 <__udivdi3+0x238>
  8065b0:	2400ca36 	bltu	r4,r16,8068dc <__udivdi3+0x560>
  8065b4:	102d883a 	mov	r22,r2
  8065b8:	2421c83a 	sub	r16,r4,r16
  8065bc:	a80b883a 	mov	r5,r21
  8065c0:	8009883a 	mov	r4,r16
  8065c4:	d8c00015 	stw	r3,0(sp)
  8065c8:	0806a500 	call	806a50 <__umodsi3>
  8065cc:	1027883a 	mov	r19,r2
  8065d0:	a80b883a 	mov	r5,r21
  8065d4:	8009883a 	mov	r4,r16
  8065d8:	08069ec0 	call	8069ec <__udivsi3>
  8065dc:	9826943a 	slli	r19,r19,16
  8065e0:	1529383a 	mul	r20,r2,r20
  8065e4:	94bfffcc 	andi	r18,r18,65535
  8065e8:	94e4b03a 	or	r18,r18,r19
  8065ec:	d8c00017 	ldw	r3,0(sp)
  8065f0:	9500052e 	bgeu	r18,r20,806608 <__udivdi3+0x28c>
  8065f4:	8ca5883a 	add	r18,r17,r18
  8065f8:	113fffc4 	addi	r4,r2,-1
  8065fc:	94409736 	bltu	r18,r17,80685c <__udivdi3+0x4e0>
  806600:	9500962e 	bgeu	r18,r20,80685c <__udivdi3+0x4e0>
  806604:	10bfff84 	addi	r2,r2,-2
  806608:	b00c943a 	slli	r6,r22,16
  80660c:	3084b03a 	or	r2,r6,r2
  806610:	00000206 	br	80661c <__udivdi3+0x2a0>
  806614:	0007883a 	mov	r3,zero
  806618:	0005883a 	mov	r2,zero
  80661c:	dfc00a17 	ldw	ra,40(sp)
  806620:	df000917 	ldw	fp,36(sp)
  806624:	ddc00817 	ldw	r23,32(sp)
  806628:	dd800717 	ldw	r22,28(sp)
  80662c:	dd400617 	ldw	r21,24(sp)
  806630:	dd000517 	ldw	r20,20(sp)
  806634:	dcc00417 	ldw	r19,16(sp)
  806638:	dc800317 	ldw	r18,12(sp)
  80663c:	dc400217 	ldw	r17,8(sp)
  806640:	dc000117 	ldw	r16,4(sp)
  806644:	dec00b04 	addi	sp,sp,44
  806648:	f800283a 	ret
  80664c:	00803fc4 	movi	r2,255
  806650:	11c5803a 	cmpltu	r2,r2,r7
  806654:	100490fa 	slli	r2,r2,3
  806658:	003f9e06 	br	8064d4 <__alt_mem_onchip_mem+0xff7fe4d4>
  80665c:	00803fc4 	movi	r2,255
  806660:	1445803a 	cmpltu	r2,r2,r17
  806664:	100490fa 	slli	r2,r2,3
  806668:	003fb206 	br	806534 <__alt_mem_onchip_mem+0xff7fe534>
  80666c:	00804034 	movhi	r2,256
  806670:	10bfffc4 	addi	r2,r2,-1
  806674:	11808836 	bltu	r2,r6,806898 <__udivdi3+0x51c>
  806678:	00800404 	movi	r2,16
  80667c:	003f5606 	br	8063d8 <__alt_mem_onchip_mem+0xff7fe3d8>
  806680:	30aed83a 	srl	r23,r6,r2
  806684:	3d4e983a 	sll	r7,r7,r21
  806688:	80acd83a 	srl	r22,r16,r2
  80668c:	9884d83a 	srl	r2,r19,r2
  806690:	3deeb03a 	or	r23,r7,r23
  806694:	b824d43a 	srli	r18,r23,16
  806698:	8560983a 	sll	r16,r16,r21
  80669c:	b009883a 	mov	r4,r22
  8066a0:	900b883a 	mov	r5,r18
  8066a4:	3568983a 	sll	r20,r6,r21
  8066a8:	1420b03a 	or	r16,r2,r16
  8066ac:	0806a500 	call	806a50 <__umodsi3>
  8066b0:	b009883a 	mov	r4,r22
  8066b4:	900b883a 	mov	r5,r18
  8066b8:	1023883a 	mov	r17,r2
  8066bc:	08069ec0 	call	8069ec <__udivsi3>
  8066c0:	8808943a 	slli	r4,r17,16
  8066c4:	bf3fffcc 	andi	fp,r23,65535
  8066c8:	8006d43a 	srli	r3,r16,16
  8066cc:	e0a3383a 	mul	r17,fp,r2
  8066d0:	100d883a 	mov	r6,r2
  8066d4:	1906b03a 	or	r3,r3,r4
  8066d8:	1c40042e 	bgeu	r3,r17,8066ec <__udivdi3+0x370>
  8066dc:	1dc7883a 	add	r3,r3,r23
  8066e0:	10bfffc4 	addi	r2,r2,-1
  8066e4:	1dc0752e 	bgeu	r3,r23,8068bc <__udivdi3+0x540>
  8066e8:	100d883a 	mov	r6,r2
  8066ec:	1c63c83a 	sub	r17,r3,r17
  8066f0:	900b883a 	mov	r5,r18
  8066f4:	8809883a 	mov	r4,r17
  8066f8:	d9800015 	stw	r6,0(sp)
  8066fc:	0806a500 	call	806a50 <__umodsi3>
  806700:	102d883a 	mov	r22,r2
  806704:	8809883a 	mov	r4,r17
  806708:	900b883a 	mov	r5,r18
  80670c:	08069ec0 	call	8069ec <__udivsi3>
  806710:	b02c943a 	slli	r22,r22,16
  806714:	e089383a 	mul	r4,fp,r2
  806718:	843fffcc 	andi	r16,r16,65535
  80671c:	85a0b03a 	or	r16,r16,r22
  806720:	d9800017 	ldw	r6,0(sp)
  806724:	8100042e 	bgeu	r16,r4,806738 <__udivdi3+0x3bc>
  806728:	85e1883a 	add	r16,r16,r23
  80672c:	10ffffc4 	addi	r3,r2,-1
  806730:	85c05e2e 	bgeu	r16,r23,8068ac <__udivdi3+0x530>
  806734:	1805883a 	mov	r2,r3
  806738:	300c943a 	slli	r6,r6,16
  80673c:	a17fffcc 	andi	r5,r20,65535
  806740:	a028d43a 	srli	r20,r20,16
  806744:	3084b03a 	or	r2,r6,r2
  806748:	10ffffcc 	andi	r3,r2,65535
  80674c:	100cd43a 	srli	r6,r2,16
  806750:	194f383a 	mul	r7,r3,r5
  806754:	1d07383a 	mul	r3,r3,r20
  806758:	314b383a 	mul	r5,r6,r5
  80675c:	3810d43a 	srli	r8,r7,16
  806760:	8121c83a 	sub	r16,r16,r4
  806764:	1947883a 	add	r3,r3,r5
  806768:	40c7883a 	add	r3,r8,r3
  80676c:	350d383a 	mul	r6,r6,r20
  806770:	1940022e 	bgeu	r3,r5,80677c <__udivdi3+0x400>
  806774:	01000074 	movhi	r4,1
  806778:	310d883a 	add	r6,r6,r4
  80677c:	1828d43a 	srli	r20,r3,16
  806780:	a18d883a 	add	r6,r20,r6
  806784:	81803e36 	bltu	r16,r6,806880 <__udivdi3+0x504>
  806788:	81803826 	beq	r16,r6,80686c <__udivdi3+0x4f0>
  80678c:	0007883a 	mov	r3,zero
  806790:	003fa206 	br	80661c <__alt_mem_onchip_mem+0xff7fe61c>
  806794:	88e2983a 	sll	r17,r17,r3
  806798:	80a8d83a 	srl	r20,r16,r2
  80679c:	80e0983a 	sll	r16,r16,r3
  8067a0:	882ad43a 	srli	r21,r17,16
  8067a4:	9884d83a 	srl	r2,r19,r2
  8067a8:	a009883a 	mov	r4,r20
  8067ac:	a80b883a 	mov	r5,r21
  8067b0:	142eb03a 	or	r23,r2,r16
  8067b4:	98e4983a 	sll	r18,r19,r3
  8067b8:	0806a500 	call	806a50 <__umodsi3>
  8067bc:	a009883a 	mov	r4,r20
  8067c0:	a80b883a 	mov	r5,r21
  8067c4:	1021883a 	mov	r16,r2
  8067c8:	08069ec0 	call	8069ec <__udivsi3>
  8067cc:	1039883a 	mov	fp,r2
  8067d0:	8d3fffcc 	andi	r20,r17,65535
  8067d4:	8020943a 	slli	r16,r16,16
  8067d8:	b804d43a 	srli	r2,r23,16
  8067dc:	a72d383a 	mul	r22,r20,fp
  8067e0:	1404b03a 	or	r2,r2,r16
  8067e4:	1580062e 	bgeu	r2,r22,806800 <__udivdi3+0x484>
  8067e8:	1445883a 	add	r2,r2,r17
  8067ec:	e0ffffc4 	addi	r3,fp,-1
  8067f0:	14403836 	bltu	r2,r17,8068d4 <__udivdi3+0x558>
  8067f4:	1580372e 	bgeu	r2,r22,8068d4 <__udivdi3+0x558>
  8067f8:	e73fff84 	addi	fp,fp,-2
  8067fc:	1445883a 	add	r2,r2,r17
  806800:	15adc83a 	sub	r22,r2,r22
  806804:	a80b883a 	mov	r5,r21
  806808:	b009883a 	mov	r4,r22
  80680c:	0806a500 	call	806a50 <__umodsi3>
  806810:	1027883a 	mov	r19,r2
  806814:	b009883a 	mov	r4,r22
  806818:	a80b883a 	mov	r5,r21
  80681c:	08069ec0 	call	8069ec <__udivsi3>
  806820:	9826943a 	slli	r19,r19,16
  806824:	a0a1383a 	mul	r16,r20,r2
  806828:	b93fffcc 	andi	r4,r23,65535
  80682c:	24c8b03a 	or	r4,r4,r19
  806830:	2400062e 	bgeu	r4,r16,80684c <__udivdi3+0x4d0>
  806834:	2449883a 	add	r4,r4,r17
  806838:	10ffffc4 	addi	r3,r2,-1
  80683c:	24402336 	bltu	r4,r17,8068cc <__udivdi3+0x550>
  806840:	2400222e 	bgeu	r4,r16,8068cc <__udivdi3+0x550>
  806844:	10bfff84 	addi	r2,r2,-2
  806848:	2449883a 	add	r4,r4,r17
  80684c:	e038943a 	slli	fp,fp,16
  806850:	2421c83a 	sub	r16,r4,r16
  806854:	e086b03a 	or	r3,fp,r2
  806858:	003f4306 	br	806568 <__alt_mem_onchip_mem+0xff7fe568>
  80685c:	2005883a 	mov	r2,r4
  806860:	003f6906 	br	806608 <__alt_mem_onchip_mem+0xff7fe608>
  806864:	1805883a 	mov	r2,r3
  806868:	003f0f06 	br	8064a8 <__alt_mem_onchip_mem+0xff7fe4a8>
  80686c:	1806943a 	slli	r3,r3,16
  806870:	9d66983a 	sll	r19,r19,r21
  806874:	39ffffcc 	andi	r7,r7,65535
  806878:	19c7883a 	add	r3,r3,r7
  80687c:	98ffc32e 	bgeu	r19,r3,80678c <__alt_mem_onchip_mem+0xff7fe78c>
  806880:	10bfffc4 	addi	r2,r2,-1
  806884:	003fc106 	br	80678c <__alt_mem_onchip_mem+0xff7fe78c>
  806888:	00800604 	movi	r2,24
  80688c:	003f1106 	br	8064d4 <__alt_mem_onchip_mem+0xff7fe4d4>
  806890:	00800604 	movi	r2,24
  806894:	003f2706 	br	806534 <__alt_mem_onchip_mem+0xff7fe534>
  806898:	00800604 	movi	r2,24
  80689c:	003ece06 	br	8063d8 <__alt_mem_onchip_mem+0xff7fe3d8>
  8068a0:	0007883a 	mov	r3,zero
  8068a4:	00800044 	movi	r2,1
  8068a8:	003f5c06 	br	80661c <__alt_mem_onchip_mem+0xff7fe61c>
  8068ac:	813fa12e 	bgeu	r16,r4,806734 <__alt_mem_onchip_mem+0xff7fe734>
  8068b0:	10bfff84 	addi	r2,r2,-2
  8068b4:	85e1883a 	add	r16,r16,r23
  8068b8:	003f9f06 	br	806738 <__alt_mem_onchip_mem+0xff7fe738>
  8068bc:	1c7f8a2e 	bgeu	r3,r17,8066e8 <__alt_mem_onchip_mem+0xff7fe6e8>
  8068c0:	31bfff84 	addi	r6,r6,-2
  8068c4:	1dc7883a 	add	r3,r3,r23
  8068c8:	003f8806 	br	8066ec <__alt_mem_onchip_mem+0xff7fe6ec>
  8068cc:	1805883a 	mov	r2,r3
  8068d0:	003fde06 	br	80684c <__alt_mem_onchip_mem+0xff7fe84c>
  8068d4:	1839883a 	mov	fp,r3
  8068d8:	003fc906 	br	806800 <__alt_mem_onchip_mem+0xff7fe800>
  8068dc:	b5bfff84 	addi	r22,r22,-2
  8068e0:	2449883a 	add	r4,r4,r17
  8068e4:	003f3406 	br	8065b8 <__alt_mem_onchip_mem+0xff7fe5b8>
  8068e8:	b5bfff84 	addi	r22,r22,-2
  8068ec:	1445883a 	add	r2,r2,r17
  8068f0:	003edb06 	br	806460 <__alt_mem_onchip_mem+0xff7fe460>

008068f4 <__divsi3>:
  8068f4:	20001b16 	blt	r4,zero,806964 <__divsi3+0x70>
  8068f8:	000f883a 	mov	r7,zero
  8068fc:	28001616 	blt	r5,zero,806958 <__divsi3+0x64>
  806900:	200d883a 	mov	r6,r4
  806904:	29001a2e 	bgeu	r5,r4,806970 <__divsi3+0x7c>
  806908:	00800804 	movi	r2,32
  80690c:	00c00044 	movi	r3,1
  806910:	00000106 	br	806918 <__divsi3+0x24>
  806914:	10000d26 	beq	r2,zero,80694c <__divsi3+0x58>
  806918:	294b883a 	add	r5,r5,r5
  80691c:	10bfffc4 	addi	r2,r2,-1
  806920:	18c7883a 	add	r3,r3,r3
  806924:	293ffb36 	bltu	r5,r4,806914 <__alt_mem_onchip_mem+0xff7fe914>
  806928:	0005883a 	mov	r2,zero
  80692c:	18000726 	beq	r3,zero,80694c <__divsi3+0x58>
  806930:	0005883a 	mov	r2,zero
  806934:	31400236 	bltu	r6,r5,806940 <__divsi3+0x4c>
  806938:	314dc83a 	sub	r6,r6,r5
  80693c:	10c4b03a 	or	r2,r2,r3
  806940:	1806d07a 	srli	r3,r3,1
  806944:	280ad07a 	srli	r5,r5,1
  806948:	183ffa1e 	bne	r3,zero,806934 <__alt_mem_onchip_mem+0xff7fe934>
  80694c:	38000126 	beq	r7,zero,806954 <__divsi3+0x60>
  806950:	0085c83a 	sub	r2,zero,r2
  806954:	f800283a 	ret
  806958:	014bc83a 	sub	r5,zero,r5
  80695c:	39c0005c 	xori	r7,r7,1
  806960:	003fe706 	br	806900 <__alt_mem_onchip_mem+0xff7fe900>
  806964:	0109c83a 	sub	r4,zero,r4
  806968:	01c00044 	movi	r7,1
  80696c:	003fe306 	br	8068fc <__alt_mem_onchip_mem+0xff7fe8fc>
  806970:	00c00044 	movi	r3,1
  806974:	003fee06 	br	806930 <__alt_mem_onchip_mem+0xff7fe930>

00806978 <__modsi3>:
  806978:	20001716 	blt	r4,zero,8069d8 <__modsi3+0x60>
  80697c:	000f883a 	mov	r7,zero
  806980:	2005883a 	mov	r2,r4
  806984:	28001216 	blt	r5,zero,8069d0 <__modsi3+0x58>
  806988:	2900162e 	bgeu	r5,r4,8069e4 <__modsi3+0x6c>
  80698c:	01800804 	movi	r6,32
  806990:	00c00044 	movi	r3,1
  806994:	00000106 	br	80699c <__modsi3+0x24>
  806998:	30000a26 	beq	r6,zero,8069c4 <__modsi3+0x4c>
  80699c:	294b883a 	add	r5,r5,r5
  8069a0:	31bfffc4 	addi	r6,r6,-1
  8069a4:	18c7883a 	add	r3,r3,r3
  8069a8:	293ffb36 	bltu	r5,r4,806998 <__alt_mem_onchip_mem+0xff7fe998>
  8069ac:	18000526 	beq	r3,zero,8069c4 <__modsi3+0x4c>
  8069b0:	1806d07a 	srli	r3,r3,1
  8069b4:	11400136 	bltu	r2,r5,8069bc <__modsi3+0x44>
  8069b8:	1145c83a 	sub	r2,r2,r5
  8069bc:	280ad07a 	srli	r5,r5,1
  8069c0:	183ffb1e 	bne	r3,zero,8069b0 <__alt_mem_onchip_mem+0xff7fe9b0>
  8069c4:	38000126 	beq	r7,zero,8069cc <__modsi3+0x54>
  8069c8:	0085c83a 	sub	r2,zero,r2
  8069cc:	f800283a 	ret
  8069d0:	014bc83a 	sub	r5,zero,r5
  8069d4:	003fec06 	br	806988 <__alt_mem_onchip_mem+0xff7fe988>
  8069d8:	0109c83a 	sub	r4,zero,r4
  8069dc:	01c00044 	movi	r7,1
  8069e0:	003fe706 	br	806980 <__alt_mem_onchip_mem+0xff7fe980>
  8069e4:	00c00044 	movi	r3,1
  8069e8:	003ff106 	br	8069b0 <__alt_mem_onchip_mem+0xff7fe9b0>

008069ec <__udivsi3>:
  8069ec:	200d883a 	mov	r6,r4
  8069f0:	2900152e 	bgeu	r5,r4,806a48 <__udivsi3+0x5c>
  8069f4:	28001416 	blt	r5,zero,806a48 <__udivsi3+0x5c>
  8069f8:	00800804 	movi	r2,32
  8069fc:	00c00044 	movi	r3,1
  806a00:	00000206 	br	806a0c <__udivsi3+0x20>
  806a04:	10000e26 	beq	r2,zero,806a40 <__udivsi3+0x54>
  806a08:	28000516 	blt	r5,zero,806a20 <__udivsi3+0x34>
  806a0c:	294b883a 	add	r5,r5,r5
  806a10:	10bfffc4 	addi	r2,r2,-1
  806a14:	18c7883a 	add	r3,r3,r3
  806a18:	293ffa36 	bltu	r5,r4,806a04 <__alt_mem_onchip_mem+0xff7fea04>
  806a1c:	18000826 	beq	r3,zero,806a40 <__udivsi3+0x54>
  806a20:	0005883a 	mov	r2,zero
  806a24:	31400236 	bltu	r6,r5,806a30 <__udivsi3+0x44>
  806a28:	314dc83a 	sub	r6,r6,r5
  806a2c:	10c4b03a 	or	r2,r2,r3
  806a30:	1806d07a 	srli	r3,r3,1
  806a34:	280ad07a 	srli	r5,r5,1
  806a38:	183ffa1e 	bne	r3,zero,806a24 <__alt_mem_onchip_mem+0xff7fea24>
  806a3c:	f800283a 	ret
  806a40:	0005883a 	mov	r2,zero
  806a44:	f800283a 	ret
  806a48:	00c00044 	movi	r3,1
  806a4c:	003ff406 	br	806a20 <__alt_mem_onchip_mem+0xff7fea20>

00806a50 <__umodsi3>:
  806a50:	2005883a 	mov	r2,r4
  806a54:	2900122e 	bgeu	r5,r4,806aa0 <__umodsi3+0x50>
  806a58:	28001116 	blt	r5,zero,806aa0 <__umodsi3+0x50>
  806a5c:	01800804 	movi	r6,32
  806a60:	00c00044 	movi	r3,1
  806a64:	00000206 	br	806a70 <__umodsi3+0x20>
  806a68:	30000c26 	beq	r6,zero,806a9c <__umodsi3+0x4c>
  806a6c:	28000516 	blt	r5,zero,806a84 <__umodsi3+0x34>
  806a70:	294b883a 	add	r5,r5,r5
  806a74:	31bfffc4 	addi	r6,r6,-1
  806a78:	18c7883a 	add	r3,r3,r3
  806a7c:	293ffa36 	bltu	r5,r4,806a68 <__alt_mem_onchip_mem+0xff7fea68>
  806a80:	18000626 	beq	r3,zero,806a9c <__umodsi3+0x4c>
  806a84:	1806d07a 	srli	r3,r3,1
  806a88:	11400136 	bltu	r2,r5,806a90 <__umodsi3+0x40>
  806a8c:	1145c83a 	sub	r2,r2,r5
  806a90:	280ad07a 	srli	r5,r5,1
  806a94:	183ffb1e 	bne	r3,zero,806a84 <__alt_mem_onchip_mem+0xff7fea84>
  806a98:	f800283a 	ret
  806a9c:	f800283a 	ret
  806aa0:	00c00044 	movi	r3,1
  806aa4:	003ff706 	br	806a84 <__alt_mem_onchip_mem+0xff7fea84>

00806aa8 <__adddf3>:
  806aa8:	02c00434 	movhi	r11,16
  806aac:	5affffc4 	addi	r11,r11,-1
  806ab0:	2806d7fa 	srli	r3,r5,31
  806ab4:	2ad4703a 	and	r10,r5,r11
  806ab8:	3ad2703a 	and	r9,r7,r11
  806abc:	3804d53a 	srli	r2,r7,20
  806ac0:	3018d77a 	srli	r12,r6,29
  806ac4:	280ad53a 	srli	r5,r5,20
  806ac8:	501490fa 	slli	r10,r10,3
  806acc:	2010d77a 	srli	r8,r4,29
  806ad0:	481290fa 	slli	r9,r9,3
  806ad4:	380ed7fa 	srli	r7,r7,31
  806ad8:	defffb04 	addi	sp,sp,-20
  806adc:	dc800215 	stw	r18,8(sp)
  806ae0:	dc400115 	stw	r17,4(sp)
  806ae4:	dc000015 	stw	r16,0(sp)
  806ae8:	dfc00415 	stw	ra,16(sp)
  806aec:	dcc00315 	stw	r19,12(sp)
  806af0:	1c803fcc 	andi	r18,r3,255
  806af4:	2c01ffcc 	andi	r16,r5,2047
  806af8:	5210b03a 	or	r8,r10,r8
  806afc:	202290fa 	slli	r17,r4,3
  806b00:	1081ffcc 	andi	r2,r2,2047
  806b04:	4b12b03a 	or	r9,r9,r12
  806b08:	300c90fa 	slli	r6,r6,3
  806b0c:	91c07526 	beq	r18,r7,806ce4 <__adddf3+0x23c>
  806b10:	8087c83a 	sub	r3,r16,r2
  806b14:	00c0ab0e 	bge	zero,r3,806dc4 <__adddf3+0x31c>
  806b18:	10002a1e 	bne	r2,zero,806bc4 <__adddf3+0x11c>
  806b1c:	4984b03a 	or	r2,r9,r6
  806b20:	1000961e 	bne	r2,zero,806d7c <__adddf3+0x2d4>
  806b24:	888001cc 	andi	r2,r17,7
  806b28:	10000726 	beq	r2,zero,806b48 <__adddf3+0xa0>
  806b2c:	888003cc 	andi	r2,r17,15
  806b30:	00c00104 	movi	r3,4
  806b34:	10c00426 	beq	r2,r3,806b48 <__adddf3+0xa0>
  806b38:	88c7883a 	add	r3,r17,r3
  806b3c:	1c63803a 	cmpltu	r17,r3,r17
  806b40:	4451883a 	add	r8,r8,r17
  806b44:	1823883a 	mov	r17,r3
  806b48:	4080202c 	andhi	r2,r8,128
  806b4c:	10005926 	beq	r2,zero,806cb4 <__adddf3+0x20c>
  806b50:	84000044 	addi	r16,r16,1
  806b54:	0081ffc4 	movi	r2,2047
  806b58:	8080ba26 	beq	r16,r2,806e44 <__adddf3+0x39c>
  806b5c:	00bfe034 	movhi	r2,65408
  806b60:	10bfffc4 	addi	r2,r2,-1
  806b64:	4090703a 	and	r8,r8,r2
  806b68:	4004977a 	slli	r2,r8,29
  806b6c:	4010927a 	slli	r8,r8,9
  806b70:	8822d0fa 	srli	r17,r17,3
  806b74:	8401ffcc 	andi	r16,r16,2047
  806b78:	4010d33a 	srli	r8,r8,12
  806b7c:	9007883a 	mov	r3,r18
  806b80:	1444b03a 	or	r2,r2,r17
  806b84:	8401ffcc 	andi	r16,r16,2047
  806b88:	8020953a 	slli	r16,r16,20
  806b8c:	18c03fcc 	andi	r3,r3,255
  806b90:	01000434 	movhi	r4,16
  806b94:	213fffc4 	addi	r4,r4,-1
  806b98:	180697fa 	slli	r3,r3,31
  806b9c:	4110703a 	and	r8,r8,r4
  806ba0:	4410b03a 	or	r8,r8,r16
  806ba4:	40c6b03a 	or	r3,r8,r3
  806ba8:	dfc00417 	ldw	ra,16(sp)
  806bac:	dcc00317 	ldw	r19,12(sp)
  806bb0:	dc800217 	ldw	r18,8(sp)
  806bb4:	dc400117 	ldw	r17,4(sp)
  806bb8:	dc000017 	ldw	r16,0(sp)
  806bbc:	dec00504 	addi	sp,sp,20
  806bc0:	f800283a 	ret
  806bc4:	0081ffc4 	movi	r2,2047
  806bc8:	80bfd626 	beq	r16,r2,806b24 <__alt_mem_onchip_mem+0xff7feb24>
  806bcc:	4a402034 	orhi	r9,r9,128
  806bd0:	00800e04 	movi	r2,56
  806bd4:	10c09f16 	blt	r2,r3,806e54 <__adddf3+0x3ac>
  806bd8:	008007c4 	movi	r2,31
  806bdc:	10c0c216 	blt	r2,r3,806ee8 <__adddf3+0x440>
  806be0:	00800804 	movi	r2,32
  806be4:	10c5c83a 	sub	r2,r2,r3
  806be8:	488a983a 	sll	r5,r9,r2
  806bec:	30c8d83a 	srl	r4,r6,r3
  806bf0:	3084983a 	sll	r2,r6,r2
  806bf4:	48c6d83a 	srl	r3,r9,r3
  806bf8:	290cb03a 	or	r6,r5,r4
  806bfc:	1004c03a 	cmpne	r2,r2,zero
  806c00:	308cb03a 	or	r6,r6,r2
  806c04:	898dc83a 	sub	r6,r17,r6
  806c08:	89a3803a 	cmpltu	r17,r17,r6
  806c0c:	40d1c83a 	sub	r8,r8,r3
  806c10:	4451c83a 	sub	r8,r8,r17
  806c14:	3023883a 	mov	r17,r6
  806c18:	4080202c 	andhi	r2,r8,128
  806c1c:	10002326 	beq	r2,zero,806cac <__adddf3+0x204>
  806c20:	04c02034 	movhi	r19,128
  806c24:	9cffffc4 	addi	r19,r19,-1
  806c28:	44e6703a 	and	r19,r8,r19
  806c2c:	98007626 	beq	r19,zero,806e08 <__adddf3+0x360>
  806c30:	9809883a 	mov	r4,r19
  806c34:	0808fa40 	call	808fa4 <__clzsi2>
  806c38:	10fffe04 	addi	r3,r2,-8
  806c3c:	010007c4 	movi	r4,31
  806c40:	20c07716 	blt	r4,r3,806e20 <__adddf3+0x378>
  806c44:	00800804 	movi	r2,32
  806c48:	10c5c83a 	sub	r2,r2,r3
  806c4c:	8884d83a 	srl	r2,r17,r2
  806c50:	98d0983a 	sll	r8,r19,r3
  806c54:	88e2983a 	sll	r17,r17,r3
  806c58:	1204b03a 	or	r2,r2,r8
  806c5c:	1c007416 	blt	r3,r16,806e30 <__adddf3+0x388>
  806c60:	1c21c83a 	sub	r16,r3,r16
  806c64:	82000044 	addi	r8,r16,1
  806c68:	00c007c4 	movi	r3,31
  806c6c:	1a009116 	blt	r3,r8,806eb4 <__adddf3+0x40c>
  806c70:	00c00804 	movi	r3,32
  806c74:	1a07c83a 	sub	r3,r3,r8
  806c78:	8a08d83a 	srl	r4,r17,r8
  806c7c:	88e2983a 	sll	r17,r17,r3
  806c80:	10c6983a 	sll	r3,r2,r3
  806c84:	1210d83a 	srl	r8,r2,r8
  806c88:	8804c03a 	cmpne	r2,r17,zero
  806c8c:	1906b03a 	or	r3,r3,r4
  806c90:	18a2b03a 	or	r17,r3,r2
  806c94:	0021883a 	mov	r16,zero
  806c98:	003fa206 	br	806b24 <__alt_mem_onchip_mem+0xff7feb24>
  806c9c:	1890b03a 	or	r8,r3,r2
  806ca0:	40017d26 	beq	r8,zero,807298 <__adddf3+0x7f0>
  806ca4:	1011883a 	mov	r8,r2
  806ca8:	1823883a 	mov	r17,r3
  806cac:	888001cc 	andi	r2,r17,7
  806cb0:	103f9e1e 	bne	r2,zero,806b2c <__alt_mem_onchip_mem+0xff7feb2c>
  806cb4:	4004977a 	slli	r2,r8,29
  806cb8:	8822d0fa 	srli	r17,r17,3
  806cbc:	4010d0fa 	srli	r8,r8,3
  806cc0:	9007883a 	mov	r3,r18
  806cc4:	1444b03a 	or	r2,r2,r17
  806cc8:	0101ffc4 	movi	r4,2047
  806ccc:	81002426 	beq	r16,r4,806d60 <__adddf3+0x2b8>
  806cd0:	8120703a 	and	r16,r16,r4
  806cd4:	01000434 	movhi	r4,16
  806cd8:	213fffc4 	addi	r4,r4,-1
  806cdc:	4110703a 	and	r8,r8,r4
  806ce0:	003fa806 	br	806b84 <__alt_mem_onchip_mem+0xff7feb84>
  806ce4:	8089c83a 	sub	r4,r16,r2
  806ce8:	01005e0e 	bge	zero,r4,806e64 <__adddf3+0x3bc>
  806cec:	10002b26 	beq	r2,zero,806d9c <__adddf3+0x2f4>
  806cf0:	0081ffc4 	movi	r2,2047
  806cf4:	80bf8b26 	beq	r16,r2,806b24 <__alt_mem_onchip_mem+0xff7feb24>
  806cf8:	4a402034 	orhi	r9,r9,128
  806cfc:	00800e04 	movi	r2,56
  806d00:	1100a40e 	bge	r2,r4,806f94 <__adddf3+0x4ec>
  806d04:	498cb03a 	or	r6,r9,r6
  806d08:	300ac03a 	cmpne	r5,r6,zero
  806d0c:	0013883a 	mov	r9,zero
  806d10:	2c4b883a 	add	r5,r5,r17
  806d14:	2c63803a 	cmpltu	r17,r5,r17
  806d18:	4a11883a 	add	r8,r9,r8
  806d1c:	8a11883a 	add	r8,r17,r8
  806d20:	2823883a 	mov	r17,r5
  806d24:	4080202c 	andhi	r2,r8,128
  806d28:	103fe026 	beq	r2,zero,806cac <__alt_mem_onchip_mem+0xff7fecac>
  806d2c:	84000044 	addi	r16,r16,1
  806d30:	0081ffc4 	movi	r2,2047
  806d34:	8080d226 	beq	r16,r2,807080 <__adddf3+0x5d8>
  806d38:	00bfe034 	movhi	r2,65408
  806d3c:	10bfffc4 	addi	r2,r2,-1
  806d40:	4090703a 	and	r8,r8,r2
  806d44:	880ad07a 	srli	r5,r17,1
  806d48:	400897fa 	slli	r4,r8,31
  806d4c:	88c0004c 	andi	r3,r17,1
  806d50:	28e2b03a 	or	r17,r5,r3
  806d54:	4010d07a 	srli	r8,r8,1
  806d58:	2462b03a 	or	r17,r4,r17
  806d5c:	003f7106 	br	806b24 <__alt_mem_onchip_mem+0xff7feb24>
  806d60:	4088b03a 	or	r4,r8,r2
  806d64:	20014526 	beq	r4,zero,80727c <__adddf3+0x7d4>
  806d68:	01000434 	movhi	r4,16
  806d6c:	42000234 	orhi	r8,r8,8
  806d70:	213fffc4 	addi	r4,r4,-1
  806d74:	4110703a 	and	r8,r8,r4
  806d78:	003f8206 	br	806b84 <__alt_mem_onchip_mem+0xff7feb84>
  806d7c:	18ffffc4 	addi	r3,r3,-1
  806d80:	1800491e 	bne	r3,zero,806ea8 <__adddf3+0x400>
  806d84:	898bc83a 	sub	r5,r17,r6
  806d88:	8963803a 	cmpltu	r17,r17,r5
  806d8c:	4251c83a 	sub	r8,r8,r9
  806d90:	4451c83a 	sub	r8,r8,r17
  806d94:	2823883a 	mov	r17,r5
  806d98:	003f9f06 	br	806c18 <__alt_mem_onchip_mem+0xff7fec18>
  806d9c:	4984b03a 	or	r2,r9,r6
  806da0:	103f6026 	beq	r2,zero,806b24 <__alt_mem_onchip_mem+0xff7feb24>
  806da4:	213fffc4 	addi	r4,r4,-1
  806da8:	2000931e 	bne	r4,zero,806ff8 <__adddf3+0x550>
  806dac:	898d883a 	add	r6,r17,r6
  806db0:	3463803a 	cmpltu	r17,r6,r17
  806db4:	4251883a 	add	r8,r8,r9
  806db8:	8a11883a 	add	r8,r17,r8
  806dbc:	3023883a 	mov	r17,r6
  806dc0:	003fd806 	br	806d24 <__alt_mem_onchip_mem+0xff7fed24>
  806dc4:	1800541e 	bne	r3,zero,806f18 <__adddf3+0x470>
  806dc8:	80800044 	addi	r2,r16,1
  806dcc:	1081ffcc 	andi	r2,r2,2047
  806dd0:	00c00044 	movi	r3,1
  806dd4:	1880a00e 	bge	r3,r2,807058 <__adddf3+0x5b0>
  806dd8:	8989c83a 	sub	r4,r17,r6
  806ddc:	8905803a 	cmpltu	r2,r17,r4
  806de0:	4267c83a 	sub	r19,r8,r9
  806de4:	98a7c83a 	sub	r19,r19,r2
  806de8:	9880202c 	andhi	r2,r19,128
  806dec:	10006326 	beq	r2,zero,806f7c <__adddf3+0x4d4>
  806df0:	3463c83a 	sub	r17,r6,r17
  806df4:	4a07c83a 	sub	r3,r9,r8
  806df8:	344d803a 	cmpltu	r6,r6,r17
  806dfc:	19a7c83a 	sub	r19,r3,r6
  806e00:	3825883a 	mov	r18,r7
  806e04:	983f8a1e 	bne	r19,zero,806c30 <__alt_mem_onchip_mem+0xff7fec30>
  806e08:	8809883a 	mov	r4,r17
  806e0c:	0808fa40 	call	808fa4 <__clzsi2>
  806e10:	10800804 	addi	r2,r2,32
  806e14:	10fffe04 	addi	r3,r2,-8
  806e18:	010007c4 	movi	r4,31
  806e1c:	20ff890e 	bge	r4,r3,806c44 <__alt_mem_onchip_mem+0xff7fec44>
  806e20:	10bff604 	addi	r2,r2,-40
  806e24:	8884983a 	sll	r2,r17,r2
  806e28:	0023883a 	mov	r17,zero
  806e2c:	1c3f8c0e 	bge	r3,r16,806c60 <__alt_mem_onchip_mem+0xff7fec60>
  806e30:	023fe034 	movhi	r8,65408
  806e34:	423fffc4 	addi	r8,r8,-1
  806e38:	80e1c83a 	sub	r16,r16,r3
  806e3c:	1210703a 	and	r8,r2,r8
  806e40:	003f3806 	br	806b24 <__alt_mem_onchip_mem+0xff7feb24>
  806e44:	9007883a 	mov	r3,r18
  806e48:	0011883a 	mov	r8,zero
  806e4c:	0005883a 	mov	r2,zero
  806e50:	003f4c06 	br	806b84 <__alt_mem_onchip_mem+0xff7feb84>
  806e54:	498cb03a 	or	r6,r9,r6
  806e58:	300cc03a 	cmpne	r6,r6,zero
  806e5c:	0007883a 	mov	r3,zero
  806e60:	003f6806 	br	806c04 <__alt_mem_onchip_mem+0xff7fec04>
  806e64:	20009c1e 	bne	r4,zero,8070d8 <__adddf3+0x630>
  806e68:	80800044 	addi	r2,r16,1
  806e6c:	1141ffcc 	andi	r5,r2,2047
  806e70:	01000044 	movi	r4,1
  806e74:	2140670e 	bge	r4,r5,807014 <__adddf3+0x56c>
  806e78:	0101ffc4 	movi	r4,2047
  806e7c:	11007f26 	beq	r2,r4,80707c <__adddf3+0x5d4>
  806e80:	898d883a 	add	r6,r17,r6
  806e84:	4247883a 	add	r3,r8,r9
  806e88:	3451803a 	cmpltu	r8,r6,r17
  806e8c:	40d1883a 	add	r8,r8,r3
  806e90:	402297fa 	slli	r17,r8,31
  806e94:	300cd07a 	srli	r6,r6,1
  806e98:	4010d07a 	srli	r8,r8,1
  806e9c:	1021883a 	mov	r16,r2
  806ea0:	89a2b03a 	or	r17,r17,r6
  806ea4:	003f1f06 	br	806b24 <__alt_mem_onchip_mem+0xff7feb24>
  806ea8:	0081ffc4 	movi	r2,2047
  806eac:	80bf481e 	bne	r16,r2,806bd0 <__alt_mem_onchip_mem+0xff7febd0>
  806eb0:	003f1c06 	br	806b24 <__alt_mem_onchip_mem+0xff7feb24>
  806eb4:	843ff844 	addi	r16,r16,-31
  806eb8:	01000804 	movi	r4,32
  806ebc:	1406d83a 	srl	r3,r2,r16
  806ec0:	41005026 	beq	r8,r4,807004 <__adddf3+0x55c>
  806ec4:	01001004 	movi	r4,64
  806ec8:	2211c83a 	sub	r8,r4,r8
  806ecc:	1204983a 	sll	r2,r2,r8
  806ed0:	88a2b03a 	or	r17,r17,r2
  806ed4:	8822c03a 	cmpne	r17,r17,zero
  806ed8:	1c62b03a 	or	r17,r3,r17
  806edc:	0011883a 	mov	r8,zero
  806ee0:	0021883a 	mov	r16,zero
  806ee4:	003f7106 	br	806cac <__alt_mem_onchip_mem+0xff7fecac>
  806ee8:	193ff804 	addi	r4,r3,-32
  806eec:	00800804 	movi	r2,32
  806ef0:	4908d83a 	srl	r4,r9,r4
  806ef4:	18804526 	beq	r3,r2,80700c <__adddf3+0x564>
  806ef8:	00801004 	movi	r2,64
  806efc:	10c5c83a 	sub	r2,r2,r3
  806f00:	4886983a 	sll	r3,r9,r2
  806f04:	198cb03a 	or	r6,r3,r6
  806f08:	300cc03a 	cmpne	r6,r6,zero
  806f0c:	218cb03a 	or	r6,r4,r6
  806f10:	0007883a 	mov	r3,zero
  806f14:	003f3b06 	br	806c04 <__alt_mem_onchip_mem+0xff7fec04>
  806f18:	80002a26 	beq	r16,zero,806fc4 <__adddf3+0x51c>
  806f1c:	0101ffc4 	movi	r4,2047
  806f20:	11006826 	beq	r2,r4,8070c4 <__adddf3+0x61c>
  806f24:	00c7c83a 	sub	r3,zero,r3
  806f28:	42002034 	orhi	r8,r8,128
  806f2c:	01000e04 	movi	r4,56
  806f30:	20c07c16 	blt	r4,r3,807124 <__adddf3+0x67c>
  806f34:	010007c4 	movi	r4,31
  806f38:	20c0da16 	blt	r4,r3,8072a4 <__adddf3+0x7fc>
  806f3c:	01000804 	movi	r4,32
  806f40:	20c9c83a 	sub	r4,r4,r3
  806f44:	4114983a 	sll	r10,r8,r4
  806f48:	88cad83a 	srl	r5,r17,r3
  806f4c:	8908983a 	sll	r4,r17,r4
  806f50:	40c6d83a 	srl	r3,r8,r3
  806f54:	5162b03a 	or	r17,r10,r5
  806f58:	2008c03a 	cmpne	r4,r4,zero
  806f5c:	8922b03a 	or	r17,r17,r4
  806f60:	3463c83a 	sub	r17,r6,r17
  806f64:	48c7c83a 	sub	r3,r9,r3
  806f68:	344d803a 	cmpltu	r6,r6,r17
  806f6c:	1991c83a 	sub	r8,r3,r6
  806f70:	1021883a 	mov	r16,r2
  806f74:	3825883a 	mov	r18,r7
  806f78:	003f2706 	br	806c18 <__alt_mem_onchip_mem+0xff7fec18>
  806f7c:	24d0b03a 	or	r8,r4,r19
  806f80:	40001b1e 	bne	r8,zero,806ff0 <__adddf3+0x548>
  806f84:	0005883a 	mov	r2,zero
  806f88:	0007883a 	mov	r3,zero
  806f8c:	0021883a 	mov	r16,zero
  806f90:	003f4d06 	br	806cc8 <__alt_mem_onchip_mem+0xff7fecc8>
  806f94:	008007c4 	movi	r2,31
  806f98:	11003c16 	blt	r2,r4,80708c <__adddf3+0x5e4>
  806f9c:	00800804 	movi	r2,32
  806fa0:	1105c83a 	sub	r2,r2,r4
  806fa4:	488e983a 	sll	r7,r9,r2
  806fa8:	310ad83a 	srl	r5,r6,r4
  806fac:	3084983a 	sll	r2,r6,r2
  806fb0:	4912d83a 	srl	r9,r9,r4
  806fb4:	394ab03a 	or	r5,r7,r5
  806fb8:	1004c03a 	cmpne	r2,r2,zero
  806fbc:	288ab03a 	or	r5,r5,r2
  806fc0:	003f5306 	br	806d10 <__alt_mem_onchip_mem+0xff7fed10>
  806fc4:	4448b03a 	or	r4,r8,r17
  806fc8:	20003e26 	beq	r4,zero,8070c4 <__adddf3+0x61c>
  806fcc:	00c6303a 	nor	r3,zero,r3
  806fd0:	18003a1e 	bne	r3,zero,8070bc <__adddf3+0x614>
  806fd4:	3463c83a 	sub	r17,r6,r17
  806fd8:	4a07c83a 	sub	r3,r9,r8
  806fdc:	344d803a 	cmpltu	r6,r6,r17
  806fe0:	1991c83a 	sub	r8,r3,r6
  806fe4:	1021883a 	mov	r16,r2
  806fe8:	3825883a 	mov	r18,r7
  806fec:	003f0a06 	br	806c18 <__alt_mem_onchip_mem+0xff7fec18>
  806ff0:	2023883a 	mov	r17,r4
  806ff4:	003f0d06 	br	806c2c <__alt_mem_onchip_mem+0xff7fec2c>
  806ff8:	0081ffc4 	movi	r2,2047
  806ffc:	80bf3f1e 	bne	r16,r2,806cfc <__alt_mem_onchip_mem+0xff7fecfc>
  807000:	003ec806 	br	806b24 <__alt_mem_onchip_mem+0xff7feb24>
  807004:	0005883a 	mov	r2,zero
  807008:	003fb106 	br	806ed0 <__alt_mem_onchip_mem+0xff7feed0>
  80700c:	0007883a 	mov	r3,zero
  807010:	003fbc06 	br	806f04 <__alt_mem_onchip_mem+0xff7fef04>
  807014:	4444b03a 	or	r2,r8,r17
  807018:	8000871e 	bne	r16,zero,807238 <__adddf3+0x790>
  80701c:	1000ba26 	beq	r2,zero,807308 <__adddf3+0x860>
  807020:	4984b03a 	or	r2,r9,r6
  807024:	103ebf26 	beq	r2,zero,806b24 <__alt_mem_onchip_mem+0xff7feb24>
  807028:	8985883a 	add	r2,r17,r6
  80702c:	4247883a 	add	r3,r8,r9
  807030:	1451803a 	cmpltu	r8,r2,r17
  807034:	40d1883a 	add	r8,r8,r3
  807038:	40c0202c 	andhi	r3,r8,128
  80703c:	1023883a 	mov	r17,r2
  807040:	183f1a26 	beq	r3,zero,806cac <__alt_mem_onchip_mem+0xff7fecac>
  807044:	00bfe034 	movhi	r2,65408
  807048:	10bfffc4 	addi	r2,r2,-1
  80704c:	2021883a 	mov	r16,r4
  807050:	4090703a 	and	r8,r8,r2
  807054:	003eb306 	br	806b24 <__alt_mem_onchip_mem+0xff7feb24>
  807058:	4444b03a 	or	r2,r8,r17
  80705c:	8000291e 	bne	r16,zero,807104 <__adddf3+0x65c>
  807060:	10004b1e 	bne	r2,zero,807190 <__adddf3+0x6e8>
  807064:	4990b03a 	or	r8,r9,r6
  807068:	40008b26 	beq	r8,zero,807298 <__adddf3+0x7f0>
  80706c:	4811883a 	mov	r8,r9
  807070:	3023883a 	mov	r17,r6
  807074:	3825883a 	mov	r18,r7
  807078:	003eaa06 	br	806b24 <__alt_mem_onchip_mem+0xff7feb24>
  80707c:	1021883a 	mov	r16,r2
  807080:	0011883a 	mov	r8,zero
  807084:	0005883a 	mov	r2,zero
  807088:	003f0f06 	br	806cc8 <__alt_mem_onchip_mem+0xff7fecc8>
  80708c:	217ff804 	addi	r5,r4,-32
  807090:	00800804 	movi	r2,32
  807094:	494ad83a 	srl	r5,r9,r5
  807098:	20807d26 	beq	r4,r2,807290 <__adddf3+0x7e8>
  80709c:	00801004 	movi	r2,64
  8070a0:	1109c83a 	sub	r4,r2,r4
  8070a4:	4912983a 	sll	r9,r9,r4
  8070a8:	498cb03a 	or	r6,r9,r6
  8070ac:	300cc03a 	cmpne	r6,r6,zero
  8070b0:	298ab03a 	or	r5,r5,r6
  8070b4:	0013883a 	mov	r9,zero
  8070b8:	003f1506 	br	806d10 <__alt_mem_onchip_mem+0xff7fed10>
  8070bc:	0101ffc4 	movi	r4,2047
  8070c0:	113f9a1e 	bne	r2,r4,806f2c <__alt_mem_onchip_mem+0xff7fef2c>
  8070c4:	4811883a 	mov	r8,r9
  8070c8:	3023883a 	mov	r17,r6
  8070cc:	1021883a 	mov	r16,r2
  8070d0:	3825883a 	mov	r18,r7
  8070d4:	003e9306 	br	806b24 <__alt_mem_onchip_mem+0xff7feb24>
  8070d8:	8000161e 	bne	r16,zero,807134 <__adddf3+0x68c>
  8070dc:	444ab03a 	or	r5,r8,r17
  8070e0:	28005126 	beq	r5,zero,807228 <__adddf3+0x780>
  8070e4:	0108303a 	nor	r4,zero,r4
  8070e8:	20004d1e 	bne	r4,zero,807220 <__adddf3+0x778>
  8070ec:	89a3883a 	add	r17,r17,r6
  8070f0:	4253883a 	add	r9,r8,r9
  8070f4:	898d803a 	cmpltu	r6,r17,r6
  8070f8:	3251883a 	add	r8,r6,r9
  8070fc:	1021883a 	mov	r16,r2
  807100:	003f0806 	br	806d24 <__alt_mem_onchip_mem+0xff7fed24>
  807104:	1000301e 	bne	r2,zero,8071c8 <__adddf3+0x720>
  807108:	4984b03a 	or	r2,r9,r6
  80710c:	10007126 	beq	r2,zero,8072d4 <__adddf3+0x82c>
  807110:	4811883a 	mov	r8,r9
  807114:	3023883a 	mov	r17,r6
  807118:	3825883a 	mov	r18,r7
  80711c:	0401ffc4 	movi	r16,2047
  807120:	003e8006 	br	806b24 <__alt_mem_onchip_mem+0xff7feb24>
  807124:	4462b03a 	or	r17,r8,r17
  807128:	8822c03a 	cmpne	r17,r17,zero
  80712c:	0007883a 	mov	r3,zero
  807130:	003f8b06 	br	806f60 <__alt_mem_onchip_mem+0xff7fef60>
  807134:	0141ffc4 	movi	r5,2047
  807138:	11403b26 	beq	r2,r5,807228 <__adddf3+0x780>
  80713c:	0109c83a 	sub	r4,zero,r4
  807140:	42002034 	orhi	r8,r8,128
  807144:	01400e04 	movi	r5,56
  807148:	29006716 	blt	r5,r4,8072e8 <__adddf3+0x840>
  80714c:	014007c4 	movi	r5,31
  807150:	29007016 	blt	r5,r4,807314 <__adddf3+0x86c>
  807154:	01400804 	movi	r5,32
  807158:	290bc83a 	sub	r5,r5,r4
  80715c:	4154983a 	sll	r10,r8,r5
  807160:	890ed83a 	srl	r7,r17,r4
  807164:	894a983a 	sll	r5,r17,r5
  807168:	4108d83a 	srl	r4,r8,r4
  80716c:	51e2b03a 	or	r17,r10,r7
  807170:	280ac03a 	cmpne	r5,r5,zero
  807174:	8962b03a 	or	r17,r17,r5
  807178:	89a3883a 	add	r17,r17,r6
  80717c:	2253883a 	add	r9,r4,r9
  807180:	898d803a 	cmpltu	r6,r17,r6
  807184:	3251883a 	add	r8,r6,r9
  807188:	1021883a 	mov	r16,r2
  80718c:	003ee506 	br	806d24 <__alt_mem_onchip_mem+0xff7fed24>
  807190:	4984b03a 	or	r2,r9,r6
  807194:	103e6326 	beq	r2,zero,806b24 <__alt_mem_onchip_mem+0xff7feb24>
  807198:	8987c83a 	sub	r3,r17,r6
  80719c:	88c9803a 	cmpltu	r4,r17,r3
  8071a0:	4245c83a 	sub	r2,r8,r9
  8071a4:	1105c83a 	sub	r2,r2,r4
  8071a8:	1100202c 	andhi	r4,r2,128
  8071ac:	203ebb26 	beq	r4,zero,806c9c <__alt_mem_onchip_mem+0xff7fec9c>
  8071b0:	3463c83a 	sub	r17,r6,r17
  8071b4:	4a07c83a 	sub	r3,r9,r8
  8071b8:	344d803a 	cmpltu	r6,r6,r17
  8071bc:	1991c83a 	sub	r8,r3,r6
  8071c0:	3825883a 	mov	r18,r7
  8071c4:	003e5706 	br	806b24 <__alt_mem_onchip_mem+0xff7feb24>
  8071c8:	4984b03a 	or	r2,r9,r6
  8071cc:	10002e26 	beq	r2,zero,807288 <__adddf3+0x7e0>
  8071d0:	4004d0fa 	srli	r2,r8,3
  8071d4:	8822d0fa 	srli	r17,r17,3
  8071d8:	4010977a 	slli	r8,r8,29
  8071dc:	10c0022c 	andhi	r3,r2,8
  8071e0:	4462b03a 	or	r17,r8,r17
  8071e4:	18000826 	beq	r3,zero,807208 <__adddf3+0x760>
  8071e8:	4808d0fa 	srli	r4,r9,3
  8071ec:	20c0022c 	andhi	r3,r4,8
  8071f0:	1800051e 	bne	r3,zero,807208 <__adddf3+0x760>
  8071f4:	300cd0fa 	srli	r6,r6,3
  8071f8:	4806977a 	slli	r3,r9,29
  8071fc:	2005883a 	mov	r2,r4
  807200:	3825883a 	mov	r18,r7
  807204:	19a2b03a 	or	r17,r3,r6
  807208:	8810d77a 	srli	r8,r17,29
  80720c:	100490fa 	slli	r2,r2,3
  807210:	882290fa 	slli	r17,r17,3
  807214:	0401ffc4 	movi	r16,2047
  807218:	4090b03a 	or	r8,r8,r2
  80721c:	003e4106 	br	806b24 <__alt_mem_onchip_mem+0xff7feb24>
  807220:	0141ffc4 	movi	r5,2047
  807224:	117fc71e 	bne	r2,r5,807144 <__alt_mem_onchip_mem+0xff7ff144>
  807228:	4811883a 	mov	r8,r9
  80722c:	3023883a 	mov	r17,r6
  807230:	1021883a 	mov	r16,r2
  807234:	003e3b06 	br	806b24 <__alt_mem_onchip_mem+0xff7feb24>
  807238:	10002f26 	beq	r2,zero,8072f8 <__adddf3+0x850>
  80723c:	4984b03a 	or	r2,r9,r6
  807240:	10001126 	beq	r2,zero,807288 <__adddf3+0x7e0>
  807244:	4004d0fa 	srli	r2,r8,3
  807248:	8822d0fa 	srli	r17,r17,3
  80724c:	4010977a 	slli	r8,r8,29
  807250:	10c0022c 	andhi	r3,r2,8
  807254:	4462b03a 	or	r17,r8,r17
  807258:	183feb26 	beq	r3,zero,807208 <__alt_mem_onchip_mem+0xff7ff208>
  80725c:	4808d0fa 	srli	r4,r9,3
  807260:	20c0022c 	andhi	r3,r4,8
  807264:	183fe81e 	bne	r3,zero,807208 <__alt_mem_onchip_mem+0xff7ff208>
  807268:	300cd0fa 	srli	r6,r6,3
  80726c:	4806977a 	slli	r3,r9,29
  807270:	2005883a 	mov	r2,r4
  807274:	19a2b03a 	or	r17,r3,r6
  807278:	003fe306 	br	807208 <__alt_mem_onchip_mem+0xff7ff208>
  80727c:	0011883a 	mov	r8,zero
  807280:	0005883a 	mov	r2,zero
  807284:	003e3f06 	br	806b84 <__alt_mem_onchip_mem+0xff7feb84>
  807288:	0401ffc4 	movi	r16,2047
  80728c:	003e2506 	br	806b24 <__alt_mem_onchip_mem+0xff7feb24>
  807290:	0013883a 	mov	r9,zero
  807294:	003f8406 	br	8070a8 <__alt_mem_onchip_mem+0xff7ff0a8>
  807298:	0005883a 	mov	r2,zero
  80729c:	0007883a 	mov	r3,zero
  8072a0:	003e8906 	br	806cc8 <__alt_mem_onchip_mem+0xff7fecc8>
  8072a4:	197ff804 	addi	r5,r3,-32
  8072a8:	01000804 	movi	r4,32
  8072ac:	414ad83a 	srl	r5,r8,r5
  8072b0:	19002426 	beq	r3,r4,807344 <__adddf3+0x89c>
  8072b4:	01001004 	movi	r4,64
  8072b8:	20c7c83a 	sub	r3,r4,r3
  8072bc:	40c6983a 	sll	r3,r8,r3
  8072c0:	1c46b03a 	or	r3,r3,r17
  8072c4:	1806c03a 	cmpne	r3,r3,zero
  8072c8:	28e2b03a 	or	r17,r5,r3
  8072cc:	0007883a 	mov	r3,zero
  8072d0:	003f2306 	br	806f60 <__alt_mem_onchip_mem+0xff7fef60>
  8072d4:	0007883a 	mov	r3,zero
  8072d8:	5811883a 	mov	r8,r11
  8072dc:	00bfffc4 	movi	r2,-1
  8072e0:	0401ffc4 	movi	r16,2047
  8072e4:	003e7806 	br	806cc8 <__alt_mem_onchip_mem+0xff7fecc8>
  8072e8:	4462b03a 	or	r17,r8,r17
  8072ec:	8822c03a 	cmpne	r17,r17,zero
  8072f0:	0009883a 	mov	r4,zero
  8072f4:	003fa006 	br	807178 <__alt_mem_onchip_mem+0xff7ff178>
  8072f8:	4811883a 	mov	r8,r9
  8072fc:	3023883a 	mov	r17,r6
  807300:	0401ffc4 	movi	r16,2047
  807304:	003e0706 	br	806b24 <__alt_mem_onchip_mem+0xff7feb24>
  807308:	4811883a 	mov	r8,r9
  80730c:	3023883a 	mov	r17,r6
  807310:	003e0406 	br	806b24 <__alt_mem_onchip_mem+0xff7feb24>
  807314:	21fff804 	addi	r7,r4,-32
  807318:	01400804 	movi	r5,32
  80731c:	41ced83a 	srl	r7,r8,r7
  807320:	21400a26 	beq	r4,r5,80734c <__adddf3+0x8a4>
  807324:	01401004 	movi	r5,64
  807328:	2909c83a 	sub	r4,r5,r4
  80732c:	4108983a 	sll	r4,r8,r4
  807330:	2448b03a 	or	r4,r4,r17
  807334:	2008c03a 	cmpne	r4,r4,zero
  807338:	3922b03a 	or	r17,r7,r4
  80733c:	0009883a 	mov	r4,zero
  807340:	003f8d06 	br	807178 <__alt_mem_onchip_mem+0xff7ff178>
  807344:	0007883a 	mov	r3,zero
  807348:	003fdd06 	br	8072c0 <__alt_mem_onchip_mem+0xff7ff2c0>
  80734c:	0009883a 	mov	r4,zero
  807350:	003ff706 	br	807330 <__alt_mem_onchip_mem+0xff7ff330>

00807354 <__divdf3>:
  807354:	defff204 	addi	sp,sp,-56
  807358:	dd400915 	stw	r21,36(sp)
  80735c:	282ad53a 	srli	r21,r5,20
  807360:	dd000815 	stw	r20,32(sp)
  807364:	2828d7fa 	srli	r20,r5,31
  807368:	dc000415 	stw	r16,16(sp)
  80736c:	04000434 	movhi	r16,16
  807370:	df000c15 	stw	fp,48(sp)
  807374:	843fffc4 	addi	r16,r16,-1
  807378:	dfc00d15 	stw	ra,52(sp)
  80737c:	ddc00b15 	stw	r23,44(sp)
  807380:	dd800a15 	stw	r22,40(sp)
  807384:	dcc00715 	stw	r19,28(sp)
  807388:	dc800615 	stw	r18,24(sp)
  80738c:	dc400515 	stw	r17,20(sp)
  807390:	ad41ffcc 	andi	r21,r21,2047
  807394:	2c20703a 	and	r16,r5,r16
  807398:	a7003fcc 	andi	fp,r20,255
  80739c:	a8006126 	beq	r21,zero,807524 <__divdf3+0x1d0>
  8073a0:	0081ffc4 	movi	r2,2047
  8073a4:	2025883a 	mov	r18,r4
  8073a8:	a8803726 	beq	r21,r2,807488 <__divdf3+0x134>
  8073ac:	80800434 	orhi	r2,r16,16
  8073b0:	100490fa 	slli	r2,r2,3
  8073b4:	2020d77a 	srli	r16,r4,29
  8073b8:	202490fa 	slli	r18,r4,3
  8073bc:	ad7f0044 	addi	r21,r21,-1023
  8073c0:	80a0b03a 	or	r16,r16,r2
  8073c4:	0027883a 	mov	r19,zero
  8073c8:	0013883a 	mov	r9,zero
  8073cc:	3804d53a 	srli	r2,r7,20
  8073d0:	382cd7fa 	srli	r22,r7,31
  8073d4:	04400434 	movhi	r17,16
  8073d8:	8c7fffc4 	addi	r17,r17,-1
  8073dc:	1081ffcc 	andi	r2,r2,2047
  8073e0:	3011883a 	mov	r8,r6
  8073e4:	3c62703a 	and	r17,r7,r17
  8073e8:	b5c03fcc 	andi	r23,r22,255
  8073ec:	10006c26 	beq	r2,zero,8075a0 <__divdf3+0x24c>
  8073f0:	00c1ffc4 	movi	r3,2047
  8073f4:	10c06426 	beq	r2,r3,807588 <__divdf3+0x234>
  8073f8:	88c00434 	orhi	r3,r17,16
  8073fc:	180690fa 	slli	r3,r3,3
  807400:	3022d77a 	srli	r17,r6,29
  807404:	301090fa 	slli	r8,r6,3
  807408:	10bf0044 	addi	r2,r2,-1023
  80740c:	88e2b03a 	or	r17,r17,r3
  807410:	000f883a 	mov	r7,zero
  807414:	a58cf03a 	xor	r6,r20,r22
  807418:	3cc8b03a 	or	r4,r7,r19
  80741c:	a8abc83a 	sub	r21,r21,r2
  807420:	008003c4 	movi	r2,15
  807424:	3007883a 	mov	r3,r6
  807428:	34c03fcc 	andi	r19,r6,255
  80742c:	11009036 	bltu	r2,r4,807670 <__divdf3+0x31c>
  807430:	200890ba 	slli	r4,r4,2
  807434:	00802034 	movhi	r2,128
  807438:	109d1204 	addi	r2,r2,29768
  80743c:	2089883a 	add	r4,r4,r2
  807440:	20800017 	ldw	r2,0(r4)
  807444:	1000683a 	jmp	r2
  807448:	00807670 	cmpltui	r2,zero,473
  80744c:	008074c0 	call	8074c <__alt_mem_sdram-0x77f8b4>
  807450:	00807660 	cmpeqi	r2,zero,473
  807454:	008074b4 	movhi	r2,466
  807458:	00807660 	cmpeqi	r2,zero,473
  80745c:	00807634 	movhi	r2,472
  807460:	00807660 	cmpeqi	r2,zero,473
  807464:	008074b4 	movhi	r2,466
  807468:	008074c0 	call	8074c <__alt_mem_sdram-0x77f8b4>
  80746c:	008074c0 	call	8074c <__alt_mem_sdram-0x77f8b4>
  807470:	00807634 	movhi	r2,472
  807474:	008074b4 	movhi	r2,466
  807478:	008074a4 	muli	r2,zero,466
  80747c:	008074a4 	muli	r2,zero,466
  807480:	008074a4 	muli	r2,zero,466
  807484:	00807954 	movui	r2,485
  807488:	2404b03a 	or	r2,r4,r16
  80748c:	1000661e 	bne	r2,zero,807628 <__divdf3+0x2d4>
  807490:	04c00204 	movi	r19,8
  807494:	0021883a 	mov	r16,zero
  807498:	0025883a 	mov	r18,zero
  80749c:	02400084 	movi	r9,2
  8074a0:	003fca06 	br	8073cc <__alt_mem_onchip_mem+0xff7ff3cc>
  8074a4:	8023883a 	mov	r17,r16
  8074a8:	9011883a 	mov	r8,r18
  8074ac:	e02f883a 	mov	r23,fp
  8074b0:	480f883a 	mov	r7,r9
  8074b4:	00800084 	movi	r2,2
  8074b8:	3881311e 	bne	r7,r2,807980 <__divdf3+0x62c>
  8074bc:	b827883a 	mov	r19,r23
  8074c0:	98c0004c 	andi	r3,r19,1
  8074c4:	0081ffc4 	movi	r2,2047
  8074c8:	000b883a 	mov	r5,zero
  8074cc:	0025883a 	mov	r18,zero
  8074d0:	1004953a 	slli	r2,r2,20
  8074d4:	18c03fcc 	andi	r3,r3,255
  8074d8:	04400434 	movhi	r17,16
  8074dc:	8c7fffc4 	addi	r17,r17,-1
  8074e0:	180697fa 	slli	r3,r3,31
  8074e4:	2c4a703a 	and	r5,r5,r17
  8074e8:	288ab03a 	or	r5,r5,r2
  8074ec:	28c6b03a 	or	r3,r5,r3
  8074f0:	9005883a 	mov	r2,r18
  8074f4:	dfc00d17 	ldw	ra,52(sp)
  8074f8:	df000c17 	ldw	fp,48(sp)
  8074fc:	ddc00b17 	ldw	r23,44(sp)
  807500:	dd800a17 	ldw	r22,40(sp)
  807504:	dd400917 	ldw	r21,36(sp)
  807508:	dd000817 	ldw	r20,32(sp)
  80750c:	dcc00717 	ldw	r19,28(sp)
  807510:	dc800617 	ldw	r18,24(sp)
  807514:	dc400517 	ldw	r17,20(sp)
  807518:	dc000417 	ldw	r16,16(sp)
  80751c:	dec00e04 	addi	sp,sp,56
  807520:	f800283a 	ret
  807524:	2404b03a 	or	r2,r4,r16
  807528:	2027883a 	mov	r19,r4
  80752c:	10003926 	beq	r2,zero,807614 <__divdf3+0x2c0>
  807530:	80012e26 	beq	r16,zero,8079ec <__divdf3+0x698>
  807534:	8009883a 	mov	r4,r16
  807538:	d9800315 	stw	r6,12(sp)
  80753c:	d9c00215 	stw	r7,8(sp)
  807540:	0808fa40 	call	808fa4 <__clzsi2>
  807544:	d9800317 	ldw	r6,12(sp)
  807548:	d9c00217 	ldw	r7,8(sp)
  80754c:	113ffd44 	addi	r4,r2,-11
  807550:	00c00704 	movi	r3,28
  807554:	19012116 	blt	r3,r4,8079dc <__divdf3+0x688>
  807558:	00c00744 	movi	r3,29
  80755c:	147ffe04 	addi	r17,r2,-8
  807560:	1907c83a 	sub	r3,r3,r4
  807564:	8460983a 	sll	r16,r16,r17
  807568:	98c6d83a 	srl	r3,r19,r3
  80756c:	9c64983a 	sll	r18,r19,r17
  807570:	1c20b03a 	or	r16,r3,r16
  807574:	1080fcc4 	addi	r2,r2,1011
  807578:	00abc83a 	sub	r21,zero,r2
  80757c:	0027883a 	mov	r19,zero
  807580:	0013883a 	mov	r9,zero
  807584:	003f9106 	br	8073cc <__alt_mem_onchip_mem+0xff7ff3cc>
  807588:	3446b03a 	or	r3,r6,r17
  80758c:	18001f1e 	bne	r3,zero,80760c <__divdf3+0x2b8>
  807590:	0023883a 	mov	r17,zero
  807594:	0011883a 	mov	r8,zero
  807598:	01c00084 	movi	r7,2
  80759c:	003f9d06 	br	807414 <__alt_mem_onchip_mem+0xff7ff414>
  8075a0:	3446b03a 	or	r3,r6,r17
  8075a4:	18001526 	beq	r3,zero,8075fc <__divdf3+0x2a8>
  8075a8:	88011b26 	beq	r17,zero,807a18 <__divdf3+0x6c4>
  8075ac:	8809883a 	mov	r4,r17
  8075b0:	d9800315 	stw	r6,12(sp)
  8075b4:	da400115 	stw	r9,4(sp)
  8075b8:	0808fa40 	call	808fa4 <__clzsi2>
  8075bc:	d9800317 	ldw	r6,12(sp)
  8075c0:	da400117 	ldw	r9,4(sp)
  8075c4:	113ffd44 	addi	r4,r2,-11
  8075c8:	00c00704 	movi	r3,28
  8075cc:	19010e16 	blt	r3,r4,807a08 <__divdf3+0x6b4>
  8075d0:	00c00744 	movi	r3,29
  8075d4:	123ffe04 	addi	r8,r2,-8
  8075d8:	1907c83a 	sub	r3,r3,r4
  8075dc:	8a22983a 	sll	r17,r17,r8
  8075e0:	30c6d83a 	srl	r3,r6,r3
  8075e4:	3210983a 	sll	r8,r6,r8
  8075e8:	1c62b03a 	or	r17,r3,r17
  8075ec:	1080fcc4 	addi	r2,r2,1011
  8075f0:	0085c83a 	sub	r2,zero,r2
  8075f4:	000f883a 	mov	r7,zero
  8075f8:	003f8606 	br	807414 <__alt_mem_onchip_mem+0xff7ff414>
  8075fc:	0023883a 	mov	r17,zero
  807600:	0011883a 	mov	r8,zero
  807604:	01c00044 	movi	r7,1
  807608:	003f8206 	br	807414 <__alt_mem_onchip_mem+0xff7ff414>
  80760c:	01c000c4 	movi	r7,3
  807610:	003f8006 	br	807414 <__alt_mem_onchip_mem+0xff7ff414>
  807614:	04c00104 	movi	r19,4
  807618:	0021883a 	mov	r16,zero
  80761c:	0025883a 	mov	r18,zero
  807620:	02400044 	movi	r9,1
  807624:	003f6906 	br	8073cc <__alt_mem_onchip_mem+0xff7ff3cc>
  807628:	04c00304 	movi	r19,12
  80762c:	024000c4 	movi	r9,3
  807630:	003f6606 	br	8073cc <__alt_mem_onchip_mem+0xff7ff3cc>
  807634:	01400434 	movhi	r5,16
  807638:	0007883a 	mov	r3,zero
  80763c:	297fffc4 	addi	r5,r5,-1
  807640:	04bfffc4 	movi	r18,-1
  807644:	0081ffc4 	movi	r2,2047
  807648:	003fa106 	br	8074d0 <__alt_mem_onchip_mem+0xff7ff4d0>
  80764c:	00c00044 	movi	r3,1
  807650:	1887c83a 	sub	r3,r3,r2
  807654:	01000e04 	movi	r4,56
  807658:	20c1210e 	bge	r4,r3,807ae0 <__divdf3+0x78c>
  80765c:	98c0004c 	andi	r3,r19,1
  807660:	0005883a 	mov	r2,zero
  807664:	000b883a 	mov	r5,zero
  807668:	0025883a 	mov	r18,zero
  80766c:	003f9806 	br	8074d0 <__alt_mem_onchip_mem+0xff7ff4d0>
  807670:	8c00fd36 	bltu	r17,r16,807a68 <__divdf3+0x714>
  807674:	8440fb26 	beq	r16,r17,807a64 <__divdf3+0x710>
  807678:	8007883a 	mov	r3,r16
  80767c:	ad7fffc4 	addi	r21,r21,-1
  807680:	0021883a 	mov	r16,zero
  807684:	4004d63a 	srli	r2,r8,24
  807688:	8822923a 	slli	r17,r17,8
  80768c:	1809883a 	mov	r4,r3
  807690:	402c923a 	slli	r22,r8,8
  807694:	88b8b03a 	or	fp,r17,r2
  807698:	e028d43a 	srli	r20,fp,16
  80769c:	d8c00015 	stw	r3,0(sp)
  8076a0:	e5ffffcc 	andi	r23,fp,65535
  8076a4:	a00b883a 	mov	r5,r20
  8076a8:	08069ec0 	call	8069ec <__udivsi3>
  8076ac:	d8c00017 	ldw	r3,0(sp)
  8076b0:	a00b883a 	mov	r5,r20
  8076b4:	d8800315 	stw	r2,12(sp)
  8076b8:	1809883a 	mov	r4,r3
  8076bc:	0806a500 	call	806a50 <__umodsi3>
  8076c0:	d9800317 	ldw	r6,12(sp)
  8076c4:	1006943a 	slli	r3,r2,16
  8076c8:	9004d43a 	srli	r2,r18,16
  8076cc:	b9a3383a 	mul	r17,r23,r6
  8076d0:	10c4b03a 	or	r2,r2,r3
  8076d4:	1440062e 	bgeu	r2,r17,8076f0 <__divdf3+0x39c>
  8076d8:	1705883a 	add	r2,r2,fp
  8076dc:	30ffffc4 	addi	r3,r6,-1
  8076e0:	1700ee36 	bltu	r2,fp,807a9c <__divdf3+0x748>
  8076e4:	1440ed2e 	bgeu	r2,r17,807a9c <__divdf3+0x748>
  8076e8:	31bfff84 	addi	r6,r6,-2
  8076ec:	1705883a 	add	r2,r2,fp
  8076f0:	1463c83a 	sub	r17,r2,r17
  8076f4:	a00b883a 	mov	r5,r20
  8076f8:	8809883a 	mov	r4,r17
  8076fc:	d9800315 	stw	r6,12(sp)
  807700:	08069ec0 	call	8069ec <__udivsi3>
  807704:	a00b883a 	mov	r5,r20
  807708:	8809883a 	mov	r4,r17
  80770c:	d8800215 	stw	r2,8(sp)
  807710:	0806a500 	call	806a50 <__umodsi3>
  807714:	d9c00217 	ldw	r7,8(sp)
  807718:	1004943a 	slli	r2,r2,16
  80771c:	94bfffcc 	andi	r18,r18,65535
  807720:	b9d1383a 	mul	r8,r23,r7
  807724:	90a4b03a 	or	r18,r18,r2
  807728:	d9800317 	ldw	r6,12(sp)
  80772c:	9200062e 	bgeu	r18,r8,807748 <__divdf3+0x3f4>
  807730:	9725883a 	add	r18,r18,fp
  807734:	38bfffc4 	addi	r2,r7,-1
  807738:	9700d636 	bltu	r18,fp,807a94 <__divdf3+0x740>
  80773c:	9200d52e 	bgeu	r18,r8,807a94 <__divdf3+0x740>
  807740:	39ffff84 	addi	r7,r7,-2
  807744:	9725883a 	add	r18,r18,fp
  807748:	3004943a 	slli	r2,r6,16
  80774c:	b012d43a 	srli	r9,r22,16
  807750:	b1bfffcc 	andi	r6,r22,65535
  807754:	11e2b03a 	or	r17,r2,r7
  807758:	8806d43a 	srli	r3,r17,16
  80775c:	893fffcc 	andi	r4,r17,65535
  807760:	218b383a 	mul	r5,r4,r6
  807764:	30c5383a 	mul	r2,r6,r3
  807768:	2249383a 	mul	r4,r4,r9
  80776c:	280ed43a 	srli	r7,r5,16
  807770:	9225c83a 	sub	r18,r18,r8
  807774:	2089883a 	add	r4,r4,r2
  807778:	3909883a 	add	r4,r7,r4
  80777c:	1a47383a 	mul	r3,r3,r9
  807780:	2080022e 	bgeu	r4,r2,80778c <__divdf3+0x438>
  807784:	00800074 	movhi	r2,1
  807788:	1887883a 	add	r3,r3,r2
  80778c:	2004d43a 	srli	r2,r4,16
  807790:	2008943a 	slli	r4,r4,16
  807794:	297fffcc 	andi	r5,r5,65535
  807798:	10c7883a 	add	r3,r2,r3
  80779c:	2149883a 	add	r4,r4,r5
  8077a0:	90c0a536 	bltu	r18,r3,807a38 <__divdf3+0x6e4>
  8077a4:	90c0bf26 	beq	r18,r3,807aa4 <__divdf3+0x750>
  8077a8:	90c7c83a 	sub	r3,r18,r3
  8077ac:	810fc83a 	sub	r7,r16,r4
  8077b0:	81e5803a 	cmpltu	r18,r16,r7
  8077b4:	1ca5c83a 	sub	r18,r3,r18
  8077b8:	e480c126 	beq	fp,r18,807ac0 <__divdf3+0x76c>
  8077bc:	a00b883a 	mov	r5,r20
  8077c0:	9009883a 	mov	r4,r18
  8077c4:	d9800315 	stw	r6,12(sp)
  8077c8:	d9c00215 	stw	r7,8(sp)
  8077cc:	da400115 	stw	r9,4(sp)
  8077d0:	08069ec0 	call	8069ec <__udivsi3>
  8077d4:	a00b883a 	mov	r5,r20
  8077d8:	9009883a 	mov	r4,r18
  8077dc:	d8800015 	stw	r2,0(sp)
  8077e0:	0806a500 	call	806a50 <__umodsi3>
  8077e4:	d9c00217 	ldw	r7,8(sp)
  8077e8:	da000017 	ldw	r8,0(sp)
  8077ec:	1006943a 	slli	r3,r2,16
  8077f0:	3804d43a 	srli	r2,r7,16
  8077f4:	ba21383a 	mul	r16,r23,r8
  8077f8:	d9800317 	ldw	r6,12(sp)
  8077fc:	10c4b03a 	or	r2,r2,r3
  807800:	da400117 	ldw	r9,4(sp)
  807804:	1400062e 	bgeu	r2,r16,807820 <__divdf3+0x4cc>
  807808:	1705883a 	add	r2,r2,fp
  80780c:	40ffffc4 	addi	r3,r8,-1
  807810:	1700ad36 	bltu	r2,fp,807ac8 <__divdf3+0x774>
  807814:	1400ac2e 	bgeu	r2,r16,807ac8 <__divdf3+0x774>
  807818:	423fff84 	addi	r8,r8,-2
  80781c:	1705883a 	add	r2,r2,fp
  807820:	1421c83a 	sub	r16,r2,r16
  807824:	a00b883a 	mov	r5,r20
  807828:	8009883a 	mov	r4,r16
  80782c:	d9800315 	stw	r6,12(sp)
  807830:	d9c00215 	stw	r7,8(sp)
  807834:	da000015 	stw	r8,0(sp)
  807838:	da400115 	stw	r9,4(sp)
  80783c:	08069ec0 	call	8069ec <__udivsi3>
  807840:	8009883a 	mov	r4,r16
  807844:	a00b883a 	mov	r5,r20
  807848:	1025883a 	mov	r18,r2
  80784c:	0806a500 	call	806a50 <__umodsi3>
  807850:	d9c00217 	ldw	r7,8(sp)
  807854:	1004943a 	slli	r2,r2,16
  807858:	bcaf383a 	mul	r23,r23,r18
  80785c:	393fffcc 	andi	r4,r7,65535
  807860:	2088b03a 	or	r4,r4,r2
  807864:	d9800317 	ldw	r6,12(sp)
  807868:	da000017 	ldw	r8,0(sp)
  80786c:	da400117 	ldw	r9,4(sp)
  807870:	25c0062e 	bgeu	r4,r23,80788c <__divdf3+0x538>
  807874:	2709883a 	add	r4,r4,fp
  807878:	90bfffc4 	addi	r2,r18,-1
  80787c:	27009436 	bltu	r4,fp,807ad0 <__divdf3+0x77c>
  807880:	25c0932e 	bgeu	r4,r23,807ad0 <__divdf3+0x77c>
  807884:	94bfff84 	addi	r18,r18,-2
  807888:	2709883a 	add	r4,r4,fp
  80788c:	4004943a 	slli	r2,r8,16
  807890:	25efc83a 	sub	r23,r4,r23
  807894:	1490b03a 	or	r8,r2,r18
  807898:	4008d43a 	srli	r4,r8,16
  80789c:	40ffffcc 	andi	r3,r8,65535
  8078a0:	30c5383a 	mul	r2,r6,r3
  8078a4:	1a47383a 	mul	r3,r3,r9
  8078a8:	310d383a 	mul	r6,r6,r4
  8078ac:	100ad43a 	srli	r5,r2,16
  8078b0:	4913383a 	mul	r9,r9,r4
  8078b4:	1987883a 	add	r3,r3,r6
  8078b8:	28c7883a 	add	r3,r5,r3
  8078bc:	1980022e 	bgeu	r3,r6,8078c8 <__divdf3+0x574>
  8078c0:	01000074 	movhi	r4,1
  8078c4:	4913883a 	add	r9,r9,r4
  8078c8:	1808d43a 	srli	r4,r3,16
  8078cc:	1806943a 	slli	r3,r3,16
  8078d0:	10bfffcc 	andi	r2,r2,65535
  8078d4:	2253883a 	add	r9,r4,r9
  8078d8:	1887883a 	add	r3,r3,r2
  8078dc:	ba403836 	bltu	r23,r9,8079c0 <__divdf3+0x66c>
  8078e0:	ba403626 	beq	r23,r9,8079bc <__divdf3+0x668>
  8078e4:	42000054 	ori	r8,r8,1
  8078e8:	a880ffc4 	addi	r2,r21,1023
  8078ec:	00bf570e 	bge	zero,r2,80764c <__alt_mem_onchip_mem+0xff7ff64c>
  8078f0:	40c001cc 	andi	r3,r8,7
  8078f4:	18000726 	beq	r3,zero,807914 <__divdf3+0x5c0>
  8078f8:	40c003cc 	andi	r3,r8,15
  8078fc:	01000104 	movi	r4,4
  807900:	19000426 	beq	r3,r4,807914 <__divdf3+0x5c0>
  807904:	4107883a 	add	r3,r8,r4
  807908:	1a11803a 	cmpltu	r8,r3,r8
  80790c:	8a23883a 	add	r17,r17,r8
  807910:	1811883a 	mov	r8,r3
  807914:	88c0402c 	andhi	r3,r17,256
  807918:	18000426 	beq	r3,zero,80792c <__divdf3+0x5d8>
  80791c:	00ffc034 	movhi	r3,65280
  807920:	18ffffc4 	addi	r3,r3,-1
  807924:	a8810004 	addi	r2,r21,1024
  807928:	88e2703a 	and	r17,r17,r3
  80792c:	00c1ff84 	movi	r3,2046
  807930:	18bee316 	blt	r3,r2,8074c0 <__alt_mem_onchip_mem+0xff7ff4c0>
  807934:	8824977a 	slli	r18,r17,29
  807938:	4010d0fa 	srli	r8,r8,3
  80793c:	8822927a 	slli	r17,r17,9
  807940:	1081ffcc 	andi	r2,r2,2047
  807944:	9224b03a 	or	r18,r18,r8
  807948:	880ad33a 	srli	r5,r17,12
  80794c:	98c0004c 	andi	r3,r19,1
  807950:	003edf06 	br	8074d0 <__alt_mem_onchip_mem+0xff7ff4d0>
  807954:	8080022c 	andhi	r2,r16,8
  807958:	10001226 	beq	r2,zero,8079a4 <__divdf3+0x650>
  80795c:	8880022c 	andhi	r2,r17,8
  807960:	1000101e 	bne	r2,zero,8079a4 <__divdf3+0x650>
  807964:	00800434 	movhi	r2,16
  807968:	89400234 	orhi	r5,r17,8
  80796c:	10bfffc4 	addi	r2,r2,-1
  807970:	b007883a 	mov	r3,r22
  807974:	288a703a 	and	r5,r5,r2
  807978:	4025883a 	mov	r18,r8
  80797c:	003f3106 	br	807644 <__alt_mem_onchip_mem+0xff7ff644>
  807980:	008000c4 	movi	r2,3
  807984:	3880a626 	beq	r7,r2,807c20 <__divdf3+0x8cc>
  807988:	00800044 	movi	r2,1
  80798c:	3880521e 	bne	r7,r2,807ad8 <__divdf3+0x784>
  807990:	b807883a 	mov	r3,r23
  807994:	0005883a 	mov	r2,zero
  807998:	000b883a 	mov	r5,zero
  80799c:	0025883a 	mov	r18,zero
  8079a0:	003ecb06 	br	8074d0 <__alt_mem_onchip_mem+0xff7ff4d0>
  8079a4:	00800434 	movhi	r2,16
  8079a8:	81400234 	orhi	r5,r16,8
  8079ac:	10bfffc4 	addi	r2,r2,-1
  8079b0:	a007883a 	mov	r3,r20
  8079b4:	288a703a 	and	r5,r5,r2
  8079b8:	003f2206 	br	807644 <__alt_mem_onchip_mem+0xff7ff644>
  8079bc:	183fca26 	beq	r3,zero,8078e8 <__alt_mem_onchip_mem+0xff7ff8e8>
  8079c0:	e5ef883a 	add	r23,fp,r23
  8079c4:	40bfffc4 	addi	r2,r8,-1
  8079c8:	bf00392e 	bgeu	r23,fp,807ab0 <__divdf3+0x75c>
  8079cc:	1011883a 	mov	r8,r2
  8079d0:	ba7fc41e 	bne	r23,r9,8078e4 <__alt_mem_onchip_mem+0xff7ff8e4>
  8079d4:	b0ffc31e 	bne	r22,r3,8078e4 <__alt_mem_onchip_mem+0xff7ff8e4>
  8079d8:	003fc306 	br	8078e8 <__alt_mem_onchip_mem+0xff7ff8e8>
  8079dc:	143ff604 	addi	r16,r2,-40
  8079e0:	9c20983a 	sll	r16,r19,r16
  8079e4:	0025883a 	mov	r18,zero
  8079e8:	003ee206 	br	807574 <__alt_mem_onchip_mem+0xff7ff574>
  8079ec:	d9800315 	stw	r6,12(sp)
  8079f0:	d9c00215 	stw	r7,8(sp)
  8079f4:	0808fa40 	call	808fa4 <__clzsi2>
  8079f8:	10800804 	addi	r2,r2,32
  8079fc:	d9c00217 	ldw	r7,8(sp)
  807a00:	d9800317 	ldw	r6,12(sp)
  807a04:	003ed106 	br	80754c <__alt_mem_onchip_mem+0xff7ff54c>
  807a08:	147ff604 	addi	r17,r2,-40
  807a0c:	3462983a 	sll	r17,r6,r17
  807a10:	0011883a 	mov	r8,zero
  807a14:	003ef506 	br	8075ec <__alt_mem_onchip_mem+0xff7ff5ec>
  807a18:	3009883a 	mov	r4,r6
  807a1c:	d9800315 	stw	r6,12(sp)
  807a20:	da400115 	stw	r9,4(sp)
  807a24:	0808fa40 	call	808fa4 <__clzsi2>
  807a28:	10800804 	addi	r2,r2,32
  807a2c:	da400117 	ldw	r9,4(sp)
  807a30:	d9800317 	ldw	r6,12(sp)
  807a34:	003ee306 	br	8075c4 <__alt_mem_onchip_mem+0xff7ff5c4>
  807a38:	85a1883a 	add	r16,r16,r22
  807a3c:	8585803a 	cmpltu	r2,r16,r22
  807a40:	1705883a 	add	r2,r2,fp
  807a44:	14a5883a 	add	r18,r2,r18
  807a48:	88bfffc4 	addi	r2,r17,-1
  807a4c:	e4800c2e 	bgeu	fp,r18,807a80 <__divdf3+0x72c>
  807a50:	90c03e36 	bltu	r18,r3,807b4c <__divdf3+0x7f8>
  807a54:	1c806926 	beq	r3,r18,807bfc <__divdf3+0x8a8>
  807a58:	90c7c83a 	sub	r3,r18,r3
  807a5c:	1023883a 	mov	r17,r2
  807a60:	003f5206 	br	8077ac <__alt_mem_onchip_mem+0xff7ff7ac>
  807a64:	923f0436 	bltu	r18,r8,807678 <__alt_mem_onchip_mem+0xff7ff678>
  807a68:	800897fa 	slli	r4,r16,31
  807a6c:	9004d07a 	srli	r2,r18,1
  807a70:	8006d07a 	srli	r3,r16,1
  807a74:	902097fa 	slli	r16,r18,31
  807a78:	20a4b03a 	or	r18,r4,r2
  807a7c:	003f0106 	br	807684 <__alt_mem_onchip_mem+0xff7ff684>
  807a80:	e4bff51e 	bne	fp,r18,807a58 <__alt_mem_onchip_mem+0xff7ffa58>
  807a84:	85bff22e 	bgeu	r16,r22,807a50 <__alt_mem_onchip_mem+0xff7ffa50>
  807a88:	e0c7c83a 	sub	r3,fp,r3
  807a8c:	1023883a 	mov	r17,r2
  807a90:	003f4606 	br	8077ac <__alt_mem_onchip_mem+0xff7ff7ac>
  807a94:	100f883a 	mov	r7,r2
  807a98:	003f2b06 	br	807748 <__alt_mem_onchip_mem+0xff7ff748>
  807a9c:	180d883a 	mov	r6,r3
  807aa0:	003f1306 	br	8076f0 <__alt_mem_onchip_mem+0xff7ff6f0>
  807aa4:	813fe436 	bltu	r16,r4,807a38 <__alt_mem_onchip_mem+0xff7ffa38>
  807aa8:	0007883a 	mov	r3,zero
  807aac:	003f3f06 	br	8077ac <__alt_mem_onchip_mem+0xff7ff7ac>
  807ab0:	ba402c36 	bltu	r23,r9,807b64 <__divdf3+0x810>
  807ab4:	4dc05426 	beq	r9,r23,807c08 <__divdf3+0x8b4>
  807ab8:	1011883a 	mov	r8,r2
  807abc:	003f8906 	br	8078e4 <__alt_mem_onchip_mem+0xff7ff8e4>
  807ac0:	023fffc4 	movi	r8,-1
  807ac4:	003f8806 	br	8078e8 <__alt_mem_onchip_mem+0xff7ff8e8>
  807ac8:	1811883a 	mov	r8,r3
  807acc:	003f5406 	br	807820 <__alt_mem_onchip_mem+0xff7ff820>
  807ad0:	1025883a 	mov	r18,r2
  807ad4:	003f6d06 	br	80788c <__alt_mem_onchip_mem+0xff7ff88c>
  807ad8:	b827883a 	mov	r19,r23
  807adc:	003f8206 	br	8078e8 <__alt_mem_onchip_mem+0xff7ff8e8>
  807ae0:	010007c4 	movi	r4,31
  807ae4:	20c02616 	blt	r4,r3,807b80 <__divdf3+0x82c>
  807ae8:	00800804 	movi	r2,32
  807aec:	10c5c83a 	sub	r2,r2,r3
  807af0:	888a983a 	sll	r5,r17,r2
  807af4:	40c8d83a 	srl	r4,r8,r3
  807af8:	4084983a 	sll	r2,r8,r2
  807afc:	88e2d83a 	srl	r17,r17,r3
  807b00:	2906b03a 	or	r3,r5,r4
  807b04:	1004c03a 	cmpne	r2,r2,zero
  807b08:	1886b03a 	or	r3,r3,r2
  807b0c:	188001cc 	andi	r2,r3,7
  807b10:	10000726 	beq	r2,zero,807b30 <__divdf3+0x7dc>
  807b14:	188003cc 	andi	r2,r3,15
  807b18:	01000104 	movi	r4,4
  807b1c:	11000426 	beq	r2,r4,807b30 <__divdf3+0x7dc>
  807b20:	1805883a 	mov	r2,r3
  807b24:	10c00104 	addi	r3,r2,4
  807b28:	1885803a 	cmpltu	r2,r3,r2
  807b2c:	88a3883a 	add	r17,r17,r2
  807b30:	8880202c 	andhi	r2,r17,128
  807b34:	10002726 	beq	r2,zero,807bd4 <__divdf3+0x880>
  807b38:	98c0004c 	andi	r3,r19,1
  807b3c:	00800044 	movi	r2,1
  807b40:	000b883a 	mov	r5,zero
  807b44:	0025883a 	mov	r18,zero
  807b48:	003e6106 	br	8074d0 <__alt_mem_onchip_mem+0xff7ff4d0>
  807b4c:	85a1883a 	add	r16,r16,r22
  807b50:	8585803a 	cmpltu	r2,r16,r22
  807b54:	1705883a 	add	r2,r2,fp
  807b58:	14a5883a 	add	r18,r2,r18
  807b5c:	8c7fff84 	addi	r17,r17,-2
  807b60:	003f1106 	br	8077a8 <__alt_mem_onchip_mem+0xff7ff7a8>
  807b64:	b589883a 	add	r4,r22,r22
  807b68:	25ad803a 	cmpltu	r22,r4,r22
  807b6c:	b739883a 	add	fp,r22,fp
  807b70:	40bfff84 	addi	r2,r8,-2
  807b74:	bf2f883a 	add	r23,r23,fp
  807b78:	202d883a 	mov	r22,r4
  807b7c:	003f9306 	br	8079cc <__alt_mem_onchip_mem+0xff7ff9cc>
  807b80:	013ff844 	movi	r4,-31
  807b84:	2085c83a 	sub	r2,r4,r2
  807b88:	8888d83a 	srl	r4,r17,r2
  807b8c:	00800804 	movi	r2,32
  807b90:	18802126 	beq	r3,r2,807c18 <__divdf3+0x8c4>
  807b94:	00801004 	movi	r2,64
  807b98:	10c5c83a 	sub	r2,r2,r3
  807b9c:	8884983a 	sll	r2,r17,r2
  807ba0:	1204b03a 	or	r2,r2,r8
  807ba4:	1004c03a 	cmpne	r2,r2,zero
  807ba8:	2084b03a 	or	r2,r4,r2
  807bac:	144001cc 	andi	r17,r2,7
  807bb0:	88000d1e 	bne	r17,zero,807be8 <__divdf3+0x894>
  807bb4:	000b883a 	mov	r5,zero
  807bb8:	1024d0fa 	srli	r18,r2,3
  807bbc:	98c0004c 	andi	r3,r19,1
  807bc0:	0005883a 	mov	r2,zero
  807bc4:	9464b03a 	or	r18,r18,r17
  807bc8:	003e4106 	br	8074d0 <__alt_mem_onchip_mem+0xff7ff4d0>
  807bcc:	1007883a 	mov	r3,r2
  807bd0:	0023883a 	mov	r17,zero
  807bd4:	880a927a 	slli	r5,r17,9
  807bd8:	1805883a 	mov	r2,r3
  807bdc:	8822977a 	slli	r17,r17,29
  807be0:	280ad33a 	srli	r5,r5,12
  807be4:	003ff406 	br	807bb8 <__alt_mem_onchip_mem+0xff7ffbb8>
  807be8:	10c003cc 	andi	r3,r2,15
  807bec:	01000104 	movi	r4,4
  807bf0:	193ff626 	beq	r3,r4,807bcc <__alt_mem_onchip_mem+0xff7ffbcc>
  807bf4:	0023883a 	mov	r17,zero
  807bf8:	003fca06 	br	807b24 <__alt_mem_onchip_mem+0xff7ffb24>
  807bfc:	813fd336 	bltu	r16,r4,807b4c <__alt_mem_onchip_mem+0xff7ffb4c>
  807c00:	1023883a 	mov	r17,r2
  807c04:	003fa806 	br	807aa8 <__alt_mem_onchip_mem+0xff7ffaa8>
  807c08:	b0ffd636 	bltu	r22,r3,807b64 <__alt_mem_onchip_mem+0xff7ffb64>
  807c0c:	1011883a 	mov	r8,r2
  807c10:	b0ff341e 	bne	r22,r3,8078e4 <__alt_mem_onchip_mem+0xff7ff8e4>
  807c14:	003f3406 	br	8078e8 <__alt_mem_onchip_mem+0xff7ff8e8>
  807c18:	0005883a 	mov	r2,zero
  807c1c:	003fe006 	br	807ba0 <__alt_mem_onchip_mem+0xff7ffba0>
  807c20:	00800434 	movhi	r2,16
  807c24:	89400234 	orhi	r5,r17,8
  807c28:	10bfffc4 	addi	r2,r2,-1
  807c2c:	b807883a 	mov	r3,r23
  807c30:	288a703a 	and	r5,r5,r2
  807c34:	4025883a 	mov	r18,r8
  807c38:	003e8206 	br	807644 <__alt_mem_onchip_mem+0xff7ff644>

00807c3c <__gedf2>:
  807c3c:	2804d53a 	srli	r2,r5,20
  807c40:	3806d53a 	srli	r3,r7,20
  807c44:	02000434 	movhi	r8,16
  807c48:	423fffc4 	addi	r8,r8,-1
  807c4c:	1081ffcc 	andi	r2,r2,2047
  807c50:	0241ffc4 	movi	r9,2047
  807c54:	2a14703a 	and	r10,r5,r8
  807c58:	18c1ffcc 	andi	r3,r3,2047
  807c5c:	3a10703a 	and	r8,r7,r8
  807c60:	280ad7fa 	srli	r5,r5,31
  807c64:	380ed7fa 	srli	r7,r7,31
  807c68:	12401d26 	beq	r2,r9,807ce0 <__gedf2+0xa4>
  807c6c:	0241ffc4 	movi	r9,2047
  807c70:	1a401226 	beq	r3,r9,807cbc <__gedf2+0x80>
  807c74:	1000081e 	bne	r2,zero,807c98 <__gedf2+0x5c>
  807c78:	2296b03a 	or	r11,r4,r10
  807c7c:	5813003a 	cmpeq	r9,r11,zero
  807c80:	1800091e 	bne	r3,zero,807ca8 <__gedf2+0x6c>
  807c84:	3218b03a 	or	r12,r6,r8
  807c88:	6000071e 	bne	r12,zero,807ca8 <__gedf2+0x6c>
  807c8c:	0005883a 	mov	r2,zero
  807c90:	5800101e 	bne	r11,zero,807cd4 <__gedf2+0x98>
  807c94:	f800283a 	ret
  807c98:	18000c1e 	bne	r3,zero,807ccc <__gedf2+0x90>
  807c9c:	3212b03a 	or	r9,r6,r8
  807ca0:	48000c26 	beq	r9,zero,807cd4 <__gedf2+0x98>
  807ca4:	0013883a 	mov	r9,zero
  807ca8:	39c03fcc 	andi	r7,r7,255
  807cac:	48000826 	beq	r9,zero,807cd0 <__gedf2+0x94>
  807cb0:	38000926 	beq	r7,zero,807cd8 <__gedf2+0x9c>
  807cb4:	00800044 	movi	r2,1
  807cb8:	f800283a 	ret
  807cbc:	3212b03a 	or	r9,r6,r8
  807cc0:	483fec26 	beq	r9,zero,807c74 <__alt_mem_onchip_mem+0xff7ffc74>
  807cc4:	00bfff84 	movi	r2,-2
  807cc8:	f800283a 	ret
  807ccc:	39c03fcc 	andi	r7,r7,255
  807cd0:	29c00626 	beq	r5,r7,807cec <__gedf2+0xb0>
  807cd4:	283ff726 	beq	r5,zero,807cb4 <__alt_mem_onchip_mem+0xff7ffcb4>
  807cd8:	00bfffc4 	movi	r2,-1
  807cdc:	f800283a 	ret
  807ce0:	2292b03a 	or	r9,r4,r10
  807ce4:	483fe126 	beq	r9,zero,807c6c <__alt_mem_onchip_mem+0xff7ffc6c>
  807ce8:	003ff606 	br	807cc4 <__alt_mem_onchip_mem+0xff7ffcc4>
  807cec:	18bff916 	blt	r3,r2,807cd4 <__alt_mem_onchip_mem+0xff7ffcd4>
  807cf0:	10c00316 	blt	r2,r3,807d00 <__gedf2+0xc4>
  807cf4:	42bff736 	bltu	r8,r10,807cd4 <__alt_mem_onchip_mem+0xff7ffcd4>
  807cf8:	52000326 	beq	r10,r8,807d08 <__gedf2+0xcc>
  807cfc:	5200042e 	bgeu	r10,r8,807d10 <__gedf2+0xd4>
  807d00:	283fec1e 	bne	r5,zero,807cb4 <__alt_mem_onchip_mem+0xff7ffcb4>
  807d04:	003ff406 	br	807cd8 <__alt_mem_onchip_mem+0xff7ffcd8>
  807d08:	313ff236 	bltu	r6,r4,807cd4 <__alt_mem_onchip_mem+0xff7ffcd4>
  807d0c:	21bffc36 	bltu	r4,r6,807d00 <__alt_mem_onchip_mem+0xff7ffd00>
  807d10:	0005883a 	mov	r2,zero
  807d14:	f800283a 	ret

00807d18 <__ledf2>:
  807d18:	2804d53a 	srli	r2,r5,20
  807d1c:	3810d53a 	srli	r8,r7,20
  807d20:	00c00434 	movhi	r3,16
  807d24:	18ffffc4 	addi	r3,r3,-1
  807d28:	1081ffcc 	andi	r2,r2,2047
  807d2c:	0241ffc4 	movi	r9,2047
  807d30:	28d4703a 	and	r10,r5,r3
  807d34:	4201ffcc 	andi	r8,r8,2047
  807d38:	38c6703a 	and	r3,r7,r3
  807d3c:	280ad7fa 	srli	r5,r5,31
  807d40:	380ed7fa 	srli	r7,r7,31
  807d44:	12401f26 	beq	r2,r9,807dc4 <__ledf2+0xac>
  807d48:	0241ffc4 	movi	r9,2047
  807d4c:	42401426 	beq	r8,r9,807da0 <__ledf2+0x88>
  807d50:	1000091e 	bne	r2,zero,807d78 <__ledf2+0x60>
  807d54:	2296b03a 	or	r11,r4,r10
  807d58:	5813003a 	cmpeq	r9,r11,zero
  807d5c:	29403fcc 	andi	r5,r5,255
  807d60:	40000a1e 	bne	r8,zero,807d8c <__ledf2+0x74>
  807d64:	30d8b03a 	or	r12,r6,r3
  807d68:	6000081e 	bne	r12,zero,807d8c <__ledf2+0x74>
  807d6c:	0005883a 	mov	r2,zero
  807d70:	5800111e 	bne	r11,zero,807db8 <__ledf2+0xa0>
  807d74:	f800283a 	ret
  807d78:	29403fcc 	andi	r5,r5,255
  807d7c:	40000c1e 	bne	r8,zero,807db0 <__ledf2+0x98>
  807d80:	30d2b03a 	or	r9,r6,r3
  807d84:	48000c26 	beq	r9,zero,807db8 <__ledf2+0xa0>
  807d88:	0013883a 	mov	r9,zero
  807d8c:	39c03fcc 	andi	r7,r7,255
  807d90:	48000826 	beq	r9,zero,807db4 <__ledf2+0x9c>
  807d94:	38001126 	beq	r7,zero,807ddc <__ledf2+0xc4>
  807d98:	00800044 	movi	r2,1
  807d9c:	f800283a 	ret
  807da0:	30d2b03a 	or	r9,r6,r3
  807da4:	483fea26 	beq	r9,zero,807d50 <__alt_mem_onchip_mem+0xff7ffd50>
  807da8:	00800084 	movi	r2,2
  807dac:	f800283a 	ret
  807db0:	39c03fcc 	andi	r7,r7,255
  807db4:	39400726 	beq	r7,r5,807dd4 <__ledf2+0xbc>
  807db8:	2800081e 	bne	r5,zero,807ddc <__ledf2+0xc4>
  807dbc:	00800044 	movi	r2,1
  807dc0:	f800283a 	ret
  807dc4:	2292b03a 	or	r9,r4,r10
  807dc8:	483fdf26 	beq	r9,zero,807d48 <__alt_mem_onchip_mem+0xff7ffd48>
  807dcc:	00800084 	movi	r2,2
  807dd0:	f800283a 	ret
  807dd4:	4080030e 	bge	r8,r2,807de4 <__ledf2+0xcc>
  807dd8:	383fef26 	beq	r7,zero,807d98 <__alt_mem_onchip_mem+0xff7ffd98>
  807ddc:	00bfffc4 	movi	r2,-1
  807de0:	f800283a 	ret
  807de4:	123feb16 	blt	r2,r8,807d94 <__alt_mem_onchip_mem+0xff7ffd94>
  807de8:	1abff336 	bltu	r3,r10,807db8 <__alt_mem_onchip_mem+0xff7ffdb8>
  807dec:	50c00326 	beq	r10,r3,807dfc <__ledf2+0xe4>
  807df0:	50c0042e 	bgeu	r10,r3,807e04 <__ledf2+0xec>
  807df4:	283fe81e 	bne	r5,zero,807d98 <__alt_mem_onchip_mem+0xff7ffd98>
  807df8:	003ff806 	br	807ddc <__alt_mem_onchip_mem+0xff7ffddc>
  807dfc:	313fee36 	bltu	r6,r4,807db8 <__alt_mem_onchip_mem+0xff7ffdb8>
  807e00:	21bffc36 	bltu	r4,r6,807df4 <__alt_mem_onchip_mem+0xff7ffdf4>
  807e04:	0005883a 	mov	r2,zero
  807e08:	f800283a 	ret

00807e0c <__muldf3>:
  807e0c:	defff304 	addi	sp,sp,-52
  807e10:	2804d53a 	srli	r2,r5,20
  807e14:	dd800915 	stw	r22,36(sp)
  807e18:	282cd7fa 	srli	r22,r5,31
  807e1c:	dc000315 	stw	r16,12(sp)
  807e20:	04000434 	movhi	r16,16
  807e24:	dd400815 	stw	r21,32(sp)
  807e28:	dc800515 	stw	r18,20(sp)
  807e2c:	843fffc4 	addi	r16,r16,-1
  807e30:	dfc00c15 	stw	ra,48(sp)
  807e34:	df000b15 	stw	fp,44(sp)
  807e38:	ddc00a15 	stw	r23,40(sp)
  807e3c:	dd000715 	stw	r20,28(sp)
  807e40:	dcc00615 	stw	r19,24(sp)
  807e44:	dc400415 	stw	r17,16(sp)
  807e48:	1481ffcc 	andi	r18,r2,2047
  807e4c:	2c20703a 	and	r16,r5,r16
  807e50:	b02b883a 	mov	r21,r22
  807e54:	b2403fcc 	andi	r9,r22,255
  807e58:	90006026 	beq	r18,zero,807fdc <__muldf3+0x1d0>
  807e5c:	0081ffc4 	movi	r2,2047
  807e60:	2029883a 	mov	r20,r4
  807e64:	90803626 	beq	r18,r2,807f40 <__muldf3+0x134>
  807e68:	80800434 	orhi	r2,r16,16
  807e6c:	100490fa 	slli	r2,r2,3
  807e70:	2020d77a 	srli	r16,r4,29
  807e74:	202890fa 	slli	r20,r4,3
  807e78:	94bf0044 	addi	r18,r18,-1023
  807e7c:	80a0b03a 	or	r16,r16,r2
  807e80:	0027883a 	mov	r19,zero
  807e84:	0039883a 	mov	fp,zero
  807e88:	3804d53a 	srli	r2,r7,20
  807e8c:	382ed7fa 	srli	r23,r7,31
  807e90:	04400434 	movhi	r17,16
  807e94:	8c7fffc4 	addi	r17,r17,-1
  807e98:	1081ffcc 	andi	r2,r2,2047
  807e9c:	3011883a 	mov	r8,r6
  807ea0:	3c62703a 	and	r17,r7,r17
  807ea4:	ba803fcc 	andi	r10,r23,255
  807ea8:	10006d26 	beq	r2,zero,808060 <__muldf3+0x254>
  807eac:	00c1ffc4 	movi	r3,2047
  807eb0:	10c06526 	beq	r2,r3,808048 <__muldf3+0x23c>
  807eb4:	88c00434 	orhi	r3,r17,16
  807eb8:	180690fa 	slli	r3,r3,3
  807ebc:	3022d77a 	srli	r17,r6,29
  807ec0:	301090fa 	slli	r8,r6,3
  807ec4:	10bf0044 	addi	r2,r2,-1023
  807ec8:	88e2b03a 	or	r17,r17,r3
  807ecc:	000b883a 	mov	r5,zero
  807ed0:	9085883a 	add	r2,r18,r2
  807ed4:	2cc8b03a 	or	r4,r5,r19
  807ed8:	00c003c4 	movi	r3,15
  807edc:	bdacf03a 	xor	r22,r23,r22
  807ee0:	12c00044 	addi	r11,r2,1
  807ee4:	19009936 	bltu	r3,r4,80814c <__muldf3+0x340>
  807ee8:	200890ba 	slli	r4,r4,2
  807eec:	00c02034 	movhi	r3,128
  807ef0:	18dfc004 	addi	r3,r3,32512
  807ef4:	20c9883a 	add	r4,r4,r3
  807ef8:	20c00017 	ldw	r3,0(r4)
  807efc:	1800683a 	jmp	r3
  807f00:	0080814c 	andi	r2,zero,517
  807f04:	00807f60 	cmpeqi	r2,zero,509
  807f08:	00807f60 	cmpeqi	r2,zero,509
  807f0c:	00807f5c 	xori	r2,zero,509
  807f10:	00808128 	cmpgeui	r2,zero,516
  807f14:	00808128 	cmpgeui	r2,zero,516
  807f18:	00808110 	cmplti	r2,zero,516
  807f1c:	00807f5c 	xori	r2,zero,509
  807f20:	00808128 	cmpgeui	r2,zero,516
  807f24:	00808110 	cmplti	r2,zero,516
  807f28:	00808128 	cmpgeui	r2,zero,516
  807f2c:	00807f5c 	xori	r2,zero,509
  807f30:	00808138 	rdprs	r2,zero,516
  807f34:	00808138 	rdprs	r2,zero,516
  807f38:	00808138 	rdprs	r2,zero,516
  807f3c:	00808354 	movui	r2,525
  807f40:	2404b03a 	or	r2,r4,r16
  807f44:	10006f1e 	bne	r2,zero,808104 <__muldf3+0x2f8>
  807f48:	04c00204 	movi	r19,8
  807f4c:	0021883a 	mov	r16,zero
  807f50:	0029883a 	mov	r20,zero
  807f54:	07000084 	movi	fp,2
  807f58:	003fcb06 	br	807e88 <__alt_mem_onchip_mem+0xff7ffe88>
  807f5c:	502d883a 	mov	r22,r10
  807f60:	00800084 	movi	r2,2
  807f64:	28805726 	beq	r5,r2,8080c4 <__muldf3+0x2b8>
  807f68:	008000c4 	movi	r2,3
  807f6c:	28816626 	beq	r5,r2,808508 <__muldf3+0x6fc>
  807f70:	00800044 	movi	r2,1
  807f74:	2881411e 	bne	r5,r2,80847c <__muldf3+0x670>
  807f78:	b02b883a 	mov	r21,r22
  807f7c:	0005883a 	mov	r2,zero
  807f80:	000b883a 	mov	r5,zero
  807f84:	0029883a 	mov	r20,zero
  807f88:	1004953a 	slli	r2,r2,20
  807f8c:	a8c03fcc 	andi	r3,r21,255
  807f90:	04400434 	movhi	r17,16
  807f94:	8c7fffc4 	addi	r17,r17,-1
  807f98:	180697fa 	slli	r3,r3,31
  807f9c:	2c4a703a 	and	r5,r5,r17
  807fa0:	288ab03a 	or	r5,r5,r2
  807fa4:	28c6b03a 	or	r3,r5,r3
  807fa8:	a005883a 	mov	r2,r20
  807fac:	dfc00c17 	ldw	ra,48(sp)
  807fb0:	df000b17 	ldw	fp,44(sp)
  807fb4:	ddc00a17 	ldw	r23,40(sp)
  807fb8:	dd800917 	ldw	r22,36(sp)
  807fbc:	dd400817 	ldw	r21,32(sp)
  807fc0:	dd000717 	ldw	r20,28(sp)
  807fc4:	dcc00617 	ldw	r19,24(sp)
  807fc8:	dc800517 	ldw	r18,20(sp)
  807fcc:	dc400417 	ldw	r17,16(sp)
  807fd0:	dc000317 	ldw	r16,12(sp)
  807fd4:	dec00d04 	addi	sp,sp,52
  807fd8:	f800283a 	ret
  807fdc:	2404b03a 	or	r2,r4,r16
  807fe0:	2027883a 	mov	r19,r4
  807fe4:	10004226 	beq	r2,zero,8080f0 <__muldf3+0x2e4>
  807fe8:	8000fc26 	beq	r16,zero,8083dc <__muldf3+0x5d0>
  807fec:	8009883a 	mov	r4,r16
  807ff0:	d9800215 	stw	r6,8(sp)
  807ff4:	d9c00015 	stw	r7,0(sp)
  807ff8:	da400115 	stw	r9,4(sp)
  807ffc:	0808fa40 	call	808fa4 <__clzsi2>
  808000:	d9800217 	ldw	r6,8(sp)
  808004:	d9c00017 	ldw	r7,0(sp)
  808008:	da400117 	ldw	r9,4(sp)
  80800c:	113ffd44 	addi	r4,r2,-11
  808010:	00c00704 	movi	r3,28
  808014:	1900ed16 	blt	r3,r4,8083cc <__muldf3+0x5c0>
  808018:	00c00744 	movi	r3,29
  80801c:	147ffe04 	addi	r17,r2,-8
  808020:	1907c83a 	sub	r3,r3,r4
  808024:	8460983a 	sll	r16,r16,r17
  808028:	98c6d83a 	srl	r3,r19,r3
  80802c:	9c68983a 	sll	r20,r19,r17
  808030:	1c20b03a 	or	r16,r3,r16
  808034:	1080fcc4 	addi	r2,r2,1011
  808038:	00a5c83a 	sub	r18,zero,r2
  80803c:	0027883a 	mov	r19,zero
  808040:	0039883a 	mov	fp,zero
  808044:	003f9006 	br	807e88 <__alt_mem_onchip_mem+0xff7ffe88>
  808048:	3446b03a 	or	r3,r6,r17
  80804c:	1800261e 	bne	r3,zero,8080e8 <__muldf3+0x2dc>
  808050:	0023883a 	mov	r17,zero
  808054:	0011883a 	mov	r8,zero
  808058:	01400084 	movi	r5,2
  80805c:	003f9c06 	br	807ed0 <__alt_mem_onchip_mem+0xff7ffed0>
  808060:	3446b03a 	or	r3,r6,r17
  808064:	18001c26 	beq	r3,zero,8080d8 <__muldf3+0x2cc>
  808068:	8800ce26 	beq	r17,zero,8083a4 <__muldf3+0x598>
  80806c:	8809883a 	mov	r4,r17
  808070:	d9800215 	stw	r6,8(sp)
  808074:	da400115 	stw	r9,4(sp)
  808078:	da800015 	stw	r10,0(sp)
  80807c:	0808fa40 	call	808fa4 <__clzsi2>
  808080:	d9800217 	ldw	r6,8(sp)
  808084:	da400117 	ldw	r9,4(sp)
  808088:	da800017 	ldw	r10,0(sp)
  80808c:	113ffd44 	addi	r4,r2,-11
  808090:	00c00704 	movi	r3,28
  808094:	1900bf16 	blt	r3,r4,808394 <__muldf3+0x588>
  808098:	00c00744 	movi	r3,29
  80809c:	123ffe04 	addi	r8,r2,-8
  8080a0:	1907c83a 	sub	r3,r3,r4
  8080a4:	8a22983a 	sll	r17,r17,r8
  8080a8:	30c6d83a 	srl	r3,r6,r3
  8080ac:	3210983a 	sll	r8,r6,r8
  8080b0:	1c62b03a 	or	r17,r3,r17
  8080b4:	1080fcc4 	addi	r2,r2,1011
  8080b8:	0085c83a 	sub	r2,zero,r2
  8080bc:	000b883a 	mov	r5,zero
  8080c0:	003f8306 	br	807ed0 <__alt_mem_onchip_mem+0xff7ffed0>
  8080c4:	b02b883a 	mov	r21,r22
  8080c8:	0081ffc4 	movi	r2,2047
  8080cc:	000b883a 	mov	r5,zero
  8080d0:	0029883a 	mov	r20,zero
  8080d4:	003fac06 	br	807f88 <__alt_mem_onchip_mem+0xff7fff88>
  8080d8:	0023883a 	mov	r17,zero
  8080dc:	0011883a 	mov	r8,zero
  8080e0:	01400044 	movi	r5,1
  8080e4:	003f7a06 	br	807ed0 <__alt_mem_onchip_mem+0xff7ffed0>
  8080e8:	014000c4 	movi	r5,3
  8080ec:	003f7806 	br	807ed0 <__alt_mem_onchip_mem+0xff7ffed0>
  8080f0:	04c00104 	movi	r19,4
  8080f4:	0021883a 	mov	r16,zero
  8080f8:	0029883a 	mov	r20,zero
  8080fc:	07000044 	movi	fp,1
  808100:	003f6106 	br	807e88 <__alt_mem_onchip_mem+0xff7ffe88>
  808104:	04c00304 	movi	r19,12
  808108:	070000c4 	movi	fp,3
  80810c:	003f5e06 	br	807e88 <__alt_mem_onchip_mem+0xff7ffe88>
  808110:	01400434 	movhi	r5,16
  808114:	002b883a 	mov	r21,zero
  808118:	297fffc4 	addi	r5,r5,-1
  80811c:	053fffc4 	movi	r20,-1
  808120:	0081ffc4 	movi	r2,2047
  808124:	003f9806 	br	807f88 <__alt_mem_onchip_mem+0xff7fff88>
  808128:	8023883a 	mov	r17,r16
  80812c:	a011883a 	mov	r8,r20
  808130:	e00b883a 	mov	r5,fp
  808134:	003f8a06 	br	807f60 <__alt_mem_onchip_mem+0xff7fff60>
  808138:	8023883a 	mov	r17,r16
  80813c:	a011883a 	mov	r8,r20
  808140:	482d883a 	mov	r22,r9
  808144:	e00b883a 	mov	r5,fp
  808148:	003f8506 	br	807f60 <__alt_mem_onchip_mem+0xff7fff60>
  80814c:	a00ad43a 	srli	r5,r20,16
  808150:	401ad43a 	srli	r13,r8,16
  808154:	a53fffcc 	andi	r20,r20,65535
  808158:	423fffcc 	andi	r8,r8,65535
  80815c:	4519383a 	mul	r12,r8,r20
  808160:	4147383a 	mul	r3,r8,r5
  808164:	6d09383a 	mul	r4,r13,r20
  808168:	600cd43a 	srli	r6,r12,16
  80816c:	2b5d383a 	mul	r14,r5,r13
  808170:	20c9883a 	add	r4,r4,r3
  808174:	310d883a 	add	r6,r6,r4
  808178:	30c0022e 	bgeu	r6,r3,808184 <__muldf3+0x378>
  80817c:	00c00074 	movhi	r3,1
  808180:	70dd883a 	add	r14,r14,r3
  808184:	8826d43a 	srli	r19,r17,16
  808188:	8bffffcc 	andi	r15,r17,65535
  80818c:	7d23383a 	mul	r17,r15,r20
  808190:	7949383a 	mul	r4,r15,r5
  808194:	9d29383a 	mul	r20,r19,r20
  808198:	8814d43a 	srli	r10,r17,16
  80819c:	3012943a 	slli	r9,r6,16
  8081a0:	a129883a 	add	r20,r20,r4
  8081a4:	633fffcc 	andi	r12,r12,65535
  8081a8:	5515883a 	add	r10,r10,r20
  8081ac:	3006d43a 	srli	r3,r6,16
  8081b0:	4b13883a 	add	r9,r9,r12
  8081b4:	2ccb383a 	mul	r5,r5,r19
  8081b8:	5100022e 	bgeu	r10,r4,8081c4 <__muldf3+0x3b8>
  8081bc:	01000074 	movhi	r4,1
  8081c0:	290b883a 	add	r5,r5,r4
  8081c4:	802ad43a 	srli	r21,r16,16
  8081c8:	843fffcc 	andi	r16,r16,65535
  8081cc:	440d383a 	mul	r6,r8,r16
  8081d0:	4565383a 	mul	r18,r8,r21
  8081d4:	8349383a 	mul	r4,r16,r13
  8081d8:	500e943a 	slli	r7,r10,16
  8081dc:	3010d43a 	srli	r8,r6,16
  8081e0:	5028d43a 	srli	r20,r10,16
  8081e4:	2489883a 	add	r4,r4,r18
  8081e8:	8abfffcc 	andi	r10,r17,65535
  8081ec:	3a95883a 	add	r10,r7,r10
  8081f0:	4119883a 	add	r12,r8,r4
  8081f4:	a169883a 	add	r20,r20,r5
  8081f8:	1a87883a 	add	r3,r3,r10
  8081fc:	6d5b383a 	mul	r13,r13,r21
  808200:	6480022e 	bgeu	r12,r18,80820c <__muldf3+0x400>
  808204:	01000074 	movhi	r4,1
  808208:	691b883a 	add	r13,r13,r4
  80820c:	7c25383a 	mul	r18,r15,r16
  808210:	7d4b383a 	mul	r5,r15,r21
  808214:	84cf383a 	mul	r7,r16,r19
  808218:	901ed43a 	srli	r15,r18,16
  80821c:	6008d43a 	srli	r4,r12,16
  808220:	6010943a 	slli	r8,r12,16
  808224:	394f883a 	add	r7,r7,r5
  808228:	333fffcc 	andi	r12,r6,65535
  80822c:	79df883a 	add	r15,r15,r7
  808230:	235b883a 	add	r13,r4,r13
  808234:	9d63383a 	mul	r17,r19,r21
  808238:	4309883a 	add	r4,r8,r12
  80823c:	7940022e 	bgeu	r15,r5,808248 <__muldf3+0x43c>
  808240:	01400074 	movhi	r5,1
  808244:	8963883a 	add	r17,r17,r5
  808248:	780a943a 	slli	r5,r15,16
  80824c:	91bfffcc 	andi	r6,r18,65535
  808250:	70c7883a 	add	r3,r14,r3
  808254:	298d883a 	add	r6,r5,r6
  808258:	1a8f803a 	cmpltu	r7,r3,r10
  80825c:	350b883a 	add	r5,r6,r20
  808260:	20c7883a 	add	r3,r4,r3
  808264:	3955883a 	add	r10,r7,r5
  808268:	1909803a 	cmpltu	r4,r3,r4
  80826c:	6a91883a 	add	r8,r13,r10
  808270:	780cd43a 	srli	r6,r15,16
  808274:	2219883a 	add	r12,r4,r8
  808278:	2d0b803a 	cmpltu	r5,r5,r20
  80827c:	51cf803a 	cmpltu	r7,r10,r7
  808280:	29ceb03a 	or	r7,r5,r7
  808284:	4351803a 	cmpltu	r8,r8,r13
  808288:	610b803a 	cmpltu	r5,r12,r4
  80828c:	4148b03a 	or	r4,r8,r5
  808290:	398f883a 	add	r7,r7,r6
  808294:	3909883a 	add	r4,r7,r4
  808298:	1810927a 	slli	r8,r3,9
  80829c:	2449883a 	add	r4,r4,r17
  8082a0:	2008927a 	slli	r4,r4,9
  8082a4:	6022d5fa 	srli	r17,r12,23
  8082a8:	1806d5fa 	srli	r3,r3,23
  8082ac:	4252b03a 	or	r9,r8,r9
  8082b0:	600a927a 	slli	r5,r12,9
  8082b4:	4810c03a 	cmpne	r8,r9,zero
  8082b8:	2462b03a 	or	r17,r4,r17
  8082bc:	40c6b03a 	or	r3,r8,r3
  8082c0:	8900402c 	andhi	r4,r17,256
  8082c4:	1950b03a 	or	r8,r3,r5
  8082c8:	20000726 	beq	r4,zero,8082e8 <__muldf3+0x4dc>
  8082cc:	4006d07a 	srli	r3,r8,1
  8082d0:	880497fa 	slli	r2,r17,31
  8082d4:	4200004c 	andi	r8,r8,1
  8082d8:	8822d07a 	srli	r17,r17,1
  8082dc:	1a10b03a 	or	r8,r3,r8
  8082e0:	1210b03a 	or	r8,r2,r8
  8082e4:	5805883a 	mov	r2,r11
  8082e8:	1140ffc4 	addi	r5,r2,1023
  8082ec:	0140440e 	bge	zero,r5,808400 <__muldf3+0x5f4>
  8082f0:	40c001cc 	andi	r3,r8,7
  8082f4:	18000726 	beq	r3,zero,808314 <__muldf3+0x508>
  8082f8:	40c003cc 	andi	r3,r8,15
  8082fc:	01000104 	movi	r4,4
  808300:	19000426 	beq	r3,r4,808314 <__muldf3+0x508>
  808304:	4107883a 	add	r3,r8,r4
  808308:	1a11803a 	cmpltu	r8,r3,r8
  80830c:	8a23883a 	add	r17,r17,r8
  808310:	1811883a 	mov	r8,r3
  808314:	88c0402c 	andhi	r3,r17,256
  808318:	18000426 	beq	r3,zero,80832c <__muldf3+0x520>
  80831c:	11410004 	addi	r5,r2,1024
  808320:	00bfc034 	movhi	r2,65280
  808324:	10bfffc4 	addi	r2,r2,-1
  808328:	88a2703a 	and	r17,r17,r2
  80832c:	0081ff84 	movi	r2,2046
  808330:	117f6416 	blt	r2,r5,8080c4 <__alt_mem_onchip_mem+0xff8000c4>
  808334:	8828977a 	slli	r20,r17,29
  808338:	4010d0fa 	srli	r8,r8,3
  80833c:	8822927a 	slli	r17,r17,9
  808340:	2881ffcc 	andi	r2,r5,2047
  808344:	a228b03a 	or	r20,r20,r8
  808348:	880ad33a 	srli	r5,r17,12
  80834c:	b02b883a 	mov	r21,r22
  808350:	003f0d06 	br	807f88 <__alt_mem_onchip_mem+0xff7fff88>
  808354:	8080022c 	andhi	r2,r16,8
  808358:	10000926 	beq	r2,zero,808380 <__muldf3+0x574>
  80835c:	8880022c 	andhi	r2,r17,8
  808360:	1000071e 	bne	r2,zero,808380 <__muldf3+0x574>
  808364:	00800434 	movhi	r2,16
  808368:	89400234 	orhi	r5,r17,8
  80836c:	10bfffc4 	addi	r2,r2,-1
  808370:	b82b883a 	mov	r21,r23
  808374:	288a703a 	and	r5,r5,r2
  808378:	4029883a 	mov	r20,r8
  80837c:	003f6806 	br	808120 <__alt_mem_onchip_mem+0xff800120>
  808380:	00800434 	movhi	r2,16
  808384:	81400234 	orhi	r5,r16,8
  808388:	10bfffc4 	addi	r2,r2,-1
  80838c:	288a703a 	and	r5,r5,r2
  808390:	003f6306 	br	808120 <__alt_mem_onchip_mem+0xff800120>
  808394:	147ff604 	addi	r17,r2,-40
  808398:	3462983a 	sll	r17,r6,r17
  80839c:	0011883a 	mov	r8,zero
  8083a0:	003f4406 	br	8080b4 <__alt_mem_onchip_mem+0xff8000b4>
  8083a4:	3009883a 	mov	r4,r6
  8083a8:	d9800215 	stw	r6,8(sp)
  8083ac:	da400115 	stw	r9,4(sp)
  8083b0:	da800015 	stw	r10,0(sp)
  8083b4:	0808fa40 	call	808fa4 <__clzsi2>
  8083b8:	10800804 	addi	r2,r2,32
  8083bc:	da800017 	ldw	r10,0(sp)
  8083c0:	da400117 	ldw	r9,4(sp)
  8083c4:	d9800217 	ldw	r6,8(sp)
  8083c8:	003f3006 	br	80808c <__alt_mem_onchip_mem+0xff80008c>
  8083cc:	143ff604 	addi	r16,r2,-40
  8083d0:	9c20983a 	sll	r16,r19,r16
  8083d4:	0029883a 	mov	r20,zero
  8083d8:	003f1606 	br	808034 <__alt_mem_onchip_mem+0xff800034>
  8083dc:	d9800215 	stw	r6,8(sp)
  8083e0:	d9c00015 	stw	r7,0(sp)
  8083e4:	da400115 	stw	r9,4(sp)
  8083e8:	0808fa40 	call	808fa4 <__clzsi2>
  8083ec:	10800804 	addi	r2,r2,32
  8083f0:	da400117 	ldw	r9,4(sp)
  8083f4:	d9c00017 	ldw	r7,0(sp)
  8083f8:	d9800217 	ldw	r6,8(sp)
  8083fc:	003f0306 	br	80800c <__alt_mem_onchip_mem+0xff80000c>
  808400:	00c00044 	movi	r3,1
  808404:	1947c83a 	sub	r3,r3,r5
  808408:	00800e04 	movi	r2,56
  80840c:	10feda16 	blt	r2,r3,807f78 <__alt_mem_onchip_mem+0xff7fff78>
  808410:	008007c4 	movi	r2,31
  808414:	10c01b16 	blt	r2,r3,808484 <__muldf3+0x678>
  808418:	00800804 	movi	r2,32
  80841c:	10c5c83a 	sub	r2,r2,r3
  808420:	888a983a 	sll	r5,r17,r2
  808424:	40c8d83a 	srl	r4,r8,r3
  808428:	4084983a 	sll	r2,r8,r2
  80842c:	88e2d83a 	srl	r17,r17,r3
  808430:	2906b03a 	or	r3,r5,r4
  808434:	1004c03a 	cmpne	r2,r2,zero
  808438:	1886b03a 	or	r3,r3,r2
  80843c:	188001cc 	andi	r2,r3,7
  808440:	10000726 	beq	r2,zero,808460 <__muldf3+0x654>
  808444:	188003cc 	andi	r2,r3,15
  808448:	01000104 	movi	r4,4
  80844c:	11000426 	beq	r2,r4,808460 <__muldf3+0x654>
  808450:	1805883a 	mov	r2,r3
  808454:	10c00104 	addi	r3,r2,4
  808458:	1885803a 	cmpltu	r2,r3,r2
  80845c:	88a3883a 	add	r17,r17,r2
  808460:	8880202c 	andhi	r2,r17,128
  808464:	10001c26 	beq	r2,zero,8084d8 <__muldf3+0x6cc>
  808468:	b02b883a 	mov	r21,r22
  80846c:	00800044 	movi	r2,1
  808470:	000b883a 	mov	r5,zero
  808474:	0029883a 	mov	r20,zero
  808478:	003ec306 	br	807f88 <__alt_mem_onchip_mem+0xff7fff88>
  80847c:	5805883a 	mov	r2,r11
  808480:	003f9906 	br	8082e8 <__alt_mem_onchip_mem+0xff8002e8>
  808484:	00bff844 	movi	r2,-31
  808488:	1145c83a 	sub	r2,r2,r5
  80848c:	8888d83a 	srl	r4,r17,r2
  808490:	00800804 	movi	r2,32
  808494:	18801a26 	beq	r3,r2,808500 <__muldf3+0x6f4>
  808498:	00801004 	movi	r2,64
  80849c:	10c5c83a 	sub	r2,r2,r3
  8084a0:	8884983a 	sll	r2,r17,r2
  8084a4:	1204b03a 	or	r2,r2,r8
  8084a8:	1004c03a 	cmpne	r2,r2,zero
  8084ac:	2084b03a 	or	r2,r4,r2
  8084b0:	144001cc 	andi	r17,r2,7
  8084b4:	88000d1e 	bne	r17,zero,8084ec <__muldf3+0x6e0>
  8084b8:	000b883a 	mov	r5,zero
  8084bc:	1028d0fa 	srli	r20,r2,3
  8084c0:	b02b883a 	mov	r21,r22
  8084c4:	0005883a 	mov	r2,zero
  8084c8:	a468b03a 	or	r20,r20,r17
  8084cc:	003eae06 	br	807f88 <__alt_mem_onchip_mem+0xff7fff88>
  8084d0:	1007883a 	mov	r3,r2
  8084d4:	0023883a 	mov	r17,zero
  8084d8:	880a927a 	slli	r5,r17,9
  8084dc:	1805883a 	mov	r2,r3
  8084e0:	8822977a 	slli	r17,r17,29
  8084e4:	280ad33a 	srli	r5,r5,12
  8084e8:	003ff406 	br	8084bc <__alt_mem_onchip_mem+0xff8004bc>
  8084ec:	10c003cc 	andi	r3,r2,15
  8084f0:	01000104 	movi	r4,4
  8084f4:	193ff626 	beq	r3,r4,8084d0 <__alt_mem_onchip_mem+0xff8004d0>
  8084f8:	0023883a 	mov	r17,zero
  8084fc:	003fd506 	br	808454 <__alt_mem_onchip_mem+0xff800454>
  808500:	0005883a 	mov	r2,zero
  808504:	003fe706 	br	8084a4 <__alt_mem_onchip_mem+0xff8004a4>
  808508:	00800434 	movhi	r2,16
  80850c:	89400234 	orhi	r5,r17,8
  808510:	10bfffc4 	addi	r2,r2,-1
  808514:	b02b883a 	mov	r21,r22
  808518:	288a703a 	and	r5,r5,r2
  80851c:	4029883a 	mov	r20,r8
  808520:	003eff06 	br	808120 <__alt_mem_onchip_mem+0xff800120>

00808524 <__subdf3>:
  808524:	02000434 	movhi	r8,16
  808528:	423fffc4 	addi	r8,r8,-1
  80852c:	defffb04 	addi	sp,sp,-20
  808530:	2a14703a 	and	r10,r5,r8
  808534:	3812d53a 	srli	r9,r7,20
  808538:	3a10703a 	and	r8,r7,r8
  80853c:	2006d77a 	srli	r3,r4,29
  808540:	3004d77a 	srli	r2,r6,29
  808544:	dc000015 	stw	r16,0(sp)
  808548:	501490fa 	slli	r10,r10,3
  80854c:	2820d53a 	srli	r16,r5,20
  808550:	401090fa 	slli	r8,r8,3
  808554:	dc800215 	stw	r18,8(sp)
  808558:	dc400115 	stw	r17,4(sp)
  80855c:	dfc00415 	stw	ra,16(sp)
  808560:	202290fa 	slli	r17,r4,3
  808564:	dcc00315 	stw	r19,12(sp)
  808568:	4a41ffcc 	andi	r9,r9,2047
  80856c:	0101ffc4 	movi	r4,2047
  808570:	2824d7fa 	srli	r18,r5,31
  808574:	8401ffcc 	andi	r16,r16,2047
  808578:	50c6b03a 	or	r3,r10,r3
  80857c:	380ed7fa 	srli	r7,r7,31
  808580:	408ab03a 	or	r5,r8,r2
  808584:	300c90fa 	slli	r6,r6,3
  808588:	49009626 	beq	r9,r4,8087e4 <__subdf3+0x2c0>
  80858c:	39c0005c 	xori	r7,r7,1
  808590:	8245c83a 	sub	r2,r16,r9
  808594:	3c807426 	beq	r7,r18,808768 <__subdf3+0x244>
  808598:	0080af0e 	bge	zero,r2,808858 <__subdf3+0x334>
  80859c:	48002a1e 	bne	r9,zero,808648 <__subdf3+0x124>
  8085a0:	2988b03a 	or	r4,r5,r6
  8085a4:	20009a1e 	bne	r4,zero,808810 <__subdf3+0x2ec>
  8085a8:	888001cc 	andi	r2,r17,7
  8085ac:	10000726 	beq	r2,zero,8085cc <__subdf3+0xa8>
  8085b0:	888003cc 	andi	r2,r17,15
  8085b4:	01000104 	movi	r4,4
  8085b8:	11000426 	beq	r2,r4,8085cc <__subdf3+0xa8>
  8085bc:	890b883a 	add	r5,r17,r4
  8085c0:	2c63803a 	cmpltu	r17,r5,r17
  8085c4:	1c47883a 	add	r3,r3,r17
  8085c8:	2823883a 	mov	r17,r5
  8085cc:	1880202c 	andhi	r2,r3,128
  8085d0:	10005926 	beq	r2,zero,808738 <__subdf3+0x214>
  8085d4:	84000044 	addi	r16,r16,1
  8085d8:	0081ffc4 	movi	r2,2047
  8085dc:	8080be26 	beq	r16,r2,8088d8 <__subdf3+0x3b4>
  8085e0:	017fe034 	movhi	r5,65408
  8085e4:	297fffc4 	addi	r5,r5,-1
  8085e8:	1946703a 	and	r3,r3,r5
  8085ec:	1804977a 	slli	r2,r3,29
  8085f0:	1806927a 	slli	r3,r3,9
  8085f4:	8822d0fa 	srli	r17,r17,3
  8085f8:	8401ffcc 	andi	r16,r16,2047
  8085fc:	180ad33a 	srli	r5,r3,12
  808600:	9100004c 	andi	r4,r18,1
  808604:	1444b03a 	or	r2,r2,r17
  808608:	80c1ffcc 	andi	r3,r16,2047
  80860c:	1820953a 	slli	r16,r3,20
  808610:	20c03fcc 	andi	r3,r4,255
  808614:	180897fa 	slli	r4,r3,31
  808618:	00c00434 	movhi	r3,16
  80861c:	18ffffc4 	addi	r3,r3,-1
  808620:	28c6703a 	and	r3,r5,r3
  808624:	1c06b03a 	or	r3,r3,r16
  808628:	1906b03a 	or	r3,r3,r4
  80862c:	dfc00417 	ldw	ra,16(sp)
  808630:	dcc00317 	ldw	r19,12(sp)
  808634:	dc800217 	ldw	r18,8(sp)
  808638:	dc400117 	ldw	r17,4(sp)
  80863c:	dc000017 	ldw	r16,0(sp)
  808640:	dec00504 	addi	sp,sp,20
  808644:	f800283a 	ret
  808648:	0101ffc4 	movi	r4,2047
  80864c:	813fd626 	beq	r16,r4,8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  808650:	29402034 	orhi	r5,r5,128
  808654:	01000e04 	movi	r4,56
  808658:	2080a316 	blt	r4,r2,8088e8 <__subdf3+0x3c4>
  80865c:	010007c4 	movi	r4,31
  808660:	2080c616 	blt	r4,r2,80897c <__subdf3+0x458>
  808664:	01000804 	movi	r4,32
  808668:	2089c83a 	sub	r4,r4,r2
  80866c:	2910983a 	sll	r8,r5,r4
  808670:	308ed83a 	srl	r7,r6,r2
  808674:	3108983a 	sll	r4,r6,r4
  808678:	2884d83a 	srl	r2,r5,r2
  80867c:	41ccb03a 	or	r6,r8,r7
  808680:	2008c03a 	cmpne	r4,r4,zero
  808684:	310cb03a 	or	r6,r6,r4
  808688:	898dc83a 	sub	r6,r17,r6
  80868c:	89a3803a 	cmpltu	r17,r17,r6
  808690:	1887c83a 	sub	r3,r3,r2
  808694:	1c47c83a 	sub	r3,r3,r17
  808698:	3023883a 	mov	r17,r6
  80869c:	1880202c 	andhi	r2,r3,128
  8086a0:	10002326 	beq	r2,zero,808730 <__subdf3+0x20c>
  8086a4:	04c02034 	movhi	r19,128
  8086a8:	9cffffc4 	addi	r19,r19,-1
  8086ac:	1ce6703a 	and	r19,r3,r19
  8086b0:	98007a26 	beq	r19,zero,80889c <__subdf3+0x378>
  8086b4:	9809883a 	mov	r4,r19
  8086b8:	0808fa40 	call	808fa4 <__clzsi2>
  8086bc:	113ffe04 	addi	r4,r2,-8
  8086c0:	00c007c4 	movi	r3,31
  8086c4:	19007b16 	blt	r3,r4,8088b4 <__subdf3+0x390>
  8086c8:	00800804 	movi	r2,32
  8086cc:	1105c83a 	sub	r2,r2,r4
  8086d0:	8884d83a 	srl	r2,r17,r2
  8086d4:	9906983a 	sll	r3,r19,r4
  8086d8:	8922983a 	sll	r17,r17,r4
  8086dc:	10c4b03a 	or	r2,r2,r3
  8086e0:	24007816 	blt	r4,r16,8088c4 <__subdf3+0x3a0>
  8086e4:	2421c83a 	sub	r16,r4,r16
  8086e8:	80c00044 	addi	r3,r16,1
  8086ec:	010007c4 	movi	r4,31
  8086f0:	20c09516 	blt	r4,r3,808948 <__subdf3+0x424>
  8086f4:	01400804 	movi	r5,32
  8086f8:	28cbc83a 	sub	r5,r5,r3
  8086fc:	88c8d83a 	srl	r4,r17,r3
  808700:	8962983a 	sll	r17,r17,r5
  808704:	114a983a 	sll	r5,r2,r5
  808708:	10c6d83a 	srl	r3,r2,r3
  80870c:	8804c03a 	cmpne	r2,r17,zero
  808710:	290ab03a 	or	r5,r5,r4
  808714:	28a2b03a 	or	r17,r5,r2
  808718:	0021883a 	mov	r16,zero
  80871c:	003fa206 	br	8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  808720:	2090b03a 	or	r8,r4,r2
  808724:	40018e26 	beq	r8,zero,808d60 <__subdf3+0x83c>
  808728:	1007883a 	mov	r3,r2
  80872c:	2023883a 	mov	r17,r4
  808730:	888001cc 	andi	r2,r17,7
  808734:	103f9e1e 	bne	r2,zero,8085b0 <__alt_mem_onchip_mem+0xff8005b0>
  808738:	1804977a 	slli	r2,r3,29
  80873c:	8822d0fa 	srli	r17,r17,3
  808740:	1810d0fa 	srli	r8,r3,3
  808744:	9100004c 	andi	r4,r18,1
  808748:	1444b03a 	or	r2,r2,r17
  80874c:	00c1ffc4 	movi	r3,2047
  808750:	80c02826 	beq	r16,r3,8087f4 <__subdf3+0x2d0>
  808754:	01400434 	movhi	r5,16
  808758:	297fffc4 	addi	r5,r5,-1
  80875c:	80e0703a 	and	r16,r16,r3
  808760:	414a703a 	and	r5,r8,r5
  808764:	003fa806 	br	808608 <__alt_mem_onchip_mem+0xff800608>
  808768:	0080630e 	bge	zero,r2,8088f8 <__subdf3+0x3d4>
  80876c:	48003026 	beq	r9,zero,808830 <__subdf3+0x30c>
  808770:	0101ffc4 	movi	r4,2047
  808774:	813f8c26 	beq	r16,r4,8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  808778:	29402034 	orhi	r5,r5,128
  80877c:	01000e04 	movi	r4,56
  808780:	2080a90e 	bge	r4,r2,808a28 <__subdf3+0x504>
  808784:	298cb03a 	or	r6,r5,r6
  808788:	3012c03a 	cmpne	r9,r6,zero
  80878c:	0005883a 	mov	r2,zero
  808790:	4c53883a 	add	r9,r9,r17
  808794:	4c63803a 	cmpltu	r17,r9,r17
  808798:	10c7883a 	add	r3,r2,r3
  80879c:	88c7883a 	add	r3,r17,r3
  8087a0:	4823883a 	mov	r17,r9
  8087a4:	1880202c 	andhi	r2,r3,128
  8087a8:	1000d026 	beq	r2,zero,808aec <__subdf3+0x5c8>
  8087ac:	84000044 	addi	r16,r16,1
  8087b0:	0081ffc4 	movi	r2,2047
  8087b4:	8080fe26 	beq	r16,r2,808bb0 <__subdf3+0x68c>
  8087b8:	00bfe034 	movhi	r2,65408
  8087bc:	10bfffc4 	addi	r2,r2,-1
  8087c0:	1886703a 	and	r3,r3,r2
  8087c4:	880ad07a 	srli	r5,r17,1
  8087c8:	180497fa 	slli	r2,r3,31
  8087cc:	8900004c 	andi	r4,r17,1
  8087d0:	2922b03a 	or	r17,r5,r4
  8087d4:	1806d07a 	srli	r3,r3,1
  8087d8:	1462b03a 	or	r17,r2,r17
  8087dc:	3825883a 	mov	r18,r7
  8087e0:	003f7106 	br	8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  8087e4:	2984b03a 	or	r2,r5,r6
  8087e8:	103f6826 	beq	r2,zero,80858c <__alt_mem_onchip_mem+0xff80058c>
  8087ec:	39c03fcc 	andi	r7,r7,255
  8087f0:	003f6706 	br	808590 <__alt_mem_onchip_mem+0xff800590>
  8087f4:	4086b03a 	or	r3,r8,r2
  8087f8:	18015226 	beq	r3,zero,808d44 <__subdf3+0x820>
  8087fc:	00c00434 	movhi	r3,16
  808800:	41400234 	orhi	r5,r8,8
  808804:	18ffffc4 	addi	r3,r3,-1
  808808:	28ca703a 	and	r5,r5,r3
  80880c:	003f7e06 	br	808608 <__alt_mem_onchip_mem+0xff800608>
  808810:	10bfffc4 	addi	r2,r2,-1
  808814:	1000491e 	bne	r2,zero,80893c <__subdf3+0x418>
  808818:	898fc83a 	sub	r7,r17,r6
  80881c:	89e3803a 	cmpltu	r17,r17,r7
  808820:	1947c83a 	sub	r3,r3,r5
  808824:	1c47c83a 	sub	r3,r3,r17
  808828:	3823883a 	mov	r17,r7
  80882c:	003f9b06 	br	80869c <__alt_mem_onchip_mem+0xff80069c>
  808830:	2988b03a 	or	r4,r5,r6
  808834:	203f5c26 	beq	r4,zero,8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  808838:	10bfffc4 	addi	r2,r2,-1
  80883c:	1000931e 	bne	r2,zero,808a8c <__subdf3+0x568>
  808840:	898d883a 	add	r6,r17,r6
  808844:	3463803a 	cmpltu	r17,r6,r17
  808848:	1947883a 	add	r3,r3,r5
  80884c:	88c7883a 	add	r3,r17,r3
  808850:	3023883a 	mov	r17,r6
  808854:	003fd306 	br	8087a4 <__alt_mem_onchip_mem+0xff8007a4>
  808858:	1000541e 	bne	r2,zero,8089ac <__subdf3+0x488>
  80885c:	80800044 	addi	r2,r16,1
  808860:	1081ffcc 	andi	r2,r2,2047
  808864:	01000044 	movi	r4,1
  808868:	2080a20e 	bge	r4,r2,808af4 <__subdf3+0x5d0>
  80886c:	8989c83a 	sub	r4,r17,r6
  808870:	8905803a 	cmpltu	r2,r17,r4
  808874:	1967c83a 	sub	r19,r3,r5
  808878:	98a7c83a 	sub	r19,r19,r2
  80887c:	9880202c 	andhi	r2,r19,128
  808880:	10006326 	beq	r2,zero,808a10 <__subdf3+0x4ec>
  808884:	3463c83a 	sub	r17,r6,r17
  808888:	28c7c83a 	sub	r3,r5,r3
  80888c:	344d803a 	cmpltu	r6,r6,r17
  808890:	19a7c83a 	sub	r19,r3,r6
  808894:	3825883a 	mov	r18,r7
  808898:	983f861e 	bne	r19,zero,8086b4 <__alt_mem_onchip_mem+0xff8006b4>
  80889c:	8809883a 	mov	r4,r17
  8088a0:	0808fa40 	call	808fa4 <__clzsi2>
  8088a4:	10800804 	addi	r2,r2,32
  8088a8:	113ffe04 	addi	r4,r2,-8
  8088ac:	00c007c4 	movi	r3,31
  8088b0:	193f850e 	bge	r3,r4,8086c8 <__alt_mem_onchip_mem+0xff8006c8>
  8088b4:	10bff604 	addi	r2,r2,-40
  8088b8:	8884983a 	sll	r2,r17,r2
  8088bc:	0023883a 	mov	r17,zero
  8088c0:	243f880e 	bge	r4,r16,8086e4 <__alt_mem_onchip_mem+0xff8006e4>
  8088c4:	00ffe034 	movhi	r3,65408
  8088c8:	18ffffc4 	addi	r3,r3,-1
  8088cc:	8121c83a 	sub	r16,r16,r4
  8088d0:	10c6703a 	and	r3,r2,r3
  8088d4:	003f3406 	br	8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  8088d8:	9100004c 	andi	r4,r18,1
  8088dc:	000b883a 	mov	r5,zero
  8088e0:	0005883a 	mov	r2,zero
  8088e4:	003f4806 	br	808608 <__alt_mem_onchip_mem+0xff800608>
  8088e8:	298cb03a 	or	r6,r5,r6
  8088ec:	300cc03a 	cmpne	r6,r6,zero
  8088f0:	0005883a 	mov	r2,zero
  8088f4:	003f6406 	br	808688 <__alt_mem_onchip_mem+0xff800688>
  8088f8:	10009a1e 	bne	r2,zero,808b64 <__subdf3+0x640>
  8088fc:	82400044 	addi	r9,r16,1
  808900:	4881ffcc 	andi	r2,r9,2047
  808904:	02800044 	movi	r10,1
  808908:	5080670e 	bge	r10,r2,808aa8 <__subdf3+0x584>
  80890c:	0081ffc4 	movi	r2,2047
  808910:	4880af26 	beq	r9,r2,808bd0 <__subdf3+0x6ac>
  808914:	898d883a 	add	r6,r17,r6
  808918:	1945883a 	add	r2,r3,r5
  80891c:	3447803a 	cmpltu	r3,r6,r17
  808920:	1887883a 	add	r3,r3,r2
  808924:	182297fa 	slli	r17,r3,31
  808928:	300cd07a 	srli	r6,r6,1
  80892c:	1806d07a 	srli	r3,r3,1
  808930:	4821883a 	mov	r16,r9
  808934:	89a2b03a 	or	r17,r17,r6
  808938:	003f1b06 	br	8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  80893c:	0101ffc4 	movi	r4,2047
  808940:	813f441e 	bne	r16,r4,808654 <__alt_mem_onchip_mem+0xff800654>
  808944:	003f1806 	br	8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  808948:	843ff844 	addi	r16,r16,-31
  80894c:	01400804 	movi	r5,32
  808950:	1408d83a 	srl	r4,r2,r16
  808954:	19405026 	beq	r3,r5,808a98 <__subdf3+0x574>
  808958:	01401004 	movi	r5,64
  80895c:	28c7c83a 	sub	r3,r5,r3
  808960:	10c4983a 	sll	r2,r2,r3
  808964:	88a2b03a 	or	r17,r17,r2
  808968:	8822c03a 	cmpne	r17,r17,zero
  80896c:	2462b03a 	or	r17,r4,r17
  808970:	0007883a 	mov	r3,zero
  808974:	0021883a 	mov	r16,zero
  808978:	003f6d06 	br	808730 <__alt_mem_onchip_mem+0xff800730>
  80897c:	11fff804 	addi	r7,r2,-32
  808980:	01000804 	movi	r4,32
  808984:	29ced83a 	srl	r7,r5,r7
  808988:	11004526 	beq	r2,r4,808aa0 <__subdf3+0x57c>
  80898c:	01001004 	movi	r4,64
  808990:	2089c83a 	sub	r4,r4,r2
  808994:	2904983a 	sll	r2,r5,r4
  808998:	118cb03a 	or	r6,r2,r6
  80899c:	300cc03a 	cmpne	r6,r6,zero
  8089a0:	398cb03a 	or	r6,r7,r6
  8089a4:	0005883a 	mov	r2,zero
  8089a8:	003f3706 	br	808688 <__alt_mem_onchip_mem+0xff800688>
  8089ac:	80002a26 	beq	r16,zero,808a58 <__subdf3+0x534>
  8089b0:	0101ffc4 	movi	r4,2047
  8089b4:	49006626 	beq	r9,r4,808b50 <__subdf3+0x62c>
  8089b8:	0085c83a 	sub	r2,zero,r2
  8089bc:	18c02034 	orhi	r3,r3,128
  8089c0:	01000e04 	movi	r4,56
  8089c4:	20807e16 	blt	r4,r2,808bc0 <__subdf3+0x69c>
  8089c8:	010007c4 	movi	r4,31
  8089cc:	2080e716 	blt	r4,r2,808d6c <__subdf3+0x848>
  8089d0:	01000804 	movi	r4,32
  8089d4:	2089c83a 	sub	r4,r4,r2
  8089d8:	1914983a 	sll	r10,r3,r4
  8089dc:	8890d83a 	srl	r8,r17,r2
  8089e0:	8908983a 	sll	r4,r17,r4
  8089e4:	1884d83a 	srl	r2,r3,r2
  8089e8:	5222b03a 	or	r17,r10,r8
  8089ec:	2006c03a 	cmpne	r3,r4,zero
  8089f0:	88e2b03a 	or	r17,r17,r3
  8089f4:	3463c83a 	sub	r17,r6,r17
  8089f8:	2885c83a 	sub	r2,r5,r2
  8089fc:	344d803a 	cmpltu	r6,r6,r17
  808a00:	1187c83a 	sub	r3,r2,r6
  808a04:	4821883a 	mov	r16,r9
  808a08:	3825883a 	mov	r18,r7
  808a0c:	003f2306 	br	80869c <__alt_mem_onchip_mem+0xff80069c>
  808a10:	24d0b03a 	or	r8,r4,r19
  808a14:	40001b1e 	bne	r8,zero,808a84 <__subdf3+0x560>
  808a18:	0005883a 	mov	r2,zero
  808a1c:	0009883a 	mov	r4,zero
  808a20:	0021883a 	mov	r16,zero
  808a24:	003f4906 	br	80874c <__alt_mem_onchip_mem+0xff80074c>
  808a28:	010007c4 	movi	r4,31
  808a2c:	20803a16 	blt	r4,r2,808b18 <__subdf3+0x5f4>
  808a30:	01000804 	movi	r4,32
  808a34:	2089c83a 	sub	r4,r4,r2
  808a38:	2912983a 	sll	r9,r5,r4
  808a3c:	3090d83a 	srl	r8,r6,r2
  808a40:	3108983a 	sll	r4,r6,r4
  808a44:	2884d83a 	srl	r2,r5,r2
  808a48:	4a12b03a 	or	r9,r9,r8
  808a4c:	2008c03a 	cmpne	r4,r4,zero
  808a50:	4912b03a 	or	r9,r9,r4
  808a54:	003f4e06 	br	808790 <__alt_mem_onchip_mem+0xff800790>
  808a58:	1c48b03a 	or	r4,r3,r17
  808a5c:	20003c26 	beq	r4,zero,808b50 <__subdf3+0x62c>
  808a60:	0084303a 	nor	r2,zero,r2
  808a64:	1000381e 	bne	r2,zero,808b48 <__subdf3+0x624>
  808a68:	3463c83a 	sub	r17,r6,r17
  808a6c:	28c5c83a 	sub	r2,r5,r3
  808a70:	344d803a 	cmpltu	r6,r6,r17
  808a74:	1187c83a 	sub	r3,r2,r6
  808a78:	4821883a 	mov	r16,r9
  808a7c:	3825883a 	mov	r18,r7
  808a80:	003f0606 	br	80869c <__alt_mem_onchip_mem+0xff80069c>
  808a84:	2023883a 	mov	r17,r4
  808a88:	003f0906 	br	8086b0 <__alt_mem_onchip_mem+0xff8006b0>
  808a8c:	0101ffc4 	movi	r4,2047
  808a90:	813f3a1e 	bne	r16,r4,80877c <__alt_mem_onchip_mem+0xff80077c>
  808a94:	003ec406 	br	8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  808a98:	0005883a 	mov	r2,zero
  808a9c:	003fb106 	br	808964 <__alt_mem_onchip_mem+0xff800964>
  808aa0:	0005883a 	mov	r2,zero
  808aa4:	003fbc06 	br	808998 <__alt_mem_onchip_mem+0xff800998>
  808aa8:	1c44b03a 	or	r2,r3,r17
  808aac:	80008e1e 	bne	r16,zero,808ce8 <__subdf3+0x7c4>
  808ab0:	1000c826 	beq	r2,zero,808dd4 <__subdf3+0x8b0>
  808ab4:	2984b03a 	or	r2,r5,r6
  808ab8:	103ebb26 	beq	r2,zero,8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  808abc:	8989883a 	add	r4,r17,r6
  808ac0:	1945883a 	add	r2,r3,r5
  808ac4:	2447803a 	cmpltu	r3,r4,r17
  808ac8:	1887883a 	add	r3,r3,r2
  808acc:	1880202c 	andhi	r2,r3,128
  808ad0:	2023883a 	mov	r17,r4
  808ad4:	103f1626 	beq	r2,zero,808730 <__alt_mem_onchip_mem+0xff800730>
  808ad8:	00bfe034 	movhi	r2,65408
  808adc:	10bfffc4 	addi	r2,r2,-1
  808ae0:	5021883a 	mov	r16,r10
  808ae4:	1886703a 	and	r3,r3,r2
  808ae8:	003eaf06 	br	8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  808aec:	3825883a 	mov	r18,r7
  808af0:	003f0f06 	br	808730 <__alt_mem_onchip_mem+0xff800730>
  808af4:	1c44b03a 	or	r2,r3,r17
  808af8:	8000251e 	bne	r16,zero,808b90 <__subdf3+0x66c>
  808afc:	1000661e 	bne	r2,zero,808c98 <__subdf3+0x774>
  808b00:	2990b03a 	or	r8,r5,r6
  808b04:	40009626 	beq	r8,zero,808d60 <__subdf3+0x83c>
  808b08:	2807883a 	mov	r3,r5
  808b0c:	3023883a 	mov	r17,r6
  808b10:	3825883a 	mov	r18,r7
  808b14:	003ea406 	br	8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  808b18:	127ff804 	addi	r9,r2,-32
  808b1c:	01000804 	movi	r4,32
  808b20:	2a52d83a 	srl	r9,r5,r9
  808b24:	11008c26 	beq	r2,r4,808d58 <__subdf3+0x834>
  808b28:	01001004 	movi	r4,64
  808b2c:	2085c83a 	sub	r2,r4,r2
  808b30:	2884983a 	sll	r2,r5,r2
  808b34:	118cb03a 	or	r6,r2,r6
  808b38:	300cc03a 	cmpne	r6,r6,zero
  808b3c:	4992b03a 	or	r9,r9,r6
  808b40:	0005883a 	mov	r2,zero
  808b44:	003f1206 	br	808790 <__alt_mem_onchip_mem+0xff800790>
  808b48:	0101ffc4 	movi	r4,2047
  808b4c:	493f9c1e 	bne	r9,r4,8089c0 <__alt_mem_onchip_mem+0xff8009c0>
  808b50:	2807883a 	mov	r3,r5
  808b54:	3023883a 	mov	r17,r6
  808b58:	4821883a 	mov	r16,r9
  808b5c:	3825883a 	mov	r18,r7
  808b60:	003e9106 	br	8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  808b64:	80001f1e 	bne	r16,zero,808be4 <__subdf3+0x6c0>
  808b68:	1c48b03a 	or	r4,r3,r17
  808b6c:	20005a26 	beq	r4,zero,808cd8 <__subdf3+0x7b4>
  808b70:	0084303a 	nor	r2,zero,r2
  808b74:	1000561e 	bne	r2,zero,808cd0 <__subdf3+0x7ac>
  808b78:	89a3883a 	add	r17,r17,r6
  808b7c:	1945883a 	add	r2,r3,r5
  808b80:	898d803a 	cmpltu	r6,r17,r6
  808b84:	3087883a 	add	r3,r6,r2
  808b88:	4821883a 	mov	r16,r9
  808b8c:	003f0506 	br	8087a4 <__alt_mem_onchip_mem+0xff8007a4>
  808b90:	10002b1e 	bne	r2,zero,808c40 <__subdf3+0x71c>
  808b94:	2984b03a 	or	r2,r5,r6
  808b98:	10008026 	beq	r2,zero,808d9c <__subdf3+0x878>
  808b9c:	2807883a 	mov	r3,r5
  808ba0:	3023883a 	mov	r17,r6
  808ba4:	3825883a 	mov	r18,r7
  808ba8:	0401ffc4 	movi	r16,2047
  808bac:	003e7e06 	br	8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  808bb0:	3809883a 	mov	r4,r7
  808bb4:	0011883a 	mov	r8,zero
  808bb8:	0005883a 	mov	r2,zero
  808bbc:	003ee306 	br	80874c <__alt_mem_onchip_mem+0xff80074c>
  808bc0:	1c62b03a 	or	r17,r3,r17
  808bc4:	8822c03a 	cmpne	r17,r17,zero
  808bc8:	0005883a 	mov	r2,zero
  808bcc:	003f8906 	br	8089f4 <__alt_mem_onchip_mem+0xff8009f4>
  808bd0:	3809883a 	mov	r4,r7
  808bd4:	4821883a 	mov	r16,r9
  808bd8:	0011883a 	mov	r8,zero
  808bdc:	0005883a 	mov	r2,zero
  808be0:	003eda06 	br	80874c <__alt_mem_onchip_mem+0xff80074c>
  808be4:	0101ffc4 	movi	r4,2047
  808be8:	49003b26 	beq	r9,r4,808cd8 <__subdf3+0x7b4>
  808bec:	0085c83a 	sub	r2,zero,r2
  808bf0:	18c02034 	orhi	r3,r3,128
  808bf4:	01000e04 	movi	r4,56
  808bf8:	20806e16 	blt	r4,r2,808db4 <__subdf3+0x890>
  808bfc:	010007c4 	movi	r4,31
  808c00:	20807716 	blt	r4,r2,808de0 <__subdf3+0x8bc>
  808c04:	01000804 	movi	r4,32
  808c08:	2089c83a 	sub	r4,r4,r2
  808c0c:	1914983a 	sll	r10,r3,r4
  808c10:	8890d83a 	srl	r8,r17,r2
  808c14:	8908983a 	sll	r4,r17,r4
  808c18:	1884d83a 	srl	r2,r3,r2
  808c1c:	5222b03a 	or	r17,r10,r8
  808c20:	2006c03a 	cmpne	r3,r4,zero
  808c24:	88e2b03a 	or	r17,r17,r3
  808c28:	89a3883a 	add	r17,r17,r6
  808c2c:	1145883a 	add	r2,r2,r5
  808c30:	898d803a 	cmpltu	r6,r17,r6
  808c34:	3087883a 	add	r3,r6,r2
  808c38:	4821883a 	mov	r16,r9
  808c3c:	003ed906 	br	8087a4 <__alt_mem_onchip_mem+0xff8007a4>
  808c40:	2984b03a 	or	r2,r5,r6
  808c44:	10004226 	beq	r2,zero,808d50 <__subdf3+0x82c>
  808c48:	1808d0fa 	srli	r4,r3,3
  808c4c:	8822d0fa 	srli	r17,r17,3
  808c50:	1806977a 	slli	r3,r3,29
  808c54:	2080022c 	andhi	r2,r4,8
  808c58:	1c62b03a 	or	r17,r3,r17
  808c5c:	10000826 	beq	r2,zero,808c80 <__subdf3+0x75c>
  808c60:	2812d0fa 	srli	r9,r5,3
  808c64:	4880022c 	andhi	r2,r9,8
  808c68:	1000051e 	bne	r2,zero,808c80 <__subdf3+0x75c>
  808c6c:	300cd0fa 	srli	r6,r6,3
  808c70:	2804977a 	slli	r2,r5,29
  808c74:	4809883a 	mov	r4,r9
  808c78:	3825883a 	mov	r18,r7
  808c7c:	11a2b03a 	or	r17,r2,r6
  808c80:	8806d77a 	srli	r3,r17,29
  808c84:	200890fa 	slli	r4,r4,3
  808c88:	882290fa 	slli	r17,r17,3
  808c8c:	0401ffc4 	movi	r16,2047
  808c90:	1906b03a 	or	r3,r3,r4
  808c94:	003e4406 	br	8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  808c98:	2984b03a 	or	r2,r5,r6
  808c9c:	103e4226 	beq	r2,zero,8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  808ca0:	8989c83a 	sub	r4,r17,r6
  808ca4:	8911803a 	cmpltu	r8,r17,r4
  808ca8:	1945c83a 	sub	r2,r3,r5
  808cac:	1205c83a 	sub	r2,r2,r8
  808cb0:	1200202c 	andhi	r8,r2,128
  808cb4:	403e9a26 	beq	r8,zero,808720 <__alt_mem_onchip_mem+0xff800720>
  808cb8:	3463c83a 	sub	r17,r6,r17
  808cbc:	28c5c83a 	sub	r2,r5,r3
  808cc0:	344d803a 	cmpltu	r6,r6,r17
  808cc4:	1187c83a 	sub	r3,r2,r6
  808cc8:	3825883a 	mov	r18,r7
  808ccc:	003e3606 	br	8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  808cd0:	0101ffc4 	movi	r4,2047
  808cd4:	493fc71e 	bne	r9,r4,808bf4 <__alt_mem_onchip_mem+0xff800bf4>
  808cd8:	2807883a 	mov	r3,r5
  808cdc:	3023883a 	mov	r17,r6
  808ce0:	4821883a 	mov	r16,r9
  808ce4:	003e3006 	br	8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  808ce8:	10003626 	beq	r2,zero,808dc4 <__subdf3+0x8a0>
  808cec:	2984b03a 	or	r2,r5,r6
  808cf0:	10001726 	beq	r2,zero,808d50 <__subdf3+0x82c>
  808cf4:	1808d0fa 	srli	r4,r3,3
  808cf8:	8822d0fa 	srli	r17,r17,3
  808cfc:	1806977a 	slli	r3,r3,29
  808d00:	2080022c 	andhi	r2,r4,8
  808d04:	1c62b03a 	or	r17,r3,r17
  808d08:	10000726 	beq	r2,zero,808d28 <__subdf3+0x804>
  808d0c:	2812d0fa 	srli	r9,r5,3
  808d10:	4880022c 	andhi	r2,r9,8
  808d14:	1000041e 	bne	r2,zero,808d28 <__subdf3+0x804>
  808d18:	300cd0fa 	srli	r6,r6,3
  808d1c:	2804977a 	slli	r2,r5,29
  808d20:	4809883a 	mov	r4,r9
  808d24:	11a2b03a 	or	r17,r2,r6
  808d28:	8806d77a 	srli	r3,r17,29
  808d2c:	200890fa 	slli	r4,r4,3
  808d30:	882290fa 	slli	r17,r17,3
  808d34:	3825883a 	mov	r18,r7
  808d38:	1906b03a 	or	r3,r3,r4
  808d3c:	0401ffc4 	movi	r16,2047
  808d40:	003e1906 	br	8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  808d44:	000b883a 	mov	r5,zero
  808d48:	0005883a 	mov	r2,zero
  808d4c:	003e2e06 	br	808608 <__alt_mem_onchip_mem+0xff800608>
  808d50:	0401ffc4 	movi	r16,2047
  808d54:	003e1406 	br	8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  808d58:	0005883a 	mov	r2,zero
  808d5c:	003f7506 	br	808b34 <__alt_mem_onchip_mem+0xff800b34>
  808d60:	0005883a 	mov	r2,zero
  808d64:	0009883a 	mov	r4,zero
  808d68:	003e7806 	br	80874c <__alt_mem_onchip_mem+0xff80074c>
  808d6c:	123ff804 	addi	r8,r2,-32
  808d70:	01000804 	movi	r4,32
  808d74:	1a10d83a 	srl	r8,r3,r8
  808d78:	11002526 	beq	r2,r4,808e10 <__subdf3+0x8ec>
  808d7c:	01001004 	movi	r4,64
  808d80:	2085c83a 	sub	r2,r4,r2
  808d84:	1884983a 	sll	r2,r3,r2
  808d88:	1444b03a 	or	r2,r2,r17
  808d8c:	1004c03a 	cmpne	r2,r2,zero
  808d90:	40a2b03a 	or	r17,r8,r2
  808d94:	0005883a 	mov	r2,zero
  808d98:	003f1606 	br	8089f4 <__alt_mem_onchip_mem+0xff8009f4>
  808d9c:	02000434 	movhi	r8,16
  808da0:	0009883a 	mov	r4,zero
  808da4:	423fffc4 	addi	r8,r8,-1
  808da8:	00bfffc4 	movi	r2,-1
  808dac:	0401ffc4 	movi	r16,2047
  808db0:	003e6606 	br	80874c <__alt_mem_onchip_mem+0xff80074c>
  808db4:	1c62b03a 	or	r17,r3,r17
  808db8:	8822c03a 	cmpne	r17,r17,zero
  808dbc:	0005883a 	mov	r2,zero
  808dc0:	003f9906 	br	808c28 <__alt_mem_onchip_mem+0xff800c28>
  808dc4:	2807883a 	mov	r3,r5
  808dc8:	3023883a 	mov	r17,r6
  808dcc:	0401ffc4 	movi	r16,2047
  808dd0:	003df506 	br	8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  808dd4:	2807883a 	mov	r3,r5
  808dd8:	3023883a 	mov	r17,r6
  808ddc:	003df206 	br	8085a8 <__alt_mem_onchip_mem+0xff8005a8>
  808de0:	123ff804 	addi	r8,r2,-32
  808de4:	01000804 	movi	r4,32
  808de8:	1a10d83a 	srl	r8,r3,r8
  808dec:	11000a26 	beq	r2,r4,808e18 <__subdf3+0x8f4>
  808df0:	01001004 	movi	r4,64
  808df4:	2085c83a 	sub	r2,r4,r2
  808df8:	1884983a 	sll	r2,r3,r2
  808dfc:	1444b03a 	or	r2,r2,r17
  808e00:	1004c03a 	cmpne	r2,r2,zero
  808e04:	40a2b03a 	or	r17,r8,r2
  808e08:	0005883a 	mov	r2,zero
  808e0c:	003f8606 	br	808c28 <__alt_mem_onchip_mem+0xff800c28>
  808e10:	0005883a 	mov	r2,zero
  808e14:	003fdc06 	br	808d88 <__alt_mem_onchip_mem+0xff800d88>
  808e18:	0005883a 	mov	r2,zero
  808e1c:	003ff706 	br	808dfc <__alt_mem_onchip_mem+0xff800dfc>

00808e20 <__floatsidf>:
  808e20:	defffd04 	addi	sp,sp,-12
  808e24:	dfc00215 	stw	ra,8(sp)
  808e28:	dc400115 	stw	r17,4(sp)
  808e2c:	dc000015 	stw	r16,0(sp)
  808e30:	20002b26 	beq	r4,zero,808ee0 <__floatsidf+0xc0>
  808e34:	2023883a 	mov	r17,r4
  808e38:	2020d7fa 	srli	r16,r4,31
  808e3c:	20002d16 	blt	r4,zero,808ef4 <__floatsidf+0xd4>
  808e40:	8809883a 	mov	r4,r17
  808e44:	0808fa40 	call	808fa4 <__clzsi2>
  808e48:	01410784 	movi	r5,1054
  808e4c:	288bc83a 	sub	r5,r5,r2
  808e50:	01010cc4 	movi	r4,1075
  808e54:	2149c83a 	sub	r4,r4,r5
  808e58:	00c007c4 	movi	r3,31
  808e5c:	1900160e 	bge	r3,r4,808eb8 <__floatsidf+0x98>
  808e60:	00c104c4 	movi	r3,1043
  808e64:	1947c83a 	sub	r3,r3,r5
  808e68:	88c6983a 	sll	r3,r17,r3
  808e6c:	00800434 	movhi	r2,16
  808e70:	10bfffc4 	addi	r2,r2,-1
  808e74:	1886703a 	and	r3,r3,r2
  808e78:	2941ffcc 	andi	r5,r5,2047
  808e7c:	800d883a 	mov	r6,r16
  808e80:	0005883a 	mov	r2,zero
  808e84:	280a953a 	slli	r5,r5,20
  808e88:	31803fcc 	andi	r6,r6,255
  808e8c:	01000434 	movhi	r4,16
  808e90:	300c97fa 	slli	r6,r6,31
  808e94:	213fffc4 	addi	r4,r4,-1
  808e98:	1906703a 	and	r3,r3,r4
  808e9c:	1946b03a 	or	r3,r3,r5
  808ea0:	1986b03a 	or	r3,r3,r6
  808ea4:	dfc00217 	ldw	ra,8(sp)
  808ea8:	dc400117 	ldw	r17,4(sp)
  808eac:	dc000017 	ldw	r16,0(sp)
  808eb0:	dec00304 	addi	sp,sp,12
  808eb4:	f800283a 	ret
  808eb8:	00c002c4 	movi	r3,11
  808ebc:	1887c83a 	sub	r3,r3,r2
  808ec0:	88c6d83a 	srl	r3,r17,r3
  808ec4:	8904983a 	sll	r2,r17,r4
  808ec8:	01000434 	movhi	r4,16
  808ecc:	213fffc4 	addi	r4,r4,-1
  808ed0:	2941ffcc 	andi	r5,r5,2047
  808ed4:	1906703a 	and	r3,r3,r4
  808ed8:	800d883a 	mov	r6,r16
  808edc:	003fe906 	br	808e84 <__alt_mem_onchip_mem+0xff800e84>
  808ee0:	000d883a 	mov	r6,zero
  808ee4:	000b883a 	mov	r5,zero
  808ee8:	0007883a 	mov	r3,zero
  808eec:	0005883a 	mov	r2,zero
  808ef0:	003fe406 	br	808e84 <__alt_mem_onchip_mem+0xff800e84>
  808ef4:	0123c83a 	sub	r17,zero,r4
  808ef8:	003fd106 	br	808e40 <__alt_mem_onchip_mem+0xff800e40>

00808efc <__floatunsidf>:
  808efc:	defffe04 	addi	sp,sp,-8
  808f00:	dc000015 	stw	r16,0(sp)
  808f04:	dfc00115 	stw	ra,4(sp)
  808f08:	2021883a 	mov	r16,r4
  808f0c:	20002226 	beq	r4,zero,808f98 <__floatunsidf+0x9c>
  808f10:	0808fa40 	call	808fa4 <__clzsi2>
  808f14:	01010784 	movi	r4,1054
  808f18:	2089c83a 	sub	r4,r4,r2
  808f1c:	01810cc4 	movi	r6,1075
  808f20:	310dc83a 	sub	r6,r6,r4
  808f24:	00c007c4 	movi	r3,31
  808f28:	1980120e 	bge	r3,r6,808f74 <__floatunsidf+0x78>
  808f2c:	00c104c4 	movi	r3,1043
  808f30:	1907c83a 	sub	r3,r3,r4
  808f34:	80ca983a 	sll	r5,r16,r3
  808f38:	00800434 	movhi	r2,16
  808f3c:	10bfffc4 	addi	r2,r2,-1
  808f40:	2101ffcc 	andi	r4,r4,2047
  808f44:	0021883a 	mov	r16,zero
  808f48:	288a703a 	and	r5,r5,r2
  808f4c:	2008953a 	slli	r4,r4,20
  808f50:	00c00434 	movhi	r3,16
  808f54:	18ffffc4 	addi	r3,r3,-1
  808f58:	28c6703a 	and	r3,r5,r3
  808f5c:	8005883a 	mov	r2,r16
  808f60:	1906b03a 	or	r3,r3,r4
  808f64:	dfc00117 	ldw	ra,4(sp)
  808f68:	dc000017 	ldw	r16,0(sp)
  808f6c:	dec00204 	addi	sp,sp,8
  808f70:	f800283a 	ret
  808f74:	00c002c4 	movi	r3,11
  808f78:	188bc83a 	sub	r5,r3,r2
  808f7c:	814ad83a 	srl	r5,r16,r5
  808f80:	00c00434 	movhi	r3,16
  808f84:	18ffffc4 	addi	r3,r3,-1
  808f88:	81a0983a 	sll	r16,r16,r6
  808f8c:	2101ffcc 	andi	r4,r4,2047
  808f90:	28ca703a 	and	r5,r5,r3
  808f94:	003fed06 	br	808f4c <__alt_mem_onchip_mem+0xff800f4c>
  808f98:	0009883a 	mov	r4,zero
  808f9c:	000b883a 	mov	r5,zero
  808fa0:	003fea06 	br	808f4c <__alt_mem_onchip_mem+0xff800f4c>

00808fa4 <__clzsi2>:
  808fa4:	00bfffd4 	movui	r2,65535
  808fa8:	11000536 	bltu	r2,r4,808fc0 <__clzsi2+0x1c>
  808fac:	00803fc4 	movi	r2,255
  808fb0:	11000f36 	bltu	r2,r4,808ff0 <__clzsi2+0x4c>
  808fb4:	00800804 	movi	r2,32
  808fb8:	0007883a 	mov	r3,zero
  808fbc:	00000506 	br	808fd4 <__clzsi2+0x30>
  808fc0:	00804034 	movhi	r2,256
  808fc4:	10bfffc4 	addi	r2,r2,-1
  808fc8:	11000c2e 	bgeu	r2,r4,808ffc <__clzsi2+0x58>
  808fcc:	00800204 	movi	r2,8
  808fd0:	00c00604 	movi	r3,24
  808fd4:	20c8d83a 	srl	r4,r4,r3
  808fd8:	00c02074 	movhi	r3,129
  808fdc:	18dc2d84 	addi	r3,r3,28854
  808fe0:	1909883a 	add	r4,r3,r4
  808fe4:	20c00003 	ldbu	r3,0(r4)
  808fe8:	10c5c83a 	sub	r2,r2,r3
  808fec:	f800283a 	ret
  808ff0:	00800604 	movi	r2,24
  808ff4:	00c00204 	movi	r3,8
  808ff8:	003ff606 	br	808fd4 <__alt_mem_onchip_mem+0xff800fd4>
  808ffc:	00800404 	movi	r2,16
  809000:	1007883a 	mov	r3,r2
  809004:	003ff306 	br	808fd4 <__alt_mem_onchip_mem+0xff800fd4>

00809008 <__sflush_r>:
  809008:	2880030b 	ldhu	r2,12(r5)
  80900c:	defffb04 	addi	sp,sp,-20
  809010:	dcc00315 	stw	r19,12(sp)
  809014:	dc400115 	stw	r17,4(sp)
  809018:	dfc00415 	stw	ra,16(sp)
  80901c:	dc800215 	stw	r18,8(sp)
  809020:	dc000015 	stw	r16,0(sp)
  809024:	10c0020c 	andi	r3,r2,8
  809028:	2823883a 	mov	r17,r5
  80902c:	2027883a 	mov	r19,r4
  809030:	1800311e 	bne	r3,zero,8090f8 <__sflush_r+0xf0>
  809034:	28c00117 	ldw	r3,4(r5)
  809038:	10820014 	ori	r2,r2,2048
  80903c:	2880030d 	sth	r2,12(r5)
  809040:	00c04b0e 	bge	zero,r3,809170 <__sflush_r+0x168>
  809044:	8a000a17 	ldw	r8,40(r17)
  809048:	40002326 	beq	r8,zero,8090d8 <__sflush_r+0xd0>
  80904c:	9c000017 	ldw	r16,0(r19)
  809050:	10c4000c 	andi	r3,r2,4096
  809054:	98000015 	stw	zero,0(r19)
  809058:	18004826 	beq	r3,zero,80917c <__sflush_r+0x174>
  80905c:	89801417 	ldw	r6,80(r17)
  809060:	10c0010c 	andi	r3,r2,4
  809064:	18000626 	beq	r3,zero,809080 <__sflush_r+0x78>
  809068:	88c00117 	ldw	r3,4(r17)
  80906c:	88800c17 	ldw	r2,48(r17)
  809070:	30cdc83a 	sub	r6,r6,r3
  809074:	10000226 	beq	r2,zero,809080 <__sflush_r+0x78>
  809078:	88800f17 	ldw	r2,60(r17)
  80907c:	308dc83a 	sub	r6,r6,r2
  809080:	89400717 	ldw	r5,28(r17)
  809084:	000f883a 	mov	r7,zero
  809088:	9809883a 	mov	r4,r19
  80908c:	403ee83a 	callr	r8
  809090:	00ffffc4 	movi	r3,-1
  809094:	10c04426 	beq	r2,r3,8091a8 <__sflush_r+0x1a0>
  809098:	88c0030b 	ldhu	r3,12(r17)
  80909c:	89000417 	ldw	r4,16(r17)
  8090a0:	88000115 	stw	zero,4(r17)
  8090a4:	197dffcc 	andi	r5,r3,63487
  8090a8:	8940030d 	sth	r5,12(r17)
  8090ac:	89000015 	stw	r4,0(r17)
  8090b0:	18c4000c 	andi	r3,r3,4096
  8090b4:	18002c1e 	bne	r3,zero,809168 <__sflush_r+0x160>
  8090b8:	89400c17 	ldw	r5,48(r17)
  8090bc:	9c000015 	stw	r16,0(r19)
  8090c0:	28000526 	beq	r5,zero,8090d8 <__sflush_r+0xd0>
  8090c4:	88801004 	addi	r2,r17,64
  8090c8:	28800226 	beq	r5,r2,8090d4 <__sflush_r+0xcc>
  8090cc:	9809883a 	mov	r4,r19
  8090d0:	08097740 	call	809774 <_free_r>
  8090d4:	88000c15 	stw	zero,48(r17)
  8090d8:	0005883a 	mov	r2,zero
  8090dc:	dfc00417 	ldw	ra,16(sp)
  8090e0:	dcc00317 	ldw	r19,12(sp)
  8090e4:	dc800217 	ldw	r18,8(sp)
  8090e8:	dc400117 	ldw	r17,4(sp)
  8090ec:	dc000017 	ldw	r16,0(sp)
  8090f0:	dec00504 	addi	sp,sp,20
  8090f4:	f800283a 	ret
  8090f8:	2c800417 	ldw	r18,16(r5)
  8090fc:	903ff626 	beq	r18,zero,8090d8 <__alt_mem_onchip_mem+0xff8010d8>
  809100:	2c000017 	ldw	r16,0(r5)
  809104:	108000cc 	andi	r2,r2,3
  809108:	2c800015 	stw	r18,0(r5)
  80910c:	84a1c83a 	sub	r16,r16,r18
  809110:	1000131e 	bne	r2,zero,809160 <__sflush_r+0x158>
  809114:	28800517 	ldw	r2,20(r5)
  809118:	88800215 	stw	r2,8(r17)
  80911c:	04000316 	blt	zero,r16,80912c <__sflush_r+0x124>
  809120:	003fed06 	br	8090d8 <__alt_mem_onchip_mem+0xff8010d8>
  809124:	90a5883a 	add	r18,r18,r2
  809128:	043feb0e 	bge	zero,r16,8090d8 <__alt_mem_onchip_mem+0xff8010d8>
  80912c:	88800917 	ldw	r2,36(r17)
  809130:	89400717 	ldw	r5,28(r17)
  809134:	800f883a 	mov	r7,r16
  809138:	900d883a 	mov	r6,r18
  80913c:	9809883a 	mov	r4,r19
  809140:	103ee83a 	callr	r2
  809144:	80a1c83a 	sub	r16,r16,r2
  809148:	00bff616 	blt	zero,r2,809124 <__alt_mem_onchip_mem+0xff801124>
  80914c:	88c0030b 	ldhu	r3,12(r17)
  809150:	00bfffc4 	movi	r2,-1
  809154:	18c01014 	ori	r3,r3,64
  809158:	88c0030d 	sth	r3,12(r17)
  80915c:	003fdf06 	br	8090dc <__alt_mem_onchip_mem+0xff8010dc>
  809160:	0005883a 	mov	r2,zero
  809164:	003fec06 	br	809118 <__alt_mem_onchip_mem+0xff801118>
  809168:	88801415 	stw	r2,80(r17)
  80916c:	003fd206 	br	8090b8 <__alt_mem_onchip_mem+0xff8010b8>
  809170:	28c00f17 	ldw	r3,60(r5)
  809174:	00ffb316 	blt	zero,r3,809044 <__alt_mem_onchip_mem+0xff801044>
  809178:	003fd706 	br	8090d8 <__alt_mem_onchip_mem+0xff8010d8>
  80917c:	89400717 	ldw	r5,28(r17)
  809180:	000d883a 	mov	r6,zero
  809184:	01c00044 	movi	r7,1
  809188:	9809883a 	mov	r4,r19
  80918c:	403ee83a 	callr	r8
  809190:	100d883a 	mov	r6,r2
  809194:	00bfffc4 	movi	r2,-1
  809198:	30801426 	beq	r6,r2,8091ec <__sflush_r+0x1e4>
  80919c:	8880030b 	ldhu	r2,12(r17)
  8091a0:	8a000a17 	ldw	r8,40(r17)
  8091a4:	003fae06 	br	809060 <__alt_mem_onchip_mem+0xff801060>
  8091a8:	98c00017 	ldw	r3,0(r19)
  8091ac:	183fba26 	beq	r3,zero,809098 <__alt_mem_onchip_mem+0xff801098>
  8091b0:	01000744 	movi	r4,29
  8091b4:	19000626 	beq	r3,r4,8091d0 <__sflush_r+0x1c8>
  8091b8:	01000584 	movi	r4,22
  8091bc:	19000426 	beq	r3,r4,8091d0 <__sflush_r+0x1c8>
  8091c0:	88c0030b 	ldhu	r3,12(r17)
  8091c4:	18c01014 	ori	r3,r3,64
  8091c8:	88c0030d 	sth	r3,12(r17)
  8091cc:	003fc306 	br	8090dc <__alt_mem_onchip_mem+0xff8010dc>
  8091d0:	8880030b 	ldhu	r2,12(r17)
  8091d4:	88c00417 	ldw	r3,16(r17)
  8091d8:	88000115 	stw	zero,4(r17)
  8091dc:	10bdffcc 	andi	r2,r2,63487
  8091e0:	8880030d 	sth	r2,12(r17)
  8091e4:	88c00015 	stw	r3,0(r17)
  8091e8:	003fb306 	br	8090b8 <__alt_mem_onchip_mem+0xff8010b8>
  8091ec:	98800017 	ldw	r2,0(r19)
  8091f0:	103fea26 	beq	r2,zero,80919c <__alt_mem_onchip_mem+0xff80119c>
  8091f4:	00c00744 	movi	r3,29
  8091f8:	10c00226 	beq	r2,r3,809204 <__sflush_r+0x1fc>
  8091fc:	00c00584 	movi	r3,22
  809200:	10c0031e 	bne	r2,r3,809210 <__sflush_r+0x208>
  809204:	9c000015 	stw	r16,0(r19)
  809208:	0005883a 	mov	r2,zero
  80920c:	003fb306 	br	8090dc <__alt_mem_onchip_mem+0xff8010dc>
  809210:	88c0030b 	ldhu	r3,12(r17)
  809214:	3005883a 	mov	r2,r6
  809218:	18c01014 	ori	r3,r3,64
  80921c:	88c0030d 	sth	r3,12(r17)
  809220:	003fae06 	br	8090dc <__alt_mem_onchip_mem+0xff8010dc>

00809224 <_fflush_r>:
  809224:	defffd04 	addi	sp,sp,-12
  809228:	dc000115 	stw	r16,4(sp)
  80922c:	dfc00215 	stw	ra,8(sp)
  809230:	2021883a 	mov	r16,r4
  809234:	20000226 	beq	r4,zero,809240 <_fflush_r+0x1c>
  809238:	20800e17 	ldw	r2,56(r4)
  80923c:	10000c26 	beq	r2,zero,809270 <_fflush_r+0x4c>
  809240:	2880030f 	ldh	r2,12(r5)
  809244:	1000051e 	bne	r2,zero,80925c <_fflush_r+0x38>
  809248:	0005883a 	mov	r2,zero
  80924c:	dfc00217 	ldw	ra,8(sp)
  809250:	dc000117 	ldw	r16,4(sp)
  809254:	dec00304 	addi	sp,sp,12
  809258:	f800283a 	ret
  80925c:	8009883a 	mov	r4,r16
  809260:	dfc00217 	ldw	ra,8(sp)
  809264:	dc000117 	ldw	r16,4(sp)
  809268:	dec00304 	addi	sp,sp,12
  80926c:	08090081 	jmpi	809008 <__sflush_r>
  809270:	d9400015 	stw	r5,0(sp)
  809274:	08096000 	call	809600 <__sinit>
  809278:	d9400017 	ldw	r5,0(sp)
  80927c:	003ff006 	br	809240 <__alt_mem_onchip_mem+0xff801240>

00809280 <fflush>:
  809280:	20000526 	beq	r4,zero,809298 <fflush+0x18>
  809284:	008020b4 	movhi	r2,130
  809288:	10a4ba04 	addi	r2,r2,-27928
  80928c:	200b883a 	mov	r5,r4
  809290:	11000017 	ldw	r4,0(r2)
  809294:	08092241 	jmpi	809224 <_fflush_r>
  809298:	008020b4 	movhi	r2,130
  80929c:	10a4b904 	addi	r2,r2,-27932
  8092a0:	11000017 	ldw	r4,0(r2)
  8092a4:	01402074 	movhi	r5,129
  8092a8:	29648904 	addi	r5,r5,-28124
  8092ac:	0809b481 	jmpi	809b48 <_fwalk_reent>

008092b0 <__fp_unlock>:
  8092b0:	0005883a 	mov	r2,zero
  8092b4:	f800283a 	ret

008092b8 <_cleanup_r>:
  8092b8:	01402074 	movhi	r5,129
  8092bc:	29798204 	addi	r5,r5,-6648
  8092c0:	0809b481 	jmpi	809b48 <_fwalk_reent>

008092c4 <__sinit.part.1>:
  8092c4:	defff704 	addi	sp,sp,-36
  8092c8:	00c02074 	movhi	r3,129
  8092cc:	dfc00815 	stw	ra,32(sp)
  8092d0:	ddc00715 	stw	r23,28(sp)
  8092d4:	dd800615 	stw	r22,24(sp)
  8092d8:	dd400515 	stw	r21,20(sp)
  8092dc:	dd000415 	stw	r20,16(sp)
  8092e0:	dcc00315 	stw	r19,12(sp)
  8092e4:	dc800215 	stw	r18,8(sp)
  8092e8:	dc400115 	stw	r17,4(sp)
  8092ec:	dc000015 	stw	r16,0(sp)
  8092f0:	18e4ae04 	addi	r3,r3,-27976
  8092f4:	24000117 	ldw	r16,4(r4)
  8092f8:	20c00f15 	stw	r3,60(r4)
  8092fc:	2080bb04 	addi	r2,r4,748
  809300:	00c000c4 	movi	r3,3
  809304:	20c0b915 	stw	r3,740(r4)
  809308:	2080ba15 	stw	r2,744(r4)
  80930c:	2000b815 	stw	zero,736(r4)
  809310:	05c00204 	movi	r23,8
  809314:	00800104 	movi	r2,4
  809318:	2025883a 	mov	r18,r4
  80931c:	b80d883a 	mov	r6,r23
  809320:	81001704 	addi	r4,r16,92
  809324:	000b883a 	mov	r5,zero
  809328:	80000015 	stw	zero,0(r16)
  80932c:	80000115 	stw	zero,4(r16)
  809330:	80000215 	stw	zero,8(r16)
  809334:	8080030d 	sth	r2,12(r16)
  809338:	80001915 	stw	zero,100(r16)
  80933c:	8000038d 	sth	zero,14(r16)
  809340:	80000415 	stw	zero,16(r16)
  809344:	80000515 	stw	zero,20(r16)
  809348:	80000615 	stw	zero,24(r16)
  80934c:	080a4180 	call	80a418 <memset>
  809350:	05802074 	movhi	r22,129
  809354:	94400217 	ldw	r17,8(r18)
  809358:	05402074 	movhi	r21,129
  80935c:	05002074 	movhi	r20,129
  809360:	04c02074 	movhi	r19,129
  809364:	b5a9b504 	addi	r22,r22,-22828
  809368:	ad69cc04 	addi	r21,r21,-22736
  80936c:	a529eb04 	addi	r20,r20,-22612
  809370:	9cea0204 	addi	r19,r19,-22520
  809374:	85800815 	stw	r22,32(r16)
  809378:	85400915 	stw	r21,36(r16)
  80937c:	85000a15 	stw	r20,40(r16)
  809380:	84c00b15 	stw	r19,44(r16)
  809384:	84000715 	stw	r16,28(r16)
  809388:	00800284 	movi	r2,10
  80938c:	8880030d 	sth	r2,12(r17)
  809390:	00800044 	movi	r2,1
  809394:	b80d883a 	mov	r6,r23
  809398:	89001704 	addi	r4,r17,92
  80939c:	000b883a 	mov	r5,zero
  8093a0:	88000015 	stw	zero,0(r17)
  8093a4:	88000115 	stw	zero,4(r17)
  8093a8:	88000215 	stw	zero,8(r17)
  8093ac:	88001915 	stw	zero,100(r17)
  8093b0:	8880038d 	sth	r2,14(r17)
  8093b4:	88000415 	stw	zero,16(r17)
  8093b8:	88000515 	stw	zero,20(r17)
  8093bc:	88000615 	stw	zero,24(r17)
  8093c0:	080a4180 	call	80a418 <memset>
  8093c4:	94000317 	ldw	r16,12(r18)
  8093c8:	00800484 	movi	r2,18
  8093cc:	8c400715 	stw	r17,28(r17)
  8093d0:	8d800815 	stw	r22,32(r17)
  8093d4:	8d400915 	stw	r21,36(r17)
  8093d8:	8d000a15 	stw	r20,40(r17)
  8093dc:	8cc00b15 	stw	r19,44(r17)
  8093e0:	8080030d 	sth	r2,12(r16)
  8093e4:	00800084 	movi	r2,2
  8093e8:	80000015 	stw	zero,0(r16)
  8093ec:	80000115 	stw	zero,4(r16)
  8093f0:	80000215 	stw	zero,8(r16)
  8093f4:	80001915 	stw	zero,100(r16)
  8093f8:	8080038d 	sth	r2,14(r16)
  8093fc:	80000415 	stw	zero,16(r16)
  809400:	80000515 	stw	zero,20(r16)
  809404:	80000615 	stw	zero,24(r16)
  809408:	b80d883a 	mov	r6,r23
  80940c:	000b883a 	mov	r5,zero
  809410:	81001704 	addi	r4,r16,92
  809414:	080a4180 	call	80a418 <memset>
  809418:	00800044 	movi	r2,1
  80941c:	84000715 	stw	r16,28(r16)
  809420:	85800815 	stw	r22,32(r16)
  809424:	85400915 	stw	r21,36(r16)
  809428:	85000a15 	stw	r20,40(r16)
  80942c:	84c00b15 	stw	r19,44(r16)
  809430:	90800e15 	stw	r2,56(r18)
  809434:	dfc00817 	ldw	ra,32(sp)
  809438:	ddc00717 	ldw	r23,28(sp)
  80943c:	dd800617 	ldw	r22,24(sp)
  809440:	dd400517 	ldw	r21,20(sp)
  809444:	dd000417 	ldw	r20,16(sp)
  809448:	dcc00317 	ldw	r19,12(sp)
  80944c:	dc800217 	ldw	r18,8(sp)
  809450:	dc400117 	ldw	r17,4(sp)
  809454:	dc000017 	ldw	r16,0(sp)
  809458:	dec00904 	addi	sp,sp,36
  80945c:	f800283a 	ret

00809460 <__fp_lock>:
  809460:	0005883a 	mov	r2,zero
  809464:	f800283a 	ret

00809468 <__sfmoreglue>:
  809468:	defffc04 	addi	sp,sp,-16
  80946c:	dc400115 	stw	r17,4(sp)
  809470:	2c7fffc4 	addi	r17,r5,-1
  809474:	8c401a24 	muli	r17,r17,104
  809478:	dc800215 	stw	r18,8(sp)
  80947c:	2825883a 	mov	r18,r5
  809480:	89401d04 	addi	r5,r17,116
  809484:	dc000015 	stw	r16,0(sp)
  809488:	dfc00315 	stw	ra,12(sp)
  80948c:	0809c0c0 	call	809c0c <_malloc_r>
  809490:	1021883a 	mov	r16,r2
  809494:	10000726 	beq	r2,zero,8094b4 <__sfmoreglue+0x4c>
  809498:	11000304 	addi	r4,r2,12
  80949c:	10000015 	stw	zero,0(r2)
  8094a0:	14800115 	stw	r18,4(r2)
  8094a4:	11000215 	stw	r4,8(r2)
  8094a8:	89801a04 	addi	r6,r17,104
  8094ac:	000b883a 	mov	r5,zero
  8094b0:	080a4180 	call	80a418 <memset>
  8094b4:	8005883a 	mov	r2,r16
  8094b8:	dfc00317 	ldw	ra,12(sp)
  8094bc:	dc800217 	ldw	r18,8(sp)
  8094c0:	dc400117 	ldw	r17,4(sp)
  8094c4:	dc000017 	ldw	r16,0(sp)
  8094c8:	dec00404 	addi	sp,sp,16
  8094cc:	f800283a 	ret

008094d0 <__sfp>:
  8094d0:	defffb04 	addi	sp,sp,-20
  8094d4:	dc000015 	stw	r16,0(sp)
  8094d8:	040020b4 	movhi	r16,130
  8094dc:	8424b904 	addi	r16,r16,-27932
  8094e0:	dcc00315 	stw	r19,12(sp)
  8094e4:	2027883a 	mov	r19,r4
  8094e8:	81000017 	ldw	r4,0(r16)
  8094ec:	dfc00415 	stw	ra,16(sp)
  8094f0:	dc800215 	stw	r18,8(sp)
  8094f4:	20800e17 	ldw	r2,56(r4)
  8094f8:	dc400115 	stw	r17,4(sp)
  8094fc:	1000021e 	bne	r2,zero,809508 <__sfp+0x38>
  809500:	08092c40 	call	8092c4 <__sinit.part.1>
  809504:	81000017 	ldw	r4,0(r16)
  809508:	2480b804 	addi	r18,r4,736
  80950c:	047fffc4 	movi	r17,-1
  809510:	91000117 	ldw	r4,4(r18)
  809514:	94000217 	ldw	r16,8(r18)
  809518:	213fffc4 	addi	r4,r4,-1
  80951c:	20000a16 	blt	r4,zero,809548 <__sfp+0x78>
  809520:	8080030f 	ldh	r2,12(r16)
  809524:	10000c26 	beq	r2,zero,809558 <__sfp+0x88>
  809528:	80c01d04 	addi	r3,r16,116
  80952c:	00000206 	br	809538 <__sfp+0x68>
  809530:	18bfe60f 	ldh	r2,-104(r3)
  809534:	10000826 	beq	r2,zero,809558 <__sfp+0x88>
  809538:	213fffc4 	addi	r4,r4,-1
  80953c:	1c3ffd04 	addi	r16,r3,-12
  809540:	18c01a04 	addi	r3,r3,104
  809544:	247ffa1e 	bne	r4,r17,809530 <__alt_mem_onchip_mem+0xff801530>
  809548:	90800017 	ldw	r2,0(r18)
  80954c:	10001d26 	beq	r2,zero,8095c4 <__sfp+0xf4>
  809550:	1025883a 	mov	r18,r2
  809554:	003fee06 	br	809510 <__alt_mem_onchip_mem+0xff801510>
  809558:	00bfffc4 	movi	r2,-1
  80955c:	8080038d 	sth	r2,14(r16)
  809560:	00800044 	movi	r2,1
  809564:	8080030d 	sth	r2,12(r16)
  809568:	80001915 	stw	zero,100(r16)
  80956c:	80000015 	stw	zero,0(r16)
  809570:	80000215 	stw	zero,8(r16)
  809574:	80000115 	stw	zero,4(r16)
  809578:	80000415 	stw	zero,16(r16)
  80957c:	80000515 	stw	zero,20(r16)
  809580:	80000615 	stw	zero,24(r16)
  809584:	01800204 	movi	r6,8
  809588:	000b883a 	mov	r5,zero
  80958c:	81001704 	addi	r4,r16,92
  809590:	080a4180 	call	80a418 <memset>
  809594:	8005883a 	mov	r2,r16
  809598:	80000c15 	stw	zero,48(r16)
  80959c:	80000d15 	stw	zero,52(r16)
  8095a0:	80001115 	stw	zero,68(r16)
  8095a4:	80001215 	stw	zero,72(r16)
  8095a8:	dfc00417 	ldw	ra,16(sp)
  8095ac:	dcc00317 	ldw	r19,12(sp)
  8095b0:	dc800217 	ldw	r18,8(sp)
  8095b4:	dc400117 	ldw	r17,4(sp)
  8095b8:	dc000017 	ldw	r16,0(sp)
  8095bc:	dec00504 	addi	sp,sp,20
  8095c0:	f800283a 	ret
  8095c4:	01400104 	movi	r5,4
  8095c8:	9809883a 	mov	r4,r19
  8095cc:	08094680 	call	809468 <__sfmoreglue>
  8095d0:	90800015 	stw	r2,0(r18)
  8095d4:	103fde1e 	bne	r2,zero,809550 <__alt_mem_onchip_mem+0xff801550>
  8095d8:	00800304 	movi	r2,12
  8095dc:	98800015 	stw	r2,0(r19)
  8095e0:	0005883a 	mov	r2,zero
  8095e4:	003ff006 	br	8095a8 <__alt_mem_onchip_mem+0xff8015a8>

008095e8 <_cleanup>:
  8095e8:	008020b4 	movhi	r2,130
  8095ec:	10a4b904 	addi	r2,r2,-27932
  8095f0:	11000017 	ldw	r4,0(r2)
  8095f4:	01402074 	movhi	r5,129
  8095f8:	29798204 	addi	r5,r5,-6648
  8095fc:	0809b481 	jmpi	809b48 <_fwalk_reent>

00809600 <__sinit>:
  809600:	20800e17 	ldw	r2,56(r4)
  809604:	10000126 	beq	r2,zero,80960c <__sinit+0xc>
  809608:	f800283a 	ret
  80960c:	08092c41 	jmpi	8092c4 <__sinit.part.1>

00809610 <__sfp_lock_acquire>:
  809610:	f800283a 	ret

00809614 <__sfp_lock_release>:
  809614:	f800283a 	ret

00809618 <__sinit_lock_acquire>:
  809618:	f800283a 	ret

0080961c <__sinit_lock_release>:
  80961c:	f800283a 	ret

00809620 <__fp_lock_all>:
  809620:	008020b4 	movhi	r2,130
  809624:	10a4ba04 	addi	r2,r2,-27928
  809628:	11000017 	ldw	r4,0(r2)
  80962c:	01402074 	movhi	r5,129
  809630:	29651804 	addi	r5,r5,-27552
  809634:	0809a841 	jmpi	809a84 <_fwalk>

00809638 <__fp_unlock_all>:
  809638:	008020b4 	movhi	r2,130
  80963c:	10a4ba04 	addi	r2,r2,-27928
  809640:	11000017 	ldw	r4,0(r2)
  809644:	01402074 	movhi	r5,129
  809648:	2964ac04 	addi	r5,r5,-27984
  80964c:	0809a841 	jmpi	809a84 <_fwalk>

00809650 <_malloc_trim_r>:
  809650:	defffb04 	addi	sp,sp,-20
  809654:	dcc00315 	stw	r19,12(sp)
  809658:	04c02074 	movhi	r19,129
  80965c:	dc800215 	stw	r18,8(sp)
  809660:	dc400115 	stw	r17,4(sp)
  809664:	dc000015 	stw	r16,0(sp)
  809668:	dfc00415 	stw	ra,16(sp)
  80966c:	2821883a 	mov	r16,r5
  809670:	9cde9b04 	addi	r19,r19,31340
  809674:	2025883a 	mov	r18,r4
  809678:	08132180 	call	813218 <__malloc_lock>
  80967c:	98800217 	ldw	r2,8(r19)
  809680:	14400117 	ldw	r17,4(r2)
  809684:	00bfff04 	movi	r2,-4
  809688:	88a2703a 	and	r17,r17,r2
  80968c:	8c21c83a 	sub	r16,r17,r16
  809690:	8403fbc4 	addi	r16,r16,4079
  809694:	8020d33a 	srli	r16,r16,12
  809698:	0083ffc4 	movi	r2,4095
  80969c:	843fffc4 	addi	r16,r16,-1
  8096a0:	8020933a 	slli	r16,r16,12
  8096a4:	1400060e 	bge	r2,r16,8096c0 <_malloc_trim_r+0x70>
  8096a8:	000b883a 	mov	r5,zero
  8096ac:	9009883a 	mov	r4,r18
  8096b0:	080a6800 	call	80a680 <_sbrk_r>
  8096b4:	98c00217 	ldw	r3,8(r19)
  8096b8:	1c47883a 	add	r3,r3,r17
  8096bc:	10c00a26 	beq	r2,r3,8096e8 <_malloc_trim_r+0x98>
  8096c0:	9009883a 	mov	r4,r18
  8096c4:	081323c0 	call	81323c <__malloc_unlock>
  8096c8:	0005883a 	mov	r2,zero
  8096cc:	dfc00417 	ldw	ra,16(sp)
  8096d0:	dcc00317 	ldw	r19,12(sp)
  8096d4:	dc800217 	ldw	r18,8(sp)
  8096d8:	dc400117 	ldw	r17,4(sp)
  8096dc:	dc000017 	ldw	r16,0(sp)
  8096e0:	dec00504 	addi	sp,sp,20
  8096e4:	f800283a 	ret
  8096e8:	040bc83a 	sub	r5,zero,r16
  8096ec:	9009883a 	mov	r4,r18
  8096f0:	080a6800 	call	80a680 <_sbrk_r>
  8096f4:	00ffffc4 	movi	r3,-1
  8096f8:	10c00d26 	beq	r2,r3,809730 <_malloc_trim_r+0xe0>
  8096fc:	00c020b4 	movhi	r3,130
  809700:	18ec8c04 	addi	r3,r3,-19920
  809704:	18800017 	ldw	r2,0(r3)
  809708:	99000217 	ldw	r4,8(r19)
  80970c:	8c23c83a 	sub	r17,r17,r16
  809710:	8c400054 	ori	r17,r17,1
  809714:	1421c83a 	sub	r16,r2,r16
  809718:	24400115 	stw	r17,4(r4)
  80971c:	9009883a 	mov	r4,r18
  809720:	1c000015 	stw	r16,0(r3)
  809724:	081323c0 	call	81323c <__malloc_unlock>
  809728:	00800044 	movi	r2,1
  80972c:	003fe706 	br	8096cc <__alt_mem_onchip_mem+0xff8016cc>
  809730:	000b883a 	mov	r5,zero
  809734:	9009883a 	mov	r4,r18
  809738:	080a6800 	call	80a680 <_sbrk_r>
  80973c:	99000217 	ldw	r4,8(r19)
  809740:	014003c4 	movi	r5,15
  809744:	1107c83a 	sub	r3,r2,r4
  809748:	28ffdd0e 	bge	r5,r3,8096c0 <__alt_mem_onchip_mem+0xff8016c0>
  80974c:	014020b4 	movhi	r5,130
  809750:	2964bb04 	addi	r5,r5,-27924
  809754:	29400017 	ldw	r5,0(r5)
  809758:	18c00054 	ori	r3,r3,1
  80975c:	20c00115 	stw	r3,4(r4)
  809760:	00c020b4 	movhi	r3,130
  809764:	1145c83a 	sub	r2,r2,r5
  809768:	18ec8c04 	addi	r3,r3,-19920
  80976c:	18800015 	stw	r2,0(r3)
  809770:	003fd306 	br	8096c0 <__alt_mem_onchip_mem+0xff8016c0>

00809774 <_free_r>:
  809774:	28004126 	beq	r5,zero,80987c <_free_r+0x108>
  809778:	defffd04 	addi	sp,sp,-12
  80977c:	dc400115 	stw	r17,4(sp)
  809780:	dc000015 	stw	r16,0(sp)
  809784:	2023883a 	mov	r17,r4
  809788:	2821883a 	mov	r16,r5
  80978c:	dfc00215 	stw	ra,8(sp)
  809790:	08132180 	call	813218 <__malloc_lock>
  809794:	81ffff17 	ldw	r7,-4(r16)
  809798:	00bfff84 	movi	r2,-2
  80979c:	01002074 	movhi	r4,129
  8097a0:	81bffe04 	addi	r6,r16,-8
  8097a4:	3884703a 	and	r2,r7,r2
  8097a8:	211e9b04 	addi	r4,r4,31340
  8097ac:	308b883a 	add	r5,r6,r2
  8097b0:	2a400117 	ldw	r9,4(r5)
  8097b4:	22000217 	ldw	r8,8(r4)
  8097b8:	00ffff04 	movi	r3,-4
  8097bc:	48c6703a 	and	r3,r9,r3
  8097c0:	2a005726 	beq	r5,r8,809920 <_free_r+0x1ac>
  8097c4:	28c00115 	stw	r3,4(r5)
  8097c8:	39c0004c 	andi	r7,r7,1
  8097cc:	3800091e 	bne	r7,zero,8097f4 <_free_r+0x80>
  8097d0:	823ffe17 	ldw	r8,-8(r16)
  8097d4:	22400204 	addi	r9,r4,8
  8097d8:	320dc83a 	sub	r6,r6,r8
  8097dc:	31c00217 	ldw	r7,8(r6)
  8097e0:	1205883a 	add	r2,r2,r8
  8097e4:	3a406526 	beq	r7,r9,80997c <_free_r+0x208>
  8097e8:	32000317 	ldw	r8,12(r6)
  8097ec:	3a000315 	stw	r8,12(r7)
  8097f0:	41c00215 	stw	r7,8(r8)
  8097f4:	28cf883a 	add	r7,r5,r3
  8097f8:	39c00117 	ldw	r7,4(r7)
  8097fc:	39c0004c 	andi	r7,r7,1
  809800:	38003a26 	beq	r7,zero,8098ec <_free_r+0x178>
  809804:	10c00054 	ori	r3,r2,1
  809808:	30c00115 	stw	r3,4(r6)
  80980c:	3087883a 	add	r3,r6,r2
  809810:	18800015 	stw	r2,0(r3)
  809814:	00c07fc4 	movi	r3,511
  809818:	18801936 	bltu	r3,r2,809880 <_free_r+0x10c>
  80981c:	1004d0fa 	srli	r2,r2,3
  809820:	01c00044 	movi	r7,1
  809824:	21400117 	ldw	r5,4(r4)
  809828:	10c00044 	addi	r3,r2,1
  80982c:	18c7883a 	add	r3,r3,r3
  809830:	1005d0ba 	srai	r2,r2,2
  809834:	18c7883a 	add	r3,r3,r3
  809838:	18c7883a 	add	r3,r3,r3
  80983c:	1907883a 	add	r3,r3,r4
  809840:	3884983a 	sll	r2,r7,r2
  809844:	19c00017 	ldw	r7,0(r3)
  809848:	1a3ffe04 	addi	r8,r3,-8
  80984c:	1144b03a 	or	r2,r2,r5
  809850:	32000315 	stw	r8,12(r6)
  809854:	31c00215 	stw	r7,8(r6)
  809858:	20800115 	stw	r2,4(r4)
  80985c:	19800015 	stw	r6,0(r3)
  809860:	39800315 	stw	r6,12(r7)
  809864:	8809883a 	mov	r4,r17
  809868:	dfc00217 	ldw	ra,8(sp)
  80986c:	dc400117 	ldw	r17,4(sp)
  809870:	dc000017 	ldw	r16,0(sp)
  809874:	dec00304 	addi	sp,sp,12
  809878:	081323c1 	jmpi	81323c <__malloc_unlock>
  80987c:	f800283a 	ret
  809880:	100ad27a 	srli	r5,r2,9
  809884:	00c00104 	movi	r3,4
  809888:	19404a36 	bltu	r3,r5,8099b4 <_free_r+0x240>
  80988c:	100ad1ba 	srli	r5,r2,6
  809890:	28c00e44 	addi	r3,r5,57
  809894:	18c7883a 	add	r3,r3,r3
  809898:	29400e04 	addi	r5,r5,56
  80989c:	18c7883a 	add	r3,r3,r3
  8098a0:	18c7883a 	add	r3,r3,r3
  8098a4:	1909883a 	add	r4,r3,r4
  8098a8:	20c00017 	ldw	r3,0(r4)
  8098ac:	01c02074 	movhi	r7,129
  8098b0:	213ffe04 	addi	r4,r4,-8
  8098b4:	39de9b04 	addi	r7,r7,31340
  8098b8:	20c04426 	beq	r4,r3,8099cc <_free_r+0x258>
  8098bc:	01ffff04 	movi	r7,-4
  8098c0:	19400117 	ldw	r5,4(r3)
  8098c4:	29ca703a 	and	r5,r5,r7
  8098c8:	1140022e 	bgeu	r2,r5,8098d4 <_free_r+0x160>
  8098cc:	18c00217 	ldw	r3,8(r3)
  8098d0:	20fffb1e 	bne	r4,r3,8098c0 <__alt_mem_onchip_mem+0xff8018c0>
  8098d4:	19000317 	ldw	r4,12(r3)
  8098d8:	31000315 	stw	r4,12(r6)
  8098dc:	30c00215 	stw	r3,8(r6)
  8098e0:	21800215 	stw	r6,8(r4)
  8098e4:	19800315 	stw	r6,12(r3)
  8098e8:	003fde06 	br	809864 <__alt_mem_onchip_mem+0xff801864>
  8098ec:	29c00217 	ldw	r7,8(r5)
  8098f0:	10c5883a 	add	r2,r2,r3
  8098f4:	00c02074 	movhi	r3,129
  8098f8:	18de9d04 	addi	r3,r3,31348
  8098fc:	38c03b26 	beq	r7,r3,8099ec <_free_r+0x278>
  809900:	2a000317 	ldw	r8,12(r5)
  809904:	11400054 	ori	r5,r2,1
  809908:	3087883a 	add	r3,r6,r2
  80990c:	3a000315 	stw	r8,12(r7)
  809910:	41c00215 	stw	r7,8(r8)
  809914:	31400115 	stw	r5,4(r6)
  809918:	18800015 	stw	r2,0(r3)
  80991c:	003fbd06 	br	809814 <__alt_mem_onchip_mem+0xff801814>
  809920:	39c0004c 	andi	r7,r7,1
  809924:	10c5883a 	add	r2,r2,r3
  809928:	3800071e 	bne	r7,zero,809948 <_free_r+0x1d4>
  80992c:	81fffe17 	ldw	r7,-8(r16)
  809930:	31cdc83a 	sub	r6,r6,r7
  809934:	30c00317 	ldw	r3,12(r6)
  809938:	31400217 	ldw	r5,8(r6)
  80993c:	11c5883a 	add	r2,r2,r7
  809940:	28c00315 	stw	r3,12(r5)
  809944:	19400215 	stw	r5,8(r3)
  809948:	10c00054 	ori	r3,r2,1
  80994c:	30c00115 	stw	r3,4(r6)
  809950:	00c020b4 	movhi	r3,130
  809954:	18e4bc04 	addi	r3,r3,-27920
  809958:	18c00017 	ldw	r3,0(r3)
  80995c:	21800215 	stw	r6,8(r4)
  809960:	10ffc036 	bltu	r2,r3,809864 <__alt_mem_onchip_mem+0xff801864>
  809964:	008020b4 	movhi	r2,130
  809968:	10ac0a04 	addi	r2,r2,-20440
  80996c:	11400017 	ldw	r5,0(r2)
  809970:	8809883a 	mov	r4,r17
  809974:	08096500 	call	809650 <_malloc_trim_r>
  809978:	003fba06 	br	809864 <__alt_mem_onchip_mem+0xff801864>
  80997c:	28c9883a 	add	r4,r5,r3
  809980:	21000117 	ldw	r4,4(r4)
  809984:	2100004c 	andi	r4,r4,1
  809988:	2000391e 	bne	r4,zero,809a70 <_free_r+0x2fc>
  80998c:	29c00217 	ldw	r7,8(r5)
  809990:	29000317 	ldw	r4,12(r5)
  809994:	1885883a 	add	r2,r3,r2
  809998:	10c00054 	ori	r3,r2,1
  80999c:	39000315 	stw	r4,12(r7)
  8099a0:	21c00215 	stw	r7,8(r4)
  8099a4:	30c00115 	stw	r3,4(r6)
  8099a8:	308d883a 	add	r6,r6,r2
  8099ac:	30800015 	stw	r2,0(r6)
  8099b0:	003fac06 	br	809864 <__alt_mem_onchip_mem+0xff801864>
  8099b4:	00c00504 	movi	r3,20
  8099b8:	19401536 	bltu	r3,r5,809a10 <_free_r+0x29c>
  8099bc:	28c01704 	addi	r3,r5,92
  8099c0:	18c7883a 	add	r3,r3,r3
  8099c4:	294016c4 	addi	r5,r5,91
  8099c8:	003fb406 	br	80989c <__alt_mem_onchip_mem+0xff80189c>
  8099cc:	280bd0ba 	srai	r5,r5,2
  8099d0:	00c00044 	movi	r3,1
  8099d4:	38800117 	ldw	r2,4(r7)
  8099d8:	194a983a 	sll	r5,r3,r5
  8099dc:	2007883a 	mov	r3,r4
  8099e0:	2884b03a 	or	r2,r5,r2
  8099e4:	38800115 	stw	r2,4(r7)
  8099e8:	003fbb06 	br	8098d8 <__alt_mem_onchip_mem+0xff8018d8>
  8099ec:	21800515 	stw	r6,20(r4)
  8099f0:	21800415 	stw	r6,16(r4)
  8099f4:	10c00054 	ori	r3,r2,1
  8099f8:	31c00315 	stw	r7,12(r6)
  8099fc:	31c00215 	stw	r7,8(r6)
  809a00:	30c00115 	stw	r3,4(r6)
  809a04:	308d883a 	add	r6,r6,r2
  809a08:	30800015 	stw	r2,0(r6)
  809a0c:	003f9506 	br	809864 <__alt_mem_onchip_mem+0xff801864>
  809a10:	00c01504 	movi	r3,84
  809a14:	19400536 	bltu	r3,r5,809a2c <_free_r+0x2b8>
  809a18:	100ad33a 	srli	r5,r2,12
  809a1c:	28c01bc4 	addi	r3,r5,111
  809a20:	18c7883a 	add	r3,r3,r3
  809a24:	29401b84 	addi	r5,r5,110
  809a28:	003f9c06 	br	80989c <__alt_mem_onchip_mem+0xff80189c>
  809a2c:	00c05504 	movi	r3,340
  809a30:	19400536 	bltu	r3,r5,809a48 <_free_r+0x2d4>
  809a34:	100ad3fa 	srli	r5,r2,15
  809a38:	28c01e04 	addi	r3,r5,120
  809a3c:	18c7883a 	add	r3,r3,r3
  809a40:	29401dc4 	addi	r5,r5,119
  809a44:	003f9506 	br	80989c <__alt_mem_onchip_mem+0xff80189c>
  809a48:	00c15504 	movi	r3,1364
  809a4c:	19400536 	bltu	r3,r5,809a64 <_free_r+0x2f0>
  809a50:	100ad4ba 	srli	r5,r2,18
  809a54:	28c01f44 	addi	r3,r5,125
  809a58:	18c7883a 	add	r3,r3,r3
  809a5c:	29401f04 	addi	r5,r5,124
  809a60:	003f8e06 	br	80989c <__alt_mem_onchip_mem+0xff80189c>
  809a64:	00c03f84 	movi	r3,254
  809a68:	01401f84 	movi	r5,126
  809a6c:	003f8b06 	br	80989c <__alt_mem_onchip_mem+0xff80189c>
  809a70:	10c00054 	ori	r3,r2,1
  809a74:	30c00115 	stw	r3,4(r6)
  809a78:	308d883a 	add	r6,r6,r2
  809a7c:	30800015 	stw	r2,0(r6)
  809a80:	003f7806 	br	809864 <__alt_mem_onchip_mem+0xff801864>

00809a84 <_fwalk>:
  809a84:	defff704 	addi	sp,sp,-36
  809a88:	dd000415 	stw	r20,16(sp)
  809a8c:	dfc00815 	stw	ra,32(sp)
  809a90:	ddc00715 	stw	r23,28(sp)
  809a94:	dd800615 	stw	r22,24(sp)
  809a98:	dd400515 	stw	r21,20(sp)
  809a9c:	dcc00315 	stw	r19,12(sp)
  809aa0:	dc800215 	stw	r18,8(sp)
  809aa4:	dc400115 	stw	r17,4(sp)
  809aa8:	dc000015 	stw	r16,0(sp)
  809aac:	2500b804 	addi	r20,r4,736
  809ab0:	a0002326 	beq	r20,zero,809b40 <_fwalk+0xbc>
  809ab4:	282b883a 	mov	r21,r5
  809ab8:	002f883a 	mov	r23,zero
  809abc:	05800044 	movi	r22,1
  809ac0:	04ffffc4 	movi	r19,-1
  809ac4:	a4400117 	ldw	r17,4(r20)
  809ac8:	a4800217 	ldw	r18,8(r20)
  809acc:	8c7fffc4 	addi	r17,r17,-1
  809ad0:	88000d16 	blt	r17,zero,809b08 <_fwalk+0x84>
  809ad4:	94000304 	addi	r16,r18,12
  809ad8:	94800384 	addi	r18,r18,14
  809adc:	8080000b 	ldhu	r2,0(r16)
  809ae0:	8c7fffc4 	addi	r17,r17,-1
  809ae4:	813ffd04 	addi	r4,r16,-12
  809ae8:	b080042e 	bgeu	r22,r2,809afc <_fwalk+0x78>
  809aec:	9080000f 	ldh	r2,0(r18)
  809af0:	14c00226 	beq	r2,r19,809afc <_fwalk+0x78>
  809af4:	a83ee83a 	callr	r21
  809af8:	b8aeb03a 	or	r23,r23,r2
  809afc:	84001a04 	addi	r16,r16,104
  809b00:	94801a04 	addi	r18,r18,104
  809b04:	8cfff51e 	bne	r17,r19,809adc <__alt_mem_onchip_mem+0xff801adc>
  809b08:	a5000017 	ldw	r20,0(r20)
  809b0c:	a03fed1e 	bne	r20,zero,809ac4 <__alt_mem_onchip_mem+0xff801ac4>
  809b10:	b805883a 	mov	r2,r23
  809b14:	dfc00817 	ldw	ra,32(sp)
  809b18:	ddc00717 	ldw	r23,28(sp)
  809b1c:	dd800617 	ldw	r22,24(sp)
  809b20:	dd400517 	ldw	r21,20(sp)
  809b24:	dd000417 	ldw	r20,16(sp)
  809b28:	dcc00317 	ldw	r19,12(sp)
  809b2c:	dc800217 	ldw	r18,8(sp)
  809b30:	dc400117 	ldw	r17,4(sp)
  809b34:	dc000017 	ldw	r16,0(sp)
  809b38:	dec00904 	addi	sp,sp,36
  809b3c:	f800283a 	ret
  809b40:	002f883a 	mov	r23,zero
  809b44:	003ff206 	br	809b10 <__alt_mem_onchip_mem+0xff801b10>

00809b48 <_fwalk_reent>:
  809b48:	defff704 	addi	sp,sp,-36
  809b4c:	dd000415 	stw	r20,16(sp)
  809b50:	dfc00815 	stw	ra,32(sp)
  809b54:	ddc00715 	stw	r23,28(sp)
  809b58:	dd800615 	stw	r22,24(sp)
  809b5c:	dd400515 	stw	r21,20(sp)
  809b60:	dcc00315 	stw	r19,12(sp)
  809b64:	dc800215 	stw	r18,8(sp)
  809b68:	dc400115 	stw	r17,4(sp)
  809b6c:	dc000015 	stw	r16,0(sp)
  809b70:	2500b804 	addi	r20,r4,736
  809b74:	a0002326 	beq	r20,zero,809c04 <_fwalk_reent+0xbc>
  809b78:	282b883a 	mov	r21,r5
  809b7c:	2027883a 	mov	r19,r4
  809b80:	002f883a 	mov	r23,zero
  809b84:	05800044 	movi	r22,1
  809b88:	04bfffc4 	movi	r18,-1
  809b8c:	a4400117 	ldw	r17,4(r20)
  809b90:	a4000217 	ldw	r16,8(r20)
  809b94:	8c7fffc4 	addi	r17,r17,-1
  809b98:	88000c16 	blt	r17,zero,809bcc <_fwalk_reent+0x84>
  809b9c:	84000304 	addi	r16,r16,12
  809ba0:	8080000b 	ldhu	r2,0(r16)
  809ba4:	8c7fffc4 	addi	r17,r17,-1
  809ba8:	817ffd04 	addi	r5,r16,-12
  809bac:	b080052e 	bgeu	r22,r2,809bc4 <_fwalk_reent+0x7c>
  809bb0:	8080008f 	ldh	r2,2(r16)
  809bb4:	9809883a 	mov	r4,r19
  809bb8:	14800226 	beq	r2,r18,809bc4 <_fwalk_reent+0x7c>
  809bbc:	a83ee83a 	callr	r21
  809bc0:	b8aeb03a 	or	r23,r23,r2
  809bc4:	84001a04 	addi	r16,r16,104
  809bc8:	8cbff51e 	bne	r17,r18,809ba0 <__alt_mem_onchip_mem+0xff801ba0>
  809bcc:	a5000017 	ldw	r20,0(r20)
  809bd0:	a03fee1e 	bne	r20,zero,809b8c <__alt_mem_onchip_mem+0xff801b8c>
  809bd4:	b805883a 	mov	r2,r23
  809bd8:	dfc00817 	ldw	ra,32(sp)
  809bdc:	ddc00717 	ldw	r23,28(sp)
  809be0:	dd800617 	ldw	r22,24(sp)
  809be4:	dd400517 	ldw	r21,20(sp)
  809be8:	dd000417 	ldw	r20,16(sp)
  809bec:	dcc00317 	ldw	r19,12(sp)
  809bf0:	dc800217 	ldw	r18,8(sp)
  809bf4:	dc400117 	ldw	r17,4(sp)
  809bf8:	dc000017 	ldw	r16,0(sp)
  809bfc:	dec00904 	addi	sp,sp,36
  809c00:	f800283a 	ret
  809c04:	002f883a 	mov	r23,zero
  809c08:	003ff206 	br	809bd4 <__alt_mem_onchip_mem+0xff801bd4>

00809c0c <_malloc_r>:
  809c0c:	defff504 	addi	sp,sp,-44
  809c10:	dc800315 	stw	r18,12(sp)
  809c14:	dfc00a15 	stw	ra,40(sp)
  809c18:	df000915 	stw	fp,36(sp)
  809c1c:	ddc00815 	stw	r23,32(sp)
  809c20:	dd800715 	stw	r22,28(sp)
  809c24:	dd400615 	stw	r21,24(sp)
  809c28:	dd000515 	stw	r20,20(sp)
  809c2c:	dcc00415 	stw	r19,16(sp)
  809c30:	dc400215 	stw	r17,8(sp)
  809c34:	dc000115 	stw	r16,4(sp)
  809c38:	288002c4 	addi	r2,r5,11
  809c3c:	00c00584 	movi	r3,22
  809c40:	2025883a 	mov	r18,r4
  809c44:	18807f2e 	bgeu	r3,r2,809e44 <_malloc_r+0x238>
  809c48:	047ffe04 	movi	r17,-8
  809c4c:	1462703a 	and	r17,r2,r17
  809c50:	8800a316 	blt	r17,zero,809ee0 <_malloc_r+0x2d4>
  809c54:	8940a236 	bltu	r17,r5,809ee0 <_malloc_r+0x2d4>
  809c58:	08132180 	call	813218 <__malloc_lock>
  809c5c:	00807dc4 	movi	r2,503
  809c60:	1441e92e 	bgeu	r2,r17,80a408 <_malloc_r+0x7fc>
  809c64:	8804d27a 	srli	r2,r17,9
  809c68:	1000a126 	beq	r2,zero,809ef0 <_malloc_r+0x2e4>
  809c6c:	00c00104 	movi	r3,4
  809c70:	18811e36 	bltu	r3,r2,80a0ec <_malloc_r+0x4e0>
  809c74:	8804d1ba 	srli	r2,r17,6
  809c78:	12000e44 	addi	r8,r2,57
  809c7c:	11c00e04 	addi	r7,r2,56
  809c80:	4209883a 	add	r4,r8,r8
  809c84:	04c02074 	movhi	r19,129
  809c88:	2109883a 	add	r4,r4,r4
  809c8c:	9cde9b04 	addi	r19,r19,31340
  809c90:	2109883a 	add	r4,r4,r4
  809c94:	9909883a 	add	r4,r19,r4
  809c98:	24000117 	ldw	r16,4(r4)
  809c9c:	213ffe04 	addi	r4,r4,-8
  809ca0:	24009726 	beq	r4,r16,809f00 <_malloc_r+0x2f4>
  809ca4:	80800117 	ldw	r2,4(r16)
  809ca8:	01bfff04 	movi	r6,-4
  809cac:	014003c4 	movi	r5,15
  809cb0:	1184703a 	and	r2,r2,r6
  809cb4:	1447c83a 	sub	r3,r2,r17
  809cb8:	28c00716 	blt	r5,r3,809cd8 <_malloc_r+0xcc>
  809cbc:	1800920e 	bge	r3,zero,809f08 <_malloc_r+0x2fc>
  809cc0:	84000317 	ldw	r16,12(r16)
  809cc4:	24008e26 	beq	r4,r16,809f00 <_malloc_r+0x2f4>
  809cc8:	80800117 	ldw	r2,4(r16)
  809ccc:	1184703a 	and	r2,r2,r6
  809cd0:	1447c83a 	sub	r3,r2,r17
  809cd4:	28fff90e 	bge	r5,r3,809cbc <__alt_mem_onchip_mem+0xff801cbc>
  809cd8:	3809883a 	mov	r4,r7
  809cdc:	01802074 	movhi	r6,129
  809ce0:	9c000417 	ldw	r16,16(r19)
  809ce4:	319e9b04 	addi	r6,r6,31340
  809ce8:	32000204 	addi	r8,r6,8
  809cec:	82013426 	beq	r16,r8,80a1c0 <_malloc_r+0x5b4>
  809cf0:	80c00117 	ldw	r3,4(r16)
  809cf4:	00bfff04 	movi	r2,-4
  809cf8:	188e703a 	and	r7,r3,r2
  809cfc:	3c45c83a 	sub	r2,r7,r17
  809d00:	00c003c4 	movi	r3,15
  809d04:	18811f16 	blt	r3,r2,80a184 <_malloc_r+0x578>
  809d08:	32000515 	stw	r8,20(r6)
  809d0c:	32000415 	stw	r8,16(r6)
  809d10:	10007f0e 	bge	r2,zero,809f10 <_malloc_r+0x304>
  809d14:	00807fc4 	movi	r2,511
  809d18:	11c0fd36 	bltu	r2,r7,80a110 <_malloc_r+0x504>
  809d1c:	3806d0fa 	srli	r3,r7,3
  809d20:	01c00044 	movi	r7,1
  809d24:	30800117 	ldw	r2,4(r6)
  809d28:	19400044 	addi	r5,r3,1
  809d2c:	294b883a 	add	r5,r5,r5
  809d30:	1807d0ba 	srai	r3,r3,2
  809d34:	294b883a 	add	r5,r5,r5
  809d38:	294b883a 	add	r5,r5,r5
  809d3c:	298b883a 	add	r5,r5,r6
  809d40:	38c6983a 	sll	r3,r7,r3
  809d44:	29c00017 	ldw	r7,0(r5)
  809d48:	2a7ffe04 	addi	r9,r5,-8
  809d4c:	1886b03a 	or	r3,r3,r2
  809d50:	82400315 	stw	r9,12(r16)
  809d54:	81c00215 	stw	r7,8(r16)
  809d58:	30c00115 	stw	r3,4(r6)
  809d5c:	2c000015 	stw	r16,0(r5)
  809d60:	3c000315 	stw	r16,12(r7)
  809d64:	2005d0ba 	srai	r2,r4,2
  809d68:	01400044 	movi	r5,1
  809d6c:	288a983a 	sll	r5,r5,r2
  809d70:	19406f36 	bltu	r3,r5,809f30 <_malloc_r+0x324>
  809d74:	28c4703a 	and	r2,r5,r3
  809d78:	10000a1e 	bne	r2,zero,809da4 <_malloc_r+0x198>
  809d7c:	00bfff04 	movi	r2,-4
  809d80:	294b883a 	add	r5,r5,r5
  809d84:	2088703a 	and	r4,r4,r2
  809d88:	28c4703a 	and	r2,r5,r3
  809d8c:	21000104 	addi	r4,r4,4
  809d90:	1000041e 	bne	r2,zero,809da4 <_malloc_r+0x198>
  809d94:	294b883a 	add	r5,r5,r5
  809d98:	28c4703a 	and	r2,r5,r3
  809d9c:	21000104 	addi	r4,r4,4
  809da0:	103ffc26 	beq	r2,zero,809d94 <__alt_mem_onchip_mem+0xff801d94>
  809da4:	02bfff04 	movi	r10,-4
  809da8:	024003c4 	movi	r9,15
  809dac:	21800044 	addi	r6,r4,1
  809db0:	318d883a 	add	r6,r6,r6
  809db4:	318d883a 	add	r6,r6,r6
  809db8:	318d883a 	add	r6,r6,r6
  809dbc:	998d883a 	add	r6,r19,r6
  809dc0:	333ffe04 	addi	r12,r6,-8
  809dc4:	2017883a 	mov	r11,r4
  809dc8:	31800104 	addi	r6,r6,4
  809dcc:	34000017 	ldw	r16,0(r6)
  809dd0:	31fffd04 	addi	r7,r6,-12
  809dd4:	81c0041e 	bne	r16,r7,809de8 <_malloc_r+0x1dc>
  809dd8:	0000fb06 	br	80a1c8 <_malloc_r+0x5bc>
  809ddc:	1801030e 	bge	r3,zero,80a1ec <_malloc_r+0x5e0>
  809de0:	84000317 	ldw	r16,12(r16)
  809de4:	81c0f826 	beq	r16,r7,80a1c8 <_malloc_r+0x5bc>
  809de8:	80800117 	ldw	r2,4(r16)
  809dec:	1284703a 	and	r2,r2,r10
  809df0:	1447c83a 	sub	r3,r2,r17
  809df4:	48fff90e 	bge	r9,r3,809ddc <__alt_mem_onchip_mem+0xff801ddc>
  809df8:	80800317 	ldw	r2,12(r16)
  809dfc:	81000217 	ldw	r4,8(r16)
  809e00:	89400054 	ori	r5,r17,1
  809e04:	81400115 	stw	r5,4(r16)
  809e08:	20800315 	stw	r2,12(r4)
  809e0c:	11000215 	stw	r4,8(r2)
  809e10:	8463883a 	add	r17,r16,r17
  809e14:	9c400515 	stw	r17,20(r19)
  809e18:	9c400415 	stw	r17,16(r19)
  809e1c:	18800054 	ori	r2,r3,1
  809e20:	88800115 	stw	r2,4(r17)
  809e24:	8a000315 	stw	r8,12(r17)
  809e28:	8a000215 	stw	r8,8(r17)
  809e2c:	88e3883a 	add	r17,r17,r3
  809e30:	88c00015 	stw	r3,0(r17)
  809e34:	9009883a 	mov	r4,r18
  809e38:	081323c0 	call	81323c <__malloc_unlock>
  809e3c:	80800204 	addi	r2,r16,8
  809e40:	00001b06 	br	809eb0 <_malloc_r+0x2a4>
  809e44:	04400404 	movi	r17,16
  809e48:	89402536 	bltu	r17,r5,809ee0 <_malloc_r+0x2d4>
  809e4c:	08132180 	call	813218 <__malloc_lock>
  809e50:	00800184 	movi	r2,6
  809e54:	01000084 	movi	r4,2
  809e58:	04c02074 	movhi	r19,129
  809e5c:	1085883a 	add	r2,r2,r2
  809e60:	9cde9b04 	addi	r19,r19,31340
  809e64:	1085883a 	add	r2,r2,r2
  809e68:	9885883a 	add	r2,r19,r2
  809e6c:	14000117 	ldw	r16,4(r2)
  809e70:	10fffe04 	addi	r3,r2,-8
  809e74:	80c0d926 	beq	r16,r3,80a1dc <_malloc_r+0x5d0>
  809e78:	80c00117 	ldw	r3,4(r16)
  809e7c:	81000317 	ldw	r4,12(r16)
  809e80:	00bfff04 	movi	r2,-4
  809e84:	1884703a 	and	r2,r3,r2
  809e88:	81400217 	ldw	r5,8(r16)
  809e8c:	8085883a 	add	r2,r16,r2
  809e90:	10c00117 	ldw	r3,4(r2)
  809e94:	29000315 	stw	r4,12(r5)
  809e98:	21400215 	stw	r5,8(r4)
  809e9c:	18c00054 	ori	r3,r3,1
  809ea0:	10c00115 	stw	r3,4(r2)
  809ea4:	9009883a 	mov	r4,r18
  809ea8:	081323c0 	call	81323c <__malloc_unlock>
  809eac:	80800204 	addi	r2,r16,8
  809eb0:	dfc00a17 	ldw	ra,40(sp)
  809eb4:	df000917 	ldw	fp,36(sp)
  809eb8:	ddc00817 	ldw	r23,32(sp)
  809ebc:	dd800717 	ldw	r22,28(sp)
  809ec0:	dd400617 	ldw	r21,24(sp)
  809ec4:	dd000517 	ldw	r20,20(sp)
  809ec8:	dcc00417 	ldw	r19,16(sp)
  809ecc:	dc800317 	ldw	r18,12(sp)
  809ed0:	dc400217 	ldw	r17,8(sp)
  809ed4:	dc000117 	ldw	r16,4(sp)
  809ed8:	dec00b04 	addi	sp,sp,44
  809edc:	f800283a 	ret
  809ee0:	00800304 	movi	r2,12
  809ee4:	90800015 	stw	r2,0(r18)
  809ee8:	0005883a 	mov	r2,zero
  809eec:	003ff006 	br	809eb0 <__alt_mem_onchip_mem+0xff801eb0>
  809ef0:	01002004 	movi	r4,128
  809ef4:	02001004 	movi	r8,64
  809ef8:	01c00fc4 	movi	r7,63
  809efc:	003f6106 	br	809c84 <__alt_mem_onchip_mem+0xff801c84>
  809f00:	4009883a 	mov	r4,r8
  809f04:	003f7506 	br	809cdc <__alt_mem_onchip_mem+0xff801cdc>
  809f08:	81000317 	ldw	r4,12(r16)
  809f0c:	003fde06 	br	809e88 <__alt_mem_onchip_mem+0xff801e88>
  809f10:	81c5883a 	add	r2,r16,r7
  809f14:	11400117 	ldw	r5,4(r2)
  809f18:	9009883a 	mov	r4,r18
  809f1c:	29400054 	ori	r5,r5,1
  809f20:	11400115 	stw	r5,4(r2)
  809f24:	081323c0 	call	81323c <__malloc_unlock>
  809f28:	80800204 	addi	r2,r16,8
  809f2c:	003fe006 	br	809eb0 <__alt_mem_onchip_mem+0xff801eb0>
  809f30:	9c000217 	ldw	r16,8(r19)
  809f34:	00bfff04 	movi	r2,-4
  809f38:	85800117 	ldw	r22,4(r16)
  809f3c:	b0ac703a 	and	r22,r22,r2
  809f40:	b4400336 	bltu	r22,r17,809f50 <_malloc_r+0x344>
  809f44:	b445c83a 	sub	r2,r22,r17
  809f48:	00c003c4 	movi	r3,15
  809f4c:	18805d16 	blt	r3,r2,80a0c4 <_malloc_r+0x4b8>
  809f50:	05c020b4 	movhi	r23,130
  809f54:	008020b4 	movhi	r2,130
  809f58:	10ac0a04 	addi	r2,r2,-20440
  809f5c:	bde4bb04 	addi	r23,r23,-27924
  809f60:	15400017 	ldw	r21,0(r2)
  809f64:	b8c00017 	ldw	r3,0(r23)
  809f68:	00bfffc4 	movi	r2,-1
  809f6c:	858d883a 	add	r6,r16,r22
  809f70:	8d6b883a 	add	r21,r17,r21
  809f74:	1880ea26 	beq	r3,r2,80a320 <_malloc_r+0x714>
  809f78:	ad4403c4 	addi	r21,r21,4111
  809f7c:	00bc0004 	movi	r2,-4096
  809f80:	a8aa703a 	and	r21,r21,r2
  809f84:	a80b883a 	mov	r5,r21
  809f88:	9009883a 	mov	r4,r18
  809f8c:	d9800015 	stw	r6,0(sp)
  809f90:	080a6800 	call	80a680 <_sbrk_r>
  809f94:	1029883a 	mov	r20,r2
  809f98:	00bfffc4 	movi	r2,-1
  809f9c:	d9800017 	ldw	r6,0(sp)
  809fa0:	a080e826 	beq	r20,r2,80a344 <_malloc_r+0x738>
  809fa4:	a180a636 	bltu	r20,r6,80a240 <_malloc_r+0x634>
  809fa8:	070020b4 	movhi	fp,130
  809fac:	e72c8c04 	addi	fp,fp,-19920
  809fb0:	e0800017 	ldw	r2,0(fp)
  809fb4:	a887883a 	add	r3,r21,r2
  809fb8:	e0c00015 	stw	r3,0(fp)
  809fbc:	3500e626 	beq	r6,r20,80a358 <_malloc_r+0x74c>
  809fc0:	b9000017 	ldw	r4,0(r23)
  809fc4:	00bfffc4 	movi	r2,-1
  809fc8:	2080ee26 	beq	r4,r2,80a384 <_malloc_r+0x778>
  809fcc:	a185c83a 	sub	r2,r20,r6
  809fd0:	10c5883a 	add	r2,r2,r3
  809fd4:	e0800015 	stw	r2,0(fp)
  809fd8:	a0c001cc 	andi	r3,r20,7
  809fdc:	1800bc26 	beq	r3,zero,80a2d0 <_malloc_r+0x6c4>
  809fe0:	a0e9c83a 	sub	r20,r20,r3
  809fe4:	00840204 	movi	r2,4104
  809fe8:	a5000204 	addi	r20,r20,8
  809fec:	10c7c83a 	sub	r3,r2,r3
  809ff0:	a545883a 	add	r2,r20,r21
  809ff4:	1083ffcc 	andi	r2,r2,4095
  809ff8:	18abc83a 	sub	r21,r3,r2
  809ffc:	a80b883a 	mov	r5,r21
  80a000:	9009883a 	mov	r4,r18
  80a004:	080a6800 	call	80a680 <_sbrk_r>
  80a008:	00ffffc4 	movi	r3,-1
  80a00c:	10c0e126 	beq	r2,r3,80a394 <_malloc_r+0x788>
  80a010:	1505c83a 	sub	r2,r2,r20
  80a014:	1545883a 	add	r2,r2,r21
  80a018:	10800054 	ori	r2,r2,1
  80a01c:	e0c00017 	ldw	r3,0(fp)
  80a020:	9d000215 	stw	r20,8(r19)
  80a024:	a0800115 	stw	r2,4(r20)
  80a028:	a8c7883a 	add	r3,r21,r3
  80a02c:	e0c00015 	stw	r3,0(fp)
  80a030:	84c00e26 	beq	r16,r19,80a06c <_malloc_r+0x460>
  80a034:	018003c4 	movi	r6,15
  80a038:	3580a72e 	bgeu	r6,r22,80a2d8 <_malloc_r+0x6cc>
  80a03c:	81400117 	ldw	r5,4(r16)
  80a040:	013ffe04 	movi	r4,-8
  80a044:	b0bffd04 	addi	r2,r22,-12
  80a048:	1104703a 	and	r2,r2,r4
  80a04c:	2900004c 	andi	r4,r5,1
  80a050:	2088b03a 	or	r4,r4,r2
  80a054:	81000115 	stw	r4,4(r16)
  80a058:	01400144 	movi	r5,5
  80a05c:	8089883a 	add	r4,r16,r2
  80a060:	21400115 	stw	r5,4(r4)
  80a064:	21400215 	stw	r5,8(r4)
  80a068:	3080cd36 	bltu	r6,r2,80a3a0 <_malloc_r+0x794>
  80a06c:	008020b4 	movhi	r2,130
  80a070:	10ac0904 	addi	r2,r2,-20444
  80a074:	11000017 	ldw	r4,0(r2)
  80a078:	20c0012e 	bgeu	r4,r3,80a080 <_malloc_r+0x474>
  80a07c:	10c00015 	stw	r3,0(r2)
  80a080:	008020b4 	movhi	r2,130
  80a084:	10ac0804 	addi	r2,r2,-20448
  80a088:	11000017 	ldw	r4,0(r2)
  80a08c:	9c000217 	ldw	r16,8(r19)
  80a090:	20c0012e 	bgeu	r4,r3,80a098 <_malloc_r+0x48c>
  80a094:	10c00015 	stw	r3,0(r2)
  80a098:	80c00117 	ldw	r3,4(r16)
  80a09c:	00bfff04 	movi	r2,-4
  80a0a0:	1886703a 	and	r3,r3,r2
  80a0a4:	1c45c83a 	sub	r2,r3,r17
  80a0a8:	1c400236 	bltu	r3,r17,80a0b4 <_malloc_r+0x4a8>
  80a0ac:	00c003c4 	movi	r3,15
  80a0b0:	18800416 	blt	r3,r2,80a0c4 <_malloc_r+0x4b8>
  80a0b4:	9009883a 	mov	r4,r18
  80a0b8:	081323c0 	call	81323c <__malloc_unlock>
  80a0bc:	0005883a 	mov	r2,zero
  80a0c0:	003f7b06 	br	809eb0 <__alt_mem_onchip_mem+0xff801eb0>
  80a0c4:	88c00054 	ori	r3,r17,1
  80a0c8:	80c00115 	stw	r3,4(r16)
  80a0cc:	8463883a 	add	r17,r16,r17
  80a0d0:	10800054 	ori	r2,r2,1
  80a0d4:	9c400215 	stw	r17,8(r19)
  80a0d8:	88800115 	stw	r2,4(r17)
  80a0dc:	9009883a 	mov	r4,r18
  80a0e0:	081323c0 	call	81323c <__malloc_unlock>
  80a0e4:	80800204 	addi	r2,r16,8
  80a0e8:	003f7106 	br	809eb0 <__alt_mem_onchip_mem+0xff801eb0>
  80a0ec:	00c00504 	movi	r3,20
  80a0f0:	18804a2e 	bgeu	r3,r2,80a21c <_malloc_r+0x610>
  80a0f4:	00c01504 	movi	r3,84
  80a0f8:	18806e36 	bltu	r3,r2,80a2b4 <_malloc_r+0x6a8>
  80a0fc:	8804d33a 	srli	r2,r17,12
  80a100:	12001bc4 	addi	r8,r2,111
  80a104:	11c01b84 	addi	r7,r2,110
  80a108:	4209883a 	add	r4,r8,r8
  80a10c:	003edd06 	br	809c84 <__alt_mem_onchip_mem+0xff801c84>
  80a110:	3804d27a 	srli	r2,r7,9
  80a114:	00c00104 	movi	r3,4
  80a118:	1880442e 	bgeu	r3,r2,80a22c <_malloc_r+0x620>
  80a11c:	00c00504 	movi	r3,20
  80a120:	18808136 	bltu	r3,r2,80a328 <_malloc_r+0x71c>
  80a124:	11401704 	addi	r5,r2,92
  80a128:	10c016c4 	addi	r3,r2,91
  80a12c:	294b883a 	add	r5,r5,r5
  80a130:	294b883a 	add	r5,r5,r5
  80a134:	294b883a 	add	r5,r5,r5
  80a138:	994b883a 	add	r5,r19,r5
  80a13c:	28800017 	ldw	r2,0(r5)
  80a140:	01802074 	movhi	r6,129
  80a144:	297ffe04 	addi	r5,r5,-8
  80a148:	319e9b04 	addi	r6,r6,31340
  80a14c:	28806526 	beq	r5,r2,80a2e4 <_malloc_r+0x6d8>
  80a150:	01bfff04 	movi	r6,-4
  80a154:	10c00117 	ldw	r3,4(r2)
  80a158:	1986703a 	and	r3,r3,r6
  80a15c:	38c0022e 	bgeu	r7,r3,80a168 <_malloc_r+0x55c>
  80a160:	10800217 	ldw	r2,8(r2)
  80a164:	28bffb1e 	bne	r5,r2,80a154 <__alt_mem_onchip_mem+0xff802154>
  80a168:	11400317 	ldw	r5,12(r2)
  80a16c:	98c00117 	ldw	r3,4(r19)
  80a170:	81400315 	stw	r5,12(r16)
  80a174:	80800215 	stw	r2,8(r16)
  80a178:	2c000215 	stw	r16,8(r5)
  80a17c:	14000315 	stw	r16,12(r2)
  80a180:	003ef806 	br	809d64 <__alt_mem_onchip_mem+0xff801d64>
  80a184:	88c00054 	ori	r3,r17,1
  80a188:	80c00115 	stw	r3,4(r16)
  80a18c:	8463883a 	add	r17,r16,r17
  80a190:	34400515 	stw	r17,20(r6)
  80a194:	34400415 	stw	r17,16(r6)
  80a198:	10c00054 	ori	r3,r2,1
  80a19c:	8a000315 	stw	r8,12(r17)
  80a1a0:	8a000215 	stw	r8,8(r17)
  80a1a4:	88c00115 	stw	r3,4(r17)
  80a1a8:	88a3883a 	add	r17,r17,r2
  80a1ac:	88800015 	stw	r2,0(r17)
  80a1b0:	9009883a 	mov	r4,r18
  80a1b4:	081323c0 	call	81323c <__malloc_unlock>
  80a1b8:	80800204 	addi	r2,r16,8
  80a1bc:	003f3c06 	br	809eb0 <__alt_mem_onchip_mem+0xff801eb0>
  80a1c0:	30c00117 	ldw	r3,4(r6)
  80a1c4:	003ee706 	br	809d64 <__alt_mem_onchip_mem+0xff801d64>
  80a1c8:	5ac00044 	addi	r11,r11,1
  80a1cc:	588000cc 	andi	r2,r11,3
  80a1d0:	31800204 	addi	r6,r6,8
  80a1d4:	103efd1e 	bne	r2,zero,809dcc <__alt_mem_onchip_mem+0xff801dcc>
  80a1d8:	00002406 	br	80a26c <_malloc_r+0x660>
  80a1dc:	14000317 	ldw	r16,12(r2)
  80a1e0:	143f251e 	bne	r2,r16,809e78 <__alt_mem_onchip_mem+0xff801e78>
  80a1e4:	21000084 	addi	r4,r4,2
  80a1e8:	003ebc06 	br	809cdc <__alt_mem_onchip_mem+0xff801cdc>
  80a1ec:	8085883a 	add	r2,r16,r2
  80a1f0:	10c00117 	ldw	r3,4(r2)
  80a1f4:	81000317 	ldw	r4,12(r16)
  80a1f8:	81400217 	ldw	r5,8(r16)
  80a1fc:	18c00054 	ori	r3,r3,1
  80a200:	10c00115 	stw	r3,4(r2)
  80a204:	29000315 	stw	r4,12(r5)
  80a208:	21400215 	stw	r5,8(r4)
  80a20c:	9009883a 	mov	r4,r18
  80a210:	081323c0 	call	81323c <__malloc_unlock>
  80a214:	80800204 	addi	r2,r16,8
  80a218:	003f2506 	br	809eb0 <__alt_mem_onchip_mem+0xff801eb0>
  80a21c:	12001704 	addi	r8,r2,92
  80a220:	11c016c4 	addi	r7,r2,91
  80a224:	4209883a 	add	r4,r8,r8
  80a228:	003e9606 	br	809c84 <__alt_mem_onchip_mem+0xff801c84>
  80a22c:	3804d1ba 	srli	r2,r7,6
  80a230:	11400e44 	addi	r5,r2,57
  80a234:	10c00e04 	addi	r3,r2,56
  80a238:	294b883a 	add	r5,r5,r5
  80a23c:	003fbc06 	br	80a130 <__alt_mem_onchip_mem+0xff802130>
  80a240:	84ff5926 	beq	r16,r19,809fa8 <__alt_mem_onchip_mem+0xff801fa8>
  80a244:	00802074 	movhi	r2,129
  80a248:	109e9b04 	addi	r2,r2,31340
  80a24c:	14000217 	ldw	r16,8(r2)
  80a250:	00bfff04 	movi	r2,-4
  80a254:	80c00117 	ldw	r3,4(r16)
  80a258:	1886703a 	and	r3,r3,r2
  80a25c:	003f9106 	br	80a0a4 <__alt_mem_onchip_mem+0xff8020a4>
  80a260:	60800217 	ldw	r2,8(r12)
  80a264:	213fffc4 	addi	r4,r4,-1
  80a268:	1300651e 	bne	r2,r12,80a400 <_malloc_r+0x7f4>
  80a26c:	208000cc 	andi	r2,r4,3
  80a270:	633ffe04 	addi	r12,r12,-8
  80a274:	103ffa1e 	bne	r2,zero,80a260 <__alt_mem_onchip_mem+0xff802260>
  80a278:	98800117 	ldw	r2,4(r19)
  80a27c:	0146303a 	nor	r3,zero,r5
  80a280:	1884703a 	and	r2,r3,r2
  80a284:	98800115 	stw	r2,4(r19)
  80a288:	294b883a 	add	r5,r5,r5
  80a28c:	117f2836 	bltu	r2,r5,809f30 <__alt_mem_onchip_mem+0xff801f30>
  80a290:	283f2726 	beq	r5,zero,809f30 <__alt_mem_onchip_mem+0xff801f30>
  80a294:	2886703a 	and	r3,r5,r2
  80a298:	5809883a 	mov	r4,r11
  80a29c:	183ec31e 	bne	r3,zero,809dac <__alt_mem_onchip_mem+0xff801dac>
  80a2a0:	294b883a 	add	r5,r5,r5
  80a2a4:	2886703a 	and	r3,r5,r2
  80a2a8:	21000104 	addi	r4,r4,4
  80a2ac:	183ffc26 	beq	r3,zero,80a2a0 <__alt_mem_onchip_mem+0xff8022a0>
  80a2b0:	003ebe06 	br	809dac <__alt_mem_onchip_mem+0xff801dac>
  80a2b4:	00c05504 	movi	r3,340
  80a2b8:	18801236 	bltu	r3,r2,80a304 <_malloc_r+0x6f8>
  80a2bc:	8804d3fa 	srli	r2,r17,15
  80a2c0:	12001e04 	addi	r8,r2,120
  80a2c4:	11c01dc4 	addi	r7,r2,119
  80a2c8:	4209883a 	add	r4,r8,r8
  80a2cc:	003e6d06 	br	809c84 <__alt_mem_onchip_mem+0xff801c84>
  80a2d0:	00c40004 	movi	r3,4096
  80a2d4:	003f4606 	br	809ff0 <__alt_mem_onchip_mem+0xff801ff0>
  80a2d8:	00800044 	movi	r2,1
  80a2dc:	a0800115 	stw	r2,4(r20)
  80a2e0:	003f7406 	br	80a0b4 <__alt_mem_onchip_mem+0xff8020b4>
  80a2e4:	1805d0ba 	srai	r2,r3,2
  80a2e8:	01c00044 	movi	r7,1
  80a2ec:	30c00117 	ldw	r3,4(r6)
  80a2f0:	388e983a 	sll	r7,r7,r2
  80a2f4:	2805883a 	mov	r2,r5
  80a2f8:	38c6b03a 	or	r3,r7,r3
  80a2fc:	30c00115 	stw	r3,4(r6)
  80a300:	003f9b06 	br	80a170 <__alt_mem_onchip_mem+0xff802170>
  80a304:	00c15504 	movi	r3,1364
  80a308:	18801a36 	bltu	r3,r2,80a374 <_malloc_r+0x768>
  80a30c:	8804d4ba 	srli	r2,r17,18
  80a310:	12001f44 	addi	r8,r2,125
  80a314:	11c01f04 	addi	r7,r2,124
  80a318:	4209883a 	add	r4,r8,r8
  80a31c:	003e5906 	br	809c84 <__alt_mem_onchip_mem+0xff801c84>
  80a320:	ad400404 	addi	r21,r21,16
  80a324:	003f1706 	br	809f84 <__alt_mem_onchip_mem+0xff801f84>
  80a328:	00c01504 	movi	r3,84
  80a32c:	18802336 	bltu	r3,r2,80a3bc <_malloc_r+0x7b0>
  80a330:	3804d33a 	srli	r2,r7,12
  80a334:	11401bc4 	addi	r5,r2,111
  80a338:	10c01b84 	addi	r3,r2,110
  80a33c:	294b883a 	add	r5,r5,r5
  80a340:	003f7b06 	br	80a130 <__alt_mem_onchip_mem+0xff802130>
  80a344:	9c000217 	ldw	r16,8(r19)
  80a348:	00bfff04 	movi	r2,-4
  80a34c:	80c00117 	ldw	r3,4(r16)
  80a350:	1886703a 	and	r3,r3,r2
  80a354:	003f5306 	br	80a0a4 <__alt_mem_onchip_mem+0xff8020a4>
  80a358:	3083ffcc 	andi	r2,r6,4095
  80a35c:	103f181e 	bne	r2,zero,809fc0 <__alt_mem_onchip_mem+0xff801fc0>
  80a360:	99000217 	ldw	r4,8(r19)
  80a364:	b545883a 	add	r2,r22,r21
  80a368:	10800054 	ori	r2,r2,1
  80a36c:	20800115 	stw	r2,4(r4)
  80a370:	003f3e06 	br	80a06c <__alt_mem_onchip_mem+0xff80206c>
  80a374:	01003f84 	movi	r4,254
  80a378:	02001fc4 	movi	r8,127
  80a37c:	01c01f84 	movi	r7,126
  80a380:	003e4006 	br	809c84 <__alt_mem_onchip_mem+0xff801c84>
  80a384:	008020b4 	movhi	r2,130
  80a388:	10a4bb04 	addi	r2,r2,-27924
  80a38c:	15000015 	stw	r20,0(r2)
  80a390:	003f1106 	br	809fd8 <__alt_mem_onchip_mem+0xff801fd8>
  80a394:	00800044 	movi	r2,1
  80a398:	002b883a 	mov	r21,zero
  80a39c:	003f1f06 	br	80a01c <__alt_mem_onchip_mem+0xff80201c>
  80a3a0:	81400204 	addi	r5,r16,8
  80a3a4:	9009883a 	mov	r4,r18
  80a3a8:	08097740 	call	809774 <_free_r>
  80a3ac:	008020b4 	movhi	r2,130
  80a3b0:	10ac8c04 	addi	r2,r2,-19920
  80a3b4:	10c00017 	ldw	r3,0(r2)
  80a3b8:	003f2c06 	br	80a06c <__alt_mem_onchip_mem+0xff80206c>
  80a3bc:	00c05504 	movi	r3,340
  80a3c0:	18800536 	bltu	r3,r2,80a3d8 <_malloc_r+0x7cc>
  80a3c4:	3804d3fa 	srli	r2,r7,15
  80a3c8:	11401e04 	addi	r5,r2,120
  80a3cc:	10c01dc4 	addi	r3,r2,119
  80a3d0:	294b883a 	add	r5,r5,r5
  80a3d4:	003f5606 	br	80a130 <__alt_mem_onchip_mem+0xff802130>
  80a3d8:	00c15504 	movi	r3,1364
  80a3dc:	18800536 	bltu	r3,r2,80a3f4 <_malloc_r+0x7e8>
  80a3e0:	3804d4ba 	srli	r2,r7,18
  80a3e4:	11401f44 	addi	r5,r2,125
  80a3e8:	10c01f04 	addi	r3,r2,124
  80a3ec:	294b883a 	add	r5,r5,r5
  80a3f0:	003f4f06 	br	80a130 <__alt_mem_onchip_mem+0xff802130>
  80a3f4:	01403f84 	movi	r5,254
  80a3f8:	00c01f84 	movi	r3,126
  80a3fc:	003f4c06 	br	80a130 <__alt_mem_onchip_mem+0xff802130>
  80a400:	98800117 	ldw	r2,4(r19)
  80a404:	003fa006 	br	80a288 <__alt_mem_onchip_mem+0xff802288>
  80a408:	8808d0fa 	srli	r4,r17,3
  80a40c:	20800044 	addi	r2,r4,1
  80a410:	1085883a 	add	r2,r2,r2
  80a414:	003e9006 	br	809e58 <__alt_mem_onchip_mem+0xff801e58>

0080a418 <memset>:
  80a418:	20c000cc 	andi	r3,r4,3
  80a41c:	2005883a 	mov	r2,r4
  80a420:	18004426 	beq	r3,zero,80a534 <memset+0x11c>
  80a424:	31ffffc4 	addi	r7,r6,-1
  80a428:	30004026 	beq	r6,zero,80a52c <memset+0x114>
  80a42c:	2813883a 	mov	r9,r5
  80a430:	200d883a 	mov	r6,r4
  80a434:	2007883a 	mov	r3,r4
  80a438:	00000406 	br	80a44c <memset+0x34>
  80a43c:	3a3fffc4 	addi	r8,r7,-1
  80a440:	31800044 	addi	r6,r6,1
  80a444:	38003926 	beq	r7,zero,80a52c <memset+0x114>
  80a448:	400f883a 	mov	r7,r8
  80a44c:	18c00044 	addi	r3,r3,1
  80a450:	32400005 	stb	r9,0(r6)
  80a454:	1a0000cc 	andi	r8,r3,3
  80a458:	403ff81e 	bne	r8,zero,80a43c <__alt_mem_onchip_mem+0xff80243c>
  80a45c:	010000c4 	movi	r4,3
  80a460:	21c02d2e 	bgeu	r4,r7,80a518 <memset+0x100>
  80a464:	29003fcc 	andi	r4,r5,255
  80a468:	200c923a 	slli	r6,r4,8
  80a46c:	3108b03a 	or	r4,r6,r4
  80a470:	200c943a 	slli	r6,r4,16
  80a474:	218cb03a 	or	r6,r4,r6
  80a478:	010003c4 	movi	r4,15
  80a47c:	21c0182e 	bgeu	r4,r7,80a4e0 <memset+0xc8>
  80a480:	3b3ffc04 	addi	r12,r7,-16
  80a484:	6018d13a 	srli	r12,r12,4
  80a488:	1a000104 	addi	r8,r3,4
  80a48c:	1ac00204 	addi	r11,r3,8
  80a490:	6008913a 	slli	r4,r12,4
  80a494:	1a800304 	addi	r10,r3,12
  80a498:	1813883a 	mov	r9,r3
  80a49c:	21000504 	addi	r4,r4,20
  80a4a0:	1909883a 	add	r4,r3,r4
  80a4a4:	49800015 	stw	r6,0(r9)
  80a4a8:	41800015 	stw	r6,0(r8)
  80a4ac:	59800015 	stw	r6,0(r11)
  80a4b0:	51800015 	stw	r6,0(r10)
  80a4b4:	42000404 	addi	r8,r8,16
  80a4b8:	4a400404 	addi	r9,r9,16
  80a4bc:	5ac00404 	addi	r11,r11,16
  80a4c0:	52800404 	addi	r10,r10,16
  80a4c4:	413ff71e 	bne	r8,r4,80a4a4 <__alt_mem_onchip_mem+0xff8024a4>
  80a4c8:	63000044 	addi	r12,r12,1
  80a4cc:	6018913a 	slli	r12,r12,4
  80a4d0:	39c003cc 	andi	r7,r7,15
  80a4d4:	010000c4 	movi	r4,3
  80a4d8:	1b07883a 	add	r3,r3,r12
  80a4dc:	21c00e2e 	bgeu	r4,r7,80a518 <memset+0x100>
  80a4e0:	1813883a 	mov	r9,r3
  80a4e4:	3811883a 	mov	r8,r7
  80a4e8:	010000c4 	movi	r4,3
  80a4ec:	49800015 	stw	r6,0(r9)
  80a4f0:	423fff04 	addi	r8,r8,-4
  80a4f4:	4a400104 	addi	r9,r9,4
  80a4f8:	223ffc36 	bltu	r4,r8,80a4ec <__alt_mem_onchip_mem+0xff8024ec>
  80a4fc:	393fff04 	addi	r4,r7,-4
  80a500:	2008d0ba 	srli	r4,r4,2
  80a504:	39c000cc 	andi	r7,r7,3
  80a508:	21000044 	addi	r4,r4,1
  80a50c:	2109883a 	add	r4,r4,r4
  80a510:	2109883a 	add	r4,r4,r4
  80a514:	1907883a 	add	r3,r3,r4
  80a518:	38000526 	beq	r7,zero,80a530 <memset+0x118>
  80a51c:	19cf883a 	add	r7,r3,r7
  80a520:	19400005 	stb	r5,0(r3)
  80a524:	18c00044 	addi	r3,r3,1
  80a528:	38fffd1e 	bne	r7,r3,80a520 <__alt_mem_onchip_mem+0xff802520>
  80a52c:	f800283a 	ret
  80a530:	f800283a 	ret
  80a534:	2007883a 	mov	r3,r4
  80a538:	300f883a 	mov	r7,r6
  80a53c:	003fc706 	br	80a45c <__alt_mem_onchip_mem+0xff80245c>

0080a540 <_printf_r>:
  80a540:	defffd04 	addi	sp,sp,-12
  80a544:	2805883a 	mov	r2,r5
  80a548:	dfc00015 	stw	ra,0(sp)
  80a54c:	d9800115 	stw	r6,4(sp)
  80a550:	d9c00215 	stw	r7,8(sp)
  80a554:	21400217 	ldw	r5,8(r4)
  80a558:	d9c00104 	addi	r7,sp,4
  80a55c:	100d883a 	mov	r6,r2
  80a560:	080a8a80 	call	80a8a8 <___vfprintf_internal_r>
  80a564:	dfc00017 	ldw	ra,0(sp)
  80a568:	dec00304 	addi	sp,sp,12
  80a56c:	f800283a 	ret

0080a570 <printf>:
  80a570:	defffc04 	addi	sp,sp,-16
  80a574:	dfc00015 	stw	ra,0(sp)
  80a578:	d9400115 	stw	r5,4(sp)
  80a57c:	d9800215 	stw	r6,8(sp)
  80a580:	d9c00315 	stw	r7,12(sp)
  80a584:	008020b4 	movhi	r2,130
  80a588:	10a4ba04 	addi	r2,r2,-27928
  80a58c:	10800017 	ldw	r2,0(r2)
  80a590:	200b883a 	mov	r5,r4
  80a594:	d9800104 	addi	r6,sp,4
  80a598:	11000217 	ldw	r4,8(r2)
  80a59c:	080caa00 	call	80caa0 <__vfprintf_internal>
  80a5a0:	dfc00017 	ldw	ra,0(sp)
  80a5a4:	dec00404 	addi	sp,sp,16
  80a5a8:	f800283a 	ret

0080a5ac <_puts_r>:
  80a5ac:	defff604 	addi	sp,sp,-40
  80a5b0:	dc000715 	stw	r16,28(sp)
  80a5b4:	2021883a 	mov	r16,r4
  80a5b8:	2809883a 	mov	r4,r5
  80a5bc:	dc400815 	stw	r17,32(sp)
  80a5c0:	dfc00915 	stw	ra,36(sp)
  80a5c4:	2823883a 	mov	r17,r5
  80a5c8:	080a8100 	call	80a810 <strlen>
  80a5cc:	10c00044 	addi	r3,r2,1
  80a5d0:	d8800115 	stw	r2,4(sp)
  80a5d4:	00802074 	movhi	r2,129
  80a5d8:	109c6f04 	addi	r2,r2,29116
  80a5dc:	d8800215 	stw	r2,8(sp)
  80a5e0:	00800044 	movi	r2,1
  80a5e4:	d8800315 	stw	r2,12(sp)
  80a5e8:	00800084 	movi	r2,2
  80a5ec:	dc400015 	stw	r17,0(sp)
  80a5f0:	d8c00615 	stw	r3,24(sp)
  80a5f4:	dec00415 	stw	sp,16(sp)
  80a5f8:	d8800515 	stw	r2,20(sp)
  80a5fc:	80000226 	beq	r16,zero,80a608 <_puts_r+0x5c>
  80a600:	80800e17 	ldw	r2,56(r16)
  80a604:	10001426 	beq	r2,zero,80a658 <_puts_r+0xac>
  80a608:	81400217 	ldw	r5,8(r16)
  80a60c:	2880030b 	ldhu	r2,12(r5)
  80a610:	10c8000c 	andi	r3,r2,8192
  80a614:	1800061e 	bne	r3,zero,80a630 <_puts_r+0x84>
  80a618:	29001917 	ldw	r4,100(r5)
  80a61c:	00f7ffc4 	movi	r3,-8193
  80a620:	10880014 	ori	r2,r2,8192
  80a624:	20c6703a 	and	r3,r4,r3
  80a628:	2880030d 	sth	r2,12(r5)
  80a62c:	28c01915 	stw	r3,100(r5)
  80a630:	d9800404 	addi	r6,sp,16
  80a634:	8009883a 	mov	r4,r16
  80a638:	080e70c0 	call	80e70c <__sfvwrite_r>
  80a63c:	1000091e 	bne	r2,zero,80a664 <_puts_r+0xb8>
  80a640:	00800284 	movi	r2,10
  80a644:	dfc00917 	ldw	ra,36(sp)
  80a648:	dc400817 	ldw	r17,32(sp)
  80a64c:	dc000717 	ldw	r16,28(sp)
  80a650:	dec00a04 	addi	sp,sp,40
  80a654:	f800283a 	ret
  80a658:	8009883a 	mov	r4,r16
  80a65c:	08096000 	call	809600 <__sinit>
  80a660:	003fe906 	br	80a608 <__alt_mem_onchip_mem+0xff802608>
  80a664:	00bfffc4 	movi	r2,-1
  80a668:	003ff606 	br	80a644 <__alt_mem_onchip_mem+0xff802644>

0080a66c <puts>:
  80a66c:	008020b4 	movhi	r2,130
  80a670:	10a4ba04 	addi	r2,r2,-27928
  80a674:	200b883a 	mov	r5,r4
  80a678:	11000017 	ldw	r4,0(r2)
  80a67c:	080a5ac1 	jmpi	80a5ac <_puts_r>

0080a680 <_sbrk_r>:
  80a680:	defffd04 	addi	sp,sp,-12
  80a684:	dc000015 	stw	r16,0(sp)
  80a688:	040020b4 	movhi	r16,130
  80a68c:	dc400115 	stw	r17,4(sp)
  80a690:	842c0b04 	addi	r16,r16,-20436
  80a694:	2023883a 	mov	r17,r4
  80a698:	2809883a 	mov	r4,r5
  80a69c:	dfc00215 	stw	ra,8(sp)
  80a6a0:	80000015 	stw	zero,0(r16)
  80a6a4:	08136500 	call	813650 <sbrk>
  80a6a8:	00ffffc4 	movi	r3,-1
  80a6ac:	10c00526 	beq	r2,r3,80a6c4 <_sbrk_r+0x44>
  80a6b0:	dfc00217 	ldw	ra,8(sp)
  80a6b4:	dc400117 	ldw	r17,4(sp)
  80a6b8:	dc000017 	ldw	r16,0(sp)
  80a6bc:	dec00304 	addi	sp,sp,12
  80a6c0:	f800283a 	ret
  80a6c4:	80c00017 	ldw	r3,0(r16)
  80a6c8:	183ff926 	beq	r3,zero,80a6b0 <__alt_mem_onchip_mem+0xff8026b0>
  80a6cc:	88c00015 	stw	r3,0(r17)
  80a6d0:	003ff706 	br	80a6b0 <__alt_mem_onchip_mem+0xff8026b0>

0080a6d4 <__sread>:
  80a6d4:	defffe04 	addi	sp,sp,-8
  80a6d8:	dc000015 	stw	r16,0(sp)
  80a6dc:	2821883a 	mov	r16,r5
  80a6e0:	2940038f 	ldh	r5,14(r5)
  80a6e4:	dfc00115 	stw	ra,4(sp)
  80a6e8:	08102440 	call	810244 <_read_r>
  80a6ec:	10000716 	blt	r2,zero,80a70c <__sread+0x38>
  80a6f0:	80c01417 	ldw	r3,80(r16)
  80a6f4:	1887883a 	add	r3,r3,r2
  80a6f8:	80c01415 	stw	r3,80(r16)
  80a6fc:	dfc00117 	ldw	ra,4(sp)
  80a700:	dc000017 	ldw	r16,0(sp)
  80a704:	dec00204 	addi	sp,sp,8
  80a708:	f800283a 	ret
  80a70c:	80c0030b 	ldhu	r3,12(r16)
  80a710:	18fbffcc 	andi	r3,r3,61439
  80a714:	80c0030d 	sth	r3,12(r16)
  80a718:	dfc00117 	ldw	ra,4(sp)
  80a71c:	dc000017 	ldw	r16,0(sp)
  80a720:	dec00204 	addi	sp,sp,8
  80a724:	f800283a 	ret

0080a728 <__seofread>:
  80a728:	0005883a 	mov	r2,zero
  80a72c:	f800283a 	ret

0080a730 <__swrite>:
  80a730:	2880030b 	ldhu	r2,12(r5)
  80a734:	defffb04 	addi	sp,sp,-20
  80a738:	dcc00315 	stw	r19,12(sp)
  80a73c:	dc800215 	stw	r18,8(sp)
  80a740:	dc400115 	stw	r17,4(sp)
  80a744:	dc000015 	stw	r16,0(sp)
  80a748:	dfc00415 	stw	ra,16(sp)
  80a74c:	10c0400c 	andi	r3,r2,256
  80a750:	2821883a 	mov	r16,r5
  80a754:	2023883a 	mov	r17,r4
  80a758:	3025883a 	mov	r18,r6
  80a75c:	3827883a 	mov	r19,r7
  80a760:	18000526 	beq	r3,zero,80a778 <__swrite+0x48>
  80a764:	2940038f 	ldh	r5,14(r5)
  80a768:	01c00084 	movi	r7,2
  80a76c:	000d883a 	mov	r6,zero
  80a770:	080eca40 	call	80eca4 <_lseek_r>
  80a774:	8080030b 	ldhu	r2,12(r16)
  80a778:	8140038f 	ldh	r5,14(r16)
  80a77c:	10bbffcc 	andi	r2,r2,61439
  80a780:	980f883a 	mov	r7,r19
  80a784:	900d883a 	mov	r6,r18
  80a788:	8809883a 	mov	r4,r17
  80a78c:	8080030d 	sth	r2,12(r16)
  80a790:	dfc00417 	ldw	ra,16(sp)
  80a794:	dcc00317 	ldw	r19,12(sp)
  80a798:	dc800217 	ldw	r18,8(sp)
  80a79c:	dc400117 	ldw	r17,4(sp)
  80a7a0:	dc000017 	ldw	r16,0(sp)
  80a7a4:	dec00504 	addi	sp,sp,20
  80a7a8:	080cb781 	jmpi	80cb78 <_write_r>

0080a7ac <__sseek>:
  80a7ac:	defffe04 	addi	sp,sp,-8
  80a7b0:	dc000015 	stw	r16,0(sp)
  80a7b4:	2821883a 	mov	r16,r5
  80a7b8:	2940038f 	ldh	r5,14(r5)
  80a7bc:	dfc00115 	stw	ra,4(sp)
  80a7c0:	080eca40 	call	80eca4 <_lseek_r>
  80a7c4:	00ffffc4 	movi	r3,-1
  80a7c8:	10c00826 	beq	r2,r3,80a7ec <__sseek+0x40>
  80a7cc:	80c0030b 	ldhu	r3,12(r16)
  80a7d0:	80801415 	stw	r2,80(r16)
  80a7d4:	18c40014 	ori	r3,r3,4096
  80a7d8:	80c0030d 	sth	r3,12(r16)
  80a7dc:	dfc00117 	ldw	ra,4(sp)
  80a7e0:	dc000017 	ldw	r16,0(sp)
  80a7e4:	dec00204 	addi	sp,sp,8
  80a7e8:	f800283a 	ret
  80a7ec:	80c0030b 	ldhu	r3,12(r16)
  80a7f0:	18fbffcc 	andi	r3,r3,61439
  80a7f4:	80c0030d 	sth	r3,12(r16)
  80a7f8:	dfc00117 	ldw	ra,4(sp)
  80a7fc:	dc000017 	ldw	r16,0(sp)
  80a800:	dec00204 	addi	sp,sp,8
  80a804:	f800283a 	ret

0080a808 <__sclose>:
  80a808:	2940038f 	ldh	r5,14(r5)
  80a80c:	080cd2c1 	jmpi	80cd2c <_close_r>

0080a810 <strlen>:
  80a810:	208000cc 	andi	r2,r4,3
  80a814:	10002026 	beq	r2,zero,80a898 <strlen+0x88>
  80a818:	20800007 	ldb	r2,0(r4)
  80a81c:	10002026 	beq	r2,zero,80a8a0 <strlen+0x90>
  80a820:	2005883a 	mov	r2,r4
  80a824:	00000206 	br	80a830 <strlen+0x20>
  80a828:	10c00007 	ldb	r3,0(r2)
  80a82c:	18001826 	beq	r3,zero,80a890 <strlen+0x80>
  80a830:	10800044 	addi	r2,r2,1
  80a834:	10c000cc 	andi	r3,r2,3
  80a838:	183ffb1e 	bne	r3,zero,80a828 <__alt_mem_onchip_mem+0xff802828>
  80a83c:	10c00017 	ldw	r3,0(r2)
  80a840:	01ffbff4 	movhi	r7,65279
  80a844:	39ffbfc4 	addi	r7,r7,-257
  80a848:	00ca303a 	nor	r5,zero,r3
  80a84c:	01a02074 	movhi	r6,32897
  80a850:	19c7883a 	add	r3,r3,r7
  80a854:	31a02004 	addi	r6,r6,-32640
  80a858:	1946703a 	and	r3,r3,r5
  80a85c:	1986703a 	and	r3,r3,r6
  80a860:	1800091e 	bne	r3,zero,80a888 <strlen+0x78>
  80a864:	10800104 	addi	r2,r2,4
  80a868:	10c00017 	ldw	r3,0(r2)
  80a86c:	19cb883a 	add	r5,r3,r7
  80a870:	00c6303a 	nor	r3,zero,r3
  80a874:	28c6703a 	and	r3,r5,r3
  80a878:	1986703a 	and	r3,r3,r6
  80a87c:	183ff926 	beq	r3,zero,80a864 <__alt_mem_onchip_mem+0xff802864>
  80a880:	00000106 	br	80a888 <strlen+0x78>
  80a884:	10800044 	addi	r2,r2,1
  80a888:	10c00007 	ldb	r3,0(r2)
  80a88c:	183ffd1e 	bne	r3,zero,80a884 <__alt_mem_onchip_mem+0xff802884>
  80a890:	1105c83a 	sub	r2,r2,r4
  80a894:	f800283a 	ret
  80a898:	2005883a 	mov	r2,r4
  80a89c:	003fe706 	br	80a83c <__alt_mem_onchip_mem+0xff80283c>
  80a8a0:	0005883a 	mov	r2,zero
  80a8a4:	f800283a 	ret

0080a8a8 <___vfprintf_internal_r>:
  80a8a8:	deffb804 	addi	sp,sp,-288
  80a8ac:	dfc04715 	stw	ra,284(sp)
  80a8b0:	ddc04515 	stw	r23,276(sp)
  80a8b4:	dd404315 	stw	r21,268(sp)
  80a8b8:	d9002c15 	stw	r4,176(sp)
  80a8bc:	282f883a 	mov	r23,r5
  80a8c0:	302b883a 	mov	r21,r6
  80a8c4:	d9c02d15 	stw	r7,180(sp)
  80a8c8:	df004615 	stw	fp,280(sp)
  80a8cc:	dd804415 	stw	r22,272(sp)
  80a8d0:	dd004215 	stw	r20,264(sp)
  80a8d4:	dcc04115 	stw	r19,260(sp)
  80a8d8:	dc804015 	stw	r18,256(sp)
  80a8dc:	dc403f15 	stw	r17,252(sp)
  80a8e0:	dc003e15 	stw	r16,248(sp)
  80a8e4:	080ec740 	call	80ec74 <_localeconv_r>
  80a8e8:	10800017 	ldw	r2,0(r2)
  80a8ec:	1009883a 	mov	r4,r2
  80a8f0:	d8803415 	stw	r2,208(sp)
  80a8f4:	080a8100 	call	80a810 <strlen>
  80a8f8:	d8803715 	stw	r2,220(sp)
  80a8fc:	d8802c17 	ldw	r2,176(sp)
  80a900:	10000226 	beq	r2,zero,80a90c <___vfprintf_internal_r+0x64>
  80a904:	10800e17 	ldw	r2,56(r2)
  80a908:	1000f926 	beq	r2,zero,80acf0 <___vfprintf_internal_r+0x448>
  80a90c:	b880030b 	ldhu	r2,12(r23)
  80a910:	10c8000c 	andi	r3,r2,8192
  80a914:	1800061e 	bne	r3,zero,80a930 <___vfprintf_internal_r+0x88>
  80a918:	b9001917 	ldw	r4,100(r23)
  80a91c:	00f7ffc4 	movi	r3,-8193
  80a920:	10880014 	ori	r2,r2,8192
  80a924:	20c6703a 	and	r3,r4,r3
  80a928:	b880030d 	sth	r2,12(r23)
  80a92c:	b8c01915 	stw	r3,100(r23)
  80a930:	10c0020c 	andi	r3,r2,8
  80a934:	1800c126 	beq	r3,zero,80ac3c <___vfprintf_internal_r+0x394>
  80a938:	b8c00417 	ldw	r3,16(r23)
  80a93c:	1800bf26 	beq	r3,zero,80ac3c <___vfprintf_internal_r+0x394>
  80a940:	1080068c 	andi	r2,r2,26
  80a944:	00c00284 	movi	r3,10
  80a948:	10c0c426 	beq	r2,r3,80ac5c <___vfprintf_internal_r+0x3b4>
  80a94c:	d8c00404 	addi	r3,sp,16
  80a950:	05002074 	movhi	r20,129
  80a954:	d9001e04 	addi	r4,sp,120
  80a958:	a51c8084 	addi	r20,r20,29186
  80a95c:	d8c01e15 	stw	r3,120(sp)
  80a960:	d8002015 	stw	zero,128(sp)
  80a964:	d8001f15 	stw	zero,124(sp)
  80a968:	d8003315 	stw	zero,204(sp)
  80a96c:	d8003615 	stw	zero,216(sp)
  80a970:	d8003815 	stw	zero,224(sp)
  80a974:	1811883a 	mov	r8,r3
  80a978:	d8003915 	stw	zero,228(sp)
  80a97c:	d8003a15 	stw	zero,232(sp)
  80a980:	d8002f15 	stw	zero,188(sp)
  80a984:	d9002815 	stw	r4,160(sp)
  80a988:	a8800007 	ldb	r2,0(r21)
  80a98c:	10027b26 	beq	r2,zero,80b37c <___vfprintf_internal_r+0xad4>
  80a990:	00c00944 	movi	r3,37
  80a994:	a821883a 	mov	r16,r21
  80a998:	10c0021e 	bne	r2,r3,80a9a4 <___vfprintf_internal_r+0xfc>
  80a99c:	00001406 	br	80a9f0 <___vfprintf_internal_r+0x148>
  80a9a0:	10c00326 	beq	r2,r3,80a9b0 <___vfprintf_internal_r+0x108>
  80a9a4:	84000044 	addi	r16,r16,1
  80a9a8:	80800007 	ldb	r2,0(r16)
  80a9ac:	103ffc1e 	bne	r2,zero,80a9a0 <__alt_mem_onchip_mem+0xff8029a0>
  80a9b0:	8563c83a 	sub	r17,r16,r21
  80a9b4:	88000e26 	beq	r17,zero,80a9f0 <___vfprintf_internal_r+0x148>
  80a9b8:	d8c02017 	ldw	r3,128(sp)
  80a9bc:	d8801f17 	ldw	r2,124(sp)
  80a9c0:	45400015 	stw	r21,0(r8)
  80a9c4:	1c47883a 	add	r3,r3,r17
  80a9c8:	10800044 	addi	r2,r2,1
  80a9cc:	d8c02015 	stw	r3,128(sp)
  80a9d0:	44400115 	stw	r17,4(r8)
  80a9d4:	d8801f15 	stw	r2,124(sp)
  80a9d8:	00c001c4 	movi	r3,7
  80a9dc:	1880a716 	blt	r3,r2,80ac7c <___vfprintf_internal_r+0x3d4>
  80a9e0:	42000204 	addi	r8,r8,8
  80a9e4:	d9402f17 	ldw	r5,188(sp)
  80a9e8:	2c4b883a 	add	r5,r5,r17
  80a9ec:	d9402f15 	stw	r5,188(sp)
  80a9f0:	80800007 	ldb	r2,0(r16)
  80a9f4:	1000a826 	beq	r2,zero,80ac98 <___vfprintf_internal_r+0x3f0>
  80a9f8:	84400047 	ldb	r17,1(r16)
  80a9fc:	00bfffc4 	movi	r2,-1
  80aa00:	85400044 	addi	r21,r16,1
  80aa04:	d8002785 	stb	zero,158(sp)
  80aa08:	0007883a 	mov	r3,zero
  80aa0c:	000f883a 	mov	r7,zero
  80aa10:	d8802915 	stw	r2,164(sp)
  80aa14:	d8003115 	stw	zero,196(sp)
  80aa18:	0025883a 	mov	r18,zero
  80aa1c:	01401604 	movi	r5,88
  80aa20:	01800244 	movi	r6,9
  80aa24:	02800a84 	movi	r10,42
  80aa28:	02401b04 	movi	r9,108
  80aa2c:	ad400044 	addi	r21,r21,1
  80aa30:	88bff804 	addi	r2,r17,-32
  80aa34:	28830436 	bltu	r5,r2,80b648 <___vfprintf_internal_r+0xda0>
  80aa38:	100490ba 	slli	r2,r2,2
  80aa3c:	01002074 	movhi	r4,129
  80aa40:	212a9404 	addi	r4,r4,-21936
  80aa44:	1105883a 	add	r2,r2,r4
  80aa48:	10800017 	ldw	r2,0(r2)
  80aa4c:	1000683a 	jmp	r2
  80aa50:	0080b568 	cmpgeui	r2,zero,725
  80aa54:	0080b648 	cmpgei	r2,zero,729
  80aa58:	0080b648 	cmpgei	r2,zero,729
  80aa5c:	0080b588 	cmpgei	r2,zero,726
  80aa60:	0080b648 	cmpgei	r2,zero,729
  80aa64:	0080b648 	cmpgei	r2,zero,729
  80aa68:	0080b648 	cmpgei	r2,zero,729
  80aa6c:	0080b648 	cmpgei	r2,zero,729
  80aa70:	0080b648 	cmpgei	r2,zero,729
  80aa74:	0080b648 	cmpgei	r2,zero,729
  80aa78:	0080acfc 	xorhi	r2,zero,691
  80aa7c:	0080b4a4 	muli	r2,zero,722
  80aa80:	0080b648 	cmpgei	r2,zero,729
  80aa84:	0080abc4 	movi	r2,687
  80aa88:	0080ad24 	muli	r2,zero,692
  80aa8c:	0080b648 	cmpgei	r2,zero,729
  80aa90:	0080ad64 	muli	r2,zero,693
  80aa94:	0080ad70 	cmpltui	r2,zero,693
  80aa98:	0080ad70 	cmpltui	r2,zero,693
  80aa9c:	0080ad70 	cmpltui	r2,zero,693
  80aaa0:	0080ad70 	cmpltui	r2,zero,693
  80aaa4:	0080ad70 	cmpltui	r2,zero,693
  80aaa8:	0080ad70 	cmpltui	r2,zero,693
  80aaac:	0080ad70 	cmpltui	r2,zero,693
  80aab0:	0080ad70 	cmpltui	r2,zero,693
  80aab4:	0080ad70 	cmpltui	r2,zero,693
  80aab8:	0080b648 	cmpgei	r2,zero,729
  80aabc:	0080b648 	cmpgei	r2,zero,729
  80aac0:	0080b648 	cmpgei	r2,zero,729
  80aac4:	0080b648 	cmpgei	r2,zero,729
  80aac8:	0080b648 	cmpgei	r2,zero,729
  80aacc:	0080b648 	cmpgei	r2,zero,729
  80aad0:	0080b648 	cmpgei	r2,zero,729
  80aad4:	0080b648 	cmpgei	r2,zero,729
  80aad8:	0080b648 	cmpgei	r2,zero,729
  80aadc:	0080b648 	cmpgei	r2,zero,729
  80aae0:	0080ada4 	muli	r2,zero,694
  80aae4:	0080ae60 	cmpeqi	r2,zero,697
  80aae8:	0080b648 	cmpgei	r2,zero,729
  80aaec:	0080ae60 	cmpeqi	r2,zero,697
  80aaf0:	0080b648 	cmpgei	r2,zero,729
  80aaf4:	0080b648 	cmpgei	r2,zero,729
  80aaf8:	0080b648 	cmpgei	r2,zero,729
  80aafc:	0080b648 	cmpgei	r2,zero,729
  80ab00:	0080af00 	call	80af0 <__alt_mem_sdram-0x77f510>
  80ab04:	0080b648 	cmpgei	r2,zero,729
  80ab08:	0080b648 	cmpgei	r2,zero,729
  80ab0c:	0080af0c 	andi	r2,zero,700
  80ab10:	0080b648 	cmpgei	r2,zero,729
  80ab14:	0080b648 	cmpgei	r2,zero,729
  80ab18:	0080b648 	cmpgei	r2,zero,729
  80ab1c:	0080b648 	cmpgei	r2,zero,729
  80ab20:	0080b648 	cmpgei	r2,zero,729
  80ab24:	0080b384 	movi	r2,718
  80ab28:	0080b648 	cmpgei	r2,zero,729
  80ab2c:	0080b648 	cmpgei	r2,zero,729
  80ab30:	0080b3e4 	muli	r2,zero,719
  80ab34:	0080b648 	cmpgei	r2,zero,729
  80ab38:	0080b648 	cmpgei	r2,zero,729
  80ab3c:	0080b648 	cmpgei	r2,zero,729
  80ab40:	0080b648 	cmpgei	r2,zero,729
  80ab44:	0080b648 	cmpgei	r2,zero,729
  80ab48:	0080b648 	cmpgei	r2,zero,729
  80ab4c:	0080b648 	cmpgei	r2,zero,729
  80ab50:	0080b648 	cmpgei	r2,zero,729
  80ab54:	0080b648 	cmpgei	r2,zero,729
  80ab58:	0080b648 	cmpgei	r2,zero,729
  80ab5c:	0080b5f4 	movhi	r2,727
  80ab60:	0080b594 	movui	r2,726
  80ab64:	0080ae60 	cmpeqi	r2,zero,697
  80ab68:	0080ae60 	cmpeqi	r2,zero,697
  80ab6c:	0080ae60 	cmpeqi	r2,zero,697
  80ab70:	0080b5a4 	muli	r2,zero,726
  80ab74:	0080b594 	movui	r2,726
  80ab78:	0080b648 	cmpgei	r2,zero,729
  80ab7c:	0080b648 	cmpgei	r2,zero,729
  80ab80:	0080b5b0 	cmpltui	r2,zero,726
  80ab84:	0080b648 	cmpgei	r2,zero,729
  80ab88:	0080b5c0 	call	80b5c <__alt_mem_sdram-0x77f4a4>
  80ab8c:	0080b494 	movui	r2,722
  80ab90:	0080abd0 	cmplti	r2,zero,687
  80ab94:	0080b4b4 	movhi	r2,722
  80ab98:	0080b648 	cmpgei	r2,zero,729
  80ab9c:	0080b4c0 	call	80b4c <__alt_mem_sdram-0x77f4b4>
  80aba0:	0080b648 	cmpgei	r2,zero,729
  80aba4:	0080b51c 	xori	r2,zero,724
  80aba8:	0080b648 	cmpgei	r2,zero,729
  80abac:	0080b648 	cmpgei	r2,zero,729
  80abb0:	0080b52c 	andhi	r2,zero,724
  80abb4:	d9003117 	ldw	r4,196(sp)
  80abb8:	d8802d15 	stw	r2,180(sp)
  80abbc:	0109c83a 	sub	r4,zero,r4
  80abc0:	d9003115 	stw	r4,196(sp)
  80abc4:	94800114 	ori	r18,r18,4
  80abc8:	ac400007 	ldb	r17,0(r21)
  80abcc:	003f9706 	br	80aa2c <__alt_mem_onchip_mem+0xff802a2c>
  80abd0:	00800c04 	movi	r2,48
  80abd4:	d9002d17 	ldw	r4,180(sp)
  80abd8:	d9402917 	ldw	r5,164(sp)
  80abdc:	d8802705 	stb	r2,156(sp)
  80abe0:	00801e04 	movi	r2,120
  80abe4:	d8802745 	stb	r2,157(sp)
  80abe8:	d8002785 	stb	zero,158(sp)
  80abec:	20c00104 	addi	r3,r4,4
  80abf0:	24c00017 	ldw	r19,0(r4)
  80abf4:	002d883a 	mov	r22,zero
  80abf8:	90800094 	ori	r2,r18,2
  80abfc:	28029a16 	blt	r5,zero,80b668 <___vfprintf_internal_r+0xdc0>
  80ac00:	00bfdfc4 	movi	r2,-129
  80ac04:	90a4703a 	and	r18,r18,r2
  80ac08:	d8c02d15 	stw	r3,180(sp)
  80ac0c:	94800094 	ori	r18,r18,2
  80ac10:	9802871e 	bne	r19,zero,80b630 <___vfprintf_internal_r+0xd88>
  80ac14:	00802074 	movhi	r2,129
  80ac18:	109c7904 	addi	r2,r2,29156
  80ac1c:	d8803915 	stw	r2,228(sp)
  80ac20:	04401e04 	movi	r17,120
  80ac24:	d8802917 	ldw	r2,164(sp)
  80ac28:	0039883a 	mov	fp,zero
  80ac2c:	1001e926 	beq	r2,zero,80b3d4 <___vfprintf_internal_r+0xb2c>
  80ac30:	0027883a 	mov	r19,zero
  80ac34:	002d883a 	mov	r22,zero
  80ac38:	00020506 	br	80b450 <___vfprintf_internal_r+0xba8>
  80ac3c:	d9002c17 	ldw	r4,176(sp)
  80ac40:	b80b883a 	mov	r5,r23
  80ac44:	080cbd80 	call	80cbd8 <__swsetup_r>
  80ac48:	1005ac1e 	bne	r2,zero,80c2fc <___vfprintf_internal_r+0x1a54>
  80ac4c:	b880030b 	ldhu	r2,12(r23)
  80ac50:	00c00284 	movi	r3,10
  80ac54:	1080068c 	andi	r2,r2,26
  80ac58:	10ff3c1e 	bne	r2,r3,80a94c <__alt_mem_onchip_mem+0xff80294c>
  80ac5c:	b880038f 	ldh	r2,14(r23)
  80ac60:	103f3a16 	blt	r2,zero,80a94c <__alt_mem_onchip_mem+0xff80294c>
  80ac64:	d9c02d17 	ldw	r7,180(sp)
  80ac68:	d9002c17 	ldw	r4,176(sp)
  80ac6c:	a80d883a 	mov	r6,r21
  80ac70:	b80b883a 	mov	r5,r23
  80ac74:	080cabc0 	call	80cabc <__sbprintf>
  80ac78:	00001106 	br	80acc0 <___vfprintf_internal_r+0x418>
  80ac7c:	d9002c17 	ldw	r4,176(sp)
  80ac80:	d9801e04 	addi	r6,sp,120
  80ac84:	b80b883a 	mov	r5,r23
  80ac88:	0810a540 	call	810a54 <__sprint_r>
  80ac8c:	1000081e 	bne	r2,zero,80acb0 <___vfprintf_internal_r+0x408>
  80ac90:	da000404 	addi	r8,sp,16
  80ac94:	003f5306 	br	80a9e4 <__alt_mem_onchip_mem+0xff8029e4>
  80ac98:	d8802017 	ldw	r2,128(sp)
  80ac9c:	10000426 	beq	r2,zero,80acb0 <___vfprintf_internal_r+0x408>
  80aca0:	d9002c17 	ldw	r4,176(sp)
  80aca4:	d9801e04 	addi	r6,sp,120
  80aca8:	b80b883a 	mov	r5,r23
  80acac:	0810a540 	call	810a54 <__sprint_r>
  80acb0:	b880030b 	ldhu	r2,12(r23)
  80acb4:	1080100c 	andi	r2,r2,64
  80acb8:	1005901e 	bne	r2,zero,80c2fc <___vfprintf_internal_r+0x1a54>
  80acbc:	d8802f17 	ldw	r2,188(sp)
  80acc0:	dfc04717 	ldw	ra,284(sp)
  80acc4:	df004617 	ldw	fp,280(sp)
  80acc8:	ddc04517 	ldw	r23,276(sp)
  80accc:	dd804417 	ldw	r22,272(sp)
  80acd0:	dd404317 	ldw	r21,268(sp)
  80acd4:	dd004217 	ldw	r20,264(sp)
  80acd8:	dcc04117 	ldw	r19,260(sp)
  80acdc:	dc804017 	ldw	r18,256(sp)
  80ace0:	dc403f17 	ldw	r17,252(sp)
  80ace4:	dc003e17 	ldw	r16,248(sp)
  80ace8:	dec04804 	addi	sp,sp,288
  80acec:	f800283a 	ret
  80acf0:	d9002c17 	ldw	r4,176(sp)
  80acf4:	08096000 	call	809600 <__sinit>
  80acf8:	003f0406 	br	80a90c <__alt_mem_onchip_mem+0xff80290c>
  80acfc:	d8802d17 	ldw	r2,180(sp)
  80ad00:	d9002d17 	ldw	r4,180(sp)
  80ad04:	10800017 	ldw	r2,0(r2)
  80ad08:	d8803115 	stw	r2,196(sp)
  80ad0c:	20800104 	addi	r2,r4,4
  80ad10:	d9003117 	ldw	r4,196(sp)
  80ad14:	203fa716 	blt	r4,zero,80abb4 <__alt_mem_onchip_mem+0xff802bb4>
  80ad18:	d8802d15 	stw	r2,180(sp)
  80ad1c:	ac400007 	ldb	r17,0(r21)
  80ad20:	003f4206 	br	80aa2c <__alt_mem_onchip_mem+0xff802a2c>
  80ad24:	ac400007 	ldb	r17,0(r21)
  80ad28:	aac00044 	addi	r11,r21,1
  80ad2c:	8a872826 	beq	r17,r10,80c9d0 <___vfprintf_internal_r+0x2128>
  80ad30:	88bff404 	addi	r2,r17,-48
  80ad34:	0009883a 	mov	r4,zero
  80ad38:	30867d36 	bltu	r6,r2,80c730 <___vfprintf_internal_r+0x1e88>
  80ad3c:	5c400007 	ldb	r17,0(r11)
  80ad40:	210002a4 	muli	r4,r4,10
  80ad44:	5d400044 	addi	r21,r11,1
  80ad48:	a817883a 	mov	r11,r21
  80ad4c:	2089883a 	add	r4,r4,r2
  80ad50:	88bff404 	addi	r2,r17,-48
  80ad54:	30bff92e 	bgeu	r6,r2,80ad3c <__alt_mem_onchip_mem+0xff802d3c>
  80ad58:	2005c916 	blt	r4,zero,80c480 <___vfprintf_internal_r+0x1bd8>
  80ad5c:	d9002915 	stw	r4,164(sp)
  80ad60:	003f3306 	br	80aa30 <__alt_mem_onchip_mem+0xff802a30>
  80ad64:	94802014 	ori	r18,r18,128
  80ad68:	ac400007 	ldb	r17,0(r21)
  80ad6c:	003f2f06 	br	80aa2c <__alt_mem_onchip_mem+0xff802a2c>
  80ad70:	a809883a 	mov	r4,r21
  80ad74:	d8003115 	stw	zero,196(sp)
  80ad78:	88bff404 	addi	r2,r17,-48
  80ad7c:	0017883a 	mov	r11,zero
  80ad80:	24400007 	ldb	r17,0(r4)
  80ad84:	5ac002a4 	muli	r11,r11,10
  80ad88:	ad400044 	addi	r21,r21,1
  80ad8c:	a809883a 	mov	r4,r21
  80ad90:	12d7883a 	add	r11,r2,r11
  80ad94:	88bff404 	addi	r2,r17,-48
  80ad98:	30bff92e 	bgeu	r6,r2,80ad80 <__alt_mem_onchip_mem+0xff802d80>
  80ad9c:	dac03115 	stw	r11,196(sp)
  80ada0:	003f2306 	br	80aa30 <__alt_mem_onchip_mem+0xff802a30>
  80ada4:	18c03fcc 	andi	r3,r3,255
  80ada8:	18072b1e 	bne	r3,zero,80ca58 <___vfprintf_internal_r+0x21b0>
  80adac:	94800414 	ori	r18,r18,16
  80adb0:	9080080c 	andi	r2,r18,32
  80adb4:	10037b26 	beq	r2,zero,80bba4 <___vfprintf_internal_r+0x12fc>
  80adb8:	d9402d17 	ldw	r5,180(sp)
  80adbc:	28800117 	ldw	r2,4(r5)
  80adc0:	2cc00017 	ldw	r19,0(r5)
  80adc4:	29400204 	addi	r5,r5,8
  80adc8:	d9402d15 	stw	r5,180(sp)
  80adcc:	102d883a 	mov	r22,r2
  80add0:	10044b16 	blt	r2,zero,80bf00 <___vfprintf_internal_r+0x1658>
  80add4:	d9402917 	ldw	r5,164(sp)
  80add8:	df002783 	ldbu	fp,158(sp)
  80addc:	2803bc16 	blt	r5,zero,80bcd0 <___vfprintf_internal_r+0x1428>
  80ade0:	00ffdfc4 	movi	r3,-129
  80ade4:	9d84b03a 	or	r2,r19,r22
  80ade8:	90e4703a 	and	r18,r18,r3
  80adec:	10017726 	beq	r2,zero,80b3cc <___vfprintf_internal_r+0xb24>
  80adf0:	b0038326 	beq	r22,zero,80bc00 <___vfprintf_internal_r+0x1358>
  80adf4:	dc402a15 	stw	r17,168(sp)
  80adf8:	dc001e04 	addi	r16,sp,120
  80adfc:	b023883a 	mov	r17,r22
  80ae00:	402d883a 	mov	r22,r8
  80ae04:	9809883a 	mov	r4,r19
  80ae08:	880b883a 	mov	r5,r17
  80ae0c:	01800284 	movi	r6,10
  80ae10:	000f883a 	mov	r7,zero
  80ae14:	081265c0 	call	81265c <__umoddi3>
  80ae18:	10800c04 	addi	r2,r2,48
  80ae1c:	843fffc4 	addi	r16,r16,-1
  80ae20:	9809883a 	mov	r4,r19
  80ae24:	880b883a 	mov	r5,r17
  80ae28:	80800005 	stb	r2,0(r16)
  80ae2c:	01800284 	movi	r6,10
  80ae30:	000f883a 	mov	r7,zero
  80ae34:	080637c0 	call	80637c <__udivdi3>
  80ae38:	1027883a 	mov	r19,r2
  80ae3c:	10c4b03a 	or	r2,r2,r3
  80ae40:	1823883a 	mov	r17,r3
  80ae44:	103fef1e 	bne	r2,zero,80ae04 <__alt_mem_onchip_mem+0xff802e04>
  80ae48:	d8c02817 	ldw	r3,160(sp)
  80ae4c:	dc402a17 	ldw	r17,168(sp)
  80ae50:	b011883a 	mov	r8,r22
  80ae54:	1c07c83a 	sub	r3,r3,r16
  80ae58:	d8c02e15 	stw	r3,184(sp)
  80ae5c:	00005906 	br	80afc4 <___vfprintf_internal_r+0x71c>
  80ae60:	18c03fcc 	andi	r3,r3,255
  80ae64:	1806fa1e 	bne	r3,zero,80ca50 <___vfprintf_internal_r+0x21a8>
  80ae68:	9080020c 	andi	r2,r18,8
  80ae6c:	10048a26 	beq	r2,zero,80c098 <___vfprintf_internal_r+0x17f0>
  80ae70:	d8c02d17 	ldw	r3,180(sp)
  80ae74:	d9002d17 	ldw	r4,180(sp)
  80ae78:	d9402d17 	ldw	r5,180(sp)
  80ae7c:	18c00017 	ldw	r3,0(r3)
  80ae80:	21000117 	ldw	r4,4(r4)
  80ae84:	29400204 	addi	r5,r5,8
  80ae88:	d8c03615 	stw	r3,216(sp)
  80ae8c:	d9003815 	stw	r4,224(sp)
  80ae90:	d9402d15 	stw	r5,180(sp)
  80ae94:	d9003617 	ldw	r4,216(sp)
  80ae98:	d9403817 	ldw	r5,224(sp)
  80ae9c:	da003d15 	stw	r8,244(sp)
  80aea0:	04000044 	movi	r16,1
  80aea4:	08108080 	call	810808 <__fpclassifyd>
  80aea8:	da003d17 	ldw	r8,244(sp)
  80aeac:	14041f1e 	bne	r2,r16,80bf2c <___vfprintf_internal_r+0x1684>
  80aeb0:	d9003617 	ldw	r4,216(sp)
  80aeb4:	d9403817 	ldw	r5,224(sp)
  80aeb8:	000d883a 	mov	r6,zero
  80aebc:	000f883a 	mov	r7,zero
  80aec0:	0807d180 	call	807d18 <__ledf2>
  80aec4:	da003d17 	ldw	r8,244(sp)
  80aec8:	1005be16 	blt	r2,zero,80c5c4 <___vfprintf_internal_r+0x1d1c>
  80aecc:	df002783 	ldbu	fp,158(sp)
  80aed0:	008011c4 	movi	r2,71
  80aed4:	1445330e 	bge	r2,r17,80c3a4 <___vfprintf_internal_r+0x1afc>
  80aed8:	04002074 	movhi	r16,129
  80aedc:	841c7104 	addi	r16,r16,29124
  80aee0:	00c000c4 	movi	r3,3
  80aee4:	00bfdfc4 	movi	r2,-129
  80aee8:	d8c02a15 	stw	r3,168(sp)
  80aeec:	90a4703a 	and	r18,r18,r2
  80aef0:	d8c02e15 	stw	r3,184(sp)
  80aef4:	d8002915 	stw	zero,164(sp)
  80aef8:	d8003215 	stw	zero,200(sp)
  80aefc:	00003706 	br	80afdc <___vfprintf_internal_r+0x734>
  80af00:	94800214 	ori	r18,r18,8
  80af04:	ac400007 	ldb	r17,0(r21)
  80af08:	003ec806 	br	80aa2c <__alt_mem_onchip_mem+0xff802a2c>
  80af0c:	18c03fcc 	andi	r3,r3,255
  80af10:	1806db1e 	bne	r3,zero,80ca80 <___vfprintf_internal_r+0x21d8>
  80af14:	94800414 	ori	r18,r18,16
  80af18:	9080080c 	andi	r2,r18,32
  80af1c:	1002d826 	beq	r2,zero,80ba80 <___vfprintf_internal_r+0x11d8>
  80af20:	d9402d17 	ldw	r5,180(sp)
  80af24:	d8c02917 	ldw	r3,164(sp)
  80af28:	d8002785 	stb	zero,158(sp)
  80af2c:	28800204 	addi	r2,r5,8
  80af30:	2cc00017 	ldw	r19,0(r5)
  80af34:	2d800117 	ldw	r22,4(r5)
  80af38:	18048f16 	blt	r3,zero,80c178 <___vfprintf_internal_r+0x18d0>
  80af3c:	013fdfc4 	movi	r4,-129
  80af40:	9d86b03a 	or	r3,r19,r22
  80af44:	d8802d15 	stw	r2,180(sp)
  80af48:	9124703a 	and	r18,r18,r4
  80af4c:	1802d91e 	bne	r3,zero,80bab4 <___vfprintf_internal_r+0x120c>
  80af50:	d8c02917 	ldw	r3,164(sp)
  80af54:	0039883a 	mov	fp,zero
  80af58:	1805c326 	beq	r3,zero,80c668 <___vfprintf_internal_r+0x1dc0>
  80af5c:	0027883a 	mov	r19,zero
  80af60:	002d883a 	mov	r22,zero
  80af64:	dc001e04 	addi	r16,sp,120
  80af68:	9806d0fa 	srli	r3,r19,3
  80af6c:	b008977a 	slli	r4,r22,29
  80af70:	b02cd0fa 	srli	r22,r22,3
  80af74:	9cc001cc 	andi	r19,r19,7
  80af78:	98800c04 	addi	r2,r19,48
  80af7c:	843fffc4 	addi	r16,r16,-1
  80af80:	20e6b03a 	or	r19,r4,r3
  80af84:	80800005 	stb	r2,0(r16)
  80af88:	9d86b03a 	or	r3,r19,r22
  80af8c:	183ff61e 	bne	r3,zero,80af68 <__alt_mem_onchip_mem+0xff802f68>
  80af90:	90c0004c 	andi	r3,r18,1
  80af94:	18013b26 	beq	r3,zero,80b484 <___vfprintf_internal_r+0xbdc>
  80af98:	10803fcc 	andi	r2,r2,255
  80af9c:	1080201c 	xori	r2,r2,128
  80afa0:	10bfe004 	addi	r2,r2,-128
  80afa4:	00c00c04 	movi	r3,48
  80afa8:	10c13626 	beq	r2,r3,80b484 <___vfprintf_internal_r+0xbdc>
  80afac:	80ffffc5 	stb	r3,-1(r16)
  80afb0:	d8c02817 	ldw	r3,160(sp)
  80afb4:	80bfffc4 	addi	r2,r16,-1
  80afb8:	1021883a 	mov	r16,r2
  80afbc:	1887c83a 	sub	r3,r3,r2
  80afc0:	d8c02e15 	stw	r3,184(sp)
  80afc4:	d8802e17 	ldw	r2,184(sp)
  80afc8:	d9002917 	ldw	r4,164(sp)
  80afcc:	1100010e 	bge	r2,r4,80afd4 <___vfprintf_internal_r+0x72c>
  80afd0:	2005883a 	mov	r2,r4
  80afd4:	d8802a15 	stw	r2,168(sp)
  80afd8:	d8003215 	stw	zero,200(sp)
  80afdc:	e7003fcc 	andi	fp,fp,255
  80afe0:	e700201c 	xori	fp,fp,128
  80afe4:	e73fe004 	addi	fp,fp,-128
  80afe8:	e0000326 	beq	fp,zero,80aff8 <___vfprintf_internal_r+0x750>
  80afec:	d8c02a17 	ldw	r3,168(sp)
  80aff0:	18c00044 	addi	r3,r3,1
  80aff4:	d8c02a15 	stw	r3,168(sp)
  80aff8:	90c0008c 	andi	r3,r18,2
  80affc:	d8c02b15 	stw	r3,172(sp)
  80b000:	18000326 	beq	r3,zero,80b010 <___vfprintf_internal_r+0x768>
  80b004:	d8c02a17 	ldw	r3,168(sp)
  80b008:	18c00084 	addi	r3,r3,2
  80b00c:	d8c02a15 	stw	r3,168(sp)
  80b010:	90c0210c 	andi	r3,r18,132
  80b014:	d8c03015 	stw	r3,192(sp)
  80b018:	1801a31e 	bne	r3,zero,80b6a8 <___vfprintf_internal_r+0xe00>
  80b01c:	d9003117 	ldw	r4,196(sp)
  80b020:	d8c02a17 	ldw	r3,168(sp)
  80b024:	20e7c83a 	sub	r19,r4,r3
  80b028:	04c19f0e 	bge	zero,r19,80b6a8 <___vfprintf_internal_r+0xe00>
  80b02c:	02400404 	movi	r9,16
  80b030:	d8c02017 	ldw	r3,128(sp)
  80b034:	d8801f17 	ldw	r2,124(sp)
  80b038:	4cc50d0e 	bge	r9,r19,80c470 <___vfprintf_internal_r+0x1bc8>
  80b03c:	01402074 	movhi	r5,129
  80b040:	295c8484 	addi	r5,r5,29202
  80b044:	dc403b15 	stw	r17,236(sp)
  80b048:	d9403515 	stw	r5,212(sp)
  80b04c:	9823883a 	mov	r17,r19
  80b050:	482d883a 	mov	r22,r9
  80b054:	9027883a 	mov	r19,r18
  80b058:	070001c4 	movi	fp,7
  80b05c:	8025883a 	mov	r18,r16
  80b060:	dc002c17 	ldw	r16,176(sp)
  80b064:	00000306 	br	80b074 <___vfprintf_internal_r+0x7cc>
  80b068:	8c7ffc04 	addi	r17,r17,-16
  80b06c:	42000204 	addi	r8,r8,8
  80b070:	b440130e 	bge	r22,r17,80b0c0 <___vfprintf_internal_r+0x818>
  80b074:	01002074 	movhi	r4,129
  80b078:	18c00404 	addi	r3,r3,16
  80b07c:	10800044 	addi	r2,r2,1
  80b080:	211c8484 	addi	r4,r4,29202
  80b084:	41000015 	stw	r4,0(r8)
  80b088:	45800115 	stw	r22,4(r8)
  80b08c:	d8c02015 	stw	r3,128(sp)
  80b090:	d8801f15 	stw	r2,124(sp)
  80b094:	e0bff40e 	bge	fp,r2,80b068 <__alt_mem_onchip_mem+0xff803068>
  80b098:	d9801e04 	addi	r6,sp,120
  80b09c:	b80b883a 	mov	r5,r23
  80b0a0:	8009883a 	mov	r4,r16
  80b0a4:	0810a540 	call	810a54 <__sprint_r>
  80b0a8:	103f011e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80b0ac:	8c7ffc04 	addi	r17,r17,-16
  80b0b0:	d8c02017 	ldw	r3,128(sp)
  80b0b4:	d8801f17 	ldw	r2,124(sp)
  80b0b8:	da000404 	addi	r8,sp,16
  80b0bc:	b47fed16 	blt	r22,r17,80b074 <__alt_mem_onchip_mem+0xff803074>
  80b0c0:	9021883a 	mov	r16,r18
  80b0c4:	9825883a 	mov	r18,r19
  80b0c8:	8827883a 	mov	r19,r17
  80b0cc:	dc403b17 	ldw	r17,236(sp)
  80b0d0:	d9403517 	ldw	r5,212(sp)
  80b0d4:	98c7883a 	add	r3,r19,r3
  80b0d8:	10800044 	addi	r2,r2,1
  80b0dc:	41400015 	stw	r5,0(r8)
  80b0e0:	44c00115 	stw	r19,4(r8)
  80b0e4:	d8c02015 	stw	r3,128(sp)
  80b0e8:	d8801f15 	stw	r2,124(sp)
  80b0ec:	010001c4 	movi	r4,7
  80b0f0:	2082a316 	blt	r4,r2,80bb80 <___vfprintf_internal_r+0x12d8>
  80b0f4:	df002787 	ldb	fp,158(sp)
  80b0f8:	42000204 	addi	r8,r8,8
  80b0fc:	e0000c26 	beq	fp,zero,80b130 <___vfprintf_internal_r+0x888>
  80b100:	d8801f17 	ldw	r2,124(sp)
  80b104:	d9002784 	addi	r4,sp,158
  80b108:	18c00044 	addi	r3,r3,1
  80b10c:	10800044 	addi	r2,r2,1
  80b110:	41000015 	stw	r4,0(r8)
  80b114:	01000044 	movi	r4,1
  80b118:	41000115 	stw	r4,4(r8)
  80b11c:	d8c02015 	stw	r3,128(sp)
  80b120:	d8801f15 	stw	r2,124(sp)
  80b124:	010001c4 	movi	r4,7
  80b128:	20823c16 	blt	r4,r2,80ba1c <___vfprintf_internal_r+0x1174>
  80b12c:	42000204 	addi	r8,r8,8
  80b130:	d8802b17 	ldw	r2,172(sp)
  80b134:	10000c26 	beq	r2,zero,80b168 <___vfprintf_internal_r+0x8c0>
  80b138:	d8801f17 	ldw	r2,124(sp)
  80b13c:	d9002704 	addi	r4,sp,156
  80b140:	18c00084 	addi	r3,r3,2
  80b144:	10800044 	addi	r2,r2,1
  80b148:	41000015 	stw	r4,0(r8)
  80b14c:	01000084 	movi	r4,2
  80b150:	41000115 	stw	r4,4(r8)
  80b154:	d8c02015 	stw	r3,128(sp)
  80b158:	d8801f15 	stw	r2,124(sp)
  80b15c:	010001c4 	movi	r4,7
  80b160:	20823616 	blt	r4,r2,80ba3c <___vfprintf_internal_r+0x1194>
  80b164:	42000204 	addi	r8,r8,8
  80b168:	d9003017 	ldw	r4,192(sp)
  80b16c:	00802004 	movi	r2,128
  80b170:	20819926 	beq	r4,r2,80b7d8 <___vfprintf_internal_r+0xf30>
  80b174:	d9402917 	ldw	r5,164(sp)
  80b178:	d8802e17 	ldw	r2,184(sp)
  80b17c:	28adc83a 	sub	r22,r5,r2
  80b180:	0580310e 	bge	zero,r22,80b248 <___vfprintf_internal_r+0x9a0>
  80b184:	07000404 	movi	fp,16
  80b188:	d8801f17 	ldw	r2,124(sp)
  80b18c:	e584140e 	bge	fp,r22,80c1e0 <___vfprintf_internal_r+0x1938>
  80b190:	01402074 	movhi	r5,129
  80b194:	295c8084 	addi	r5,r5,29186
  80b198:	dc402915 	stw	r17,164(sp)
  80b19c:	d9402b15 	stw	r5,172(sp)
  80b1a0:	b023883a 	mov	r17,r22
  80b1a4:	04c001c4 	movi	r19,7
  80b1a8:	a82d883a 	mov	r22,r21
  80b1ac:	902b883a 	mov	r21,r18
  80b1b0:	8025883a 	mov	r18,r16
  80b1b4:	dc002c17 	ldw	r16,176(sp)
  80b1b8:	00000306 	br	80b1c8 <___vfprintf_internal_r+0x920>
  80b1bc:	8c7ffc04 	addi	r17,r17,-16
  80b1c0:	42000204 	addi	r8,r8,8
  80b1c4:	e440110e 	bge	fp,r17,80b20c <___vfprintf_internal_r+0x964>
  80b1c8:	18c00404 	addi	r3,r3,16
  80b1cc:	10800044 	addi	r2,r2,1
  80b1d0:	45000015 	stw	r20,0(r8)
  80b1d4:	47000115 	stw	fp,4(r8)
  80b1d8:	d8c02015 	stw	r3,128(sp)
  80b1dc:	d8801f15 	stw	r2,124(sp)
  80b1e0:	98bff60e 	bge	r19,r2,80b1bc <__alt_mem_onchip_mem+0xff8031bc>
  80b1e4:	d9801e04 	addi	r6,sp,120
  80b1e8:	b80b883a 	mov	r5,r23
  80b1ec:	8009883a 	mov	r4,r16
  80b1f0:	0810a540 	call	810a54 <__sprint_r>
  80b1f4:	103eae1e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80b1f8:	8c7ffc04 	addi	r17,r17,-16
  80b1fc:	d8c02017 	ldw	r3,128(sp)
  80b200:	d8801f17 	ldw	r2,124(sp)
  80b204:	da000404 	addi	r8,sp,16
  80b208:	e47fef16 	blt	fp,r17,80b1c8 <__alt_mem_onchip_mem+0xff8031c8>
  80b20c:	9021883a 	mov	r16,r18
  80b210:	a825883a 	mov	r18,r21
  80b214:	b02b883a 	mov	r21,r22
  80b218:	882d883a 	mov	r22,r17
  80b21c:	dc402917 	ldw	r17,164(sp)
  80b220:	d9002b17 	ldw	r4,172(sp)
  80b224:	1d87883a 	add	r3,r3,r22
  80b228:	10800044 	addi	r2,r2,1
  80b22c:	41000015 	stw	r4,0(r8)
  80b230:	45800115 	stw	r22,4(r8)
  80b234:	d8c02015 	stw	r3,128(sp)
  80b238:	d8801f15 	stw	r2,124(sp)
  80b23c:	010001c4 	movi	r4,7
  80b240:	2081ee16 	blt	r4,r2,80b9fc <___vfprintf_internal_r+0x1154>
  80b244:	42000204 	addi	r8,r8,8
  80b248:	9080400c 	andi	r2,r18,256
  80b24c:	1001181e 	bne	r2,zero,80b6b0 <___vfprintf_internal_r+0xe08>
  80b250:	d9402e17 	ldw	r5,184(sp)
  80b254:	d8801f17 	ldw	r2,124(sp)
  80b258:	44000015 	stw	r16,0(r8)
  80b25c:	1947883a 	add	r3,r3,r5
  80b260:	10800044 	addi	r2,r2,1
  80b264:	41400115 	stw	r5,4(r8)
  80b268:	d8c02015 	stw	r3,128(sp)
  80b26c:	d8801f15 	stw	r2,124(sp)
  80b270:	010001c4 	movi	r4,7
  80b274:	2081d316 	blt	r4,r2,80b9c4 <___vfprintf_internal_r+0x111c>
  80b278:	42000204 	addi	r8,r8,8
  80b27c:	9480010c 	andi	r18,r18,4
  80b280:	90003226 	beq	r18,zero,80b34c <___vfprintf_internal_r+0xaa4>
  80b284:	d9403117 	ldw	r5,196(sp)
  80b288:	d8802a17 	ldw	r2,168(sp)
  80b28c:	28a1c83a 	sub	r16,r5,r2
  80b290:	04002e0e 	bge	zero,r16,80b34c <___vfprintf_internal_r+0xaa4>
  80b294:	04400404 	movi	r17,16
  80b298:	d8801f17 	ldw	r2,124(sp)
  80b29c:	8c04a20e 	bge	r17,r16,80c528 <___vfprintf_internal_r+0x1c80>
  80b2a0:	01402074 	movhi	r5,129
  80b2a4:	295c8484 	addi	r5,r5,29202
  80b2a8:	d9403515 	stw	r5,212(sp)
  80b2ac:	048001c4 	movi	r18,7
  80b2b0:	dcc02c17 	ldw	r19,176(sp)
  80b2b4:	00000306 	br	80b2c4 <___vfprintf_internal_r+0xa1c>
  80b2b8:	843ffc04 	addi	r16,r16,-16
  80b2bc:	42000204 	addi	r8,r8,8
  80b2c0:	8c00130e 	bge	r17,r16,80b310 <___vfprintf_internal_r+0xa68>
  80b2c4:	01002074 	movhi	r4,129
  80b2c8:	18c00404 	addi	r3,r3,16
  80b2cc:	10800044 	addi	r2,r2,1
  80b2d0:	211c8484 	addi	r4,r4,29202
  80b2d4:	41000015 	stw	r4,0(r8)
  80b2d8:	44400115 	stw	r17,4(r8)
  80b2dc:	d8c02015 	stw	r3,128(sp)
  80b2e0:	d8801f15 	stw	r2,124(sp)
  80b2e4:	90bff40e 	bge	r18,r2,80b2b8 <__alt_mem_onchip_mem+0xff8032b8>
  80b2e8:	d9801e04 	addi	r6,sp,120
  80b2ec:	b80b883a 	mov	r5,r23
  80b2f0:	9809883a 	mov	r4,r19
  80b2f4:	0810a540 	call	810a54 <__sprint_r>
  80b2f8:	103e6d1e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80b2fc:	843ffc04 	addi	r16,r16,-16
  80b300:	d8c02017 	ldw	r3,128(sp)
  80b304:	d8801f17 	ldw	r2,124(sp)
  80b308:	da000404 	addi	r8,sp,16
  80b30c:	8c3fed16 	blt	r17,r16,80b2c4 <__alt_mem_onchip_mem+0xff8032c4>
  80b310:	d9403517 	ldw	r5,212(sp)
  80b314:	1c07883a 	add	r3,r3,r16
  80b318:	10800044 	addi	r2,r2,1
  80b31c:	41400015 	stw	r5,0(r8)
  80b320:	44000115 	stw	r16,4(r8)
  80b324:	d8c02015 	stw	r3,128(sp)
  80b328:	d8801f15 	stw	r2,124(sp)
  80b32c:	010001c4 	movi	r4,7
  80b330:	2080060e 	bge	r4,r2,80b34c <___vfprintf_internal_r+0xaa4>
  80b334:	d9002c17 	ldw	r4,176(sp)
  80b338:	d9801e04 	addi	r6,sp,120
  80b33c:	b80b883a 	mov	r5,r23
  80b340:	0810a540 	call	810a54 <__sprint_r>
  80b344:	103e5a1e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80b348:	d8c02017 	ldw	r3,128(sp)
  80b34c:	d8803117 	ldw	r2,196(sp)
  80b350:	d9002a17 	ldw	r4,168(sp)
  80b354:	1100010e 	bge	r2,r4,80b35c <___vfprintf_internal_r+0xab4>
  80b358:	2005883a 	mov	r2,r4
  80b35c:	d9402f17 	ldw	r5,188(sp)
  80b360:	288b883a 	add	r5,r5,r2
  80b364:	d9402f15 	stw	r5,188(sp)
  80b368:	18019e1e 	bne	r3,zero,80b9e4 <___vfprintf_internal_r+0x113c>
  80b36c:	a8800007 	ldb	r2,0(r21)
  80b370:	d8001f15 	stw	zero,124(sp)
  80b374:	da000404 	addi	r8,sp,16
  80b378:	103d851e 	bne	r2,zero,80a990 <__alt_mem_onchip_mem+0xff802990>
  80b37c:	a821883a 	mov	r16,r21
  80b380:	003d9b06 	br	80a9f0 <__alt_mem_onchip_mem+0xff8029f0>
  80b384:	18c03fcc 	andi	r3,r3,255
  80b388:	1805c11e 	bne	r3,zero,80ca90 <___vfprintf_internal_r+0x21e8>
  80b38c:	94800414 	ori	r18,r18,16
  80b390:	9080080c 	andi	r2,r18,32
  80b394:	10020c26 	beq	r2,zero,80bbc8 <___vfprintf_internal_r+0x1320>
  80b398:	d8802d17 	ldw	r2,180(sp)
  80b39c:	d9002917 	ldw	r4,164(sp)
  80b3a0:	d8002785 	stb	zero,158(sp)
  80b3a4:	10c00204 	addi	r3,r2,8
  80b3a8:	14c00017 	ldw	r19,0(r2)
  80b3ac:	15800117 	ldw	r22,4(r2)
  80b3b0:	20040f16 	blt	r4,zero,80c3f0 <___vfprintf_internal_r+0x1b48>
  80b3b4:	013fdfc4 	movi	r4,-129
  80b3b8:	9d84b03a 	or	r2,r19,r22
  80b3bc:	d8c02d15 	stw	r3,180(sp)
  80b3c0:	9124703a 	and	r18,r18,r4
  80b3c4:	0039883a 	mov	fp,zero
  80b3c8:	103e891e 	bne	r2,zero,80adf0 <__alt_mem_onchip_mem+0xff802df0>
  80b3cc:	d9002917 	ldw	r4,164(sp)
  80b3d0:	2002c11e 	bne	r4,zero,80bed8 <___vfprintf_internal_r+0x1630>
  80b3d4:	d8002915 	stw	zero,164(sp)
  80b3d8:	d8002e15 	stw	zero,184(sp)
  80b3dc:	dc001e04 	addi	r16,sp,120
  80b3e0:	003ef806 	br	80afc4 <__alt_mem_onchip_mem+0xff802fc4>
  80b3e4:	18c03fcc 	andi	r3,r3,255
  80b3e8:	18059d1e 	bne	r3,zero,80ca60 <___vfprintf_internal_r+0x21b8>
  80b3ec:	01402074 	movhi	r5,129
  80b3f0:	295c7404 	addi	r5,r5,29136
  80b3f4:	d9403915 	stw	r5,228(sp)
  80b3f8:	9080080c 	andi	r2,r18,32
  80b3fc:	10005226 	beq	r2,zero,80b548 <___vfprintf_internal_r+0xca0>
  80b400:	d8802d17 	ldw	r2,180(sp)
  80b404:	14c00017 	ldw	r19,0(r2)
  80b408:	15800117 	ldw	r22,4(r2)
  80b40c:	10800204 	addi	r2,r2,8
  80b410:	d8802d15 	stw	r2,180(sp)
  80b414:	9080004c 	andi	r2,r18,1
  80b418:	10019026 	beq	r2,zero,80ba5c <___vfprintf_internal_r+0x11b4>
  80b41c:	9d84b03a 	or	r2,r19,r22
  80b420:	10036926 	beq	r2,zero,80c1c8 <___vfprintf_internal_r+0x1920>
  80b424:	d8c02917 	ldw	r3,164(sp)
  80b428:	00800c04 	movi	r2,48
  80b42c:	d8802705 	stb	r2,156(sp)
  80b430:	dc402745 	stb	r17,157(sp)
  80b434:	d8002785 	stb	zero,158(sp)
  80b438:	90800094 	ori	r2,r18,2
  80b43c:	18045d16 	blt	r3,zero,80c5b4 <___vfprintf_internal_r+0x1d0c>
  80b440:	00bfdfc4 	movi	r2,-129
  80b444:	90a4703a 	and	r18,r18,r2
  80b448:	94800094 	ori	r18,r18,2
  80b44c:	0039883a 	mov	fp,zero
  80b450:	d9003917 	ldw	r4,228(sp)
  80b454:	dc001e04 	addi	r16,sp,120
  80b458:	988003cc 	andi	r2,r19,15
  80b45c:	b006973a 	slli	r3,r22,28
  80b460:	2085883a 	add	r2,r4,r2
  80b464:	9826d13a 	srli	r19,r19,4
  80b468:	10800003 	ldbu	r2,0(r2)
  80b46c:	b02cd13a 	srli	r22,r22,4
  80b470:	843fffc4 	addi	r16,r16,-1
  80b474:	1ce6b03a 	or	r19,r3,r19
  80b478:	80800005 	stb	r2,0(r16)
  80b47c:	9d84b03a 	or	r2,r19,r22
  80b480:	103ff51e 	bne	r2,zero,80b458 <__alt_mem_onchip_mem+0xff803458>
  80b484:	d8c02817 	ldw	r3,160(sp)
  80b488:	1c07c83a 	sub	r3,r3,r16
  80b48c:	d8c02e15 	stw	r3,184(sp)
  80b490:	003ecc06 	br	80afc4 <__alt_mem_onchip_mem+0xff802fc4>
  80b494:	18c03fcc 	andi	r3,r3,255
  80b498:	183e9f26 	beq	r3,zero,80af18 <__alt_mem_onchip_mem+0xff802f18>
  80b49c:	d9c02785 	stb	r7,158(sp)
  80b4a0:	003e9d06 	br	80af18 <__alt_mem_onchip_mem+0xff802f18>
  80b4a4:	00c00044 	movi	r3,1
  80b4a8:	01c00ac4 	movi	r7,43
  80b4ac:	ac400007 	ldb	r17,0(r21)
  80b4b0:	003d5e06 	br	80aa2c <__alt_mem_onchip_mem+0xff802a2c>
  80b4b4:	94800814 	ori	r18,r18,32
  80b4b8:	ac400007 	ldb	r17,0(r21)
  80b4bc:	003d5b06 	br	80aa2c <__alt_mem_onchip_mem+0xff802a2c>
  80b4c0:	d8c02d17 	ldw	r3,180(sp)
  80b4c4:	d8002785 	stb	zero,158(sp)
  80b4c8:	1c000017 	ldw	r16,0(r3)
  80b4cc:	1cc00104 	addi	r19,r3,4
  80b4d0:	80041926 	beq	r16,zero,80c538 <___vfprintf_internal_r+0x1c90>
  80b4d4:	d9002917 	ldw	r4,164(sp)
  80b4d8:	2003d016 	blt	r4,zero,80c41c <___vfprintf_internal_r+0x1b74>
  80b4dc:	200d883a 	mov	r6,r4
  80b4e0:	000b883a 	mov	r5,zero
  80b4e4:	8009883a 	mov	r4,r16
  80b4e8:	da003d15 	stw	r8,244(sp)
  80b4ec:	080eec00 	call	80eec0 <memchr>
  80b4f0:	da003d17 	ldw	r8,244(sp)
  80b4f4:	10045426 	beq	r2,zero,80c648 <___vfprintf_internal_r+0x1da0>
  80b4f8:	1405c83a 	sub	r2,r2,r16
  80b4fc:	d8802e15 	stw	r2,184(sp)
  80b500:	1003cc16 	blt	r2,zero,80c434 <___vfprintf_internal_r+0x1b8c>
  80b504:	df002783 	ldbu	fp,158(sp)
  80b508:	d8802a15 	stw	r2,168(sp)
  80b50c:	dcc02d15 	stw	r19,180(sp)
  80b510:	d8002915 	stw	zero,164(sp)
  80b514:	d8003215 	stw	zero,200(sp)
  80b518:	003eb006 	br	80afdc <__alt_mem_onchip_mem+0xff802fdc>
  80b51c:	18c03fcc 	andi	r3,r3,255
  80b520:	183f9b26 	beq	r3,zero,80b390 <__alt_mem_onchip_mem+0xff803390>
  80b524:	d9c02785 	stb	r7,158(sp)
  80b528:	003f9906 	br	80b390 <__alt_mem_onchip_mem+0xff803390>
  80b52c:	18c03fcc 	andi	r3,r3,255
  80b530:	1805551e 	bne	r3,zero,80ca88 <___vfprintf_internal_r+0x21e0>
  80b534:	01402074 	movhi	r5,129
  80b538:	295c7904 	addi	r5,r5,29156
  80b53c:	d9403915 	stw	r5,228(sp)
  80b540:	9080080c 	andi	r2,r18,32
  80b544:	103fae1e 	bne	r2,zero,80b400 <__alt_mem_onchip_mem+0xff803400>
  80b548:	9080040c 	andi	r2,r18,16
  80b54c:	1002de26 	beq	r2,zero,80c0c8 <___vfprintf_internal_r+0x1820>
  80b550:	d8c02d17 	ldw	r3,180(sp)
  80b554:	002d883a 	mov	r22,zero
  80b558:	1cc00017 	ldw	r19,0(r3)
  80b55c:	18c00104 	addi	r3,r3,4
  80b560:	d8c02d15 	stw	r3,180(sp)
  80b564:	003fab06 	br	80b414 <__alt_mem_onchip_mem+0xff803414>
  80b568:	38803fcc 	andi	r2,r7,255
  80b56c:	1080201c 	xori	r2,r2,128
  80b570:	10bfe004 	addi	r2,r2,-128
  80b574:	1002d21e 	bne	r2,zero,80c0c0 <___vfprintf_internal_r+0x1818>
  80b578:	00c00044 	movi	r3,1
  80b57c:	01c00804 	movi	r7,32
  80b580:	ac400007 	ldb	r17,0(r21)
  80b584:	003d2906 	br	80aa2c <__alt_mem_onchip_mem+0xff802a2c>
  80b588:	94800054 	ori	r18,r18,1
  80b58c:	ac400007 	ldb	r17,0(r21)
  80b590:	003d2606 	br	80aa2c <__alt_mem_onchip_mem+0xff802a2c>
  80b594:	18c03fcc 	andi	r3,r3,255
  80b598:	183e0526 	beq	r3,zero,80adb0 <__alt_mem_onchip_mem+0xff802db0>
  80b59c:	d9c02785 	stb	r7,158(sp)
  80b5a0:	003e0306 	br	80adb0 <__alt_mem_onchip_mem+0xff802db0>
  80b5a4:	94801014 	ori	r18,r18,64
  80b5a8:	ac400007 	ldb	r17,0(r21)
  80b5ac:	003d1f06 	br	80aa2c <__alt_mem_onchip_mem+0xff802a2c>
  80b5b0:	ac400007 	ldb	r17,0(r21)
  80b5b4:	8a438726 	beq	r17,r9,80c3d4 <___vfprintf_internal_r+0x1b2c>
  80b5b8:	94800414 	ori	r18,r18,16
  80b5bc:	003d1b06 	br	80aa2c <__alt_mem_onchip_mem+0xff802a2c>
  80b5c0:	18c03fcc 	andi	r3,r3,255
  80b5c4:	1805341e 	bne	r3,zero,80ca98 <___vfprintf_internal_r+0x21f0>
  80b5c8:	9080080c 	andi	r2,r18,32
  80b5cc:	1002cd26 	beq	r2,zero,80c104 <___vfprintf_internal_r+0x185c>
  80b5d0:	d9402d17 	ldw	r5,180(sp)
  80b5d4:	d9002f17 	ldw	r4,188(sp)
  80b5d8:	28800017 	ldw	r2,0(r5)
  80b5dc:	2007d7fa 	srai	r3,r4,31
  80b5e0:	29400104 	addi	r5,r5,4
  80b5e4:	d9402d15 	stw	r5,180(sp)
  80b5e8:	11000015 	stw	r4,0(r2)
  80b5ec:	10c00115 	stw	r3,4(r2)
  80b5f0:	003ce506 	br	80a988 <__alt_mem_onchip_mem+0xff802988>
  80b5f4:	d8c02d17 	ldw	r3,180(sp)
  80b5f8:	d9002d17 	ldw	r4,180(sp)
  80b5fc:	d8002785 	stb	zero,158(sp)
  80b600:	18800017 	ldw	r2,0(r3)
  80b604:	21000104 	addi	r4,r4,4
  80b608:	00c00044 	movi	r3,1
  80b60c:	d8c02a15 	stw	r3,168(sp)
  80b610:	d8801405 	stb	r2,80(sp)
  80b614:	d9002d15 	stw	r4,180(sp)
  80b618:	d8c02e15 	stw	r3,184(sp)
  80b61c:	d8002915 	stw	zero,164(sp)
  80b620:	d8003215 	stw	zero,200(sp)
  80b624:	dc001404 	addi	r16,sp,80
  80b628:	0039883a 	mov	fp,zero
  80b62c:	003e7206 	br	80aff8 <__alt_mem_onchip_mem+0xff802ff8>
  80b630:	01002074 	movhi	r4,129
  80b634:	211c7904 	addi	r4,r4,29156
  80b638:	0039883a 	mov	fp,zero
  80b63c:	d9003915 	stw	r4,228(sp)
  80b640:	04401e04 	movi	r17,120
  80b644:	003f8206 	br	80b450 <__alt_mem_onchip_mem+0xff803450>
  80b648:	18c03fcc 	andi	r3,r3,255
  80b64c:	1805061e 	bne	r3,zero,80ca68 <___vfprintf_internal_r+0x21c0>
  80b650:	883d9126 	beq	r17,zero,80ac98 <__alt_mem_onchip_mem+0xff802c98>
  80b654:	00c00044 	movi	r3,1
  80b658:	d8c02a15 	stw	r3,168(sp)
  80b65c:	dc401405 	stb	r17,80(sp)
  80b660:	d8002785 	stb	zero,158(sp)
  80b664:	003fec06 	br	80b618 <__alt_mem_onchip_mem+0xff803618>
  80b668:	01402074 	movhi	r5,129
  80b66c:	295c7904 	addi	r5,r5,29156
  80b670:	d9403915 	stw	r5,228(sp)
  80b674:	d8c02d15 	stw	r3,180(sp)
  80b678:	1025883a 	mov	r18,r2
  80b67c:	04401e04 	movi	r17,120
  80b680:	9d84b03a 	or	r2,r19,r22
  80b684:	1000fc1e 	bne	r2,zero,80ba78 <___vfprintf_internal_r+0x11d0>
  80b688:	0039883a 	mov	fp,zero
  80b68c:	00800084 	movi	r2,2
  80b690:	10803fcc 	andi	r2,r2,255
  80b694:	00c00044 	movi	r3,1
  80b698:	10c20f26 	beq	r2,r3,80bed8 <___vfprintf_internal_r+0x1630>
  80b69c:	00c00084 	movi	r3,2
  80b6a0:	10fd6326 	beq	r2,r3,80ac30 <__alt_mem_onchip_mem+0xff802c30>
  80b6a4:	003e2d06 	br	80af5c <__alt_mem_onchip_mem+0xff802f5c>
  80b6a8:	d8c02017 	ldw	r3,128(sp)
  80b6ac:	003e9306 	br	80b0fc <__alt_mem_onchip_mem+0xff8030fc>
  80b6b0:	00801944 	movi	r2,101
  80b6b4:	14407e0e 	bge	r2,r17,80b8b0 <___vfprintf_internal_r+0x1008>
  80b6b8:	d9003617 	ldw	r4,216(sp)
  80b6bc:	d9403817 	ldw	r5,224(sp)
  80b6c0:	000d883a 	mov	r6,zero
  80b6c4:	000f883a 	mov	r7,zero
  80b6c8:	d8c03c15 	stw	r3,240(sp)
  80b6cc:	da003d15 	stw	r8,244(sp)
  80b6d0:	0812b940 	call	812b94 <__eqdf2>
  80b6d4:	d8c03c17 	ldw	r3,240(sp)
  80b6d8:	da003d17 	ldw	r8,244(sp)
  80b6dc:	1000f71e 	bne	r2,zero,80babc <___vfprintf_internal_r+0x1214>
  80b6e0:	d8801f17 	ldw	r2,124(sp)
  80b6e4:	01002074 	movhi	r4,129
  80b6e8:	211c8004 	addi	r4,r4,29184
  80b6ec:	18c00044 	addi	r3,r3,1
  80b6f0:	10800044 	addi	r2,r2,1
  80b6f4:	41000015 	stw	r4,0(r8)
  80b6f8:	01000044 	movi	r4,1
  80b6fc:	41000115 	stw	r4,4(r8)
  80b700:	d8c02015 	stw	r3,128(sp)
  80b704:	d8801f15 	stw	r2,124(sp)
  80b708:	010001c4 	movi	r4,7
  80b70c:	2082b816 	blt	r4,r2,80c1f0 <___vfprintf_internal_r+0x1948>
  80b710:	42000204 	addi	r8,r8,8
  80b714:	d8802617 	ldw	r2,152(sp)
  80b718:	d9403317 	ldw	r5,204(sp)
  80b71c:	11400216 	blt	r2,r5,80b728 <___vfprintf_internal_r+0xe80>
  80b720:	9080004c 	andi	r2,r18,1
  80b724:	103ed526 	beq	r2,zero,80b27c <__alt_mem_onchip_mem+0xff80327c>
  80b728:	d8803717 	ldw	r2,220(sp)
  80b72c:	d9003417 	ldw	r4,208(sp)
  80b730:	d9403717 	ldw	r5,220(sp)
  80b734:	1887883a 	add	r3,r3,r2
  80b738:	d8801f17 	ldw	r2,124(sp)
  80b73c:	41000015 	stw	r4,0(r8)
  80b740:	41400115 	stw	r5,4(r8)
  80b744:	10800044 	addi	r2,r2,1
  80b748:	d8c02015 	stw	r3,128(sp)
  80b74c:	d8801f15 	stw	r2,124(sp)
  80b750:	010001c4 	movi	r4,7
  80b754:	20832916 	blt	r4,r2,80c3fc <___vfprintf_internal_r+0x1b54>
  80b758:	42000204 	addi	r8,r8,8
  80b75c:	d8803317 	ldw	r2,204(sp)
  80b760:	143fffc4 	addi	r16,r2,-1
  80b764:	043ec50e 	bge	zero,r16,80b27c <__alt_mem_onchip_mem+0xff80327c>
  80b768:	04400404 	movi	r17,16
  80b76c:	d8801f17 	ldw	r2,124(sp)
  80b770:	8c00880e 	bge	r17,r16,80b994 <___vfprintf_internal_r+0x10ec>
  80b774:	01402074 	movhi	r5,129
  80b778:	295c8084 	addi	r5,r5,29186
  80b77c:	d9402b15 	stw	r5,172(sp)
  80b780:	058001c4 	movi	r22,7
  80b784:	dcc02c17 	ldw	r19,176(sp)
  80b788:	00000306 	br	80b798 <___vfprintf_internal_r+0xef0>
  80b78c:	42000204 	addi	r8,r8,8
  80b790:	843ffc04 	addi	r16,r16,-16
  80b794:	8c00820e 	bge	r17,r16,80b9a0 <___vfprintf_internal_r+0x10f8>
  80b798:	18c00404 	addi	r3,r3,16
  80b79c:	10800044 	addi	r2,r2,1
  80b7a0:	45000015 	stw	r20,0(r8)
  80b7a4:	44400115 	stw	r17,4(r8)
  80b7a8:	d8c02015 	stw	r3,128(sp)
  80b7ac:	d8801f15 	stw	r2,124(sp)
  80b7b0:	b0bff60e 	bge	r22,r2,80b78c <__alt_mem_onchip_mem+0xff80378c>
  80b7b4:	d9801e04 	addi	r6,sp,120
  80b7b8:	b80b883a 	mov	r5,r23
  80b7bc:	9809883a 	mov	r4,r19
  80b7c0:	0810a540 	call	810a54 <__sprint_r>
  80b7c4:	103d3a1e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80b7c8:	d8c02017 	ldw	r3,128(sp)
  80b7cc:	d8801f17 	ldw	r2,124(sp)
  80b7d0:	da000404 	addi	r8,sp,16
  80b7d4:	003fee06 	br	80b790 <__alt_mem_onchip_mem+0xff803790>
  80b7d8:	d9403117 	ldw	r5,196(sp)
  80b7dc:	d8802a17 	ldw	r2,168(sp)
  80b7e0:	28adc83a 	sub	r22,r5,r2
  80b7e4:	05be630e 	bge	zero,r22,80b174 <__alt_mem_onchip_mem+0xff803174>
  80b7e8:	07000404 	movi	fp,16
  80b7ec:	d8801f17 	ldw	r2,124(sp)
  80b7f0:	e5838f0e 	bge	fp,r22,80c630 <___vfprintf_internal_r+0x1d88>
  80b7f4:	01402074 	movhi	r5,129
  80b7f8:	295c8084 	addi	r5,r5,29186
  80b7fc:	dc403015 	stw	r17,192(sp)
  80b800:	d9402b15 	stw	r5,172(sp)
  80b804:	b023883a 	mov	r17,r22
  80b808:	04c001c4 	movi	r19,7
  80b80c:	a82d883a 	mov	r22,r21
  80b810:	902b883a 	mov	r21,r18
  80b814:	8025883a 	mov	r18,r16
  80b818:	dc002c17 	ldw	r16,176(sp)
  80b81c:	00000306 	br	80b82c <___vfprintf_internal_r+0xf84>
  80b820:	8c7ffc04 	addi	r17,r17,-16
  80b824:	42000204 	addi	r8,r8,8
  80b828:	e440110e 	bge	fp,r17,80b870 <___vfprintf_internal_r+0xfc8>
  80b82c:	18c00404 	addi	r3,r3,16
  80b830:	10800044 	addi	r2,r2,1
  80b834:	45000015 	stw	r20,0(r8)
  80b838:	47000115 	stw	fp,4(r8)
  80b83c:	d8c02015 	stw	r3,128(sp)
  80b840:	d8801f15 	stw	r2,124(sp)
  80b844:	98bff60e 	bge	r19,r2,80b820 <__alt_mem_onchip_mem+0xff803820>
  80b848:	d9801e04 	addi	r6,sp,120
  80b84c:	b80b883a 	mov	r5,r23
  80b850:	8009883a 	mov	r4,r16
  80b854:	0810a540 	call	810a54 <__sprint_r>
  80b858:	103d151e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80b85c:	8c7ffc04 	addi	r17,r17,-16
  80b860:	d8c02017 	ldw	r3,128(sp)
  80b864:	d8801f17 	ldw	r2,124(sp)
  80b868:	da000404 	addi	r8,sp,16
  80b86c:	e47fef16 	blt	fp,r17,80b82c <__alt_mem_onchip_mem+0xff80382c>
  80b870:	9021883a 	mov	r16,r18
  80b874:	a825883a 	mov	r18,r21
  80b878:	b02b883a 	mov	r21,r22
  80b87c:	882d883a 	mov	r22,r17
  80b880:	dc403017 	ldw	r17,192(sp)
  80b884:	d9002b17 	ldw	r4,172(sp)
  80b888:	1d87883a 	add	r3,r3,r22
  80b88c:	10800044 	addi	r2,r2,1
  80b890:	41000015 	stw	r4,0(r8)
  80b894:	45800115 	stw	r22,4(r8)
  80b898:	d8c02015 	stw	r3,128(sp)
  80b89c:	d8801f15 	stw	r2,124(sp)
  80b8a0:	010001c4 	movi	r4,7
  80b8a4:	20818e16 	blt	r4,r2,80bee0 <___vfprintf_internal_r+0x1638>
  80b8a8:	42000204 	addi	r8,r8,8
  80b8ac:	003e3106 	br	80b174 <__alt_mem_onchip_mem+0xff803174>
  80b8b0:	d9403317 	ldw	r5,204(sp)
  80b8b4:	00800044 	movi	r2,1
  80b8b8:	18c00044 	addi	r3,r3,1
  80b8bc:	1141530e 	bge	r2,r5,80be0c <___vfprintf_internal_r+0x1564>
  80b8c0:	dc401f17 	ldw	r17,124(sp)
  80b8c4:	00800044 	movi	r2,1
  80b8c8:	40800115 	stw	r2,4(r8)
  80b8cc:	8c400044 	addi	r17,r17,1
  80b8d0:	44000015 	stw	r16,0(r8)
  80b8d4:	d8c02015 	stw	r3,128(sp)
  80b8d8:	dc401f15 	stw	r17,124(sp)
  80b8dc:	008001c4 	movi	r2,7
  80b8e0:	14416b16 	blt	r2,r17,80be90 <___vfprintf_internal_r+0x15e8>
  80b8e4:	42000204 	addi	r8,r8,8
  80b8e8:	d8803717 	ldw	r2,220(sp)
  80b8ec:	d9003417 	ldw	r4,208(sp)
  80b8f0:	8c400044 	addi	r17,r17,1
  80b8f4:	10c7883a 	add	r3,r2,r3
  80b8f8:	40800115 	stw	r2,4(r8)
  80b8fc:	41000015 	stw	r4,0(r8)
  80b900:	d8c02015 	stw	r3,128(sp)
  80b904:	dc401f15 	stw	r17,124(sp)
  80b908:	008001c4 	movi	r2,7
  80b90c:	14416916 	blt	r2,r17,80beb4 <___vfprintf_internal_r+0x160c>
  80b910:	45800204 	addi	r22,r8,8
  80b914:	d9003617 	ldw	r4,216(sp)
  80b918:	d9403817 	ldw	r5,224(sp)
  80b91c:	000d883a 	mov	r6,zero
  80b920:	000f883a 	mov	r7,zero
  80b924:	d8c03c15 	stw	r3,240(sp)
  80b928:	0812b940 	call	812b94 <__eqdf2>
  80b92c:	d8c03c17 	ldw	r3,240(sp)
  80b930:	1000bc26 	beq	r2,zero,80bc24 <___vfprintf_internal_r+0x137c>
  80b934:	d9403317 	ldw	r5,204(sp)
  80b938:	84000044 	addi	r16,r16,1
  80b93c:	8c400044 	addi	r17,r17,1
  80b940:	28bfffc4 	addi	r2,r5,-1
  80b944:	1887883a 	add	r3,r3,r2
  80b948:	b0800115 	stw	r2,4(r22)
  80b94c:	b4000015 	stw	r16,0(r22)
  80b950:	d8c02015 	stw	r3,128(sp)
  80b954:	dc401f15 	stw	r17,124(sp)
  80b958:	008001c4 	movi	r2,7
  80b95c:	14414316 	blt	r2,r17,80be6c <___vfprintf_internal_r+0x15c4>
  80b960:	b5800204 	addi	r22,r22,8
  80b964:	d9003a17 	ldw	r4,232(sp)
  80b968:	df0022c4 	addi	fp,sp,139
  80b96c:	8c400044 	addi	r17,r17,1
  80b970:	20c7883a 	add	r3,r4,r3
  80b974:	b7000015 	stw	fp,0(r22)
  80b978:	b1000115 	stw	r4,4(r22)
  80b97c:	d8c02015 	stw	r3,128(sp)
  80b980:	dc401f15 	stw	r17,124(sp)
  80b984:	008001c4 	movi	r2,7
  80b988:	14400e16 	blt	r2,r17,80b9c4 <___vfprintf_internal_r+0x111c>
  80b98c:	b2000204 	addi	r8,r22,8
  80b990:	003e3a06 	br	80b27c <__alt_mem_onchip_mem+0xff80327c>
  80b994:	01002074 	movhi	r4,129
  80b998:	211c8084 	addi	r4,r4,29186
  80b99c:	d9002b15 	stw	r4,172(sp)
  80b9a0:	d9002b17 	ldw	r4,172(sp)
  80b9a4:	1c07883a 	add	r3,r3,r16
  80b9a8:	44000115 	stw	r16,4(r8)
  80b9ac:	41000015 	stw	r4,0(r8)
  80b9b0:	10800044 	addi	r2,r2,1
  80b9b4:	d8c02015 	stw	r3,128(sp)
  80b9b8:	d8801f15 	stw	r2,124(sp)
  80b9bc:	010001c4 	movi	r4,7
  80b9c0:	20be2d0e 	bge	r4,r2,80b278 <__alt_mem_onchip_mem+0xff803278>
  80b9c4:	d9002c17 	ldw	r4,176(sp)
  80b9c8:	d9801e04 	addi	r6,sp,120
  80b9cc:	b80b883a 	mov	r5,r23
  80b9d0:	0810a540 	call	810a54 <__sprint_r>
  80b9d4:	103cb61e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80b9d8:	d8c02017 	ldw	r3,128(sp)
  80b9dc:	da000404 	addi	r8,sp,16
  80b9e0:	003e2606 	br	80b27c <__alt_mem_onchip_mem+0xff80327c>
  80b9e4:	d9002c17 	ldw	r4,176(sp)
  80b9e8:	d9801e04 	addi	r6,sp,120
  80b9ec:	b80b883a 	mov	r5,r23
  80b9f0:	0810a540 	call	810a54 <__sprint_r>
  80b9f4:	103e5d26 	beq	r2,zero,80b36c <__alt_mem_onchip_mem+0xff80336c>
  80b9f8:	003cad06 	br	80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80b9fc:	d9002c17 	ldw	r4,176(sp)
  80ba00:	d9801e04 	addi	r6,sp,120
  80ba04:	b80b883a 	mov	r5,r23
  80ba08:	0810a540 	call	810a54 <__sprint_r>
  80ba0c:	103ca81e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80ba10:	d8c02017 	ldw	r3,128(sp)
  80ba14:	da000404 	addi	r8,sp,16
  80ba18:	003e0b06 	br	80b248 <__alt_mem_onchip_mem+0xff803248>
  80ba1c:	d9002c17 	ldw	r4,176(sp)
  80ba20:	d9801e04 	addi	r6,sp,120
  80ba24:	b80b883a 	mov	r5,r23
  80ba28:	0810a540 	call	810a54 <__sprint_r>
  80ba2c:	103ca01e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80ba30:	d8c02017 	ldw	r3,128(sp)
  80ba34:	da000404 	addi	r8,sp,16
  80ba38:	003dbd06 	br	80b130 <__alt_mem_onchip_mem+0xff803130>
  80ba3c:	d9002c17 	ldw	r4,176(sp)
  80ba40:	d9801e04 	addi	r6,sp,120
  80ba44:	b80b883a 	mov	r5,r23
  80ba48:	0810a540 	call	810a54 <__sprint_r>
  80ba4c:	103c981e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80ba50:	d8c02017 	ldw	r3,128(sp)
  80ba54:	da000404 	addi	r8,sp,16
  80ba58:	003dc306 	br	80b168 <__alt_mem_onchip_mem+0xff803168>
  80ba5c:	d8802917 	ldw	r2,164(sp)
  80ba60:	d8002785 	stb	zero,158(sp)
  80ba64:	103f0616 	blt	r2,zero,80b680 <__alt_mem_onchip_mem+0xff803680>
  80ba68:	00ffdfc4 	movi	r3,-129
  80ba6c:	9d84b03a 	or	r2,r19,r22
  80ba70:	90e4703a 	and	r18,r18,r3
  80ba74:	103c6b26 	beq	r2,zero,80ac24 <__alt_mem_onchip_mem+0xff802c24>
  80ba78:	0039883a 	mov	fp,zero
  80ba7c:	003e7406 	br	80b450 <__alt_mem_onchip_mem+0xff803450>
  80ba80:	9080040c 	andi	r2,r18,16
  80ba84:	1001b326 	beq	r2,zero,80c154 <___vfprintf_internal_r+0x18ac>
  80ba88:	d9002d17 	ldw	r4,180(sp)
  80ba8c:	d9402917 	ldw	r5,164(sp)
  80ba90:	d8002785 	stb	zero,158(sp)
  80ba94:	20800104 	addi	r2,r4,4
  80ba98:	24c00017 	ldw	r19,0(r4)
  80ba9c:	002d883a 	mov	r22,zero
  80baa0:	2801b516 	blt	r5,zero,80c178 <___vfprintf_internal_r+0x18d0>
  80baa4:	00ffdfc4 	movi	r3,-129
  80baa8:	d8802d15 	stw	r2,180(sp)
  80baac:	90e4703a 	and	r18,r18,r3
  80bab0:	983d2726 	beq	r19,zero,80af50 <__alt_mem_onchip_mem+0xff802f50>
  80bab4:	0039883a 	mov	fp,zero
  80bab8:	003d2a06 	br	80af64 <__alt_mem_onchip_mem+0xff802f64>
  80babc:	dc402617 	ldw	r17,152(sp)
  80bac0:	0441d30e 	bge	zero,r17,80c210 <___vfprintf_internal_r+0x1968>
  80bac4:	dc403217 	ldw	r17,200(sp)
  80bac8:	d8803317 	ldw	r2,204(sp)
  80bacc:	1440010e 	bge	r2,r17,80bad4 <___vfprintf_internal_r+0x122c>
  80bad0:	1023883a 	mov	r17,r2
  80bad4:	04400a0e 	bge	zero,r17,80bb00 <___vfprintf_internal_r+0x1258>
  80bad8:	d8801f17 	ldw	r2,124(sp)
  80badc:	1c47883a 	add	r3,r3,r17
  80bae0:	44000015 	stw	r16,0(r8)
  80bae4:	10800044 	addi	r2,r2,1
  80bae8:	44400115 	stw	r17,4(r8)
  80baec:	d8c02015 	stw	r3,128(sp)
  80baf0:	d8801f15 	stw	r2,124(sp)
  80baf4:	010001c4 	movi	r4,7
  80baf8:	20826516 	blt	r4,r2,80c490 <___vfprintf_internal_r+0x1be8>
  80bafc:	42000204 	addi	r8,r8,8
  80bb00:	88026116 	blt	r17,zero,80c488 <___vfprintf_internal_r+0x1be0>
  80bb04:	d9003217 	ldw	r4,200(sp)
  80bb08:	2463c83a 	sub	r17,r4,r17
  80bb0c:	04407b0e 	bge	zero,r17,80bcfc <___vfprintf_internal_r+0x1454>
  80bb10:	05800404 	movi	r22,16
  80bb14:	d8801f17 	ldw	r2,124(sp)
  80bb18:	b4419d0e 	bge	r22,r17,80c190 <___vfprintf_internal_r+0x18e8>
  80bb1c:	01002074 	movhi	r4,129
  80bb20:	211c8084 	addi	r4,r4,29186
  80bb24:	d9002b15 	stw	r4,172(sp)
  80bb28:	070001c4 	movi	fp,7
  80bb2c:	dcc02c17 	ldw	r19,176(sp)
  80bb30:	00000306 	br	80bb40 <___vfprintf_internal_r+0x1298>
  80bb34:	42000204 	addi	r8,r8,8
  80bb38:	8c7ffc04 	addi	r17,r17,-16
  80bb3c:	b441970e 	bge	r22,r17,80c19c <___vfprintf_internal_r+0x18f4>
  80bb40:	18c00404 	addi	r3,r3,16
  80bb44:	10800044 	addi	r2,r2,1
  80bb48:	45000015 	stw	r20,0(r8)
  80bb4c:	45800115 	stw	r22,4(r8)
  80bb50:	d8c02015 	stw	r3,128(sp)
  80bb54:	d8801f15 	stw	r2,124(sp)
  80bb58:	e0bff60e 	bge	fp,r2,80bb34 <__alt_mem_onchip_mem+0xff803b34>
  80bb5c:	d9801e04 	addi	r6,sp,120
  80bb60:	b80b883a 	mov	r5,r23
  80bb64:	9809883a 	mov	r4,r19
  80bb68:	0810a540 	call	810a54 <__sprint_r>
  80bb6c:	103c501e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80bb70:	d8c02017 	ldw	r3,128(sp)
  80bb74:	d8801f17 	ldw	r2,124(sp)
  80bb78:	da000404 	addi	r8,sp,16
  80bb7c:	003fee06 	br	80bb38 <__alt_mem_onchip_mem+0xff803b38>
  80bb80:	d9002c17 	ldw	r4,176(sp)
  80bb84:	d9801e04 	addi	r6,sp,120
  80bb88:	b80b883a 	mov	r5,r23
  80bb8c:	0810a540 	call	810a54 <__sprint_r>
  80bb90:	103c471e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80bb94:	d8c02017 	ldw	r3,128(sp)
  80bb98:	df002787 	ldb	fp,158(sp)
  80bb9c:	da000404 	addi	r8,sp,16
  80bba0:	003d5606 	br	80b0fc <__alt_mem_onchip_mem+0xff8030fc>
  80bba4:	9080040c 	andi	r2,r18,16
  80bba8:	10016126 	beq	r2,zero,80c130 <___vfprintf_internal_r+0x1888>
  80bbac:	d8802d17 	ldw	r2,180(sp)
  80bbb0:	14c00017 	ldw	r19,0(r2)
  80bbb4:	10800104 	addi	r2,r2,4
  80bbb8:	d8802d15 	stw	r2,180(sp)
  80bbbc:	982dd7fa 	srai	r22,r19,31
  80bbc0:	b005883a 	mov	r2,r22
  80bbc4:	003c8206 	br	80add0 <__alt_mem_onchip_mem+0xff802dd0>
  80bbc8:	9080040c 	andi	r2,r18,16
  80bbcc:	10003526 	beq	r2,zero,80bca4 <___vfprintf_internal_r+0x13fc>
  80bbd0:	d9402d17 	ldw	r5,180(sp)
  80bbd4:	d8c02917 	ldw	r3,164(sp)
  80bbd8:	d8002785 	stb	zero,158(sp)
  80bbdc:	28800104 	addi	r2,r5,4
  80bbe0:	2cc00017 	ldw	r19,0(r5)
  80bbe4:	002d883a 	mov	r22,zero
  80bbe8:	18003716 	blt	r3,zero,80bcc8 <___vfprintf_internal_r+0x1420>
  80bbec:	00ffdfc4 	movi	r3,-129
  80bbf0:	d8802d15 	stw	r2,180(sp)
  80bbf4:	90e4703a 	and	r18,r18,r3
  80bbf8:	0039883a 	mov	fp,zero
  80bbfc:	983df326 	beq	r19,zero,80b3cc <__alt_mem_onchip_mem+0xff8033cc>
  80bc00:	00800244 	movi	r2,9
  80bc04:	14fc7b36 	bltu	r2,r19,80adf4 <__alt_mem_onchip_mem+0xff802df4>
  80bc08:	d8c02817 	ldw	r3,160(sp)
  80bc0c:	dc001dc4 	addi	r16,sp,119
  80bc10:	9cc00c04 	addi	r19,r19,48
  80bc14:	1c07c83a 	sub	r3,r3,r16
  80bc18:	dcc01dc5 	stb	r19,119(sp)
  80bc1c:	d8c02e15 	stw	r3,184(sp)
  80bc20:	003ce806 	br	80afc4 <__alt_mem_onchip_mem+0xff802fc4>
  80bc24:	d8803317 	ldw	r2,204(sp)
  80bc28:	143fffc4 	addi	r16,r2,-1
  80bc2c:	043f4d0e 	bge	zero,r16,80b964 <__alt_mem_onchip_mem+0xff803964>
  80bc30:	07000404 	movi	fp,16
  80bc34:	e400810e 	bge	fp,r16,80be3c <___vfprintf_internal_r+0x1594>
  80bc38:	01402074 	movhi	r5,129
  80bc3c:	295c8084 	addi	r5,r5,29186
  80bc40:	d9402b15 	stw	r5,172(sp)
  80bc44:	01c001c4 	movi	r7,7
  80bc48:	dcc02c17 	ldw	r19,176(sp)
  80bc4c:	00000306 	br	80bc5c <___vfprintf_internal_r+0x13b4>
  80bc50:	b5800204 	addi	r22,r22,8
  80bc54:	843ffc04 	addi	r16,r16,-16
  80bc58:	e4007b0e 	bge	fp,r16,80be48 <___vfprintf_internal_r+0x15a0>
  80bc5c:	18c00404 	addi	r3,r3,16
  80bc60:	8c400044 	addi	r17,r17,1
  80bc64:	b5000015 	stw	r20,0(r22)
  80bc68:	b7000115 	stw	fp,4(r22)
  80bc6c:	d8c02015 	stw	r3,128(sp)
  80bc70:	dc401f15 	stw	r17,124(sp)
  80bc74:	3c7ff60e 	bge	r7,r17,80bc50 <__alt_mem_onchip_mem+0xff803c50>
  80bc78:	d9801e04 	addi	r6,sp,120
  80bc7c:	b80b883a 	mov	r5,r23
  80bc80:	9809883a 	mov	r4,r19
  80bc84:	d9c03c15 	stw	r7,240(sp)
  80bc88:	0810a540 	call	810a54 <__sprint_r>
  80bc8c:	d9c03c17 	ldw	r7,240(sp)
  80bc90:	103c071e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80bc94:	d8c02017 	ldw	r3,128(sp)
  80bc98:	dc401f17 	ldw	r17,124(sp)
  80bc9c:	dd800404 	addi	r22,sp,16
  80bca0:	003fec06 	br	80bc54 <__alt_mem_onchip_mem+0xff803c54>
  80bca4:	9080100c 	andi	r2,r18,64
  80bca8:	d8002785 	stb	zero,158(sp)
  80bcac:	10010e26 	beq	r2,zero,80c0e8 <___vfprintf_internal_r+0x1840>
  80bcb0:	d9002d17 	ldw	r4,180(sp)
  80bcb4:	d9402917 	ldw	r5,164(sp)
  80bcb8:	002d883a 	mov	r22,zero
  80bcbc:	20800104 	addi	r2,r4,4
  80bcc0:	24c0000b 	ldhu	r19,0(r4)
  80bcc4:	283fc90e 	bge	r5,zero,80bbec <__alt_mem_onchip_mem+0xff803bec>
  80bcc8:	d8802d15 	stw	r2,180(sp)
  80bccc:	0039883a 	mov	fp,zero
  80bcd0:	9d84b03a 	or	r2,r19,r22
  80bcd4:	103c461e 	bne	r2,zero,80adf0 <__alt_mem_onchip_mem+0xff802df0>
  80bcd8:	00800044 	movi	r2,1
  80bcdc:	003e6c06 	br	80b690 <__alt_mem_onchip_mem+0xff803690>
  80bce0:	d9002c17 	ldw	r4,176(sp)
  80bce4:	d9801e04 	addi	r6,sp,120
  80bce8:	b80b883a 	mov	r5,r23
  80bcec:	0810a540 	call	810a54 <__sprint_r>
  80bcf0:	103bef1e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80bcf4:	d8c02017 	ldw	r3,128(sp)
  80bcf8:	da000404 	addi	r8,sp,16
  80bcfc:	d9003217 	ldw	r4,200(sp)
  80bd00:	d8802617 	ldw	r2,152(sp)
  80bd04:	d9403317 	ldw	r5,204(sp)
  80bd08:	8123883a 	add	r17,r16,r4
  80bd0c:	11400216 	blt	r2,r5,80bd18 <___vfprintf_internal_r+0x1470>
  80bd10:	9100004c 	andi	r4,r18,1
  80bd14:	20000d26 	beq	r4,zero,80bd4c <___vfprintf_internal_r+0x14a4>
  80bd18:	d9003717 	ldw	r4,220(sp)
  80bd1c:	d9403417 	ldw	r5,208(sp)
  80bd20:	1907883a 	add	r3,r3,r4
  80bd24:	d9001f17 	ldw	r4,124(sp)
  80bd28:	41400015 	stw	r5,0(r8)
  80bd2c:	d9403717 	ldw	r5,220(sp)
  80bd30:	21000044 	addi	r4,r4,1
  80bd34:	d8c02015 	stw	r3,128(sp)
  80bd38:	41400115 	stw	r5,4(r8)
  80bd3c:	d9001f15 	stw	r4,124(sp)
  80bd40:	014001c4 	movi	r5,7
  80bd44:	2901e816 	blt	r5,r4,80c4e8 <___vfprintf_internal_r+0x1c40>
  80bd48:	42000204 	addi	r8,r8,8
  80bd4c:	d9003317 	ldw	r4,204(sp)
  80bd50:	8121883a 	add	r16,r16,r4
  80bd54:	2085c83a 	sub	r2,r4,r2
  80bd58:	8461c83a 	sub	r16,r16,r17
  80bd5c:	1400010e 	bge	r2,r16,80bd64 <___vfprintf_internal_r+0x14bc>
  80bd60:	1021883a 	mov	r16,r2
  80bd64:	04000a0e 	bge	zero,r16,80bd90 <___vfprintf_internal_r+0x14e8>
  80bd68:	d9001f17 	ldw	r4,124(sp)
  80bd6c:	1c07883a 	add	r3,r3,r16
  80bd70:	44400015 	stw	r17,0(r8)
  80bd74:	21000044 	addi	r4,r4,1
  80bd78:	44000115 	stw	r16,4(r8)
  80bd7c:	d8c02015 	stw	r3,128(sp)
  80bd80:	d9001f15 	stw	r4,124(sp)
  80bd84:	014001c4 	movi	r5,7
  80bd88:	2901fb16 	blt	r5,r4,80c578 <___vfprintf_internal_r+0x1cd0>
  80bd8c:	42000204 	addi	r8,r8,8
  80bd90:	8001f716 	blt	r16,zero,80c570 <___vfprintf_internal_r+0x1cc8>
  80bd94:	1421c83a 	sub	r16,r2,r16
  80bd98:	043d380e 	bge	zero,r16,80b27c <__alt_mem_onchip_mem+0xff80327c>
  80bd9c:	04400404 	movi	r17,16
  80bda0:	d8801f17 	ldw	r2,124(sp)
  80bda4:	8c3efb0e 	bge	r17,r16,80b994 <__alt_mem_onchip_mem+0xff803994>
  80bda8:	01402074 	movhi	r5,129
  80bdac:	295c8084 	addi	r5,r5,29186
  80bdb0:	d9402b15 	stw	r5,172(sp)
  80bdb4:	058001c4 	movi	r22,7
  80bdb8:	dcc02c17 	ldw	r19,176(sp)
  80bdbc:	00000306 	br	80bdcc <___vfprintf_internal_r+0x1524>
  80bdc0:	42000204 	addi	r8,r8,8
  80bdc4:	843ffc04 	addi	r16,r16,-16
  80bdc8:	8c3ef50e 	bge	r17,r16,80b9a0 <__alt_mem_onchip_mem+0xff8039a0>
  80bdcc:	18c00404 	addi	r3,r3,16
  80bdd0:	10800044 	addi	r2,r2,1
  80bdd4:	45000015 	stw	r20,0(r8)
  80bdd8:	44400115 	stw	r17,4(r8)
  80bddc:	d8c02015 	stw	r3,128(sp)
  80bde0:	d8801f15 	stw	r2,124(sp)
  80bde4:	b0bff60e 	bge	r22,r2,80bdc0 <__alt_mem_onchip_mem+0xff803dc0>
  80bde8:	d9801e04 	addi	r6,sp,120
  80bdec:	b80b883a 	mov	r5,r23
  80bdf0:	9809883a 	mov	r4,r19
  80bdf4:	0810a540 	call	810a54 <__sprint_r>
  80bdf8:	103bad1e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80bdfc:	d8c02017 	ldw	r3,128(sp)
  80be00:	d8801f17 	ldw	r2,124(sp)
  80be04:	da000404 	addi	r8,sp,16
  80be08:	003fee06 	br	80bdc4 <__alt_mem_onchip_mem+0xff803dc4>
  80be0c:	9088703a 	and	r4,r18,r2
  80be10:	203eab1e 	bne	r4,zero,80b8c0 <__alt_mem_onchip_mem+0xff8038c0>
  80be14:	dc401f17 	ldw	r17,124(sp)
  80be18:	40800115 	stw	r2,4(r8)
  80be1c:	44000015 	stw	r16,0(r8)
  80be20:	8c400044 	addi	r17,r17,1
  80be24:	d8c02015 	stw	r3,128(sp)
  80be28:	dc401f15 	stw	r17,124(sp)
  80be2c:	008001c4 	movi	r2,7
  80be30:	14400e16 	blt	r2,r17,80be6c <___vfprintf_internal_r+0x15c4>
  80be34:	45800204 	addi	r22,r8,8
  80be38:	003eca06 	br	80b964 <__alt_mem_onchip_mem+0xff803964>
  80be3c:	01002074 	movhi	r4,129
  80be40:	211c8084 	addi	r4,r4,29186
  80be44:	d9002b15 	stw	r4,172(sp)
  80be48:	d8802b17 	ldw	r2,172(sp)
  80be4c:	1c07883a 	add	r3,r3,r16
  80be50:	8c400044 	addi	r17,r17,1
  80be54:	b0800015 	stw	r2,0(r22)
  80be58:	b4000115 	stw	r16,4(r22)
  80be5c:	d8c02015 	stw	r3,128(sp)
  80be60:	dc401f15 	stw	r17,124(sp)
  80be64:	008001c4 	movi	r2,7
  80be68:	147ebd0e 	bge	r2,r17,80b960 <__alt_mem_onchip_mem+0xff803960>
  80be6c:	d9002c17 	ldw	r4,176(sp)
  80be70:	d9801e04 	addi	r6,sp,120
  80be74:	b80b883a 	mov	r5,r23
  80be78:	0810a540 	call	810a54 <__sprint_r>
  80be7c:	103b8c1e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80be80:	d8c02017 	ldw	r3,128(sp)
  80be84:	dc401f17 	ldw	r17,124(sp)
  80be88:	dd800404 	addi	r22,sp,16
  80be8c:	003eb506 	br	80b964 <__alt_mem_onchip_mem+0xff803964>
  80be90:	d9002c17 	ldw	r4,176(sp)
  80be94:	d9801e04 	addi	r6,sp,120
  80be98:	b80b883a 	mov	r5,r23
  80be9c:	0810a540 	call	810a54 <__sprint_r>
  80bea0:	103b831e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80bea4:	d8c02017 	ldw	r3,128(sp)
  80bea8:	dc401f17 	ldw	r17,124(sp)
  80beac:	da000404 	addi	r8,sp,16
  80beb0:	003e8d06 	br	80b8e8 <__alt_mem_onchip_mem+0xff8038e8>
  80beb4:	d9002c17 	ldw	r4,176(sp)
  80beb8:	d9801e04 	addi	r6,sp,120
  80bebc:	b80b883a 	mov	r5,r23
  80bec0:	0810a540 	call	810a54 <__sprint_r>
  80bec4:	103b7a1e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80bec8:	d8c02017 	ldw	r3,128(sp)
  80becc:	dc401f17 	ldw	r17,124(sp)
  80bed0:	dd800404 	addi	r22,sp,16
  80bed4:	003e8f06 	br	80b914 <__alt_mem_onchip_mem+0xff803914>
  80bed8:	0027883a 	mov	r19,zero
  80bedc:	003f4a06 	br	80bc08 <__alt_mem_onchip_mem+0xff803c08>
  80bee0:	d9002c17 	ldw	r4,176(sp)
  80bee4:	d9801e04 	addi	r6,sp,120
  80bee8:	b80b883a 	mov	r5,r23
  80beec:	0810a540 	call	810a54 <__sprint_r>
  80bef0:	103b6f1e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80bef4:	d8c02017 	ldw	r3,128(sp)
  80bef8:	da000404 	addi	r8,sp,16
  80befc:	003c9d06 	br	80b174 <__alt_mem_onchip_mem+0xff803174>
  80bf00:	04e7c83a 	sub	r19,zero,r19
  80bf04:	9804c03a 	cmpne	r2,r19,zero
  80bf08:	05adc83a 	sub	r22,zero,r22
  80bf0c:	b0adc83a 	sub	r22,r22,r2
  80bf10:	d8802917 	ldw	r2,164(sp)
  80bf14:	07000b44 	movi	fp,45
  80bf18:	df002785 	stb	fp,158(sp)
  80bf1c:	10017b16 	blt	r2,zero,80c50c <___vfprintf_internal_r+0x1c64>
  80bf20:	00bfdfc4 	movi	r2,-129
  80bf24:	90a4703a 	and	r18,r18,r2
  80bf28:	003bb106 	br	80adf0 <__alt_mem_onchip_mem+0xff802df0>
  80bf2c:	d9003617 	ldw	r4,216(sp)
  80bf30:	d9403817 	ldw	r5,224(sp)
  80bf34:	da003d15 	stw	r8,244(sp)
  80bf38:	08108080 	call	810808 <__fpclassifyd>
  80bf3c:	da003d17 	ldw	r8,244(sp)
  80bf40:	1000f026 	beq	r2,zero,80c304 <___vfprintf_internal_r+0x1a5c>
  80bf44:	d9002917 	ldw	r4,164(sp)
  80bf48:	05bff7c4 	movi	r22,-33
  80bf4c:	00bfffc4 	movi	r2,-1
  80bf50:	8dac703a 	and	r22,r17,r22
  80bf54:	20820026 	beq	r4,r2,80c758 <___vfprintf_internal_r+0x1eb0>
  80bf58:	008011c4 	movi	r2,71
  80bf5c:	b081f726 	beq	r22,r2,80c73c <___vfprintf_internal_r+0x1e94>
  80bf60:	d9003817 	ldw	r4,224(sp)
  80bf64:	90c04014 	ori	r3,r18,256
  80bf68:	d8c02b15 	stw	r3,172(sp)
  80bf6c:	20021516 	blt	r4,zero,80c7c4 <___vfprintf_internal_r+0x1f1c>
  80bf70:	dcc03817 	ldw	r19,224(sp)
  80bf74:	d8002a05 	stb	zero,168(sp)
  80bf78:	00801984 	movi	r2,102
  80bf7c:	8881f926 	beq	r17,r2,80c764 <___vfprintf_internal_r+0x1ebc>
  80bf80:	00801184 	movi	r2,70
  80bf84:	88821c26 	beq	r17,r2,80c7f8 <___vfprintf_internal_r+0x1f50>
  80bf88:	00801144 	movi	r2,69
  80bf8c:	b081ef26 	beq	r22,r2,80c74c <___vfprintf_internal_r+0x1ea4>
  80bf90:	d8c02917 	ldw	r3,164(sp)
  80bf94:	d8802104 	addi	r2,sp,132
  80bf98:	d8800315 	stw	r2,12(sp)
  80bf9c:	d9403617 	ldw	r5,216(sp)
  80bfa0:	d8802504 	addi	r2,sp,148
  80bfa4:	d9002c17 	ldw	r4,176(sp)
  80bfa8:	d8800215 	stw	r2,8(sp)
  80bfac:	d8802604 	addi	r2,sp,152
  80bfb0:	d8c00015 	stw	r3,0(sp)
  80bfb4:	d8800115 	stw	r2,4(sp)
  80bfb8:	01c00084 	movi	r7,2
  80bfbc:	980d883a 	mov	r6,r19
  80bfc0:	d8c03c15 	stw	r3,240(sp)
  80bfc4:	da003d15 	stw	r8,244(sp)
  80bfc8:	080cf800 	call	80cf80 <_dtoa_r>
  80bfcc:	1021883a 	mov	r16,r2
  80bfd0:	008019c4 	movi	r2,103
  80bfd4:	d8c03c17 	ldw	r3,240(sp)
  80bfd8:	da003d17 	ldw	r8,244(sp)
  80bfdc:	88817126 	beq	r17,r2,80c5a4 <___vfprintf_internal_r+0x1cfc>
  80bfe0:	008011c4 	movi	r2,71
  80bfe4:	88829226 	beq	r17,r2,80ca30 <___vfprintf_internal_r+0x2188>
  80bfe8:	80f9883a 	add	fp,r16,r3
  80bfec:	d9003617 	ldw	r4,216(sp)
  80bff0:	000d883a 	mov	r6,zero
  80bff4:	000f883a 	mov	r7,zero
  80bff8:	980b883a 	mov	r5,r19
  80bffc:	da003d15 	stw	r8,244(sp)
  80c000:	0812b940 	call	812b94 <__eqdf2>
  80c004:	da003d17 	ldw	r8,244(sp)
  80c008:	10018d26 	beq	r2,zero,80c640 <___vfprintf_internal_r+0x1d98>
  80c00c:	d8802117 	ldw	r2,132(sp)
  80c010:	1700062e 	bgeu	r2,fp,80c02c <___vfprintf_internal_r+0x1784>
  80c014:	01000c04 	movi	r4,48
  80c018:	10c00044 	addi	r3,r2,1
  80c01c:	d8c02115 	stw	r3,132(sp)
  80c020:	11000005 	stb	r4,0(r2)
  80c024:	d8802117 	ldw	r2,132(sp)
  80c028:	173ffb36 	bltu	r2,fp,80c018 <__alt_mem_onchip_mem+0xff804018>
  80c02c:	1405c83a 	sub	r2,r2,r16
  80c030:	d8803315 	stw	r2,204(sp)
  80c034:	008011c4 	movi	r2,71
  80c038:	b0817626 	beq	r22,r2,80c614 <___vfprintf_internal_r+0x1d6c>
  80c03c:	00801944 	movi	r2,101
  80c040:	1442810e 	bge	r2,r17,80ca48 <___vfprintf_internal_r+0x21a0>
  80c044:	d8c02617 	ldw	r3,152(sp)
  80c048:	00801984 	movi	r2,102
  80c04c:	d8c03215 	stw	r3,200(sp)
  80c050:	8881fe26 	beq	r17,r2,80c84c <___vfprintf_internal_r+0x1fa4>
  80c054:	d8c03217 	ldw	r3,200(sp)
  80c058:	d9003317 	ldw	r4,204(sp)
  80c05c:	1901dd16 	blt	r3,r4,80c7d4 <___vfprintf_internal_r+0x1f2c>
  80c060:	9480004c 	andi	r18,r18,1
  80c064:	90022b1e 	bne	r18,zero,80c914 <___vfprintf_internal_r+0x206c>
  80c068:	1805883a 	mov	r2,r3
  80c06c:	18028016 	blt	r3,zero,80ca70 <___vfprintf_internal_r+0x21c8>
  80c070:	d8c03217 	ldw	r3,200(sp)
  80c074:	044019c4 	movi	r17,103
  80c078:	d8c02e15 	stw	r3,184(sp)
  80c07c:	df002a07 	ldb	fp,168(sp)
  80c080:	e001531e 	bne	fp,zero,80c5d0 <___vfprintf_internal_r+0x1d28>
  80c084:	df002783 	ldbu	fp,158(sp)
  80c088:	d8802a15 	stw	r2,168(sp)
  80c08c:	dc802b17 	ldw	r18,172(sp)
  80c090:	d8002915 	stw	zero,164(sp)
  80c094:	003bd106 	br	80afdc <__alt_mem_onchip_mem+0xff802fdc>
  80c098:	d8802d17 	ldw	r2,180(sp)
  80c09c:	d8c02d17 	ldw	r3,180(sp)
  80c0a0:	d9002d17 	ldw	r4,180(sp)
  80c0a4:	10800017 	ldw	r2,0(r2)
  80c0a8:	18c00117 	ldw	r3,4(r3)
  80c0ac:	21000204 	addi	r4,r4,8
  80c0b0:	d8803615 	stw	r2,216(sp)
  80c0b4:	d8c03815 	stw	r3,224(sp)
  80c0b8:	d9002d15 	stw	r4,180(sp)
  80c0bc:	003b7506 	br	80ae94 <__alt_mem_onchip_mem+0xff802e94>
  80c0c0:	ac400007 	ldb	r17,0(r21)
  80c0c4:	003a5906 	br	80aa2c <__alt_mem_onchip_mem+0xff802a2c>
  80c0c8:	9080100c 	andi	r2,r18,64
  80c0cc:	1000a826 	beq	r2,zero,80c370 <___vfprintf_internal_r+0x1ac8>
  80c0d0:	d9002d17 	ldw	r4,180(sp)
  80c0d4:	002d883a 	mov	r22,zero
  80c0d8:	24c0000b 	ldhu	r19,0(r4)
  80c0dc:	21000104 	addi	r4,r4,4
  80c0e0:	d9002d15 	stw	r4,180(sp)
  80c0e4:	003ccb06 	br	80b414 <__alt_mem_onchip_mem+0xff803414>
  80c0e8:	d8c02d17 	ldw	r3,180(sp)
  80c0ec:	d9002917 	ldw	r4,164(sp)
  80c0f0:	002d883a 	mov	r22,zero
  80c0f4:	18800104 	addi	r2,r3,4
  80c0f8:	1cc00017 	ldw	r19,0(r3)
  80c0fc:	203ebb0e 	bge	r4,zero,80bbec <__alt_mem_onchip_mem+0xff803bec>
  80c100:	003ef106 	br	80bcc8 <__alt_mem_onchip_mem+0xff803cc8>
  80c104:	9080040c 	andi	r2,r18,16
  80c108:	1000921e 	bne	r2,zero,80c354 <___vfprintf_internal_r+0x1aac>
  80c10c:	9480100c 	andi	r18,r18,64
  80c110:	90013926 	beq	r18,zero,80c5f8 <___vfprintf_internal_r+0x1d50>
  80c114:	d9002d17 	ldw	r4,180(sp)
  80c118:	d9402f17 	ldw	r5,188(sp)
  80c11c:	20800017 	ldw	r2,0(r4)
  80c120:	21000104 	addi	r4,r4,4
  80c124:	d9002d15 	stw	r4,180(sp)
  80c128:	1140000d 	sth	r5,0(r2)
  80c12c:	003a1606 	br	80a988 <__alt_mem_onchip_mem+0xff802988>
  80c130:	9080100c 	andi	r2,r18,64
  80c134:	10008026 	beq	r2,zero,80c338 <___vfprintf_internal_r+0x1a90>
  80c138:	d8c02d17 	ldw	r3,180(sp)
  80c13c:	1cc0000f 	ldh	r19,0(r3)
  80c140:	18c00104 	addi	r3,r3,4
  80c144:	d8c02d15 	stw	r3,180(sp)
  80c148:	982dd7fa 	srai	r22,r19,31
  80c14c:	b005883a 	mov	r2,r22
  80c150:	003b1f06 	br	80add0 <__alt_mem_onchip_mem+0xff802dd0>
  80c154:	9080100c 	andi	r2,r18,64
  80c158:	d8002785 	stb	zero,158(sp)
  80c15c:	10008a1e 	bne	r2,zero,80c388 <___vfprintf_internal_r+0x1ae0>
  80c160:	d9402d17 	ldw	r5,180(sp)
  80c164:	d8c02917 	ldw	r3,164(sp)
  80c168:	002d883a 	mov	r22,zero
  80c16c:	28800104 	addi	r2,r5,4
  80c170:	2cc00017 	ldw	r19,0(r5)
  80c174:	183e4b0e 	bge	r3,zero,80baa4 <__alt_mem_onchip_mem+0xff803aa4>
  80c178:	9d86b03a 	or	r3,r19,r22
  80c17c:	d8802d15 	stw	r2,180(sp)
  80c180:	183e4c1e 	bne	r3,zero,80bab4 <__alt_mem_onchip_mem+0xff803ab4>
  80c184:	0039883a 	mov	fp,zero
  80c188:	0005883a 	mov	r2,zero
  80c18c:	003d4006 	br	80b690 <__alt_mem_onchip_mem+0xff803690>
  80c190:	01402074 	movhi	r5,129
  80c194:	295c8084 	addi	r5,r5,29186
  80c198:	d9402b15 	stw	r5,172(sp)
  80c19c:	d9402b17 	ldw	r5,172(sp)
  80c1a0:	1c47883a 	add	r3,r3,r17
  80c1a4:	10800044 	addi	r2,r2,1
  80c1a8:	41400015 	stw	r5,0(r8)
  80c1ac:	44400115 	stw	r17,4(r8)
  80c1b0:	d8c02015 	stw	r3,128(sp)
  80c1b4:	d8801f15 	stw	r2,124(sp)
  80c1b8:	010001c4 	movi	r4,7
  80c1bc:	20bec816 	blt	r4,r2,80bce0 <__alt_mem_onchip_mem+0xff803ce0>
  80c1c0:	42000204 	addi	r8,r8,8
  80c1c4:	003ecd06 	br	80bcfc <__alt_mem_onchip_mem+0xff803cfc>
  80c1c8:	d9002917 	ldw	r4,164(sp)
  80c1cc:	d8002785 	stb	zero,158(sp)
  80c1d0:	203d2d16 	blt	r4,zero,80b688 <__alt_mem_onchip_mem+0xff803688>
  80c1d4:	00bfdfc4 	movi	r2,-129
  80c1d8:	90a4703a 	and	r18,r18,r2
  80c1dc:	003a9106 	br	80ac24 <__alt_mem_onchip_mem+0xff802c24>
  80c1e0:	01002074 	movhi	r4,129
  80c1e4:	211c8084 	addi	r4,r4,29186
  80c1e8:	d9002b15 	stw	r4,172(sp)
  80c1ec:	003c0c06 	br	80b220 <__alt_mem_onchip_mem+0xff803220>
  80c1f0:	d9002c17 	ldw	r4,176(sp)
  80c1f4:	d9801e04 	addi	r6,sp,120
  80c1f8:	b80b883a 	mov	r5,r23
  80c1fc:	0810a540 	call	810a54 <__sprint_r>
  80c200:	103aab1e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80c204:	d8c02017 	ldw	r3,128(sp)
  80c208:	da000404 	addi	r8,sp,16
  80c20c:	003d4106 	br	80b714 <__alt_mem_onchip_mem+0xff803714>
  80c210:	d8801f17 	ldw	r2,124(sp)
  80c214:	01402074 	movhi	r5,129
  80c218:	01000044 	movi	r4,1
  80c21c:	18c00044 	addi	r3,r3,1
  80c220:	10800044 	addi	r2,r2,1
  80c224:	295c8004 	addi	r5,r5,29184
  80c228:	41000115 	stw	r4,4(r8)
  80c22c:	41400015 	stw	r5,0(r8)
  80c230:	d8c02015 	stw	r3,128(sp)
  80c234:	d8801f15 	stw	r2,124(sp)
  80c238:	010001c4 	movi	r4,7
  80c23c:	20805c16 	blt	r4,r2,80c3b0 <___vfprintf_internal_r+0x1b08>
  80c240:	42000204 	addi	r8,r8,8
  80c244:	8800041e 	bne	r17,zero,80c258 <___vfprintf_internal_r+0x19b0>
  80c248:	d8803317 	ldw	r2,204(sp)
  80c24c:	1000021e 	bne	r2,zero,80c258 <___vfprintf_internal_r+0x19b0>
  80c250:	9080004c 	andi	r2,r18,1
  80c254:	103c0926 	beq	r2,zero,80b27c <__alt_mem_onchip_mem+0xff80327c>
  80c258:	d9003717 	ldw	r4,220(sp)
  80c25c:	d8801f17 	ldw	r2,124(sp)
  80c260:	d9403417 	ldw	r5,208(sp)
  80c264:	20c7883a 	add	r3,r4,r3
  80c268:	10800044 	addi	r2,r2,1
  80c26c:	41000115 	stw	r4,4(r8)
  80c270:	41400015 	stw	r5,0(r8)
  80c274:	d8c02015 	stw	r3,128(sp)
  80c278:	d8801f15 	stw	r2,124(sp)
  80c27c:	010001c4 	movi	r4,7
  80c280:	20812116 	blt	r4,r2,80c708 <___vfprintf_internal_r+0x1e60>
  80c284:	42000204 	addi	r8,r8,8
  80c288:	0463c83a 	sub	r17,zero,r17
  80c28c:	0440730e 	bge	zero,r17,80c45c <___vfprintf_internal_r+0x1bb4>
  80c290:	05800404 	movi	r22,16
  80c294:	b440860e 	bge	r22,r17,80c4b0 <___vfprintf_internal_r+0x1c08>
  80c298:	01402074 	movhi	r5,129
  80c29c:	295c8084 	addi	r5,r5,29186
  80c2a0:	d9402b15 	stw	r5,172(sp)
  80c2a4:	070001c4 	movi	fp,7
  80c2a8:	dcc02c17 	ldw	r19,176(sp)
  80c2ac:	00000306 	br	80c2bc <___vfprintf_internal_r+0x1a14>
  80c2b0:	42000204 	addi	r8,r8,8
  80c2b4:	8c7ffc04 	addi	r17,r17,-16
  80c2b8:	b440800e 	bge	r22,r17,80c4bc <___vfprintf_internal_r+0x1c14>
  80c2bc:	18c00404 	addi	r3,r3,16
  80c2c0:	10800044 	addi	r2,r2,1
  80c2c4:	45000015 	stw	r20,0(r8)
  80c2c8:	45800115 	stw	r22,4(r8)
  80c2cc:	d8c02015 	stw	r3,128(sp)
  80c2d0:	d8801f15 	stw	r2,124(sp)
  80c2d4:	e0bff60e 	bge	fp,r2,80c2b0 <__alt_mem_onchip_mem+0xff8042b0>
  80c2d8:	d9801e04 	addi	r6,sp,120
  80c2dc:	b80b883a 	mov	r5,r23
  80c2e0:	9809883a 	mov	r4,r19
  80c2e4:	0810a540 	call	810a54 <__sprint_r>
  80c2e8:	103a711e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80c2ec:	d8c02017 	ldw	r3,128(sp)
  80c2f0:	d8801f17 	ldw	r2,124(sp)
  80c2f4:	da000404 	addi	r8,sp,16
  80c2f8:	003fee06 	br	80c2b4 <__alt_mem_onchip_mem+0xff8042b4>
  80c2fc:	00bfffc4 	movi	r2,-1
  80c300:	003a6f06 	br	80acc0 <__alt_mem_onchip_mem+0xff802cc0>
  80c304:	008011c4 	movi	r2,71
  80c308:	1440b816 	blt	r2,r17,80c5ec <___vfprintf_internal_r+0x1d44>
  80c30c:	04002074 	movhi	r16,129
  80c310:	841c7204 	addi	r16,r16,29128
  80c314:	00c000c4 	movi	r3,3
  80c318:	00bfdfc4 	movi	r2,-129
  80c31c:	d8c02a15 	stw	r3,168(sp)
  80c320:	90a4703a 	and	r18,r18,r2
  80c324:	df002783 	ldbu	fp,158(sp)
  80c328:	d8c02e15 	stw	r3,184(sp)
  80c32c:	d8002915 	stw	zero,164(sp)
  80c330:	d8003215 	stw	zero,200(sp)
  80c334:	003b2906 	br	80afdc <__alt_mem_onchip_mem+0xff802fdc>
  80c338:	d9002d17 	ldw	r4,180(sp)
  80c33c:	24c00017 	ldw	r19,0(r4)
  80c340:	21000104 	addi	r4,r4,4
  80c344:	d9002d15 	stw	r4,180(sp)
  80c348:	982dd7fa 	srai	r22,r19,31
  80c34c:	b005883a 	mov	r2,r22
  80c350:	003a9f06 	br	80add0 <__alt_mem_onchip_mem+0xff802dd0>
  80c354:	d9402d17 	ldw	r5,180(sp)
  80c358:	d8c02f17 	ldw	r3,188(sp)
  80c35c:	28800017 	ldw	r2,0(r5)
  80c360:	29400104 	addi	r5,r5,4
  80c364:	d9402d15 	stw	r5,180(sp)
  80c368:	10c00015 	stw	r3,0(r2)
  80c36c:	00398606 	br	80a988 <__alt_mem_onchip_mem+0xff802988>
  80c370:	d9402d17 	ldw	r5,180(sp)
  80c374:	002d883a 	mov	r22,zero
  80c378:	2cc00017 	ldw	r19,0(r5)
  80c37c:	29400104 	addi	r5,r5,4
  80c380:	d9402d15 	stw	r5,180(sp)
  80c384:	003c2306 	br	80b414 <__alt_mem_onchip_mem+0xff803414>
  80c388:	d8c02d17 	ldw	r3,180(sp)
  80c38c:	d9002917 	ldw	r4,164(sp)
  80c390:	002d883a 	mov	r22,zero
  80c394:	18800104 	addi	r2,r3,4
  80c398:	1cc0000b 	ldhu	r19,0(r3)
  80c39c:	203dc10e 	bge	r4,zero,80baa4 <__alt_mem_onchip_mem+0xff803aa4>
  80c3a0:	003f7506 	br	80c178 <__alt_mem_onchip_mem+0xff804178>
  80c3a4:	04002074 	movhi	r16,129
  80c3a8:	841c7004 	addi	r16,r16,29120
  80c3ac:	003acc06 	br	80aee0 <__alt_mem_onchip_mem+0xff802ee0>
  80c3b0:	d9002c17 	ldw	r4,176(sp)
  80c3b4:	d9801e04 	addi	r6,sp,120
  80c3b8:	b80b883a 	mov	r5,r23
  80c3bc:	0810a540 	call	810a54 <__sprint_r>
  80c3c0:	103a3b1e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80c3c4:	dc402617 	ldw	r17,152(sp)
  80c3c8:	d8c02017 	ldw	r3,128(sp)
  80c3cc:	da000404 	addi	r8,sp,16
  80c3d0:	003f9c06 	br	80c244 <__alt_mem_onchip_mem+0xff804244>
  80c3d4:	ac400043 	ldbu	r17,1(r21)
  80c3d8:	94800814 	ori	r18,r18,32
  80c3dc:	ad400044 	addi	r21,r21,1
  80c3e0:	8c403fcc 	andi	r17,r17,255
  80c3e4:	8c40201c 	xori	r17,r17,128
  80c3e8:	8c7fe004 	addi	r17,r17,-128
  80c3ec:	00398f06 	br	80aa2c <__alt_mem_onchip_mem+0xff802a2c>
  80c3f0:	d8c02d15 	stw	r3,180(sp)
  80c3f4:	0039883a 	mov	fp,zero
  80c3f8:	003e3506 	br	80bcd0 <__alt_mem_onchip_mem+0xff803cd0>
  80c3fc:	d9002c17 	ldw	r4,176(sp)
  80c400:	d9801e04 	addi	r6,sp,120
  80c404:	b80b883a 	mov	r5,r23
  80c408:	0810a540 	call	810a54 <__sprint_r>
  80c40c:	103a281e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80c410:	d8c02017 	ldw	r3,128(sp)
  80c414:	da000404 	addi	r8,sp,16
  80c418:	003cd006 	br	80b75c <__alt_mem_onchip_mem+0xff80375c>
  80c41c:	8009883a 	mov	r4,r16
  80c420:	da003d15 	stw	r8,244(sp)
  80c424:	080a8100 	call	80a810 <strlen>
  80c428:	d8802e15 	stw	r2,184(sp)
  80c42c:	da003d17 	ldw	r8,244(sp)
  80c430:	103c340e 	bge	r2,zero,80b504 <__alt_mem_onchip_mem+0xff803504>
  80c434:	0005883a 	mov	r2,zero
  80c438:	003c3206 	br	80b504 <__alt_mem_onchip_mem+0xff803504>
  80c43c:	d9002c17 	ldw	r4,176(sp)
  80c440:	d9801e04 	addi	r6,sp,120
  80c444:	b80b883a 	mov	r5,r23
  80c448:	0810a540 	call	810a54 <__sprint_r>
  80c44c:	103a181e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80c450:	d8c02017 	ldw	r3,128(sp)
  80c454:	d8801f17 	ldw	r2,124(sp)
  80c458:	da000404 	addi	r8,sp,16
  80c45c:	d9403317 	ldw	r5,204(sp)
  80c460:	10800044 	addi	r2,r2,1
  80c464:	44000015 	stw	r16,0(r8)
  80c468:	28c7883a 	add	r3,r5,r3
  80c46c:	003b7d06 	br	80b264 <__alt_mem_onchip_mem+0xff803264>
  80c470:	01002074 	movhi	r4,129
  80c474:	211c8484 	addi	r4,r4,29202
  80c478:	d9003515 	stw	r4,212(sp)
  80c47c:	003b1406 	br	80b0d0 <__alt_mem_onchip_mem+0xff8030d0>
  80c480:	013fffc4 	movi	r4,-1
  80c484:	003a3506 	br	80ad5c <__alt_mem_onchip_mem+0xff802d5c>
  80c488:	0023883a 	mov	r17,zero
  80c48c:	003d9d06 	br	80bb04 <__alt_mem_onchip_mem+0xff803b04>
  80c490:	d9002c17 	ldw	r4,176(sp)
  80c494:	d9801e04 	addi	r6,sp,120
  80c498:	b80b883a 	mov	r5,r23
  80c49c:	0810a540 	call	810a54 <__sprint_r>
  80c4a0:	103a031e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80c4a4:	d8c02017 	ldw	r3,128(sp)
  80c4a8:	da000404 	addi	r8,sp,16
  80c4ac:	003d9406 	br	80bb00 <__alt_mem_onchip_mem+0xff803b00>
  80c4b0:	01002074 	movhi	r4,129
  80c4b4:	211c8084 	addi	r4,r4,29186
  80c4b8:	d9002b15 	stw	r4,172(sp)
  80c4bc:	d9002b17 	ldw	r4,172(sp)
  80c4c0:	1c47883a 	add	r3,r3,r17
  80c4c4:	10800044 	addi	r2,r2,1
  80c4c8:	41000015 	stw	r4,0(r8)
  80c4cc:	44400115 	stw	r17,4(r8)
  80c4d0:	d8c02015 	stw	r3,128(sp)
  80c4d4:	d8801f15 	stw	r2,124(sp)
  80c4d8:	010001c4 	movi	r4,7
  80c4dc:	20bfd716 	blt	r4,r2,80c43c <__alt_mem_onchip_mem+0xff80443c>
  80c4e0:	42000204 	addi	r8,r8,8
  80c4e4:	003fdd06 	br	80c45c <__alt_mem_onchip_mem+0xff80445c>
  80c4e8:	d9002c17 	ldw	r4,176(sp)
  80c4ec:	d9801e04 	addi	r6,sp,120
  80c4f0:	b80b883a 	mov	r5,r23
  80c4f4:	0810a540 	call	810a54 <__sprint_r>
  80c4f8:	1039ed1e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80c4fc:	d8802617 	ldw	r2,152(sp)
  80c500:	d8c02017 	ldw	r3,128(sp)
  80c504:	da000404 	addi	r8,sp,16
  80c508:	003e1006 	br	80bd4c <__alt_mem_onchip_mem+0xff803d4c>
  80c50c:	00800044 	movi	r2,1
  80c510:	10803fcc 	andi	r2,r2,255
  80c514:	00c00044 	movi	r3,1
  80c518:	10fa3526 	beq	r2,r3,80adf0 <__alt_mem_onchip_mem+0xff802df0>
  80c51c:	00c00084 	movi	r3,2
  80c520:	10fbcb26 	beq	r2,r3,80b450 <__alt_mem_onchip_mem+0xff803450>
  80c524:	003a8f06 	br	80af64 <__alt_mem_onchip_mem+0xff802f64>
  80c528:	01002074 	movhi	r4,129
  80c52c:	211c8484 	addi	r4,r4,29202
  80c530:	d9003515 	stw	r4,212(sp)
  80c534:	003b7606 	br	80b310 <__alt_mem_onchip_mem+0xff803310>
  80c538:	d8802917 	ldw	r2,164(sp)
  80c53c:	00c00184 	movi	r3,6
  80c540:	1880012e 	bgeu	r3,r2,80c548 <___vfprintf_internal_r+0x1ca0>
  80c544:	1805883a 	mov	r2,r3
  80c548:	d8802e15 	stw	r2,184(sp)
  80c54c:	1000ef16 	blt	r2,zero,80c90c <___vfprintf_internal_r+0x2064>
  80c550:	04002074 	movhi	r16,129
  80c554:	d8802a15 	stw	r2,168(sp)
  80c558:	dcc02d15 	stw	r19,180(sp)
  80c55c:	d8002915 	stw	zero,164(sp)
  80c560:	d8003215 	stw	zero,200(sp)
  80c564:	841c7e04 	addi	r16,r16,29176
  80c568:	0039883a 	mov	fp,zero
  80c56c:	003aa206 	br	80aff8 <__alt_mem_onchip_mem+0xff802ff8>
  80c570:	0021883a 	mov	r16,zero
  80c574:	003e0706 	br	80bd94 <__alt_mem_onchip_mem+0xff803d94>
  80c578:	d9002c17 	ldw	r4,176(sp)
  80c57c:	d9801e04 	addi	r6,sp,120
  80c580:	b80b883a 	mov	r5,r23
  80c584:	0810a540 	call	810a54 <__sprint_r>
  80c588:	1039c91e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80c58c:	d8802617 	ldw	r2,152(sp)
  80c590:	d9403317 	ldw	r5,204(sp)
  80c594:	d8c02017 	ldw	r3,128(sp)
  80c598:	da000404 	addi	r8,sp,16
  80c59c:	2885c83a 	sub	r2,r5,r2
  80c5a0:	003dfb06 	br	80bd90 <__alt_mem_onchip_mem+0xff803d90>
  80c5a4:	9080004c 	andi	r2,r18,1
  80c5a8:	103e8f1e 	bne	r2,zero,80bfe8 <__alt_mem_onchip_mem+0xff803fe8>
  80c5ac:	d8802117 	ldw	r2,132(sp)
  80c5b0:	003e9e06 	br	80c02c <__alt_mem_onchip_mem+0xff80402c>
  80c5b4:	1025883a 	mov	r18,r2
  80c5b8:	0039883a 	mov	fp,zero
  80c5bc:	00800084 	movi	r2,2
  80c5c0:	003fd306 	br	80c510 <__alt_mem_onchip_mem+0xff804510>
  80c5c4:	07000b44 	movi	fp,45
  80c5c8:	df002785 	stb	fp,158(sp)
  80c5cc:	003a4006 	br	80aed0 <__alt_mem_onchip_mem+0xff802ed0>
  80c5d0:	00c00b44 	movi	r3,45
  80c5d4:	d8c02785 	stb	r3,158(sp)
  80c5d8:	d8802a15 	stw	r2,168(sp)
  80c5dc:	dc802b17 	ldw	r18,172(sp)
  80c5e0:	d8002915 	stw	zero,164(sp)
  80c5e4:	07000b44 	movi	fp,45
  80c5e8:	003a8006 	br	80afec <__alt_mem_onchip_mem+0xff802fec>
  80c5ec:	04002074 	movhi	r16,129
  80c5f0:	841c7304 	addi	r16,r16,29132
  80c5f4:	003f4706 	br	80c314 <__alt_mem_onchip_mem+0xff804314>
  80c5f8:	d8c02d17 	ldw	r3,180(sp)
  80c5fc:	d9002f17 	ldw	r4,188(sp)
  80c600:	18800017 	ldw	r2,0(r3)
  80c604:	18c00104 	addi	r3,r3,4
  80c608:	d8c02d15 	stw	r3,180(sp)
  80c60c:	11000015 	stw	r4,0(r2)
  80c610:	0038dd06 	br	80a988 <__alt_mem_onchip_mem+0xff802988>
  80c614:	dd802617 	ldw	r22,152(sp)
  80c618:	00bfff44 	movi	r2,-3
  80c61c:	b0801c16 	blt	r22,r2,80c690 <___vfprintf_internal_r+0x1de8>
  80c620:	d9402917 	ldw	r5,164(sp)
  80c624:	2d801a16 	blt	r5,r22,80c690 <___vfprintf_internal_r+0x1de8>
  80c628:	dd803215 	stw	r22,200(sp)
  80c62c:	003e8906 	br	80c054 <__alt_mem_onchip_mem+0xff804054>
  80c630:	01002074 	movhi	r4,129
  80c634:	211c8084 	addi	r4,r4,29186
  80c638:	d9002b15 	stw	r4,172(sp)
  80c63c:	003c9106 	br	80b884 <__alt_mem_onchip_mem+0xff803884>
  80c640:	e005883a 	mov	r2,fp
  80c644:	003e7906 	br	80c02c <__alt_mem_onchip_mem+0xff80402c>
  80c648:	d9402917 	ldw	r5,164(sp)
  80c64c:	df002783 	ldbu	fp,158(sp)
  80c650:	dcc02d15 	stw	r19,180(sp)
  80c654:	d9402a15 	stw	r5,168(sp)
  80c658:	d9402e15 	stw	r5,184(sp)
  80c65c:	d8002915 	stw	zero,164(sp)
  80c660:	d8003215 	stw	zero,200(sp)
  80c664:	003a5d06 	br	80afdc <__alt_mem_onchip_mem+0xff802fdc>
  80c668:	9080004c 	andi	r2,r18,1
  80c66c:	0039883a 	mov	fp,zero
  80c670:	10000426 	beq	r2,zero,80c684 <___vfprintf_internal_r+0x1ddc>
  80c674:	00800c04 	movi	r2,48
  80c678:	dc001dc4 	addi	r16,sp,119
  80c67c:	d8801dc5 	stb	r2,119(sp)
  80c680:	003b8006 	br	80b484 <__alt_mem_onchip_mem+0xff803484>
  80c684:	d8002e15 	stw	zero,184(sp)
  80c688:	dc001e04 	addi	r16,sp,120
  80c68c:	003a4d06 	br	80afc4 <__alt_mem_onchip_mem+0xff802fc4>
  80c690:	8c7fff84 	addi	r17,r17,-2
  80c694:	b5bfffc4 	addi	r22,r22,-1
  80c698:	dd802615 	stw	r22,152(sp)
  80c69c:	dc4022c5 	stb	r17,139(sp)
  80c6a0:	b000bf16 	blt	r22,zero,80c9a0 <___vfprintf_internal_r+0x20f8>
  80c6a4:	00800ac4 	movi	r2,43
  80c6a8:	d8802305 	stb	r2,140(sp)
  80c6ac:	00800244 	movi	r2,9
  80c6b0:	15807016 	blt	r2,r22,80c874 <___vfprintf_internal_r+0x1fcc>
  80c6b4:	00800c04 	movi	r2,48
  80c6b8:	b5800c04 	addi	r22,r22,48
  80c6bc:	d8802345 	stb	r2,141(sp)
  80c6c0:	dd802385 	stb	r22,142(sp)
  80c6c4:	d88023c4 	addi	r2,sp,143
  80c6c8:	df0022c4 	addi	fp,sp,139
  80c6cc:	d8c03317 	ldw	r3,204(sp)
  80c6d0:	1739c83a 	sub	fp,r2,fp
  80c6d4:	d9003317 	ldw	r4,204(sp)
  80c6d8:	e0c7883a 	add	r3,fp,r3
  80c6dc:	df003a15 	stw	fp,232(sp)
  80c6e0:	d8c02e15 	stw	r3,184(sp)
  80c6e4:	00800044 	movi	r2,1
  80c6e8:	1100b30e 	bge	r2,r4,80c9b8 <___vfprintf_internal_r+0x2110>
  80c6ec:	d8c02e17 	ldw	r3,184(sp)
  80c6f0:	18c00044 	addi	r3,r3,1
  80c6f4:	d8c02e15 	stw	r3,184(sp)
  80c6f8:	1805883a 	mov	r2,r3
  80c6fc:	1800ac16 	blt	r3,zero,80c9b0 <___vfprintf_internal_r+0x2108>
  80c700:	d8003215 	stw	zero,200(sp)
  80c704:	003e5d06 	br	80c07c <__alt_mem_onchip_mem+0xff80407c>
  80c708:	d9002c17 	ldw	r4,176(sp)
  80c70c:	d9801e04 	addi	r6,sp,120
  80c710:	b80b883a 	mov	r5,r23
  80c714:	0810a540 	call	810a54 <__sprint_r>
  80c718:	1039651e 	bne	r2,zero,80acb0 <__alt_mem_onchip_mem+0xff802cb0>
  80c71c:	dc402617 	ldw	r17,152(sp)
  80c720:	d8c02017 	ldw	r3,128(sp)
  80c724:	d8801f17 	ldw	r2,124(sp)
  80c728:	da000404 	addi	r8,sp,16
  80c72c:	003ed606 	br	80c288 <__alt_mem_onchip_mem+0xff804288>
  80c730:	582b883a 	mov	r21,r11
  80c734:	d8002915 	stw	zero,164(sp)
  80c738:	0038bd06 	br	80aa30 <__alt_mem_onchip_mem+0xff802a30>
  80c73c:	d8802917 	ldw	r2,164(sp)
  80c740:	103e071e 	bne	r2,zero,80bf60 <__alt_mem_onchip_mem+0xff803f60>
  80c744:	dc002915 	stw	r16,164(sp)
  80c748:	003e0506 	br	80bf60 <__alt_mem_onchip_mem+0xff803f60>
  80c74c:	d9002917 	ldw	r4,164(sp)
  80c750:	20c00044 	addi	r3,r4,1
  80c754:	003e0f06 	br	80bf94 <__alt_mem_onchip_mem+0xff803f94>
  80c758:	01400184 	movi	r5,6
  80c75c:	d9402915 	stw	r5,164(sp)
  80c760:	003dff06 	br	80bf60 <__alt_mem_onchip_mem+0xff803f60>
  80c764:	d8802104 	addi	r2,sp,132
  80c768:	d8800315 	stw	r2,12(sp)
  80c76c:	d8802504 	addi	r2,sp,148
  80c770:	d8800215 	stw	r2,8(sp)
  80c774:	d8802604 	addi	r2,sp,152
  80c778:	d8800115 	stw	r2,4(sp)
  80c77c:	d8802917 	ldw	r2,164(sp)
  80c780:	d9403617 	ldw	r5,216(sp)
  80c784:	d9002c17 	ldw	r4,176(sp)
  80c788:	d8800015 	stw	r2,0(sp)
  80c78c:	01c000c4 	movi	r7,3
  80c790:	980d883a 	mov	r6,r19
  80c794:	da003d15 	stw	r8,244(sp)
  80c798:	080cf800 	call	80cf80 <_dtoa_r>
  80c79c:	d8c02917 	ldw	r3,164(sp)
  80c7a0:	da003d17 	ldw	r8,244(sp)
  80c7a4:	1021883a 	mov	r16,r2
  80c7a8:	10f9883a 	add	fp,r2,r3
  80c7ac:	81000007 	ldb	r4,0(r16)
  80c7b0:	00800c04 	movi	r2,48
  80c7b4:	20805e26 	beq	r4,r2,80c930 <___vfprintf_internal_r+0x2088>
  80c7b8:	d8c02617 	ldw	r3,152(sp)
  80c7bc:	e0f9883a 	add	fp,fp,r3
  80c7c0:	003e0a06 	br	80bfec <__alt_mem_onchip_mem+0xff803fec>
  80c7c4:	00c00b44 	movi	r3,45
  80c7c8:	24e0003c 	xorhi	r19,r4,32768
  80c7cc:	d8c02a05 	stb	r3,168(sp)
  80c7d0:	003de906 	br	80bf78 <__alt_mem_onchip_mem+0xff803f78>
  80c7d4:	d8c03217 	ldw	r3,200(sp)
  80c7d8:	00c07a0e 	bge	zero,r3,80c9c4 <___vfprintf_internal_r+0x211c>
  80c7dc:	00800044 	movi	r2,1
  80c7e0:	d9003317 	ldw	r4,204(sp)
  80c7e4:	1105883a 	add	r2,r2,r4
  80c7e8:	d8802e15 	stw	r2,184(sp)
  80c7ec:	10004e16 	blt	r2,zero,80c928 <___vfprintf_internal_r+0x2080>
  80c7f0:	044019c4 	movi	r17,103
  80c7f4:	003e2106 	br	80c07c <__alt_mem_onchip_mem+0xff80407c>
  80c7f8:	d9002917 	ldw	r4,164(sp)
  80c7fc:	d8802104 	addi	r2,sp,132
  80c800:	d8800315 	stw	r2,12(sp)
  80c804:	d9000015 	stw	r4,0(sp)
  80c808:	d8802504 	addi	r2,sp,148
  80c80c:	d9403617 	ldw	r5,216(sp)
  80c810:	d9002c17 	ldw	r4,176(sp)
  80c814:	d8800215 	stw	r2,8(sp)
  80c818:	d8802604 	addi	r2,sp,152
  80c81c:	d8800115 	stw	r2,4(sp)
  80c820:	01c000c4 	movi	r7,3
  80c824:	980d883a 	mov	r6,r19
  80c828:	da003d15 	stw	r8,244(sp)
  80c82c:	080cf800 	call	80cf80 <_dtoa_r>
  80c830:	d8c02917 	ldw	r3,164(sp)
  80c834:	da003d17 	ldw	r8,244(sp)
  80c838:	1021883a 	mov	r16,r2
  80c83c:	00801184 	movi	r2,70
  80c840:	80f9883a 	add	fp,r16,r3
  80c844:	88bfd926 	beq	r17,r2,80c7ac <__alt_mem_onchip_mem+0xff8047ac>
  80c848:	003de806 	br	80bfec <__alt_mem_onchip_mem+0xff803fec>
  80c84c:	d9002917 	ldw	r4,164(sp)
  80c850:	00c04d0e 	bge	zero,r3,80c988 <___vfprintf_internal_r+0x20e0>
  80c854:	2000441e 	bne	r4,zero,80c968 <___vfprintf_internal_r+0x20c0>
  80c858:	9480004c 	andi	r18,r18,1
  80c85c:	9000421e 	bne	r18,zero,80c968 <___vfprintf_internal_r+0x20c0>
  80c860:	1805883a 	mov	r2,r3
  80c864:	18007016 	blt	r3,zero,80ca28 <___vfprintf_internal_r+0x2180>
  80c868:	d8c03217 	ldw	r3,200(sp)
  80c86c:	d8c02e15 	stw	r3,184(sp)
  80c870:	003e0206 	br	80c07c <__alt_mem_onchip_mem+0xff80407c>
  80c874:	df0022c4 	addi	fp,sp,139
  80c878:	dc002915 	stw	r16,164(sp)
  80c87c:	4027883a 	mov	r19,r8
  80c880:	e021883a 	mov	r16,fp
  80c884:	b009883a 	mov	r4,r22
  80c888:	01400284 	movi	r5,10
  80c88c:	08069780 	call	806978 <__modsi3>
  80c890:	10800c04 	addi	r2,r2,48
  80c894:	843fffc4 	addi	r16,r16,-1
  80c898:	b009883a 	mov	r4,r22
  80c89c:	01400284 	movi	r5,10
  80c8a0:	80800005 	stb	r2,0(r16)
  80c8a4:	08068f40 	call	8068f4 <__divsi3>
  80c8a8:	102d883a 	mov	r22,r2
  80c8ac:	00800244 	movi	r2,9
  80c8b0:	15bff416 	blt	r2,r22,80c884 <__alt_mem_onchip_mem+0xff804884>
  80c8b4:	9811883a 	mov	r8,r19
  80c8b8:	b0800c04 	addi	r2,r22,48
  80c8bc:	8027883a 	mov	r19,r16
  80c8c0:	997fffc4 	addi	r5,r19,-1
  80c8c4:	98bfffc5 	stb	r2,-1(r19)
  80c8c8:	dc002917 	ldw	r16,164(sp)
  80c8cc:	2f006a2e 	bgeu	r5,fp,80ca78 <___vfprintf_internal_r+0x21d0>
  80c8d0:	d9c02384 	addi	r7,sp,142
  80c8d4:	3ccfc83a 	sub	r7,r7,r19
  80c8d8:	d9002344 	addi	r4,sp,141
  80c8dc:	e1cf883a 	add	r7,fp,r7
  80c8e0:	00000106 	br	80c8e8 <___vfprintf_internal_r+0x2040>
  80c8e4:	28800003 	ldbu	r2,0(r5)
  80c8e8:	20800005 	stb	r2,0(r4)
  80c8ec:	21000044 	addi	r4,r4,1
  80c8f0:	29400044 	addi	r5,r5,1
  80c8f4:	393ffb1e 	bne	r7,r4,80c8e4 <__alt_mem_onchip_mem+0xff8048e4>
  80c8f8:	d8802304 	addi	r2,sp,140
  80c8fc:	14c5c83a 	sub	r2,r2,r19
  80c900:	d8c02344 	addi	r3,sp,141
  80c904:	1885883a 	add	r2,r3,r2
  80c908:	003f7006 	br	80c6cc <__alt_mem_onchip_mem+0xff8046cc>
  80c90c:	0005883a 	mov	r2,zero
  80c910:	003f0f06 	br	80c550 <__alt_mem_onchip_mem+0xff804550>
  80c914:	d8c03217 	ldw	r3,200(sp)
  80c918:	18c00044 	addi	r3,r3,1
  80c91c:	d8c02e15 	stw	r3,184(sp)
  80c920:	1805883a 	mov	r2,r3
  80c924:	183fb20e 	bge	r3,zero,80c7f0 <__alt_mem_onchip_mem+0xff8047f0>
  80c928:	0005883a 	mov	r2,zero
  80c92c:	003fb006 	br	80c7f0 <__alt_mem_onchip_mem+0xff8047f0>
  80c930:	d9003617 	ldw	r4,216(sp)
  80c934:	000d883a 	mov	r6,zero
  80c938:	000f883a 	mov	r7,zero
  80c93c:	980b883a 	mov	r5,r19
  80c940:	d8c03c15 	stw	r3,240(sp)
  80c944:	da003d15 	stw	r8,244(sp)
  80c948:	0812b940 	call	812b94 <__eqdf2>
  80c94c:	d8c03c17 	ldw	r3,240(sp)
  80c950:	da003d17 	ldw	r8,244(sp)
  80c954:	103f9826 	beq	r2,zero,80c7b8 <__alt_mem_onchip_mem+0xff8047b8>
  80c958:	00800044 	movi	r2,1
  80c95c:	10c7c83a 	sub	r3,r2,r3
  80c960:	d8c02615 	stw	r3,152(sp)
  80c964:	003f9506 	br	80c7bc <__alt_mem_onchip_mem+0xff8047bc>
  80c968:	d9002917 	ldw	r4,164(sp)
  80c96c:	d8c03217 	ldw	r3,200(sp)
  80c970:	20800044 	addi	r2,r4,1
  80c974:	1885883a 	add	r2,r3,r2
  80c978:	d8802e15 	stw	r2,184(sp)
  80c97c:	103dbf0e 	bge	r2,zero,80c07c <__alt_mem_onchip_mem+0xff80407c>
  80c980:	0005883a 	mov	r2,zero
  80c984:	003dbd06 	br	80c07c <__alt_mem_onchip_mem+0xff80407c>
  80c988:	2000211e 	bne	r4,zero,80ca10 <___vfprintf_internal_r+0x2168>
  80c98c:	9480004c 	andi	r18,r18,1
  80c990:	90001f1e 	bne	r18,zero,80ca10 <___vfprintf_internal_r+0x2168>
  80c994:	00800044 	movi	r2,1
  80c998:	d8802e15 	stw	r2,184(sp)
  80c99c:	003db706 	br	80c07c <__alt_mem_onchip_mem+0xff80407c>
  80c9a0:	00800b44 	movi	r2,45
  80c9a4:	05adc83a 	sub	r22,zero,r22
  80c9a8:	d8802305 	stb	r2,140(sp)
  80c9ac:	003f3f06 	br	80c6ac <__alt_mem_onchip_mem+0xff8046ac>
  80c9b0:	0005883a 	mov	r2,zero
  80c9b4:	003f5206 	br	80c700 <__alt_mem_onchip_mem+0xff804700>
  80c9b8:	90a4703a 	and	r18,r18,r2
  80c9bc:	903f4e26 	beq	r18,zero,80c6f8 <__alt_mem_onchip_mem+0xff8046f8>
  80c9c0:	003f4a06 	br	80c6ec <__alt_mem_onchip_mem+0xff8046ec>
  80c9c4:	00800084 	movi	r2,2
  80c9c8:	10c5c83a 	sub	r2,r2,r3
  80c9cc:	003f8406 	br	80c7e0 <__alt_mem_onchip_mem+0xff8047e0>
  80c9d0:	d8802d17 	ldw	r2,180(sp)
  80c9d4:	d9002d17 	ldw	r4,180(sp)
  80c9d8:	ac400043 	ldbu	r17,1(r21)
  80c9dc:	10800017 	ldw	r2,0(r2)
  80c9e0:	582b883a 	mov	r21,r11
  80c9e4:	d8802915 	stw	r2,164(sp)
  80c9e8:	20800104 	addi	r2,r4,4
  80c9ec:	d9002917 	ldw	r4,164(sp)
  80c9f0:	d8802d15 	stw	r2,180(sp)
  80c9f4:	203e7a0e 	bge	r4,zero,80c3e0 <__alt_mem_onchip_mem+0xff8043e0>
  80c9f8:	8c403fcc 	andi	r17,r17,255
  80c9fc:	00bfffc4 	movi	r2,-1
  80ca00:	8c40201c 	xori	r17,r17,128
  80ca04:	d8802915 	stw	r2,164(sp)
  80ca08:	8c7fe004 	addi	r17,r17,-128
  80ca0c:	00380706 	br	80aa2c <__alt_mem_onchip_mem+0xff802a2c>
  80ca10:	d8c02917 	ldw	r3,164(sp)
  80ca14:	18c00084 	addi	r3,r3,2
  80ca18:	d8c02e15 	stw	r3,184(sp)
  80ca1c:	1805883a 	mov	r2,r3
  80ca20:	183d960e 	bge	r3,zero,80c07c <__alt_mem_onchip_mem+0xff80407c>
  80ca24:	003fd606 	br	80c980 <__alt_mem_onchip_mem+0xff804980>
  80ca28:	0005883a 	mov	r2,zero
  80ca2c:	003f8e06 	br	80c868 <__alt_mem_onchip_mem+0xff804868>
  80ca30:	9080004c 	andi	r2,r18,1
  80ca34:	103f811e 	bne	r2,zero,80c83c <__alt_mem_onchip_mem+0xff80483c>
  80ca38:	d8802117 	ldw	r2,132(sp)
  80ca3c:	1405c83a 	sub	r2,r2,r16
  80ca40:	d8803315 	stw	r2,204(sp)
  80ca44:	b47ef326 	beq	r22,r17,80c614 <__alt_mem_onchip_mem+0xff804614>
  80ca48:	dd802617 	ldw	r22,152(sp)
  80ca4c:	003f1106 	br	80c694 <__alt_mem_onchip_mem+0xff804694>
  80ca50:	d9c02785 	stb	r7,158(sp)
  80ca54:	00390406 	br	80ae68 <__alt_mem_onchip_mem+0xff802e68>
  80ca58:	d9c02785 	stb	r7,158(sp)
  80ca5c:	0038d306 	br	80adac <__alt_mem_onchip_mem+0xff802dac>
  80ca60:	d9c02785 	stb	r7,158(sp)
  80ca64:	003a6106 	br	80b3ec <__alt_mem_onchip_mem+0xff8033ec>
  80ca68:	d9c02785 	stb	r7,158(sp)
  80ca6c:	003af806 	br	80b650 <__alt_mem_onchip_mem+0xff803650>
  80ca70:	0005883a 	mov	r2,zero
  80ca74:	003d7e06 	br	80c070 <__alt_mem_onchip_mem+0xff804070>
  80ca78:	d8802344 	addi	r2,sp,141
  80ca7c:	003f1306 	br	80c6cc <__alt_mem_onchip_mem+0xff8046cc>
  80ca80:	d9c02785 	stb	r7,158(sp)
  80ca84:	00392306 	br	80af14 <__alt_mem_onchip_mem+0xff802f14>
  80ca88:	d9c02785 	stb	r7,158(sp)
  80ca8c:	003aa906 	br	80b534 <__alt_mem_onchip_mem+0xff803534>
  80ca90:	d9c02785 	stb	r7,158(sp)
  80ca94:	003a3d06 	br	80b38c <__alt_mem_onchip_mem+0xff80338c>
  80ca98:	d9c02785 	stb	r7,158(sp)
  80ca9c:	003aca06 	br	80b5c8 <__alt_mem_onchip_mem+0xff8035c8>

0080caa0 <__vfprintf_internal>:
  80caa0:	008020b4 	movhi	r2,130
  80caa4:	10a4ba04 	addi	r2,r2,-27928
  80caa8:	300f883a 	mov	r7,r6
  80caac:	280d883a 	mov	r6,r5
  80cab0:	200b883a 	mov	r5,r4
  80cab4:	11000017 	ldw	r4,0(r2)
  80cab8:	080a8a81 	jmpi	80a8a8 <___vfprintf_internal_r>

0080cabc <__sbprintf>:
  80cabc:	2880030b 	ldhu	r2,12(r5)
  80cac0:	2ac01917 	ldw	r11,100(r5)
  80cac4:	2a80038b 	ldhu	r10,14(r5)
  80cac8:	2a400717 	ldw	r9,28(r5)
  80cacc:	2a000917 	ldw	r8,36(r5)
  80cad0:	defee204 	addi	sp,sp,-1144
  80cad4:	00c10004 	movi	r3,1024
  80cad8:	dc011a15 	stw	r16,1128(sp)
  80cadc:	10bfff4c 	andi	r2,r2,65533
  80cae0:	2821883a 	mov	r16,r5
  80cae4:	d8cb883a 	add	r5,sp,r3
  80cae8:	dc811c15 	stw	r18,1136(sp)
  80caec:	dc411b15 	stw	r17,1132(sp)
  80caf0:	dfc11d15 	stw	ra,1140(sp)
  80caf4:	2025883a 	mov	r18,r4
  80caf8:	d881030d 	sth	r2,1036(sp)
  80cafc:	dac11915 	stw	r11,1124(sp)
  80cb00:	da81038d 	sth	r10,1038(sp)
  80cb04:	da410715 	stw	r9,1052(sp)
  80cb08:	da010915 	stw	r8,1060(sp)
  80cb0c:	dec10015 	stw	sp,1024(sp)
  80cb10:	dec10415 	stw	sp,1040(sp)
  80cb14:	d8c10215 	stw	r3,1032(sp)
  80cb18:	d8c10515 	stw	r3,1044(sp)
  80cb1c:	d8010615 	stw	zero,1048(sp)
  80cb20:	080a8a80 	call	80a8a8 <___vfprintf_internal_r>
  80cb24:	1023883a 	mov	r17,r2
  80cb28:	10000416 	blt	r2,zero,80cb3c <__sbprintf+0x80>
  80cb2c:	d9410004 	addi	r5,sp,1024
  80cb30:	9009883a 	mov	r4,r18
  80cb34:	08092240 	call	809224 <_fflush_r>
  80cb38:	10000d1e 	bne	r2,zero,80cb70 <__sbprintf+0xb4>
  80cb3c:	d881030b 	ldhu	r2,1036(sp)
  80cb40:	1080100c 	andi	r2,r2,64
  80cb44:	10000326 	beq	r2,zero,80cb54 <__sbprintf+0x98>
  80cb48:	8080030b 	ldhu	r2,12(r16)
  80cb4c:	10801014 	ori	r2,r2,64
  80cb50:	8080030d 	sth	r2,12(r16)
  80cb54:	8805883a 	mov	r2,r17
  80cb58:	dfc11d17 	ldw	ra,1140(sp)
  80cb5c:	dc811c17 	ldw	r18,1136(sp)
  80cb60:	dc411b17 	ldw	r17,1132(sp)
  80cb64:	dc011a17 	ldw	r16,1128(sp)
  80cb68:	dec11e04 	addi	sp,sp,1144
  80cb6c:	f800283a 	ret
  80cb70:	047fffc4 	movi	r17,-1
  80cb74:	003ff106 	br	80cb3c <__alt_mem_onchip_mem+0xff804b3c>

0080cb78 <_write_r>:
  80cb78:	defffd04 	addi	sp,sp,-12
  80cb7c:	2805883a 	mov	r2,r5
  80cb80:	dc000015 	stw	r16,0(sp)
  80cb84:	040020b4 	movhi	r16,130
  80cb88:	dc400115 	stw	r17,4(sp)
  80cb8c:	300b883a 	mov	r5,r6
  80cb90:	842c0b04 	addi	r16,r16,-20436
  80cb94:	2023883a 	mov	r17,r4
  80cb98:	380d883a 	mov	r6,r7
  80cb9c:	1009883a 	mov	r4,r2
  80cba0:	dfc00215 	stw	ra,8(sp)
  80cba4:	80000015 	stw	zero,0(r16)
  80cba8:	081373c0 	call	81373c <write>
  80cbac:	00ffffc4 	movi	r3,-1
  80cbb0:	10c00526 	beq	r2,r3,80cbc8 <_write_r+0x50>
  80cbb4:	dfc00217 	ldw	ra,8(sp)
  80cbb8:	dc400117 	ldw	r17,4(sp)
  80cbbc:	dc000017 	ldw	r16,0(sp)
  80cbc0:	dec00304 	addi	sp,sp,12
  80cbc4:	f800283a 	ret
  80cbc8:	80c00017 	ldw	r3,0(r16)
  80cbcc:	183ff926 	beq	r3,zero,80cbb4 <__alt_mem_onchip_mem+0xff804bb4>
  80cbd0:	88c00015 	stw	r3,0(r17)
  80cbd4:	003ff706 	br	80cbb4 <__alt_mem_onchip_mem+0xff804bb4>

0080cbd8 <__swsetup_r>:
  80cbd8:	008020b4 	movhi	r2,130
  80cbdc:	defffd04 	addi	sp,sp,-12
  80cbe0:	10a4ba04 	addi	r2,r2,-27928
  80cbe4:	dc400115 	stw	r17,4(sp)
  80cbe8:	2023883a 	mov	r17,r4
  80cbec:	11000017 	ldw	r4,0(r2)
  80cbf0:	dc000015 	stw	r16,0(sp)
  80cbf4:	dfc00215 	stw	ra,8(sp)
  80cbf8:	2821883a 	mov	r16,r5
  80cbfc:	20000226 	beq	r4,zero,80cc08 <__swsetup_r+0x30>
  80cc00:	20800e17 	ldw	r2,56(r4)
  80cc04:	10003126 	beq	r2,zero,80cccc <__swsetup_r+0xf4>
  80cc08:	8080030b 	ldhu	r2,12(r16)
  80cc0c:	10c0020c 	andi	r3,r2,8
  80cc10:	1009883a 	mov	r4,r2
  80cc14:	18000f26 	beq	r3,zero,80cc54 <__swsetup_r+0x7c>
  80cc18:	80c00417 	ldw	r3,16(r16)
  80cc1c:	18001526 	beq	r3,zero,80cc74 <__swsetup_r+0x9c>
  80cc20:	1100004c 	andi	r4,r2,1
  80cc24:	20001c1e 	bne	r4,zero,80cc98 <__swsetup_r+0xc0>
  80cc28:	1080008c 	andi	r2,r2,2
  80cc2c:	1000291e 	bne	r2,zero,80ccd4 <__swsetup_r+0xfc>
  80cc30:	80800517 	ldw	r2,20(r16)
  80cc34:	80800215 	stw	r2,8(r16)
  80cc38:	18001c26 	beq	r3,zero,80ccac <__swsetup_r+0xd4>
  80cc3c:	0005883a 	mov	r2,zero
  80cc40:	dfc00217 	ldw	ra,8(sp)
  80cc44:	dc400117 	ldw	r17,4(sp)
  80cc48:	dc000017 	ldw	r16,0(sp)
  80cc4c:	dec00304 	addi	sp,sp,12
  80cc50:	f800283a 	ret
  80cc54:	2080040c 	andi	r2,r4,16
  80cc58:	10002e26 	beq	r2,zero,80cd14 <__swsetup_r+0x13c>
  80cc5c:	2080010c 	andi	r2,r4,4
  80cc60:	10001e1e 	bne	r2,zero,80ccdc <__swsetup_r+0x104>
  80cc64:	80c00417 	ldw	r3,16(r16)
  80cc68:	20800214 	ori	r2,r4,8
  80cc6c:	8080030d 	sth	r2,12(r16)
  80cc70:	183feb1e 	bne	r3,zero,80cc20 <__alt_mem_onchip_mem+0xff804c20>
  80cc74:	1100a00c 	andi	r4,r2,640
  80cc78:	01408004 	movi	r5,512
  80cc7c:	217fe826 	beq	r4,r5,80cc20 <__alt_mem_onchip_mem+0xff804c20>
  80cc80:	800b883a 	mov	r5,r16
  80cc84:	8809883a 	mov	r4,r17
  80cc88:	080ed040 	call	80ed04 <__smakebuf_r>
  80cc8c:	8080030b 	ldhu	r2,12(r16)
  80cc90:	80c00417 	ldw	r3,16(r16)
  80cc94:	003fe206 	br	80cc20 <__alt_mem_onchip_mem+0xff804c20>
  80cc98:	80800517 	ldw	r2,20(r16)
  80cc9c:	80000215 	stw	zero,8(r16)
  80cca0:	0085c83a 	sub	r2,zero,r2
  80cca4:	80800615 	stw	r2,24(r16)
  80cca8:	183fe41e 	bne	r3,zero,80cc3c <__alt_mem_onchip_mem+0xff804c3c>
  80ccac:	80c0030b 	ldhu	r3,12(r16)
  80ccb0:	0005883a 	mov	r2,zero
  80ccb4:	1900200c 	andi	r4,r3,128
  80ccb8:	203fe126 	beq	r4,zero,80cc40 <__alt_mem_onchip_mem+0xff804c40>
  80ccbc:	18c01014 	ori	r3,r3,64
  80ccc0:	80c0030d 	sth	r3,12(r16)
  80ccc4:	00bfffc4 	movi	r2,-1
  80ccc8:	003fdd06 	br	80cc40 <__alt_mem_onchip_mem+0xff804c40>
  80cccc:	08096000 	call	809600 <__sinit>
  80ccd0:	003fcd06 	br	80cc08 <__alt_mem_onchip_mem+0xff804c08>
  80ccd4:	0005883a 	mov	r2,zero
  80ccd8:	003fd606 	br	80cc34 <__alt_mem_onchip_mem+0xff804c34>
  80ccdc:	81400c17 	ldw	r5,48(r16)
  80cce0:	28000626 	beq	r5,zero,80ccfc <__swsetup_r+0x124>
  80cce4:	80801004 	addi	r2,r16,64
  80cce8:	28800326 	beq	r5,r2,80ccf8 <__swsetup_r+0x120>
  80ccec:	8809883a 	mov	r4,r17
  80ccf0:	08097740 	call	809774 <_free_r>
  80ccf4:	8100030b 	ldhu	r4,12(r16)
  80ccf8:	80000c15 	stw	zero,48(r16)
  80ccfc:	80c00417 	ldw	r3,16(r16)
  80cd00:	00bff6c4 	movi	r2,-37
  80cd04:	1108703a 	and	r4,r2,r4
  80cd08:	80000115 	stw	zero,4(r16)
  80cd0c:	80c00015 	stw	r3,0(r16)
  80cd10:	003fd506 	br	80cc68 <__alt_mem_onchip_mem+0xff804c68>
  80cd14:	00800244 	movi	r2,9
  80cd18:	88800015 	stw	r2,0(r17)
  80cd1c:	20801014 	ori	r2,r4,64
  80cd20:	8080030d 	sth	r2,12(r16)
  80cd24:	00bfffc4 	movi	r2,-1
  80cd28:	003fc506 	br	80cc40 <__alt_mem_onchip_mem+0xff804c40>

0080cd2c <_close_r>:
  80cd2c:	defffd04 	addi	sp,sp,-12
  80cd30:	dc000015 	stw	r16,0(sp)
  80cd34:	040020b4 	movhi	r16,130
  80cd38:	dc400115 	stw	r17,4(sp)
  80cd3c:	842c0b04 	addi	r16,r16,-20436
  80cd40:	2023883a 	mov	r17,r4
  80cd44:	2809883a 	mov	r4,r5
  80cd48:	dfc00215 	stw	ra,8(sp)
  80cd4c:	80000015 	stw	zero,0(r16)
  80cd50:	0812cd80 	call	812cd8 <close>
  80cd54:	00ffffc4 	movi	r3,-1
  80cd58:	10c00526 	beq	r2,r3,80cd70 <_close_r+0x44>
  80cd5c:	dfc00217 	ldw	ra,8(sp)
  80cd60:	dc400117 	ldw	r17,4(sp)
  80cd64:	dc000017 	ldw	r16,0(sp)
  80cd68:	dec00304 	addi	sp,sp,12
  80cd6c:	f800283a 	ret
  80cd70:	80c00017 	ldw	r3,0(r16)
  80cd74:	183ff926 	beq	r3,zero,80cd5c <__alt_mem_onchip_mem+0xff804d5c>
  80cd78:	88c00015 	stw	r3,0(r17)
  80cd7c:	003ff706 	br	80cd5c <__alt_mem_onchip_mem+0xff804d5c>

0080cd80 <quorem>:
  80cd80:	defff704 	addi	sp,sp,-36
  80cd84:	dc800215 	stw	r18,8(sp)
  80cd88:	20800417 	ldw	r2,16(r4)
  80cd8c:	2c800417 	ldw	r18,16(r5)
  80cd90:	dfc00815 	stw	ra,32(sp)
  80cd94:	ddc00715 	stw	r23,28(sp)
  80cd98:	dd800615 	stw	r22,24(sp)
  80cd9c:	dd400515 	stw	r21,20(sp)
  80cda0:	dd000415 	stw	r20,16(sp)
  80cda4:	dcc00315 	stw	r19,12(sp)
  80cda8:	dc400115 	stw	r17,4(sp)
  80cdac:	dc000015 	stw	r16,0(sp)
  80cdb0:	14807116 	blt	r2,r18,80cf78 <quorem+0x1f8>
  80cdb4:	94bfffc4 	addi	r18,r18,-1
  80cdb8:	94ad883a 	add	r22,r18,r18
  80cdbc:	b5ad883a 	add	r22,r22,r22
  80cdc0:	2c400504 	addi	r17,r5,20
  80cdc4:	8da9883a 	add	r20,r17,r22
  80cdc8:	25400504 	addi	r21,r4,20
  80cdcc:	282f883a 	mov	r23,r5
  80cdd0:	adad883a 	add	r22,r21,r22
  80cdd4:	a1400017 	ldw	r5,0(r20)
  80cdd8:	2021883a 	mov	r16,r4
  80cddc:	b1000017 	ldw	r4,0(r22)
  80cde0:	29400044 	addi	r5,r5,1
  80cde4:	08069ec0 	call	8069ec <__udivsi3>
  80cde8:	1027883a 	mov	r19,r2
  80cdec:	10002c26 	beq	r2,zero,80cea0 <quorem+0x120>
  80cdf0:	a813883a 	mov	r9,r21
  80cdf4:	880b883a 	mov	r5,r17
  80cdf8:	0009883a 	mov	r4,zero
  80cdfc:	000d883a 	mov	r6,zero
  80ce00:	2a000017 	ldw	r8,0(r5)
  80ce04:	49c00017 	ldw	r7,0(r9)
  80ce08:	29400104 	addi	r5,r5,4
  80ce0c:	40bfffcc 	andi	r2,r8,65535
  80ce10:	14c5383a 	mul	r2,r2,r19
  80ce14:	4010d43a 	srli	r8,r8,16
  80ce18:	38ffffcc 	andi	r3,r7,65535
  80ce1c:	1105883a 	add	r2,r2,r4
  80ce20:	1008d43a 	srli	r4,r2,16
  80ce24:	44d1383a 	mul	r8,r8,r19
  80ce28:	198d883a 	add	r6,r3,r6
  80ce2c:	10ffffcc 	andi	r3,r2,65535
  80ce30:	30c7c83a 	sub	r3,r6,r3
  80ce34:	380ed43a 	srli	r7,r7,16
  80ce38:	4105883a 	add	r2,r8,r4
  80ce3c:	180dd43a 	srai	r6,r3,16
  80ce40:	113fffcc 	andi	r4,r2,65535
  80ce44:	390fc83a 	sub	r7,r7,r4
  80ce48:	398d883a 	add	r6,r7,r6
  80ce4c:	300e943a 	slli	r7,r6,16
  80ce50:	18ffffcc 	andi	r3,r3,65535
  80ce54:	1008d43a 	srli	r4,r2,16
  80ce58:	38ceb03a 	or	r7,r7,r3
  80ce5c:	49c00015 	stw	r7,0(r9)
  80ce60:	300dd43a 	srai	r6,r6,16
  80ce64:	4a400104 	addi	r9,r9,4
  80ce68:	a17fe52e 	bgeu	r20,r5,80ce00 <__alt_mem_onchip_mem+0xff804e00>
  80ce6c:	b0800017 	ldw	r2,0(r22)
  80ce70:	10000b1e 	bne	r2,zero,80cea0 <quorem+0x120>
  80ce74:	b0bfff04 	addi	r2,r22,-4
  80ce78:	a880082e 	bgeu	r21,r2,80ce9c <quorem+0x11c>
  80ce7c:	b0ffff17 	ldw	r3,-4(r22)
  80ce80:	18000326 	beq	r3,zero,80ce90 <quorem+0x110>
  80ce84:	00000506 	br	80ce9c <quorem+0x11c>
  80ce88:	10c00017 	ldw	r3,0(r2)
  80ce8c:	1800031e 	bne	r3,zero,80ce9c <quorem+0x11c>
  80ce90:	10bfff04 	addi	r2,r2,-4
  80ce94:	94bfffc4 	addi	r18,r18,-1
  80ce98:	a8bffb36 	bltu	r21,r2,80ce88 <__alt_mem_onchip_mem+0xff804e88>
  80ce9c:	84800415 	stw	r18,16(r16)
  80cea0:	b80b883a 	mov	r5,r23
  80cea4:	8009883a 	mov	r4,r16
  80cea8:	080fb100 	call	80fb10 <__mcmp>
  80ceac:	10002616 	blt	r2,zero,80cf48 <quorem+0x1c8>
  80ceb0:	9cc00044 	addi	r19,r19,1
  80ceb4:	a805883a 	mov	r2,r21
  80ceb8:	000b883a 	mov	r5,zero
  80cebc:	11000017 	ldw	r4,0(r2)
  80cec0:	89800017 	ldw	r6,0(r17)
  80cec4:	10800104 	addi	r2,r2,4
  80cec8:	20ffffcc 	andi	r3,r4,65535
  80cecc:	194b883a 	add	r5,r3,r5
  80ced0:	30ffffcc 	andi	r3,r6,65535
  80ced4:	28c7c83a 	sub	r3,r5,r3
  80ced8:	300cd43a 	srli	r6,r6,16
  80cedc:	2008d43a 	srli	r4,r4,16
  80cee0:	180bd43a 	srai	r5,r3,16
  80cee4:	18ffffcc 	andi	r3,r3,65535
  80cee8:	2189c83a 	sub	r4,r4,r6
  80ceec:	2149883a 	add	r4,r4,r5
  80cef0:	200c943a 	slli	r6,r4,16
  80cef4:	8c400104 	addi	r17,r17,4
  80cef8:	200bd43a 	srai	r5,r4,16
  80cefc:	30c6b03a 	or	r3,r6,r3
  80cf00:	10ffff15 	stw	r3,-4(r2)
  80cf04:	a47fed2e 	bgeu	r20,r17,80cebc <__alt_mem_onchip_mem+0xff804ebc>
  80cf08:	9485883a 	add	r2,r18,r18
  80cf0c:	1085883a 	add	r2,r2,r2
  80cf10:	a887883a 	add	r3,r21,r2
  80cf14:	18800017 	ldw	r2,0(r3)
  80cf18:	10000b1e 	bne	r2,zero,80cf48 <quorem+0x1c8>
  80cf1c:	18bfff04 	addi	r2,r3,-4
  80cf20:	a880082e 	bgeu	r21,r2,80cf44 <quorem+0x1c4>
  80cf24:	18ffff17 	ldw	r3,-4(r3)
  80cf28:	18000326 	beq	r3,zero,80cf38 <quorem+0x1b8>
  80cf2c:	00000506 	br	80cf44 <quorem+0x1c4>
  80cf30:	10c00017 	ldw	r3,0(r2)
  80cf34:	1800031e 	bne	r3,zero,80cf44 <quorem+0x1c4>
  80cf38:	10bfff04 	addi	r2,r2,-4
  80cf3c:	94bfffc4 	addi	r18,r18,-1
  80cf40:	a8bffb36 	bltu	r21,r2,80cf30 <__alt_mem_onchip_mem+0xff804f30>
  80cf44:	84800415 	stw	r18,16(r16)
  80cf48:	9805883a 	mov	r2,r19
  80cf4c:	dfc00817 	ldw	ra,32(sp)
  80cf50:	ddc00717 	ldw	r23,28(sp)
  80cf54:	dd800617 	ldw	r22,24(sp)
  80cf58:	dd400517 	ldw	r21,20(sp)
  80cf5c:	dd000417 	ldw	r20,16(sp)
  80cf60:	dcc00317 	ldw	r19,12(sp)
  80cf64:	dc800217 	ldw	r18,8(sp)
  80cf68:	dc400117 	ldw	r17,4(sp)
  80cf6c:	dc000017 	ldw	r16,0(sp)
  80cf70:	dec00904 	addi	sp,sp,36
  80cf74:	f800283a 	ret
  80cf78:	0005883a 	mov	r2,zero
  80cf7c:	003ff306 	br	80cf4c <__alt_mem_onchip_mem+0xff804f4c>

0080cf80 <_dtoa_r>:
  80cf80:	20801017 	ldw	r2,64(r4)
  80cf84:	deffde04 	addi	sp,sp,-136
  80cf88:	df002015 	stw	fp,128(sp)
  80cf8c:	dcc01b15 	stw	r19,108(sp)
  80cf90:	dc801a15 	stw	r18,104(sp)
  80cf94:	dc401915 	stw	r17,100(sp)
  80cf98:	dc001815 	stw	r16,96(sp)
  80cf9c:	dfc02115 	stw	ra,132(sp)
  80cfa0:	ddc01f15 	stw	r23,124(sp)
  80cfa4:	dd801e15 	stw	r22,120(sp)
  80cfa8:	dd401d15 	stw	r21,116(sp)
  80cfac:	dd001c15 	stw	r20,112(sp)
  80cfb0:	d9c00315 	stw	r7,12(sp)
  80cfb4:	2039883a 	mov	fp,r4
  80cfb8:	3023883a 	mov	r17,r6
  80cfbc:	2825883a 	mov	r18,r5
  80cfc0:	dc002417 	ldw	r16,144(sp)
  80cfc4:	3027883a 	mov	r19,r6
  80cfc8:	10000826 	beq	r2,zero,80cfec <_dtoa_r+0x6c>
  80cfcc:	21801117 	ldw	r6,68(r4)
  80cfd0:	00c00044 	movi	r3,1
  80cfd4:	100b883a 	mov	r5,r2
  80cfd8:	1986983a 	sll	r3,r3,r6
  80cfdc:	11800115 	stw	r6,4(r2)
  80cfe0:	10c00215 	stw	r3,8(r2)
  80cfe4:	080f2f00 	call	80f2f0 <_Bfree>
  80cfe8:	e0001015 	stw	zero,64(fp)
  80cfec:	88002e16 	blt	r17,zero,80d0a8 <_dtoa_r+0x128>
  80cff0:	80000015 	stw	zero,0(r16)
  80cff4:	889ffc2c 	andhi	r2,r17,32752
  80cff8:	00dffc34 	movhi	r3,32752
  80cffc:	10c01c26 	beq	r2,r3,80d070 <_dtoa_r+0xf0>
  80d000:	000d883a 	mov	r6,zero
  80d004:	000f883a 	mov	r7,zero
  80d008:	9009883a 	mov	r4,r18
  80d00c:	980b883a 	mov	r5,r19
  80d010:	0812b940 	call	812b94 <__eqdf2>
  80d014:	10002b1e 	bne	r2,zero,80d0c4 <_dtoa_r+0x144>
  80d018:	d9c02317 	ldw	r7,140(sp)
  80d01c:	00800044 	movi	r2,1
  80d020:	38800015 	stw	r2,0(r7)
  80d024:	d8802517 	ldw	r2,148(sp)
  80d028:	10019e26 	beq	r2,zero,80d6a4 <_dtoa_r+0x724>
  80d02c:	d8c02517 	ldw	r3,148(sp)
  80d030:	00802074 	movhi	r2,129
  80d034:	109c8044 	addi	r2,r2,29185
  80d038:	18800015 	stw	r2,0(r3)
  80d03c:	10bfffc4 	addi	r2,r2,-1
  80d040:	dfc02117 	ldw	ra,132(sp)
  80d044:	df002017 	ldw	fp,128(sp)
  80d048:	ddc01f17 	ldw	r23,124(sp)
  80d04c:	dd801e17 	ldw	r22,120(sp)
  80d050:	dd401d17 	ldw	r21,116(sp)
  80d054:	dd001c17 	ldw	r20,112(sp)
  80d058:	dcc01b17 	ldw	r19,108(sp)
  80d05c:	dc801a17 	ldw	r18,104(sp)
  80d060:	dc401917 	ldw	r17,100(sp)
  80d064:	dc001817 	ldw	r16,96(sp)
  80d068:	dec02204 	addi	sp,sp,136
  80d06c:	f800283a 	ret
  80d070:	d8c02317 	ldw	r3,140(sp)
  80d074:	0089c3c4 	movi	r2,9999
  80d078:	18800015 	stw	r2,0(r3)
  80d07c:	90017726 	beq	r18,zero,80d65c <_dtoa_r+0x6dc>
  80d080:	00802074 	movhi	r2,129
  80d084:	109c8c04 	addi	r2,r2,29232
  80d088:	d9002517 	ldw	r4,148(sp)
  80d08c:	203fec26 	beq	r4,zero,80d040 <__alt_mem_onchip_mem+0xff805040>
  80d090:	10c000c7 	ldb	r3,3(r2)
  80d094:	1801781e 	bne	r3,zero,80d678 <_dtoa_r+0x6f8>
  80d098:	10c000c4 	addi	r3,r2,3
  80d09c:	d9802517 	ldw	r6,148(sp)
  80d0a0:	30c00015 	stw	r3,0(r6)
  80d0a4:	003fe606 	br	80d040 <__alt_mem_onchip_mem+0xff805040>
  80d0a8:	04e00034 	movhi	r19,32768
  80d0ac:	9cffffc4 	addi	r19,r19,-1
  80d0b0:	00800044 	movi	r2,1
  80d0b4:	8ce6703a 	and	r19,r17,r19
  80d0b8:	80800015 	stw	r2,0(r16)
  80d0bc:	9823883a 	mov	r17,r19
  80d0c0:	003fcc06 	br	80cff4 <__alt_mem_onchip_mem+0xff804ff4>
  80d0c4:	d8800204 	addi	r2,sp,8
  80d0c8:	d8800015 	stw	r2,0(sp)
  80d0cc:	d9c00104 	addi	r7,sp,4
  80d0d0:	900b883a 	mov	r5,r18
  80d0d4:	980d883a 	mov	r6,r19
  80d0d8:	e009883a 	mov	r4,fp
  80d0dc:	8820d53a 	srli	r16,r17,20
  80d0e0:	080fedc0 	call	80fedc <__d2b>
  80d0e4:	d8800915 	stw	r2,36(sp)
  80d0e8:	8001651e 	bne	r16,zero,80d680 <_dtoa_r+0x700>
  80d0ec:	dd800217 	ldw	r22,8(sp)
  80d0f0:	dc000117 	ldw	r16,4(sp)
  80d0f4:	00800804 	movi	r2,32
  80d0f8:	b421883a 	add	r16,r22,r16
  80d0fc:	80c10c84 	addi	r3,r16,1074
  80d100:	10c2d10e 	bge	r2,r3,80dc48 <_dtoa_r+0xcc8>
  80d104:	00801004 	movi	r2,64
  80d108:	81010484 	addi	r4,r16,1042
  80d10c:	10c7c83a 	sub	r3,r2,r3
  80d110:	9108d83a 	srl	r4,r18,r4
  80d114:	88e2983a 	sll	r17,r17,r3
  80d118:	2448b03a 	or	r4,r4,r17
  80d11c:	0808efc0 	call	808efc <__floatunsidf>
  80d120:	017f8434 	movhi	r5,65040
  80d124:	01800044 	movi	r6,1
  80d128:	1009883a 	mov	r4,r2
  80d12c:	194b883a 	add	r5,r3,r5
  80d130:	843fffc4 	addi	r16,r16,-1
  80d134:	d9801115 	stw	r6,68(sp)
  80d138:	000d883a 	mov	r6,zero
  80d13c:	01cffe34 	movhi	r7,16376
  80d140:	08085240 	call	808524 <__subdf3>
  80d144:	0198dbf4 	movhi	r6,25455
  80d148:	01cff4f4 	movhi	r7,16339
  80d14c:	3190d844 	addi	r6,r6,17249
  80d150:	39e1e9c4 	addi	r7,r7,-30809
  80d154:	1009883a 	mov	r4,r2
  80d158:	180b883a 	mov	r5,r3
  80d15c:	0807e0c0 	call	807e0c <__muldf3>
  80d160:	01a2d874 	movhi	r6,35681
  80d164:	01cff1f4 	movhi	r7,16327
  80d168:	31b22cc4 	addi	r6,r6,-14157
  80d16c:	39e28a04 	addi	r7,r7,-30168
  80d170:	180b883a 	mov	r5,r3
  80d174:	1009883a 	mov	r4,r2
  80d178:	0806aa80 	call	806aa8 <__adddf3>
  80d17c:	8009883a 	mov	r4,r16
  80d180:	1029883a 	mov	r20,r2
  80d184:	1823883a 	mov	r17,r3
  80d188:	0808e200 	call	808e20 <__floatsidf>
  80d18c:	019427f4 	movhi	r6,20639
  80d190:	01cff4f4 	movhi	r7,16339
  80d194:	319e7ec4 	addi	r6,r6,31227
  80d198:	39d104c4 	addi	r7,r7,17427
  80d19c:	1009883a 	mov	r4,r2
  80d1a0:	180b883a 	mov	r5,r3
  80d1a4:	0807e0c0 	call	807e0c <__muldf3>
  80d1a8:	100d883a 	mov	r6,r2
  80d1ac:	180f883a 	mov	r7,r3
  80d1b0:	a009883a 	mov	r4,r20
  80d1b4:	880b883a 	mov	r5,r17
  80d1b8:	0806aa80 	call	806aa8 <__adddf3>
  80d1bc:	1009883a 	mov	r4,r2
  80d1c0:	180b883a 	mov	r5,r3
  80d1c4:	1029883a 	mov	r20,r2
  80d1c8:	1823883a 	mov	r17,r3
  80d1cc:	0812c1c0 	call	812c1c <__fixdfsi>
  80d1d0:	000d883a 	mov	r6,zero
  80d1d4:	000f883a 	mov	r7,zero
  80d1d8:	a009883a 	mov	r4,r20
  80d1dc:	880b883a 	mov	r5,r17
  80d1e0:	d8800515 	stw	r2,20(sp)
  80d1e4:	0807d180 	call	807d18 <__ledf2>
  80d1e8:	10028716 	blt	r2,zero,80dc08 <_dtoa_r+0xc88>
  80d1ec:	d8c00517 	ldw	r3,20(sp)
  80d1f0:	00800584 	movi	r2,22
  80d1f4:	10c27536 	bltu	r2,r3,80dbcc <_dtoa_r+0xc4c>
  80d1f8:	180490fa 	slli	r2,r3,3
  80d1fc:	00c02074 	movhi	r3,129
  80d200:	18dca704 	addi	r3,r3,29340
  80d204:	1885883a 	add	r2,r3,r2
  80d208:	11000017 	ldw	r4,0(r2)
  80d20c:	11400117 	ldw	r5,4(r2)
  80d210:	900d883a 	mov	r6,r18
  80d214:	980f883a 	mov	r7,r19
  80d218:	0807c3c0 	call	807c3c <__gedf2>
  80d21c:	00828d0e 	bge	zero,r2,80dc54 <_dtoa_r+0xcd4>
  80d220:	d9000517 	ldw	r4,20(sp)
  80d224:	d8000e15 	stw	zero,56(sp)
  80d228:	213fffc4 	addi	r4,r4,-1
  80d22c:	d9000515 	stw	r4,20(sp)
  80d230:	b42dc83a 	sub	r22,r22,r16
  80d234:	b5bfffc4 	addi	r22,r22,-1
  80d238:	b0026f16 	blt	r22,zero,80dbf8 <_dtoa_r+0xc78>
  80d23c:	d8000815 	stw	zero,32(sp)
  80d240:	d9c00517 	ldw	r7,20(sp)
  80d244:	38026416 	blt	r7,zero,80dbd8 <_dtoa_r+0xc58>
  80d248:	b1ed883a 	add	r22,r22,r7
  80d24c:	d9c00d15 	stw	r7,52(sp)
  80d250:	d8000a15 	stw	zero,40(sp)
  80d254:	d9800317 	ldw	r6,12(sp)
  80d258:	00800244 	movi	r2,9
  80d25c:	11811436 	bltu	r2,r6,80d6b0 <_dtoa_r+0x730>
  80d260:	00800144 	movi	r2,5
  80d264:	1184e10e 	bge	r2,r6,80e5ec <_dtoa_r+0x166c>
  80d268:	31bfff04 	addi	r6,r6,-4
  80d26c:	d9800315 	stw	r6,12(sp)
  80d270:	0023883a 	mov	r17,zero
  80d274:	d9800317 	ldw	r6,12(sp)
  80d278:	008000c4 	movi	r2,3
  80d27c:	30836726 	beq	r6,r2,80e01c <_dtoa_r+0x109c>
  80d280:	1183410e 	bge	r2,r6,80df88 <_dtoa_r+0x1008>
  80d284:	d9c00317 	ldw	r7,12(sp)
  80d288:	00800104 	movi	r2,4
  80d28c:	38827c26 	beq	r7,r2,80dc80 <_dtoa_r+0xd00>
  80d290:	00800144 	movi	r2,5
  80d294:	3884c41e 	bne	r7,r2,80e5a8 <_dtoa_r+0x1628>
  80d298:	00800044 	movi	r2,1
  80d29c:	d8800b15 	stw	r2,44(sp)
  80d2a0:	d8c00517 	ldw	r3,20(sp)
  80d2a4:	d9002217 	ldw	r4,136(sp)
  80d2a8:	1907883a 	add	r3,r3,r4
  80d2ac:	19800044 	addi	r6,r3,1
  80d2b0:	d8c00c15 	stw	r3,48(sp)
  80d2b4:	d9800615 	stw	r6,24(sp)
  80d2b8:	0183a40e 	bge	zero,r6,80e14c <_dtoa_r+0x11cc>
  80d2bc:	d9800617 	ldw	r6,24(sp)
  80d2c0:	3021883a 	mov	r16,r6
  80d2c4:	e0001115 	stw	zero,68(fp)
  80d2c8:	008005c4 	movi	r2,23
  80d2cc:	1184c92e 	bgeu	r2,r6,80e5f4 <_dtoa_r+0x1674>
  80d2d0:	00c00044 	movi	r3,1
  80d2d4:	00800104 	movi	r2,4
  80d2d8:	1085883a 	add	r2,r2,r2
  80d2dc:	11000504 	addi	r4,r2,20
  80d2e0:	180b883a 	mov	r5,r3
  80d2e4:	18c00044 	addi	r3,r3,1
  80d2e8:	313ffb2e 	bgeu	r6,r4,80d2d8 <__alt_mem_onchip_mem+0xff8052d8>
  80d2ec:	e1401115 	stw	r5,68(fp)
  80d2f0:	e009883a 	mov	r4,fp
  80d2f4:	080f2480 	call	80f248 <_Balloc>
  80d2f8:	d8800715 	stw	r2,28(sp)
  80d2fc:	e0801015 	stw	r2,64(fp)
  80d300:	00800384 	movi	r2,14
  80d304:	1400f736 	bltu	r2,r16,80d6e4 <_dtoa_r+0x764>
  80d308:	8800f626 	beq	r17,zero,80d6e4 <_dtoa_r+0x764>
  80d30c:	d9c00517 	ldw	r7,20(sp)
  80d310:	01c39a0e 	bge	zero,r7,80e17c <_dtoa_r+0x11fc>
  80d314:	388003cc 	andi	r2,r7,15
  80d318:	100490fa 	slli	r2,r2,3
  80d31c:	382bd13a 	srai	r21,r7,4
  80d320:	00c02074 	movhi	r3,129
  80d324:	18dca704 	addi	r3,r3,29340
  80d328:	1885883a 	add	r2,r3,r2
  80d32c:	a8c0040c 	andi	r3,r21,16
  80d330:	12400017 	ldw	r9,0(r2)
  80d334:	12000117 	ldw	r8,4(r2)
  80d338:	18037926 	beq	r3,zero,80e120 <_dtoa_r+0x11a0>
  80d33c:	00802074 	movhi	r2,129
  80d340:	109c9d04 	addi	r2,r2,29300
  80d344:	11800817 	ldw	r6,32(r2)
  80d348:	11c00917 	ldw	r7,36(r2)
  80d34c:	9009883a 	mov	r4,r18
  80d350:	980b883a 	mov	r5,r19
  80d354:	da001715 	stw	r8,92(sp)
  80d358:	da401615 	stw	r9,88(sp)
  80d35c:	08073540 	call	807354 <__divdf3>
  80d360:	da001717 	ldw	r8,92(sp)
  80d364:	da401617 	ldw	r9,88(sp)
  80d368:	ad4003cc 	andi	r21,r21,15
  80d36c:	040000c4 	movi	r16,3
  80d370:	1023883a 	mov	r17,r2
  80d374:	1829883a 	mov	r20,r3
  80d378:	a8001126 	beq	r21,zero,80d3c0 <_dtoa_r+0x440>
  80d37c:	05c02074 	movhi	r23,129
  80d380:	bddc9d04 	addi	r23,r23,29300
  80d384:	4805883a 	mov	r2,r9
  80d388:	4007883a 	mov	r3,r8
  80d38c:	a980004c 	andi	r6,r21,1
  80d390:	1009883a 	mov	r4,r2
  80d394:	a82bd07a 	srai	r21,r21,1
  80d398:	180b883a 	mov	r5,r3
  80d39c:	30000426 	beq	r6,zero,80d3b0 <_dtoa_r+0x430>
  80d3a0:	b9800017 	ldw	r6,0(r23)
  80d3a4:	b9c00117 	ldw	r7,4(r23)
  80d3a8:	84000044 	addi	r16,r16,1
  80d3ac:	0807e0c0 	call	807e0c <__muldf3>
  80d3b0:	bdc00204 	addi	r23,r23,8
  80d3b4:	a83ff51e 	bne	r21,zero,80d38c <__alt_mem_onchip_mem+0xff80538c>
  80d3b8:	1013883a 	mov	r9,r2
  80d3bc:	1811883a 	mov	r8,r3
  80d3c0:	480d883a 	mov	r6,r9
  80d3c4:	400f883a 	mov	r7,r8
  80d3c8:	8809883a 	mov	r4,r17
  80d3cc:	a00b883a 	mov	r5,r20
  80d3d0:	08073540 	call	807354 <__divdf3>
  80d3d4:	d8800f15 	stw	r2,60(sp)
  80d3d8:	d8c01015 	stw	r3,64(sp)
  80d3dc:	d8c00e17 	ldw	r3,56(sp)
  80d3e0:	18000626 	beq	r3,zero,80d3fc <_dtoa_r+0x47c>
  80d3e4:	d9000f17 	ldw	r4,60(sp)
  80d3e8:	d9401017 	ldw	r5,64(sp)
  80d3ec:	000d883a 	mov	r6,zero
  80d3f0:	01cffc34 	movhi	r7,16368
  80d3f4:	0807d180 	call	807d18 <__ledf2>
  80d3f8:	10040b16 	blt	r2,zero,80e428 <_dtoa_r+0x14a8>
  80d3fc:	8009883a 	mov	r4,r16
  80d400:	0808e200 	call	808e20 <__floatsidf>
  80d404:	d9800f17 	ldw	r6,60(sp)
  80d408:	d9c01017 	ldw	r7,64(sp)
  80d40c:	1009883a 	mov	r4,r2
  80d410:	180b883a 	mov	r5,r3
  80d414:	0807e0c0 	call	807e0c <__muldf3>
  80d418:	000d883a 	mov	r6,zero
  80d41c:	01d00734 	movhi	r7,16412
  80d420:	1009883a 	mov	r4,r2
  80d424:	180b883a 	mov	r5,r3
  80d428:	0806aa80 	call	806aa8 <__adddf3>
  80d42c:	1021883a 	mov	r16,r2
  80d430:	d8800617 	ldw	r2,24(sp)
  80d434:	047f3034 	movhi	r17,64704
  80d438:	1c63883a 	add	r17,r3,r17
  80d43c:	10031826 	beq	r2,zero,80e0a0 <_dtoa_r+0x1120>
  80d440:	d8c00517 	ldw	r3,20(sp)
  80d444:	db000617 	ldw	r12,24(sp)
  80d448:	d8c01315 	stw	r3,76(sp)
  80d44c:	d9000b17 	ldw	r4,44(sp)
  80d450:	20038f26 	beq	r4,zero,80e290 <_dtoa_r+0x1310>
  80d454:	60bfffc4 	addi	r2,r12,-1
  80d458:	100490fa 	slli	r2,r2,3
  80d45c:	00c02074 	movhi	r3,129
  80d460:	18dca704 	addi	r3,r3,29340
  80d464:	1885883a 	add	r2,r3,r2
  80d468:	11800017 	ldw	r6,0(r2)
  80d46c:	11c00117 	ldw	r7,4(r2)
  80d470:	d8800717 	ldw	r2,28(sp)
  80d474:	0009883a 	mov	r4,zero
  80d478:	014ff834 	movhi	r5,16352
  80d47c:	db001615 	stw	r12,88(sp)
  80d480:	15c00044 	addi	r23,r2,1
  80d484:	08073540 	call	807354 <__divdf3>
  80d488:	800d883a 	mov	r6,r16
  80d48c:	880f883a 	mov	r7,r17
  80d490:	1009883a 	mov	r4,r2
  80d494:	180b883a 	mov	r5,r3
  80d498:	08085240 	call	808524 <__subdf3>
  80d49c:	d9401017 	ldw	r5,64(sp)
  80d4a0:	d9000f17 	ldw	r4,60(sp)
  80d4a4:	102b883a 	mov	r21,r2
  80d4a8:	d8c01215 	stw	r3,72(sp)
  80d4ac:	0812c1c0 	call	812c1c <__fixdfsi>
  80d4b0:	1009883a 	mov	r4,r2
  80d4b4:	1029883a 	mov	r20,r2
  80d4b8:	0808e200 	call	808e20 <__floatsidf>
  80d4bc:	d9000f17 	ldw	r4,60(sp)
  80d4c0:	d9401017 	ldw	r5,64(sp)
  80d4c4:	100d883a 	mov	r6,r2
  80d4c8:	180f883a 	mov	r7,r3
  80d4cc:	08085240 	call	808524 <__subdf3>
  80d4d0:	1823883a 	mov	r17,r3
  80d4d4:	d8c00717 	ldw	r3,28(sp)
  80d4d8:	d9401217 	ldw	r5,72(sp)
  80d4dc:	a2000c04 	addi	r8,r20,48
  80d4e0:	1021883a 	mov	r16,r2
  80d4e4:	1a000005 	stb	r8,0(r3)
  80d4e8:	800d883a 	mov	r6,r16
  80d4ec:	880f883a 	mov	r7,r17
  80d4f0:	a809883a 	mov	r4,r21
  80d4f4:	4029883a 	mov	r20,r8
  80d4f8:	0807c3c0 	call	807c3c <__gedf2>
  80d4fc:	00841d16 	blt	zero,r2,80e574 <_dtoa_r+0x15f4>
  80d500:	800d883a 	mov	r6,r16
  80d504:	880f883a 	mov	r7,r17
  80d508:	0009883a 	mov	r4,zero
  80d50c:	014ffc34 	movhi	r5,16368
  80d510:	08085240 	call	808524 <__subdf3>
  80d514:	d9401217 	ldw	r5,72(sp)
  80d518:	100d883a 	mov	r6,r2
  80d51c:	180f883a 	mov	r7,r3
  80d520:	a809883a 	mov	r4,r21
  80d524:	0807c3c0 	call	807c3c <__gedf2>
  80d528:	db001617 	ldw	r12,88(sp)
  80d52c:	00840e16 	blt	zero,r2,80e568 <_dtoa_r+0x15e8>
  80d530:	00800044 	movi	r2,1
  80d534:	13006b0e 	bge	r2,r12,80d6e4 <_dtoa_r+0x764>
  80d538:	d9000717 	ldw	r4,28(sp)
  80d53c:	dd800f15 	stw	r22,60(sp)
  80d540:	dcc01015 	stw	r19,64(sp)
  80d544:	2319883a 	add	r12,r4,r12
  80d548:	dcc01217 	ldw	r19,72(sp)
  80d54c:	602d883a 	mov	r22,r12
  80d550:	dc801215 	stw	r18,72(sp)
  80d554:	b825883a 	mov	r18,r23
  80d558:	00000906 	br	80d580 <_dtoa_r+0x600>
  80d55c:	08085240 	call	808524 <__subdf3>
  80d560:	a80d883a 	mov	r6,r21
  80d564:	980f883a 	mov	r7,r19
  80d568:	1009883a 	mov	r4,r2
  80d56c:	180b883a 	mov	r5,r3
  80d570:	0807d180 	call	807d18 <__ledf2>
  80d574:	1003e816 	blt	r2,zero,80e518 <_dtoa_r+0x1598>
  80d578:	b825883a 	mov	r18,r23
  80d57c:	bd83e926 	beq	r23,r22,80e524 <_dtoa_r+0x15a4>
  80d580:	a809883a 	mov	r4,r21
  80d584:	980b883a 	mov	r5,r19
  80d588:	000d883a 	mov	r6,zero
  80d58c:	01d00934 	movhi	r7,16420
  80d590:	0807e0c0 	call	807e0c <__muldf3>
  80d594:	000d883a 	mov	r6,zero
  80d598:	01d00934 	movhi	r7,16420
  80d59c:	8009883a 	mov	r4,r16
  80d5a0:	880b883a 	mov	r5,r17
  80d5a4:	102b883a 	mov	r21,r2
  80d5a8:	1827883a 	mov	r19,r3
  80d5ac:	0807e0c0 	call	807e0c <__muldf3>
  80d5b0:	180b883a 	mov	r5,r3
  80d5b4:	1009883a 	mov	r4,r2
  80d5b8:	1821883a 	mov	r16,r3
  80d5bc:	1023883a 	mov	r17,r2
  80d5c0:	0812c1c0 	call	812c1c <__fixdfsi>
  80d5c4:	1009883a 	mov	r4,r2
  80d5c8:	1029883a 	mov	r20,r2
  80d5cc:	0808e200 	call	808e20 <__floatsidf>
  80d5d0:	8809883a 	mov	r4,r17
  80d5d4:	800b883a 	mov	r5,r16
  80d5d8:	100d883a 	mov	r6,r2
  80d5dc:	180f883a 	mov	r7,r3
  80d5e0:	08085240 	call	808524 <__subdf3>
  80d5e4:	a5000c04 	addi	r20,r20,48
  80d5e8:	a80d883a 	mov	r6,r21
  80d5ec:	980f883a 	mov	r7,r19
  80d5f0:	1009883a 	mov	r4,r2
  80d5f4:	180b883a 	mov	r5,r3
  80d5f8:	95000005 	stb	r20,0(r18)
  80d5fc:	1021883a 	mov	r16,r2
  80d600:	1823883a 	mov	r17,r3
  80d604:	0807d180 	call	807d18 <__ledf2>
  80d608:	bdc00044 	addi	r23,r23,1
  80d60c:	800d883a 	mov	r6,r16
  80d610:	880f883a 	mov	r7,r17
  80d614:	0009883a 	mov	r4,zero
  80d618:	014ffc34 	movhi	r5,16368
  80d61c:	103fcf0e 	bge	r2,zero,80d55c <__alt_mem_onchip_mem+0xff80555c>
  80d620:	d8c01317 	ldw	r3,76(sp)
  80d624:	d8c00515 	stw	r3,20(sp)
  80d628:	d9400917 	ldw	r5,36(sp)
  80d62c:	e009883a 	mov	r4,fp
  80d630:	080f2f00 	call	80f2f0 <_Bfree>
  80d634:	d9000517 	ldw	r4,20(sp)
  80d638:	d9802317 	ldw	r6,140(sp)
  80d63c:	d9c02517 	ldw	r7,148(sp)
  80d640:	b8000005 	stb	zero,0(r23)
  80d644:	20800044 	addi	r2,r4,1
  80d648:	30800015 	stw	r2,0(r6)
  80d64c:	3802aa26 	beq	r7,zero,80e0f8 <_dtoa_r+0x1178>
  80d650:	3dc00015 	stw	r23,0(r7)
  80d654:	d8800717 	ldw	r2,28(sp)
  80d658:	003e7906 	br	80d040 <__alt_mem_onchip_mem+0xff805040>
  80d65c:	00800434 	movhi	r2,16
  80d660:	10bfffc4 	addi	r2,r2,-1
  80d664:	88a2703a 	and	r17,r17,r2
  80d668:	883e851e 	bne	r17,zero,80d080 <__alt_mem_onchip_mem+0xff805080>
  80d66c:	00802074 	movhi	r2,129
  80d670:	109c8904 	addi	r2,r2,29220
  80d674:	003e8406 	br	80d088 <__alt_mem_onchip_mem+0xff805088>
  80d678:	10c00204 	addi	r3,r2,8
  80d67c:	003e8706 	br	80d09c <__alt_mem_onchip_mem+0xff80509c>
  80d680:	01400434 	movhi	r5,16
  80d684:	297fffc4 	addi	r5,r5,-1
  80d688:	994a703a 	and	r5,r19,r5
  80d68c:	9009883a 	mov	r4,r18
  80d690:	843f0044 	addi	r16,r16,-1023
  80d694:	294ffc34 	orhi	r5,r5,16368
  80d698:	dd800217 	ldw	r22,8(sp)
  80d69c:	d8001115 	stw	zero,68(sp)
  80d6a0:	003ea506 	br	80d138 <__alt_mem_onchip_mem+0xff805138>
  80d6a4:	00802074 	movhi	r2,129
  80d6a8:	109c8004 	addi	r2,r2,29184
  80d6ac:	003e6406 	br	80d040 <__alt_mem_onchip_mem+0xff805040>
  80d6b0:	e0001115 	stw	zero,68(fp)
  80d6b4:	000b883a 	mov	r5,zero
  80d6b8:	e009883a 	mov	r4,fp
  80d6bc:	080f2480 	call	80f248 <_Balloc>
  80d6c0:	01bfffc4 	movi	r6,-1
  80d6c4:	01c00044 	movi	r7,1
  80d6c8:	d8800715 	stw	r2,28(sp)
  80d6cc:	d9800c15 	stw	r6,48(sp)
  80d6d0:	e0801015 	stw	r2,64(fp)
  80d6d4:	d8000315 	stw	zero,12(sp)
  80d6d8:	d9c00b15 	stw	r7,44(sp)
  80d6dc:	d9800615 	stw	r6,24(sp)
  80d6e0:	d8002215 	stw	zero,136(sp)
  80d6e4:	d8800117 	ldw	r2,4(sp)
  80d6e8:	10008916 	blt	r2,zero,80d910 <_dtoa_r+0x990>
  80d6ec:	d9000517 	ldw	r4,20(sp)
  80d6f0:	00c00384 	movi	r3,14
  80d6f4:	19008616 	blt	r3,r4,80d910 <_dtoa_r+0x990>
  80d6f8:	200490fa 	slli	r2,r4,3
  80d6fc:	00c02074 	movhi	r3,129
  80d700:	d9802217 	ldw	r6,136(sp)
  80d704:	18dca704 	addi	r3,r3,29340
  80d708:	1885883a 	add	r2,r3,r2
  80d70c:	14000017 	ldw	r16,0(r2)
  80d710:	14400117 	ldw	r17,4(r2)
  80d714:	30016316 	blt	r6,zero,80dca4 <_dtoa_r+0xd24>
  80d718:	800d883a 	mov	r6,r16
  80d71c:	880f883a 	mov	r7,r17
  80d720:	9009883a 	mov	r4,r18
  80d724:	980b883a 	mov	r5,r19
  80d728:	08073540 	call	807354 <__divdf3>
  80d72c:	180b883a 	mov	r5,r3
  80d730:	1009883a 	mov	r4,r2
  80d734:	0812c1c0 	call	812c1c <__fixdfsi>
  80d738:	1009883a 	mov	r4,r2
  80d73c:	102b883a 	mov	r21,r2
  80d740:	0808e200 	call	808e20 <__floatsidf>
  80d744:	800d883a 	mov	r6,r16
  80d748:	880f883a 	mov	r7,r17
  80d74c:	1009883a 	mov	r4,r2
  80d750:	180b883a 	mov	r5,r3
  80d754:	0807e0c0 	call	807e0c <__muldf3>
  80d758:	100d883a 	mov	r6,r2
  80d75c:	180f883a 	mov	r7,r3
  80d760:	9009883a 	mov	r4,r18
  80d764:	980b883a 	mov	r5,r19
  80d768:	08085240 	call	808524 <__subdf3>
  80d76c:	d9c00717 	ldw	r7,28(sp)
  80d770:	1009883a 	mov	r4,r2
  80d774:	a8800c04 	addi	r2,r21,48
  80d778:	38800005 	stb	r2,0(r7)
  80d77c:	3dc00044 	addi	r23,r7,1
  80d780:	d9c00617 	ldw	r7,24(sp)
  80d784:	01800044 	movi	r6,1
  80d788:	180b883a 	mov	r5,r3
  80d78c:	2005883a 	mov	r2,r4
  80d790:	39803826 	beq	r7,r6,80d874 <_dtoa_r+0x8f4>
  80d794:	000d883a 	mov	r6,zero
  80d798:	01d00934 	movhi	r7,16420
  80d79c:	0807e0c0 	call	807e0c <__muldf3>
  80d7a0:	000d883a 	mov	r6,zero
  80d7a4:	000f883a 	mov	r7,zero
  80d7a8:	1009883a 	mov	r4,r2
  80d7ac:	180b883a 	mov	r5,r3
  80d7b0:	1025883a 	mov	r18,r2
  80d7b4:	1827883a 	mov	r19,r3
  80d7b8:	0812b940 	call	812b94 <__eqdf2>
  80d7bc:	103f9a26 	beq	r2,zero,80d628 <__alt_mem_onchip_mem+0xff805628>
  80d7c0:	d9c00617 	ldw	r7,24(sp)
  80d7c4:	d8c00717 	ldw	r3,28(sp)
  80d7c8:	b829883a 	mov	r20,r23
  80d7cc:	38bfffc4 	addi	r2,r7,-1
  80d7d0:	18ad883a 	add	r22,r3,r2
  80d7d4:	00000a06 	br	80d800 <_dtoa_r+0x880>
  80d7d8:	0807e0c0 	call	807e0c <__muldf3>
  80d7dc:	000d883a 	mov	r6,zero
  80d7e0:	000f883a 	mov	r7,zero
  80d7e4:	1009883a 	mov	r4,r2
  80d7e8:	180b883a 	mov	r5,r3
  80d7ec:	1025883a 	mov	r18,r2
  80d7f0:	1827883a 	mov	r19,r3
  80d7f4:	b829883a 	mov	r20,r23
  80d7f8:	0812b940 	call	812b94 <__eqdf2>
  80d7fc:	103f8a26 	beq	r2,zero,80d628 <__alt_mem_onchip_mem+0xff805628>
  80d800:	800d883a 	mov	r6,r16
  80d804:	880f883a 	mov	r7,r17
  80d808:	9009883a 	mov	r4,r18
  80d80c:	980b883a 	mov	r5,r19
  80d810:	08073540 	call	807354 <__divdf3>
  80d814:	180b883a 	mov	r5,r3
  80d818:	1009883a 	mov	r4,r2
  80d81c:	0812c1c0 	call	812c1c <__fixdfsi>
  80d820:	1009883a 	mov	r4,r2
  80d824:	102b883a 	mov	r21,r2
  80d828:	0808e200 	call	808e20 <__floatsidf>
  80d82c:	800d883a 	mov	r6,r16
  80d830:	880f883a 	mov	r7,r17
  80d834:	1009883a 	mov	r4,r2
  80d838:	180b883a 	mov	r5,r3
  80d83c:	0807e0c0 	call	807e0c <__muldf3>
  80d840:	100d883a 	mov	r6,r2
  80d844:	180f883a 	mov	r7,r3
  80d848:	9009883a 	mov	r4,r18
  80d84c:	980b883a 	mov	r5,r19
  80d850:	08085240 	call	808524 <__subdf3>
  80d854:	aa000c04 	addi	r8,r21,48
  80d858:	a2000005 	stb	r8,0(r20)
  80d85c:	000d883a 	mov	r6,zero
  80d860:	01d00934 	movhi	r7,16420
  80d864:	1009883a 	mov	r4,r2
  80d868:	180b883a 	mov	r5,r3
  80d86c:	a5c00044 	addi	r23,r20,1
  80d870:	b53fd91e 	bne	r22,r20,80d7d8 <__alt_mem_onchip_mem+0xff8057d8>
  80d874:	100d883a 	mov	r6,r2
  80d878:	180f883a 	mov	r7,r3
  80d87c:	1009883a 	mov	r4,r2
  80d880:	180b883a 	mov	r5,r3
  80d884:	0806aa80 	call	806aa8 <__adddf3>
  80d888:	100d883a 	mov	r6,r2
  80d88c:	180f883a 	mov	r7,r3
  80d890:	8009883a 	mov	r4,r16
  80d894:	880b883a 	mov	r5,r17
  80d898:	1027883a 	mov	r19,r2
  80d89c:	1825883a 	mov	r18,r3
  80d8a0:	0807d180 	call	807d18 <__ledf2>
  80d8a4:	10000816 	blt	r2,zero,80d8c8 <_dtoa_r+0x948>
  80d8a8:	980d883a 	mov	r6,r19
  80d8ac:	900f883a 	mov	r7,r18
  80d8b0:	8009883a 	mov	r4,r16
  80d8b4:	880b883a 	mov	r5,r17
  80d8b8:	0812b940 	call	812b94 <__eqdf2>
  80d8bc:	103f5a1e 	bne	r2,zero,80d628 <__alt_mem_onchip_mem+0xff805628>
  80d8c0:	ad40004c 	andi	r21,r21,1
  80d8c4:	a83f5826 	beq	r21,zero,80d628 <__alt_mem_onchip_mem+0xff805628>
  80d8c8:	bd3fffc3 	ldbu	r20,-1(r23)
  80d8cc:	b8bfffc4 	addi	r2,r23,-1
  80d8d0:	1007883a 	mov	r3,r2
  80d8d4:	01400e44 	movi	r5,57
  80d8d8:	d9800717 	ldw	r6,28(sp)
  80d8dc:	00000506 	br	80d8f4 <_dtoa_r+0x974>
  80d8e0:	18ffffc4 	addi	r3,r3,-1
  80d8e4:	11824726 	beq	r2,r6,80e204 <_dtoa_r+0x1284>
  80d8e8:	1d000003 	ldbu	r20,0(r3)
  80d8ec:	102f883a 	mov	r23,r2
  80d8f0:	10bfffc4 	addi	r2,r2,-1
  80d8f4:	a1003fcc 	andi	r4,r20,255
  80d8f8:	2100201c 	xori	r4,r4,128
  80d8fc:	213fe004 	addi	r4,r4,-128
  80d900:	217ff726 	beq	r4,r5,80d8e0 <__alt_mem_onchip_mem+0xff8058e0>
  80d904:	a2000044 	addi	r8,r20,1
  80d908:	12000005 	stb	r8,0(r2)
  80d90c:	003f4606 	br	80d628 <__alt_mem_onchip_mem+0xff805628>
  80d910:	d9000b17 	ldw	r4,44(sp)
  80d914:	2000c826 	beq	r4,zero,80dc38 <_dtoa_r+0xcb8>
  80d918:	d9800317 	ldw	r6,12(sp)
  80d91c:	00c00044 	movi	r3,1
  80d920:	1980f90e 	bge	r3,r6,80dd08 <_dtoa_r+0xd88>
  80d924:	d8800617 	ldw	r2,24(sp)
  80d928:	d8c00a17 	ldw	r3,40(sp)
  80d92c:	157fffc4 	addi	r21,r2,-1
  80d930:	1d41f316 	blt	r3,r21,80e100 <_dtoa_r+0x1180>
  80d934:	1d6bc83a 	sub	r21,r3,r21
  80d938:	d9c00617 	ldw	r7,24(sp)
  80d93c:	3802aa16 	blt	r7,zero,80e3e8 <_dtoa_r+0x1468>
  80d940:	dd000817 	ldw	r20,32(sp)
  80d944:	d8800617 	ldw	r2,24(sp)
  80d948:	d8c00817 	ldw	r3,32(sp)
  80d94c:	01400044 	movi	r5,1
  80d950:	e009883a 	mov	r4,fp
  80d954:	1887883a 	add	r3,r3,r2
  80d958:	d8c00815 	stw	r3,32(sp)
  80d95c:	b0ad883a 	add	r22,r22,r2
  80d960:	080f6540 	call	80f654 <__i2b>
  80d964:	1023883a 	mov	r17,r2
  80d968:	a0000826 	beq	r20,zero,80d98c <_dtoa_r+0xa0c>
  80d96c:	0580070e 	bge	zero,r22,80d98c <_dtoa_r+0xa0c>
  80d970:	a005883a 	mov	r2,r20
  80d974:	b500b916 	blt	r22,r20,80dc5c <_dtoa_r+0xcdc>
  80d978:	d9000817 	ldw	r4,32(sp)
  80d97c:	a0a9c83a 	sub	r20,r20,r2
  80d980:	b0adc83a 	sub	r22,r22,r2
  80d984:	2089c83a 	sub	r4,r4,r2
  80d988:	d9000815 	stw	r4,32(sp)
  80d98c:	d9800a17 	ldw	r6,40(sp)
  80d990:	0181810e 	bge	zero,r6,80df98 <_dtoa_r+0x1018>
  80d994:	d9c00b17 	ldw	r7,44(sp)
  80d998:	3800b326 	beq	r7,zero,80dc68 <_dtoa_r+0xce8>
  80d99c:	a800b226 	beq	r21,zero,80dc68 <_dtoa_r+0xce8>
  80d9a0:	880b883a 	mov	r5,r17
  80d9a4:	a80d883a 	mov	r6,r21
  80d9a8:	e009883a 	mov	r4,fp
  80d9ac:	080f8880 	call	80f888 <__pow5mult>
  80d9b0:	d9800917 	ldw	r6,36(sp)
  80d9b4:	100b883a 	mov	r5,r2
  80d9b8:	e009883a 	mov	r4,fp
  80d9bc:	1023883a 	mov	r17,r2
  80d9c0:	080f6900 	call	80f690 <__multiply>
  80d9c4:	1021883a 	mov	r16,r2
  80d9c8:	d8800a17 	ldw	r2,40(sp)
  80d9cc:	d9400917 	ldw	r5,36(sp)
  80d9d0:	e009883a 	mov	r4,fp
  80d9d4:	1545c83a 	sub	r2,r2,r21
  80d9d8:	d8800a15 	stw	r2,40(sp)
  80d9dc:	080f2f00 	call	80f2f0 <_Bfree>
  80d9e0:	d8c00a17 	ldw	r3,40(sp)
  80d9e4:	18009f1e 	bne	r3,zero,80dc64 <_dtoa_r+0xce4>
  80d9e8:	05c00044 	movi	r23,1
  80d9ec:	e009883a 	mov	r4,fp
  80d9f0:	b80b883a 	mov	r5,r23
  80d9f4:	080f6540 	call	80f654 <__i2b>
  80d9f8:	d9000d17 	ldw	r4,52(sp)
  80d9fc:	102b883a 	mov	r21,r2
  80da00:	2000ce26 	beq	r4,zero,80dd3c <_dtoa_r+0xdbc>
  80da04:	200d883a 	mov	r6,r4
  80da08:	100b883a 	mov	r5,r2
  80da0c:	e009883a 	mov	r4,fp
  80da10:	080f8880 	call	80f888 <__pow5mult>
  80da14:	d9800317 	ldw	r6,12(sp)
  80da18:	102b883a 	mov	r21,r2
  80da1c:	b981810e 	bge	r23,r6,80e024 <_dtoa_r+0x10a4>
  80da20:	0027883a 	mov	r19,zero
  80da24:	a8800417 	ldw	r2,16(r21)
  80da28:	05c00804 	movi	r23,32
  80da2c:	10800104 	addi	r2,r2,4
  80da30:	1085883a 	add	r2,r2,r2
  80da34:	1085883a 	add	r2,r2,r2
  80da38:	a885883a 	add	r2,r21,r2
  80da3c:	11000017 	ldw	r4,0(r2)
  80da40:	080f53c0 	call	80f53c <__hi0bits>
  80da44:	b885c83a 	sub	r2,r23,r2
  80da48:	1585883a 	add	r2,r2,r22
  80da4c:	108007cc 	andi	r2,r2,31
  80da50:	1000b326 	beq	r2,zero,80dd20 <_dtoa_r+0xda0>
  80da54:	00c00804 	movi	r3,32
  80da58:	1887c83a 	sub	r3,r3,r2
  80da5c:	01000104 	movi	r4,4
  80da60:	20c2cd0e 	bge	r4,r3,80e598 <_dtoa_r+0x1618>
  80da64:	00c00704 	movi	r3,28
  80da68:	1885c83a 	sub	r2,r3,r2
  80da6c:	d8c00817 	ldw	r3,32(sp)
  80da70:	a0a9883a 	add	r20,r20,r2
  80da74:	b0ad883a 	add	r22,r22,r2
  80da78:	1887883a 	add	r3,r3,r2
  80da7c:	d8c00815 	stw	r3,32(sp)
  80da80:	d9800817 	ldw	r6,32(sp)
  80da84:	0180040e 	bge	zero,r6,80da98 <_dtoa_r+0xb18>
  80da88:	800b883a 	mov	r5,r16
  80da8c:	e009883a 	mov	r4,fp
  80da90:	080f9c80 	call	80f9c8 <__lshift>
  80da94:	1021883a 	mov	r16,r2
  80da98:	0580050e 	bge	zero,r22,80dab0 <_dtoa_r+0xb30>
  80da9c:	a80b883a 	mov	r5,r21
  80daa0:	b00d883a 	mov	r6,r22
  80daa4:	e009883a 	mov	r4,fp
  80daa8:	080f9c80 	call	80f9c8 <__lshift>
  80daac:	102b883a 	mov	r21,r2
  80dab0:	d9c00e17 	ldw	r7,56(sp)
  80dab4:	3801211e 	bne	r7,zero,80df3c <_dtoa_r+0xfbc>
  80dab8:	d9800617 	ldw	r6,24(sp)
  80dabc:	0181380e 	bge	zero,r6,80dfa0 <_dtoa_r+0x1020>
  80dac0:	d8c00b17 	ldw	r3,44(sp)
  80dac4:	1800ab1e 	bne	r3,zero,80dd74 <_dtoa_r+0xdf4>
  80dac8:	dc800717 	ldw	r18,28(sp)
  80dacc:	dcc00617 	ldw	r19,24(sp)
  80dad0:	9029883a 	mov	r20,r18
  80dad4:	00000206 	br	80dae0 <_dtoa_r+0xb60>
  80dad8:	080f3180 	call	80f318 <__multadd>
  80dadc:	1021883a 	mov	r16,r2
  80dae0:	a80b883a 	mov	r5,r21
  80dae4:	8009883a 	mov	r4,r16
  80dae8:	080cd800 	call	80cd80 <quorem>
  80daec:	10800c04 	addi	r2,r2,48
  80daf0:	90800005 	stb	r2,0(r18)
  80daf4:	94800044 	addi	r18,r18,1
  80daf8:	9507c83a 	sub	r3,r18,r20
  80dafc:	000f883a 	mov	r7,zero
  80db00:	01800284 	movi	r6,10
  80db04:	800b883a 	mov	r5,r16
  80db08:	e009883a 	mov	r4,fp
  80db0c:	1cfff216 	blt	r3,r19,80dad8 <__alt_mem_onchip_mem+0xff805ad8>
  80db10:	1011883a 	mov	r8,r2
  80db14:	d8800617 	ldw	r2,24(sp)
  80db18:	0082370e 	bge	zero,r2,80e3f8 <_dtoa_r+0x1478>
  80db1c:	d9000717 	ldw	r4,28(sp)
  80db20:	0025883a 	mov	r18,zero
  80db24:	20af883a 	add	r23,r4,r2
  80db28:	01800044 	movi	r6,1
  80db2c:	800b883a 	mov	r5,r16
  80db30:	e009883a 	mov	r4,fp
  80db34:	da001715 	stw	r8,92(sp)
  80db38:	080f9c80 	call	80f9c8 <__lshift>
  80db3c:	a80b883a 	mov	r5,r21
  80db40:	1009883a 	mov	r4,r2
  80db44:	d8800915 	stw	r2,36(sp)
  80db48:	080fb100 	call	80fb10 <__mcmp>
  80db4c:	da001717 	ldw	r8,92(sp)
  80db50:	0081800e 	bge	zero,r2,80e154 <_dtoa_r+0x11d4>
  80db54:	b93fffc3 	ldbu	r4,-1(r23)
  80db58:	b8bfffc4 	addi	r2,r23,-1
  80db5c:	1007883a 	mov	r3,r2
  80db60:	01800e44 	movi	r6,57
  80db64:	d9c00717 	ldw	r7,28(sp)
  80db68:	00000506 	br	80db80 <_dtoa_r+0xc00>
  80db6c:	18ffffc4 	addi	r3,r3,-1
  80db70:	11c12326 	beq	r2,r7,80e000 <_dtoa_r+0x1080>
  80db74:	19000003 	ldbu	r4,0(r3)
  80db78:	102f883a 	mov	r23,r2
  80db7c:	10bfffc4 	addi	r2,r2,-1
  80db80:	21403fcc 	andi	r5,r4,255
  80db84:	2940201c 	xori	r5,r5,128
  80db88:	297fe004 	addi	r5,r5,-128
  80db8c:	29bff726 	beq	r5,r6,80db6c <__alt_mem_onchip_mem+0xff805b6c>
  80db90:	21000044 	addi	r4,r4,1
  80db94:	11000005 	stb	r4,0(r2)
  80db98:	a80b883a 	mov	r5,r21
  80db9c:	e009883a 	mov	r4,fp
  80dba0:	080f2f00 	call	80f2f0 <_Bfree>
  80dba4:	883ea026 	beq	r17,zero,80d628 <__alt_mem_onchip_mem+0xff805628>
  80dba8:	90000426 	beq	r18,zero,80dbbc <_dtoa_r+0xc3c>
  80dbac:	94400326 	beq	r18,r17,80dbbc <_dtoa_r+0xc3c>
  80dbb0:	900b883a 	mov	r5,r18
  80dbb4:	e009883a 	mov	r4,fp
  80dbb8:	080f2f00 	call	80f2f0 <_Bfree>
  80dbbc:	880b883a 	mov	r5,r17
  80dbc0:	e009883a 	mov	r4,fp
  80dbc4:	080f2f00 	call	80f2f0 <_Bfree>
  80dbc8:	003e9706 	br	80d628 <__alt_mem_onchip_mem+0xff805628>
  80dbcc:	01800044 	movi	r6,1
  80dbd0:	d9800e15 	stw	r6,56(sp)
  80dbd4:	003d9606 	br	80d230 <__alt_mem_onchip_mem+0xff805230>
  80dbd8:	d8800817 	ldw	r2,32(sp)
  80dbdc:	d8c00517 	ldw	r3,20(sp)
  80dbe0:	d8000d15 	stw	zero,52(sp)
  80dbe4:	10c5c83a 	sub	r2,r2,r3
  80dbe8:	00c9c83a 	sub	r4,zero,r3
  80dbec:	d8800815 	stw	r2,32(sp)
  80dbf0:	d9000a15 	stw	r4,40(sp)
  80dbf4:	003d9706 	br	80d254 <__alt_mem_onchip_mem+0xff805254>
  80dbf8:	05adc83a 	sub	r22,zero,r22
  80dbfc:	dd800815 	stw	r22,32(sp)
  80dc00:	002d883a 	mov	r22,zero
  80dc04:	003d8e06 	br	80d240 <__alt_mem_onchip_mem+0xff805240>
  80dc08:	d9000517 	ldw	r4,20(sp)
  80dc0c:	0808e200 	call	808e20 <__floatsidf>
  80dc10:	100d883a 	mov	r6,r2
  80dc14:	180f883a 	mov	r7,r3
  80dc18:	a009883a 	mov	r4,r20
  80dc1c:	880b883a 	mov	r5,r17
  80dc20:	0812b940 	call	812b94 <__eqdf2>
  80dc24:	103d7126 	beq	r2,zero,80d1ec <__alt_mem_onchip_mem+0xff8051ec>
  80dc28:	d9c00517 	ldw	r7,20(sp)
  80dc2c:	39ffffc4 	addi	r7,r7,-1
  80dc30:	d9c00515 	stw	r7,20(sp)
  80dc34:	003d6d06 	br	80d1ec <__alt_mem_onchip_mem+0xff8051ec>
  80dc38:	dd400a17 	ldw	r21,40(sp)
  80dc3c:	dd000817 	ldw	r20,32(sp)
  80dc40:	0023883a 	mov	r17,zero
  80dc44:	003f4806 	br	80d968 <__alt_mem_onchip_mem+0xff805968>
  80dc48:	10e3c83a 	sub	r17,r2,r3
  80dc4c:	9448983a 	sll	r4,r18,r17
  80dc50:	003d3206 	br	80d11c <__alt_mem_onchip_mem+0xff80511c>
  80dc54:	d8000e15 	stw	zero,56(sp)
  80dc58:	003d7506 	br	80d230 <__alt_mem_onchip_mem+0xff805230>
  80dc5c:	b005883a 	mov	r2,r22
  80dc60:	003f4506 	br	80d978 <__alt_mem_onchip_mem+0xff805978>
  80dc64:	dc000915 	stw	r16,36(sp)
  80dc68:	d9800a17 	ldw	r6,40(sp)
  80dc6c:	d9400917 	ldw	r5,36(sp)
  80dc70:	e009883a 	mov	r4,fp
  80dc74:	080f8880 	call	80f888 <__pow5mult>
  80dc78:	1021883a 	mov	r16,r2
  80dc7c:	003f5a06 	br	80d9e8 <__alt_mem_onchip_mem+0xff8059e8>
  80dc80:	01c00044 	movi	r7,1
  80dc84:	d9c00b15 	stw	r7,44(sp)
  80dc88:	d8802217 	ldw	r2,136(sp)
  80dc8c:	0081280e 	bge	zero,r2,80e130 <_dtoa_r+0x11b0>
  80dc90:	100d883a 	mov	r6,r2
  80dc94:	1021883a 	mov	r16,r2
  80dc98:	d8800c15 	stw	r2,48(sp)
  80dc9c:	d8800615 	stw	r2,24(sp)
  80dca0:	003d8806 	br	80d2c4 <__alt_mem_onchip_mem+0xff8052c4>
  80dca4:	d8800617 	ldw	r2,24(sp)
  80dca8:	00be9b16 	blt	zero,r2,80d718 <__alt_mem_onchip_mem+0xff805718>
  80dcac:	10010f1e 	bne	r2,zero,80e0ec <_dtoa_r+0x116c>
  80dcb0:	880b883a 	mov	r5,r17
  80dcb4:	000d883a 	mov	r6,zero
  80dcb8:	01d00534 	movhi	r7,16404
  80dcbc:	8009883a 	mov	r4,r16
  80dcc0:	0807e0c0 	call	807e0c <__muldf3>
  80dcc4:	900d883a 	mov	r6,r18
  80dcc8:	980f883a 	mov	r7,r19
  80dccc:	1009883a 	mov	r4,r2
  80dcd0:	180b883a 	mov	r5,r3
  80dcd4:	0807c3c0 	call	807c3c <__gedf2>
  80dcd8:	002b883a 	mov	r21,zero
  80dcdc:	0023883a 	mov	r17,zero
  80dce0:	1000bf16 	blt	r2,zero,80dfe0 <_dtoa_r+0x1060>
  80dce4:	d9802217 	ldw	r6,136(sp)
  80dce8:	ddc00717 	ldw	r23,28(sp)
  80dcec:	018c303a 	nor	r6,zero,r6
  80dcf0:	d9800515 	stw	r6,20(sp)
  80dcf4:	a80b883a 	mov	r5,r21
  80dcf8:	e009883a 	mov	r4,fp
  80dcfc:	080f2f00 	call	80f2f0 <_Bfree>
  80dd00:	883e4926 	beq	r17,zero,80d628 <__alt_mem_onchip_mem+0xff805628>
  80dd04:	003fad06 	br	80dbbc <__alt_mem_onchip_mem+0xff805bbc>
  80dd08:	d9c01117 	ldw	r7,68(sp)
  80dd0c:	3801bc26 	beq	r7,zero,80e400 <_dtoa_r+0x1480>
  80dd10:	10810cc4 	addi	r2,r2,1075
  80dd14:	dd400a17 	ldw	r21,40(sp)
  80dd18:	dd000817 	ldw	r20,32(sp)
  80dd1c:	003f0a06 	br	80d948 <__alt_mem_onchip_mem+0xff805948>
  80dd20:	00800704 	movi	r2,28
  80dd24:	d9000817 	ldw	r4,32(sp)
  80dd28:	a0a9883a 	add	r20,r20,r2
  80dd2c:	b0ad883a 	add	r22,r22,r2
  80dd30:	2089883a 	add	r4,r4,r2
  80dd34:	d9000815 	stw	r4,32(sp)
  80dd38:	003f5106 	br	80da80 <__alt_mem_onchip_mem+0xff805a80>
  80dd3c:	d8c00317 	ldw	r3,12(sp)
  80dd40:	b8c1fc0e 	bge	r23,r3,80e534 <_dtoa_r+0x15b4>
  80dd44:	0027883a 	mov	r19,zero
  80dd48:	b805883a 	mov	r2,r23
  80dd4c:	003f3e06 	br	80da48 <__alt_mem_onchip_mem+0xff805a48>
  80dd50:	880b883a 	mov	r5,r17
  80dd54:	e009883a 	mov	r4,fp
  80dd58:	000f883a 	mov	r7,zero
  80dd5c:	01800284 	movi	r6,10
  80dd60:	080f3180 	call	80f318 <__multadd>
  80dd64:	d9000c17 	ldw	r4,48(sp)
  80dd68:	1023883a 	mov	r17,r2
  80dd6c:	0102040e 	bge	zero,r4,80e580 <_dtoa_r+0x1600>
  80dd70:	d9000615 	stw	r4,24(sp)
  80dd74:	0500050e 	bge	zero,r20,80dd8c <_dtoa_r+0xe0c>
  80dd78:	880b883a 	mov	r5,r17
  80dd7c:	a00d883a 	mov	r6,r20
  80dd80:	e009883a 	mov	r4,fp
  80dd84:	080f9c80 	call	80f9c8 <__lshift>
  80dd88:	1023883a 	mov	r17,r2
  80dd8c:	9801241e 	bne	r19,zero,80e220 <_dtoa_r+0x12a0>
  80dd90:	8829883a 	mov	r20,r17
  80dd94:	d9000617 	ldw	r4,24(sp)
  80dd98:	dcc00717 	ldw	r19,28(sp)
  80dd9c:	9480004c 	andi	r18,r18,1
  80dda0:	20bfffc4 	addi	r2,r4,-1
  80dda4:	9885883a 	add	r2,r19,r2
  80dda8:	d8800415 	stw	r2,16(sp)
  80ddac:	dc800615 	stw	r18,24(sp)
  80ddb0:	a80b883a 	mov	r5,r21
  80ddb4:	8009883a 	mov	r4,r16
  80ddb8:	080cd800 	call	80cd80 <quorem>
  80ddbc:	880b883a 	mov	r5,r17
  80ddc0:	8009883a 	mov	r4,r16
  80ddc4:	102f883a 	mov	r23,r2
  80ddc8:	080fb100 	call	80fb10 <__mcmp>
  80ddcc:	a80b883a 	mov	r5,r21
  80ddd0:	a00d883a 	mov	r6,r20
  80ddd4:	e009883a 	mov	r4,fp
  80ddd8:	102d883a 	mov	r22,r2
  80dddc:	080fb700 	call	80fb70 <__mdiff>
  80dde0:	1007883a 	mov	r3,r2
  80dde4:	10800317 	ldw	r2,12(r2)
  80dde8:	bc800c04 	addi	r18,r23,48
  80ddec:	180b883a 	mov	r5,r3
  80ddf0:	10004e1e 	bne	r2,zero,80df2c <_dtoa_r+0xfac>
  80ddf4:	8009883a 	mov	r4,r16
  80ddf8:	d8c01615 	stw	r3,88(sp)
  80ddfc:	080fb100 	call	80fb10 <__mcmp>
  80de00:	d8c01617 	ldw	r3,88(sp)
  80de04:	e009883a 	mov	r4,fp
  80de08:	d8801615 	stw	r2,88(sp)
  80de0c:	180b883a 	mov	r5,r3
  80de10:	080f2f00 	call	80f2f0 <_Bfree>
  80de14:	d8801617 	ldw	r2,88(sp)
  80de18:	1000041e 	bne	r2,zero,80de2c <_dtoa_r+0xeac>
  80de1c:	d9800317 	ldw	r6,12(sp)
  80de20:	3000021e 	bne	r6,zero,80de2c <_dtoa_r+0xeac>
  80de24:	d8c00617 	ldw	r3,24(sp)
  80de28:	18003726 	beq	r3,zero,80df08 <_dtoa_r+0xf88>
  80de2c:	b0002016 	blt	r22,zero,80deb0 <_dtoa_r+0xf30>
  80de30:	b000041e 	bne	r22,zero,80de44 <_dtoa_r+0xec4>
  80de34:	d9000317 	ldw	r4,12(sp)
  80de38:	2000021e 	bne	r4,zero,80de44 <_dtoa_r+0xec4>
  80de3c:	d8c00617 	ldw	r3,24(sp)
  80de40:	18001b26 	beq	r3,zero,80deb0 <_dtoa_r+0xf30>
  80de44:	00810716 	blt	zero,r2,80e264 <_dtoa_r+0x12e4>
  80de48:	d8c00417 	ldw	r3,16(sp)
  80de4c:	9d800044 	addi	r22,r19,1
  80de50:	9c800005 	stb	r18,0(r19)
  80de54:	b02f883a 	mov	r23,r22
  80de58:	98c10626 	beq	r19,r3,80e274 <_dtoa_r+0x12f4>
  80de5c:	800b883a 	mov	r5,r16
  80de60:	000f883a 	mov	r7,zero
  80de64:	01800284 	movi	r6,10
  80de68:	e009883a 	mov	r4,fp
  80de6c:	080f3180 	call	80f318 <__multadd>
  80de70:	1021883a 	mov	r16,r2
  80de74:	000f883a 	mov	r7,zero
  80de78:	01800284 	movi	r6,10
  80de7c:	880b883a 	mov	r5,r17
  80de80:	e009883a 	mov	r4,fp
  80de84:	8d002526 	beq	r17,r20,80df1c <_dtoa_r+0xf9c>
  80de88:	080f3180 	call	80f318 <__multadd>
  80de8c:	a00b883a 	mov	r5,r20
  80de90:	000f883a 	mov	r7,zero
  80de94:	01800284 	movi	r6,10
  80de98:	e009883a 	mov	r4,fp
  80de9c:	1023883a 	mov	r17,r2
  80dea0:	080f3180 	call	80f318 <__multadd>
  80dea4:	1029883a 	mov	r20,r2
  80dea8:	b027883a 	mov	r19,r22
  80deac:	003fc006 	br	80ddb0 <__alt_mem_onchip_mem+0xff805db0>
  80deb0:	9011883a 	mov	r8,r18
  80deb4:	00800e0e 	bge	zero,r2,80def0 <_dtoa_r+0xf70>
  80deb8:	800b883a 	mov	r5,r16
  80debc:	01800044 	movi	r6,1
  80dec0:	e009883a 	mov	r4,fp
  80dec4:	da001715 	stw	r8,92(sp)
  80dec8:	080f9c80 	call	80f9c8 <__lshift>
  80decc:	a80b883a 	mov	r5,r21
  80ded0:	1009883a 	mov	r4,r2
  80ded4:	1021883a 	mov	r16,r2
  80ded8:	080fb100 	call	80fb10 <__mcmp>
  80dedc:	da001717 	ldw	r8,92(sp)
  80dee0:	0081960e 	bge	zero,r2,80e53c <_dtoa_r+0x15bc>
  80dee4:	00800e44 	movi	r2,57
  80dee8:	40817026 	beq	r8,r2,80e4ac <_dtoa_r+0x152c>
  80deec:	ba000c44 	addi	r8,r23,49
  80def0:	8825883a 	mov	r18,r17
  80def4:	9dc00044 	addi	r23,r19,1
  80def8:	9a000005 	stb	r8,0(r19)
  80defc:	a023883a 	mov	r17,r20
  80df00:	dc000915 	stw	r16,36(sp)
  80df04:	003f2406 	br	80db98 <__alt_mem_onchip_mem+0xff805b98>
  80df08:	00800e44 	movi	r2,57
  80df0c:	9011883a 	mov	r8,r18
  80df10:	90816626 	beq	r18,r2,80e4ac <_dtoa_r+0x152c>
  80df14:	05bff516 	blt	zero,r22,80deec <__alt_mem_onchip_mem+0xff805eec>
  80df18:	003ff506 	br	80def0 <__alt_mem_onchip_mem+0xff805ef0>
  80df1c:	080f3180 	call	80f318 <__multadd>
  80df20:	1023883a 	mov	r17,r2
  80df24:	1029883a 	mov	r20,r2
  80df28:	003fdf06 	br	80dea8 <__alt_mem_onchip_mem+0xff805ea8>
  80df2c:	e009883a 	mov	r4,fp
  80df30:	080f2f00 	call	80f2f0 <_Bfree>
  80df34:	00800044 	movi	r2,1
  80df38:	003fbc06 	br	80de2c <__alt_mem_onchip_mem+0xff805e2c>
  80df3c:	a80b883a 	mov	r5,r21
  80df40:	8009883a 	mov	r4,r16
  80df44:	080fb100 	call	80fb10 <__mcmp>
  80df48:	103edb0e 	bge	r2,zero,80dab8 <__alt_mem_onchip_mem+0xff805ab8>
  80df4c:	800b883a 	mov	r5,r16
  80df50:	000f883a 	mov	r7,zero
  80df54:	01800284 	movi	r6,10
  80df58:	e009883a 	mov	r4,fp
  80df5c:	080f3180 	call	80f318 <__multadd>
  80df60:	1021883a 	mov	r16,r2
  80df64:	d8800517 	ldw	r2,20(sp)
  80df68:	d8c00b17 	ldw	r3,44(sp)
  80df6c:	10bfffc4 	addi	r2,r2,-1
  80df70:	d8800515 	stw	r2,20(sp)
  80df74:	183f761e 	bne	r3,zero,80dd50 <__alt_mem_onchip_mem+0xff805d50>
  80df78:	d9000c17 	ldw	r4,48(sp)
  80df7c:	0101730e 	bge	zero,r4,80e54c <_dtoa_r+0x15cc>
  80df80:	d9000615 	stw	r4,24(sp)
  80df84:	003ed006 	br	80dac8 <__alt_mem_onchip_mem+0xff805ac8>
  80df88:	00800084 	movi	r2,2
  80df8c:	3081861e 	bne	r6,r2,80e5a8 <_dtoa_r+0x1628>
  80df90:	d8000b15 	stw	zero,44(sp)
  80df94:	003f3c06 	br	80dc88 <__alt_mem_onchip_mem+0xff805c88>
  80df98:	dc000917 	ldw	r16,36(sp)
  80df9c:	003e9206 	br	80d9e8 <__alt_mem_onchip_mem+0xff8059e8>
  80dfa0:	d9c00317 	ldw	r7,12(sp)
  80dfa4:	00800084 	movi	r2,2
  80dfa8:	11fec50e 	bge	r2,r7,80dac0 <__alt_mem_onchip_mem+0xff805ac0>
  80dfac:	d9000617 	ldw	r4,24(sp)
  80dfb0:	20013c1e 	bne	r4,zero,80e4a4 <_dtoa_r+0x1524>
  80dfb4:	a80b883a 	mov	r5,r21
  80dfb8:	000f883a 	mov	r7,zero
  80dfbc:	01800144 	movi	r6,5
  80dfc0:	e009883a 	mov	r4,fp
  80dfc4:	080f3180 	call	80f318 <__multadd>
  80dfc8:	100b883a 	mov	r5,r2
  80dfcc:	8009883a 	mov	r4,r16
  80dfd0:	102b883a 	mov	r21,r2
  80dfd4:	080fb100 	call	80fb10 <__mcmp>
  80dfd8:	dc000915 	stw	r16,36(sp)
  80dfdc:	00bf410e 	bge	zero,r2,80dce4 <__alt_mem_onchip_mem+0xff805ce4>
  80dfe0:	d9c00717 	ldw	r7,28(sp)
  80dfe4:	00800c44 	movi	r2,49
  80dfe8:	38800005 	stb	r2,0(r7)
  80dfec:	d8800517 	ldw	r2,20(sp)
  80dff0:	3dc00044 	addi	r23,r7,1
  80dff4:	10800044 	addi	r2,r2,1
  80dff8:	d8800515 	stw	r2,20(sp)
  80dffc:	003f3d06 	br	80dcf4 <__alt_mem_onchip_mem+0xff805cf4>
  80e000:	d9800517 	ldw	r6,20(sp)
  80e004:	d9c00717 	ldw	r7,28(sp)
  80e008:	00800c44 	movi	r2,49
  80e00c:	31800044 	addi	r6,r6,1
  80e010:	d9800515 	stw	r6,20(sp)
  80e014:	38800005 	stb	r2,0(r7)
  80e018:	003edf06 	br	80db98 <__alt_mem_onchip_mem+0xff805b98>
  80e01c:	d8000b15 	stw	zero,44(sp)
  80e020:	003c9f06 	br	80d2a0 <__alt_mem_onchip_mem+0xff8052a0>
  80e024:	903e7e1e 	bne	r18,zero,80da20 <__alt_mem_onchip_mem+0xff805a20>
  80e028:	00800434 	movhi	r2,16
  80e02c:	10bfffc4 	addi	r2,r2,-1
  80e030:	9884703a 	and	r2,r19,r2
  80e034:	1000ea1e 	bne	r2,zero,80e3e0 <_dtoa_r+0x1460>
  80e038:	9cdffc2c 	andhi	r19,r19,32752
  80e03c:	9800e826 	beq	r19,zero,80e3e0 <_dtoa_r+0x1460>
  80e040:	d9c00817 	ldw	r7,32(sp)
  80e044:	b5800044 	addi	r22,r22,1
  80e048:	04c00044 	movi	r19,1
  80e04c:	39c00044 	addi	r7,r7,1
  80e050:	d9c00815 	stw	r7,32(sp)
  80e054:	d8800d17 	ldw	r2,52(sp)
  80e058:	103e721e 	bne	r2,zero,80da24 <__alt_mem_onchip_mem+0xff805a24>
  80e05c:	00800044 	movi	r2,1
  80e060:	003e7906 	br	80da48 <__alt_mem_onchip_mem+0xff805a48>
  80e064:	8009883a 	mov	r4,r16
  80e068:	0808e200 	call	808e20 <__floatsidf>
  80e06c:	d9800f17 	ldw	r6,60(sp)
  80e070:	d9c01017 	ldw	r7,64(sp)
  80e074:	1009883a 	mov	r4,r2
  80e078:	180b883a 	mov	r5,r3
  80e07c:	0807e0c0 	call	807e0c <__muldf3>
  80e080:	000d883a 	mov	r6,zero
  80e084:	01d00734 	movhi	r7,16412
  80e088:	1009883a 	mov	r4,r2
  80e08c:	180b883a 	mov	r5,r3
  80e090:	0806aa80 	call	806aa8 <__adddf3>
  80e094:	047f3034 	movhi	r17,64704
  80e098:	1021883a 	mov	r16,r2
  80e09c:	1c63883a 	add	r17,r3,r17
  80e0a0:	d9000f17 	ldw	r4,60(sp)
  80e0a4:	d9401017 	ldw	r5,64(sp)
  80e0a8:	000d883a 	mov	r6,zero
  80e0ac:	01d00534 	movhi	r7,16404
  80e0b0:	08085240 	call	808524 <__subdf3>
  80e0b4:	800d883a 	mov	r6,r16
  80e0b8:	880f883a 	mov	r7,r17
  80e0bc:	1009883a 	mov	r4,r2
  80e0c0:	180b883a 	mov	r5,r3
  80e0c4:	102b883a 	mov	r21,r2
  80e0c8:	1829883a 	mov	r20,r3
  80e0cc:	0807c3c0 	call	807c3c <__gedf2>
  80e0d0:	00806c16 	blt	zero,r2,80e284 <_dtoa_r+0x1304>
  80e0d4:	89e0003c 	xorhi	r7,r17,32768
  80e0d8:	800d883a 	mov	r6,r16
  80e0dc:	a809883a 	mov	r4,r21
  80e0e0:	a00b883a 	mov	r5,r20
  80e0e4:	0807d180 	call	807d18 <__ledf2>
  80e0e8:	103d7e0e 	bge	r2,zero,80d6e4 <__alt_mem_onchip_mem+0xff8056e4>
  80e0ec:	002b883a 	mov	r21,zero
  80e0f0:	0023883a 	mov	r17,zero
  80e0f4:	003efb06 	br	80dce4 <__alt_mem_onchip_mem+0xff805ce4>
  80e0f8:	d8800717 	ldw	r2,28(sp)
  80e0fc:	003bd006 	br	80d040 <__alt_mem_onchip_mem+0xff805040>
  80e100:	d9000a17 	ldw	r4,40(sp)
  80e104:	d9800d17 	ldw	r6,52(sp)
  80e108:	dd400a15 	stw	r21,40(sp)
  80e10c:	a905c83a 	sub	r2,r21,r4
  80e110:	308d883a 	add	r6,r6,r2
  80e114:	d9800d15 	stw	r6,52(sp)
  80e118:	002b883a 	mov	r21,zero
  80e11c:	003e0606 	br	80d938 <__alt_mem_onchip_mem+0xff805938>
  80e120:	9023883a 	mov	r17,r18
  80e124:	9829883a 	mov	r20,r19
  80e128:	04000084 	movi	r16,2
  80e12c:	003c9206 	br	80d378 <__alt_mem_onchip_mem+0xff805378>
  80e130:	04000044 	movi	r16,1
  80e134:	dc000c15 	stw	r16,48(sp)
  80e138:	dc000615 	stw	r16,24(sp)
  80e13c:	dc002215 	stw	r16,136(sp)
  80e140:	e0001115 	stw	zero,68(fp)
  80e144:	000b883a 	mov	r5,zero
  80e148:	003c6906 	br	80d2f0 <__alt_mem_onchip_mem+0xff8052f0>
  80e14c:	3021883a 	mov	r16,r6
  80e150:	003ffb06 	br	80e140 <__alt_mem_onchip_mem+0xff806140>
  80e154:	1000021e 	bne	r2,zero,80e160 <_dtoa_r+0x11e0>
  80e158:	4200004c 	andi	r8,r8,1
  80e15c:	403e7d1e 	bne	r8,zero,80db54 <__alt_mem_onchip_mem+0xff805b54>
  80e160:	01000c04 	movi	r4,48
  80e164:	00000106 	br	80e16c <_dtoa_r+0x11ec>
  80e168:	102f883a 	mov	r23,r2
  80e16c:	b8bfffc4 	addi	r2,r23,-1
  80e170:	10c00007 	ldb	r3,0(r2)
  80e174:	193ffc26 	beq	r3,r4,80e168 <__alt_mem_onchip_mem+0xff806168>
  80e178:	003e8706 	br	80db98 <__alt_mem_onchip_mem+0xff805b98>
  80e17c:	d8800517 	ldw	r2,20(sp)
  80e180:	00a3c83a 	sub	r17,zero,r2
  80e184:	8800a426 	beq	r17,zero,80e418 <_dtoa_r+0x1498>
  80e188:	888003cc 	andi	r2,r17,15
  80e18c:	100490fa 	slli	r2,r2,3
  80e190:	00c02074 	movhi	r3,129
  80e194:	18dca704 	addi	r3,r3,29340
  80e198:	1885883a 	add	r2,r3,r2
  80e19c:	11800017 	ldw	r6,0(r2)
  80e1a0:	11c00117 	ldw	r7,4(r2)
  80e1a4:	9009883a 	mov	r4,r18
  80e1a8:	980b883a 	mov	r5,r19
  80e1ac:	8823d13a 	srai	r17,r17,4
  80e1b0:	0807e0c0 	call	807e0c <__muldf3>
  80e1b4:	d8800f15 	stw	r2,60(sp)
  80e1b8:	d8c01015 	stw	r3,64(sp)
  80e1bc:	8800e826 	beq	r17,zero,80e560 <_dtoa_r+0x15e0>
  80e1c0:	05002074 	movhi	r20,129
  80e1c4:	a51c9d04 	addi	r20,r20,29300
  80e1c8:	04000084 	movi	r16,2
  80e1cc:	8980004c 	andi	r6,r17,1
  80e1d0:	1009883a 	mov	r4,r2
  80e1d4:	8823d07a 	srai	r17,r17,1
  80e1d8:	180b883a 	mov	r5,r3
  80e1dc:	30000426 	beq	r6,zero,80e1f0 <_dtoa_r+0x1270>
  80e1e0:	a1800017 	ldw	r6,0(r20)
  80e1e4:	a1c00117 	ldw	r7,4(r20)
  80e1e8:	84000044 	addi	r16,r16,1
  80e1ec:	0807e0c0 	call	807e0c <__muldf3>
  80e1f0:	a5000204 	addi	r20,r20,8
  80e1f4:	883ff51e 	bne	r17,zero,80e1cc <__alt_mem_onchip_mem+0xff8061cc>
  80e1f8:	d8800f15 	stw	r2,60(sp)
  80e1fc:	d8c01015 	stw	r3,64(sp)
  80e200:	003c7606 	br	80d3dc <__alt_mem_onchip_mem+0xff8053dc>
  80e204:	00c00c04 	movi	r3,48
  80e208:	10c00005 	stb	r3,0(r2)
  80e20c:	d8c00517 	ldw	r3,20(sp)
  80e210:	bd3fffc3 	ldbu	r20,-1(r23)
  80e214:	18c00044 	addi	r3,r3,1
  80e218:	d8c00515 	stw	r3,20(sp)
  80e21c:	003db906 	br	80d904 <__alt_mem_onchip_mem+0xff805904>
  80e220:	89400117 	ldw	r5,4(r17)
  80e224:	e009883a 	mov	r4,fp
  80e228:	080f2480 	call	80f248 <_Balloc>
  80e22c:	89800417 	ldw	r6,16(r17)
  80e230:	89400304 	addi	r5,r17,12
  80e234:	11000304 	addi	r4,r2,12
  80e238:	31800084 	addi	r6,r6,2
  80e23c:	318d883a 	add	r6,r6,r6
  80e240:	318d883a 	add	r6,r6,r6
  80e244:	1027883a 	mov	r19,r2
  80e248:	080efa40 	call	80efa4 <memcpy>
  80e24c:	01800044 	movi	r6,1
  80e250:	980b883a 	mov	r5,r19
  80e254:	e009883a 	mov	r4,fp
  80e258:	080f9c80 	call	80f9c8 <__lshift>
  80e25c:	1029883a 	mov	r20,r2
  80e260:	003ecc06 	br	80dd94 <__alt_mem_onchip_mem+0xff805d94>
  80e264:	00800e44 	movi	r2,57
  80e268:	90809026 	beq	r18,r2,80e4ac <_dtoa_r+0x152c>
  80e26c:	92000044 	addi	r8,r18,1
  80e270:	003f1f06 	br	80def0 <__alt_mem_onchip_mem+0xff805ef0>
  80e274:	9011883a 	mov	r8,r18
  80e278:	8825883a 	mov	r18,r17
  80e27c:	a023883a 	mov	r17,r20
  80e280:	003e2906 	br	80db28 <__alt_mem_onchip_mem+0xff805b28>
  80e284:	002b883a 	mov	r21,zero
  80e288:	0023883a 	mov	r17,zero
  80e28c:	003f5406 	br	80dfe0 <__alt_mem_onchip_mem+0xff805fe0>
  80e290:	61bfffc4 	addi	r6,r12,-1
  80e294:	300490fa 	slli	r2,r6,3
  80e298:	00c02074 	movhi	r3,129
  80e29c:	18dca704 	addi	r3,r3,29340
  80e2a0:	1885883a 	add	r2,r3,r2
  80e2a4:	11000017 	ldw	r4,0(r2)
  80e2a8:	11400117 	ldw	r5,4(r2)
  80e2ac:	d8800717 	ldw	r2,28(sp)
  80e2b0:	880f883a 	mov	r7,r17
  80e2b4:	d9801215 	stw	r6,72(sp)
  80e2b8:	800d883a 	mov	r6,r16
  80e2bc:	db001615 	stw	r12,88(sp)
  80e2c0:	15c00044 	addi	r23,r2,1
  80e2c4:	0807e0c0 	call	807e0c <__muldf3>
  80e2c8:	d9401017 	ldw	r5,64(sp)
  80e2cc:	d9000f17 	ldw	r4,60(sp)
  80e2d0:	d8c01515 	stw	r3,84(sp)
  80e2d4:	d8801415 	stw	r2,80(sp)
  80e2d8:	0812c1c0 	call	812c1c <__fixdfsi>
  80e2dc:	1009883a 	mov	r4,r2
  80e2e0:	1021883a 	mov	r16,r2
  80e2e4:	0808e200 	call	808e20 <__floatsidf>
  80e2e8:	d9000f17 	ldw	r4,60(sp)
  80e2ec:	d9401017 	ldw	r5,64(sp)
  80e2f0:	100d883a 	mov	r6,r2
  80e2f4:	180f883a 	mov	r7,r3
  80e2f8:	08085240 	call	808524 <__subdf3>
  80e2fc:	1829883a 	mov	r20,r3
  80e300:	d8c00717 	ldw	r3,28(sp)
  80e304:	84000c04 	addi	r16,r16,48
  80e308:	1023883a 	mov	r17,r2
  80e30c:	1c000005 	stb	r16,0(r3)
  80e310:	db001617 	ldw	r12,88(sp)
  80e314:	00800044 	movi	r2,1
  80e318:	60802226 	beq	r12,r2,80e3a4 <_dtoa_r+0x1424>
  80e31c:	d9c00717 	ldw	r7,28(sp)
  80e320:	8805883a 	mov	r2,r17
  80e324:	b82b883a 	mov	r21,r23
  80e328:	3b19883a 	add	r12,r7,r12
  80e32c:	6023883a 	mov	r17,r12
  80e330:	a007883a 	mov	r3,r20
  80e334:	dc800f15 	stw	r18,60(sp)
  80e338:	000d883a 	mov	r6,zero
  80e33c:	01d00934 	movhi	r7,16420
  80e340:	1009883a 	mov	r4,r2
  80e344:	180b883a 	mov	r5,r3
  80e348:	0807e0c0 	call	807e0c <__muldf3>
  80e34c:	180b883a 	mov	r5,r3
  80e350:	1009883a 	mov	r4,r2
  80e354:	1829883a 	mov	r20,r3
  80e358:	1025883a 	mov	r18,r2
  80e35c:	0812c1c0 	call	812c1c <__fixdfsi>
  80e360:	1009883a 	mov	r4,r2
  80e364:	1021883a 	mov	r16,r2
  80e368:	0808e200 	call	808e20 <__floatsidf>
  80e36c:	100d883a 	mov	r6,r2
  80e370:	180f883a 	mov	r7,r3
  80e374:	9009883a 	mov	r4,r18
  80e378:	a00b883a 	mov	r5,r20
  80e37c:	84000c04 	addi	r16,r16,48
  80e380:	08085240 	call	808524 <__subdf3>
  80e384:	ad400044 	addi	r21,r21,1
  80e388:	ac3fffc5 	stb	r16,-1(r21)
  80e38c:	ac7fea1e 	bne	r21,r17,80e338 <__alt_mem_onchip_mem+0xff806338>
  80e390:	1023883a 	mov	r17,r2
  80e394:	d8801217 	ldw	r2,72(sp)
  80e398:	dc800f17 	ldw	r18,60(sp)
  80e39c:	1829883a 	mov	r20,r3
  80e3a0:	b8af883a 	add	r23,r23,r2
  80e3a4:	d9001417 	ldw	r4,80(sp)
  80e3a8:	d9401517 	ldw	r5,84(sp)
  80e3ac:	000d883a 	mov	r6,zero
  80e3b0:	01cff834 	movhi	r7,16352
  80e3b4:	0806aa80 	call	806aa8 <__adddf3>
  80e3b8:	880d883a 	mov	r6,r17
  80e3bc:	a00f883a 	mov	r7,r20
  80e3c0:	1009883a 	mov	r4,r2
  80e3c4:	180b883a 	mov	r5,r3
  80e3c8:	0807d180 	call	807d18 <__ledf2>
  80e3cc:	10003e0e 	bge	r2,zero,80e4c8 <_dtoa_r+0x1548>
  80e3d0:	d9001317 	ldw	r4,76(sp)
  80e3d4:	bd3fffc3 	ldbu	r20,-1(r23)
  80e3d8:	d9000515 	stw	r4,20(sp)
  80e3dc:	003d3b06 	br	80d8cc <__alt_mem_onchip_mem+0xff8058cc>
  80e3e0:	0027883a 	mov	r19,zero
  80e3e4:	003f1b06 	br	80e054 <__alt_mem_onchip_mem+0xff806054>
  80e3e8:	d8800817 	ldw	r2,32(sp)
  80e3ec:	11e9c83a 	sub	r20,r2,r7
  80e3f0:	0005883a 	mov	r2,zero
  80e3f4:	003d5406 	br	80d948 <__alt_mem_onchip_mem+0xff805948>
  80e3f8:	00800044 	movi	r2,1
  80e3fc:	003dc706 	br	80db1c <__alt_mem_onchip_mem+0xff805b1c>
  80e400:	d8c00217 	ldw	r3,8(sp)
  80e404:	00800d84 	movi	r2,54
  80e408:	dd400a17 	ldw	r21,40(sp)
  80e40c:	10c5c83a 	sub	r2,r2,r3
  80e410:	dd000817 	ldw	r20,32(sp)
  80e414:	003d4c06 	br	80d948 <__alt_mem_onchip_mem+0xff805948>
  80e418:	dc800f15 	stw	r18,60(sp)
  80e41c:	dcc01015 	stw	r19,64(sp)
  80e420:	04000084 	movi	r16,2
  80e424:	003bed06 	br	80d3dc <__alt_mem_onchip_mem+0xff8053dc>
  80e428:	d9000617 	ldw	r4,24(sp)
  80e42c:	203f0d26 	beq	r4,zero,80e064 <__alt_mem_onchip_mem+0xff806064>
  80e430:	d9800c17 	ldw	r6,48(sp)
  80e434:	01bcab0e 	bge	zero,r6,80d6e4 <__alt_mem_onchip_mem+0xff8056e4>
  80e438:	d9401017 	ldw	r5,64(sp)
  80e43c:	d9000f17 	ldw	r4,60(sp)
  80e440:	000d883a 	mov	r6,zero
  80e444:	01d00934 	movhi	r7,16420
  80e448:	0807e0c0 	call	807e0c <__muldf3>
  80e44c:	81000044 	addi	r4,r16,1
  80e450:	d8800f15 	stw	r2,60(sp)
  80e454:	d8c01015 	stw	r3,64(sp)
  80e458:	0808e200 	call	808e20 <__floatsidf>
  80e45c:	d9800f17 	ldw	r6,60(sp)
  80e460:	d9c01017 	ldw	r7,64(sp)
  80e464:	1009883a 	mov	r4,r2
  80e468:	180b883a 	mov	r5,r3
  80e46c:	0807e0c0 	call	807e0c <__muldf3>
  80e470:	01d00734 	movhi	r7,16412
  80e474:	000d883a 	mov	r6,zero
  80e478:	1009883a 	mov	r4,r2
  80e47c:	180b883a 	mov	r5,r3
  80e480:	0806aa80 	call	806aa8 <__adddf3>
  80e484:	d9c00517 	ldw	r7,20(sp)
  80e488:	047f3034 	movhi	r17,64704
  80e48c:	1021883a 	mov	r16,r2
  80e490:	39ffffc4 	addi	r7,r7,-1
  80e494:	d9c01315 	stw	r7,76(sp)
  80e498:	1c63883a 	add	r17,r3,r17
  80e49c:	db000c17 	ldw	r12,48(sp)
  80e4a0:	003bea06 	br	80d44c <__alt_mem_onchip_mem+0xff80544c>
  80e4a4:	dc000915 	stw	r16,36(sp)
  80e4a8:	003e0e06 	br	80dce4 <__alt_mem_onchip_mem+0xff805ce4>
  80e4ac:	01000e44 	movi	r4,57
  80e4b0:	8825883a 	mov	r18,r17
  80e4b4:	9dc00044 	addi	r23,r19,1
  80e4b8:	99000005 	stb	r4,0(r19)
  80e4bc:	a023883a 	mov	r17,r20
  80e4c0:	dc000915 	stw	r16,36(sp)
  80e4c4:	003da406 	br	80db58 <__alt_mem_onchip_mem+0xff805b58>
  80e4c8:	d9801417 	ldw	r6,80(sp)
  80e4cc:	d9c01517 	ldw	r7,84(sp)
  80e4d0:	0009883a 	mov	r4,zero
  80e4d4:	014ff834 	movhi	r5,16352
  80e4d8:	08085240 	call	808524 <__subdf3>
  80e4dc:	880d883a 	mov	r6,r17
  80e4e0:	a00f883a 	mov	r7,r20
  80e4e4:	1009883a 	mov	r4,r2
  80e4e8:	180b883a 	mov	r5,r3
  80e4ec:	0807c3c0 	call	807c3c <__gedf2>
  80e4f0:	00bc7c0e 	bge	zero,r2,80d6e4 <__alt_mem_onchip_mem+0xff8056e4>
  80e4f4:	01000c04 	movi	r4,48
  80e4f8:	00000106 	br	80e500 <_dtoa_r+0x1580>
  80e4fc:	102f883a 	mov	r23,r2
  80e500:	b8bfffc4 	addi	r2,r23,-1
  80e504:	10c00007 	ldb	r3,0(r2)
  80e508:	193ffc26 	beq	r3,r4,80e4fc <__alt_mem_onchip_mem+0xff8064fc>
  80e50c:	d9801317 	ldw	r6,76(sp)
  80e510:	d9800515 	stw	r6,20(sp)
  80e514:	003c4406 	br	80d628 <__alt_mem_onchip_mem+0xff805628>
  80e518:	d9801317 	ldw	r6,76(sp)
  80e51c:	d9800515 	stw	r6,20(sp)
  80e520:	003cea06 	br	80d8cc <__alt_mem_onchip_mem+0xff8058cc>
  80e524:	dd800f17 	ldw	r22,60(sp)
  80e528:	dcc01017 	ldw	r19,64(sp)
  80e52c:	dc801217 	ldw	r18,72(sp)
  80e530:	003c6c06 	br	80d6e4 <__alt_mem_onchip_mem+0xff8056e4>
  80e534:	903e031e 	bne	r18,zero,80dd44 <__alt_mem_onchip_mem+0xff805d44>
  80e538:	003ebb06 	br	80e028 <__alt_mem_onchip_mem+0xff806028>
  80e53c:	103e6c1e 	bne	r2,zero,80def0 <__alt_mem_onchip_mem+0xff805ef0>
  80e540:	4080004c 	andi	r2,r8,1
  80e544:	103e6a26 	beq	r2,zero,80def0 <__alt_mem_onchip_mem+0xff805ef0>
  80e548:	003e6606 	br	80dee4 <__alt_mem_onchip_mem+0xff805ee4>
  80e54c:	d8c00317 	ldw	r3,12(sp)
  80e550:	00800084 	movi	r2,2
  80e554:	10c02916 	blt	r2,r3,80e5fc <_dtoa_r+0x167c>
  80e558:	d9000c17 	ldw	r4,48(sp)
  80e55c:	003e8806 	br	80df80 <__alt_mem_onchip_mem+0xff805f80>
  80e560:	04000084 	movi	r16,2
  80e564:	003b9d06 	br	80d3dc <__alt_mem_onchip_mem+0xff8053dc>
  80e568:	d9001317 	ldw	r4,76(sp)
  80e56c:	d9000515 	stw	r4,20(sp)
  80e570:	003cd606 	br	80d8cc <__alt_mem_onchip_mem+0xff8058cc>
  80e574:	d8801317 	ldw	r2,76(sp)
  80e578:	d8800515 	stw	r2,20(sp)
  80e57c:	003c2a06 	br	80d628 <__alt_mem_onchip_mem+0xff805628>
  80e580:	d9800317 	ldw	r6,12(sp)
  80e584:	00800084 	movi	r2,2
  80e588:	11801516 	blt	r2,r6,80e5e0 <_dtoa_r+0x1660>
  80e58c:	d9c00c17 	ldw	r7,48(sp)
  80e590:	d9c00615 	stw	r7,24(sp)
  80e594:	003df706 	br	80dd74 <__alt_mem_onchip_mem+0xff805d74>
  80e598:	193d3926 	beq	r3,r4,80da80 <__alt_mem_onchip_mem+0xff805a80>
  80e59c:	00c00f04 	movi	r3,60
  80e5a0:	1885c83a 	sub	r2,r3,r2
  80e5a4:	003ddf06 	br	80dd24 <__alt_mem_onchip_mem+0xff805d24>
  80e5a8:	e009883a 	mov	r4,fp
  80e5ac:	e0001115 	stw	zero,68(fp)
  80e5b0:	000b883a 	mov	r5,zero
  80e5b4:	080f2480 	call	80f248 <_Balloc>
  80e5b8:	d8800715 	stw	r2,28(sp)
  80e5bc:	d8c00717 	ldw	r3,28(sp)
  80e5c0:	00bfffc4 	movi	r2,-1
  80e5c4:	01000044 	movi	r4,1
  80e5c8:	d8800c15 	stw	r2,48(sp)
  80e5cc:	e0c01015 	stw	r3,64(fp)
  80e5d0:	d9000b15 	stw	r4,44(sp)
  80e5d4:	d8800615 	stw	r2,24(sp)
  80e5d8:	d8002215 	stw	zero,136(sp)
  80e5dc:	003c4106 	br	80d6e4 <__alt_mem_onchip_mem+0xff8056e4>
  80e5e0:	d8c00c17 	ldw	r3,48(sp)
  80e5e4:	d8c00615 	stw	r3,24(sp)
  80e5e8:	003e7006 	br	80dfac <__alt_mem_onchip_mem+0xff805fac>
  80e5ec:	04400044 	movi	r17,1
  80e5f0:	003b2006 	br	80d274 <__alt_mem_onchip_mem+0xff805274>
  80e5f4:	000b883a 	mov	r5,zero
  80e5f8:	003b3d06 	br	80d2f0 <__alt_mem_onchip_mem+0xff8052f0>
  80e5fc:	d8800c17 	ldw	r2,48(sp)
  80e600:	d8800615 	stw	r2,24(sp)
  80e604:	003e6906 	br	80dfac <__alt_mem_onchip_mem+0xff805fac>

0080e608 <_fclose_r>:
  80e608:	28003926 	beq	r5,zero,80e6f0 <_fclose_r+0xe8>
  80e60c:	defffc04 	addi	sp,sp,-16
  80e610:	dc400115 	stw	r17,4(sp)
  80e614:	dc000015 	stw	r16,0(sp)
  80e618:	dfc00315 	stw	ra,12(sp)
  80e61c:	dc800215 	stw	r18,8(sp)
  80e620:	2023883a 	mov	r17,r4
  80e624:	2821883a 	mov	r16,r5
  80e628:	20000226 	beq	r4,zero,80e634 <_fclose_r+0x2c>
  80e62c:	20800e17 	ldw	r2,56(r4)
  80e630:	10002726 	beq	r2,zero,80e6d0 <_fclose_r+0xc8>
  80e634:	8080030f 	ldh	r2,12(r16)
  80e638:	1000071e 	bne	r2,zero,80e658 <_fclose_r+0x50>
  80e63c:	0005883a 	mov	r2,zero
  80e640:	dfc00317 	ldw	ra,12(sp)
  80e644:	dc800217 	ldw	r18,8(sp)
  80e648:	dc400117 	ldw	r17,4(sp)
  80e64c:	dc000017 	ldw	r16,0(sp)
  80e650:	dec00404 	addi	sp,sp,16
  80e654:	f800283a 	ret
  80e658:	800b883a 	mov	r5,r16
  80e65c:	8809883a 	mov	r4,r17
  80e660:	08090080 	call	809008 <__sflush_r>
  80e664:	1025883a 	mov	r18,r2
  80e668:	80800b17 	ldw	r2,44(r16)
  80e66c:	10000426 	beq	r2,zero,80e680 <_fclose_r+0x78>
  80e670:	81400717 	ldw	r5,28(r16)
  80e674:	8809883a 	mov	r4,r17
  80e678:	103ee83a 	callr	r2
  80e67c:	10001616 	blt	r2,zero,80e6d8 <_fclose_r+0xd0>
  80e680:	8080030b 	ldhu	r2,12(r16)
  80e684:	1080200c 	andi	r2,r2,128
  80e688:	1000151e 	bne	r2,zero,80e6e0 <_fclose_r+0xd8>
  80e68c:	81400c17 	ldw	r5,48(r16)
  80e690:	28000526 	beq	r5,zero,80e6a8 <_fclose_r+0xa0>
  80e694:	80801004 	addi	r2,r16,64
  80e698:	28800226 	beq	r5,r2,80e6a4 <_fclose_r+0x9c>
  80e69c:	8809883a 	mov	r4,r17
  80e6a0:	08097740 	call	809774 <_free_r>
  80e6a4:	80000c15 	stw	zero,48(r16)
  80e6a8:	81401117 	ldw	r5,68(r16)
  80e6ac:	28000326 	beq	r5,zero,80e6bc <_fclose_r+0xb4>
  80e6b0:	8809883a 	mov	r4,r17
  80e6b4:	08097740 	call	809774 <_free_r>
  80e6b8:	80001115 	stw	zero,68(r16)
  80e6bc:	08096100 	call	809610 <__sfp_lock_acquire>
  80e6c0:	8000030d 	sth	zero,12(r16)
  80e6c4:	08096140 	call	809614 <__sfp_lock_release>
  80e6c8:	9005883a 	mov	r2,r18
  80e6cc:	003fdc06 	br	80e640 <__alt_mem_onchip_mem+0xff806640>
  80e6d0:	08096000 	call	809600 <__sinit>
  80e6d4:	003fd706 	br	80e634 <__alt_mem_onchip_mem+0xff806634>
  80e6d8:	04bfffc4 	movi	r18,-1
  80e6dc:	003fe806 	br	80e680 <__alt_mem_onchip_mem+0xff806680>
  80e6e0:	81400417 	ldw	r5,16(r16)
  80e6e4:	8809883a 	mov	r4,r17
  80e6e8:	08097740 	call	809774 <_free_r>
  80e6ec:	003fe706 	br	80e68c <__alt_mem_onchip_mem+0xff80668c>
  80e6f0:	0005883a 	mov	r2,zero
  80e6f4:	f800283a 	ret

0080e6f8 <fclose>:
  80e6f8:	008020b4 	movhi	r2,130
  80e6fc:	10a4ba04 	addi	r2,r2,-27928
  80e700:	200b883a 	mov	r5,r4
  80e704:	11000017 	ldw	r4,0(r2)
  80e708:	080e6081 	jmpi	80e608 <_fclose_r>

0080e70c <__sfvwrite_r>:
  80e70c:	30800217 	ldw	r2,8(r6)
  80e710:	10006726 	beq	r2,zero,80e8b0 <__sfvwrite_r+0x1a4>
  80e714:	28c0030b 	ldhu	r3,12(r5)
  80e718:	defff404 	addi	sp,sp,-48
  80e71c:	dd400715 	stw	r21,28(sp)
  80e720:	dd000615 	stw	r20,24(sp)
  80e724:	dc000215 	stw	r16,8(sp)
  80e728:	dfc00b15 	stw	ra,44(sp)
  80e72c:	df000a15 	stw	fp,40(sp)
  80e730:	ddc00915 	stw	r23,36(sp)
  80e734:	dd800815 	stw	r22,32(sp)
  80e738:	dcc00515 	stw	r19,20(sp)
  80e73c:	dc800415 	stw	r18,16(sp)
  80e740:	dc400315 	stw	r17,12(sp)
  80e744:	1880020c 	andi	r2,r3,8
  80e748:	2821883a 	mov	r16,r5
  80e74c:	202b883a 	mov	r21,r4
  80e750:	3029883a 	mov	r20,r6
  80e754:	10002726 	beq	r2,zero,80e7f4 <__sfvwrite_r+0xe8>
  80e758:	28800417 	ldw	r2,16(r5)
  80e75c:	10002526 	beq	r2,zero,80e7f4 <__sfvwrite_r+0xe8>
  80e760:	1880008c 	andi	r2,r3,2
  80e764:	a4400017 	ldw	r17,0(r20)
  80e768:	10002a26 	beq	r2,zero,80e814 <__sfvwrite_r+0x108>
  80e76c:	05a00034 	movhi	r22,32768
  80e770:	0027883a 	mov	r19,zero
  80e774:	0025883a 	mov	r18,zero
  80e778:	b5bf0004 	addi	r22,r22,-1024
  80e77c:	980d883a 	mov	r6,r19
  80e780:	a809883a 	mov	r4,r21
  80e784:	90004626 	beq	r18,zero,80e8a0 <__sfvwrite_r+0x194>
  80e788:	900f883a 	mov	r7,r18
  80e78c:	b480022e 	bgeu	r22,r18,80e798 <__sfvwrite_r+0x8c>
  80e790:	01e00034 	movhi	r7,32768
  80e794:	39ff0004 	addi	r7,r7,-1024
  80e798:	80800917 	ldw	r2,36(r16)
  80e79c:	81400717 	ldw	r5,28(r16)
  80e7a0:	103ee83a 	callr	r2
  80e7a4:	0080570e 	bge	zero,r2,80e904 <__sfvwrite_r+0x1f8>
  80e7a8:	a0c00217 	ldw	r3,8(r20)
  80e7ac:	98a7883a 	add	r19,r19,r2
  80e7b0:	90a5c83a 	sub	r18,r18,r2
  80e7b4:	1885c83a 	sub	r2,r3,r2
  80e7b8:	a0800215 	stw	r2,8(r20)
  80e7bc:	103fef1e 	bne	r2,zero,80e77c <__alt_mem_onchip_mem+0xff80677c>
  80e7c0:	0005883a 	mov	r2,zero
  80e7c4:	dfc00b17 	ldw	ra,44(sp)
  80e7c8:	df000a17 	ldw	fp,40(sp)
  80e7cc:	ddc00917 	ldw	r23,36(sp)
  80e7d0:	dd800817 	ldw	r22,32(sp)
  80e7d4:	dd400717 	ldw	r21,28(sp)
  80e7d8:	dd000617 	ldw	r20,24(sp)
  80e7dc:	dcc00517 	ldw	r19,20(sp)
  80e7e0:	dc800417 	ldw	r18,16(sp)
  80e7e4:	dc400317 	ldw	r17,12(sp)
  80e7e8:	dc000217 	ldw	r16,8(sp)
  80e7ec:	dec00c04 	addi	sp,sp,48
  80e7f0:	f800283a 	ret
  80e7f4:	800b883a 	mov	r5,r16
  80e7f8:	a809883a 	mov	r4,r21
  80e7fc:	080cbd80 	call	80cbd8 <__swsetup_r>
  80e800:	1000eb1e 	bne	r2,zero,80ebb0 <__sfvwrite_r+0x4a4>
  80e804:	80c0030b 	ldhu	r3,12(r16)
  80e808:	a4400017 	ldw	r17,0(r20)
  80e80c:	1880008c 	andi	r2,r3,2
  80e810:	103fd61e 	bne	r2,zero,80e76c <__alt_mem_onchip_mem+0xff80676c>
  80e814:	1880004c 	andi	r2,r3,1
  80e818:	10003f1e 	bne	r2,zero,80e918 <__sfvwrite_r+0x20c>
  80e81c:	0039883a 	mov	fp,zero
  80e820:	0025883a 	mov	r18,zero
  80e824:	90001a26 	beq	r18,zero,80e890 <__sfvwrite_r+0x184>
  80e828:	1880800c 	andi	r2,r3,512
  80e82c:	84c00217 	ldw	r19,8(r16)
  80e830:	10002126 	beq	r2,zero,80e8b8 <__sfvwrite_r+0x1ac>
  80e834:	982f883a 	mov	r23,r19
  80e838:	94c09336 	bltu	r18,r19,80ea88 <__sfvwrite_r+0x37c>
  80e83c:	1881200c 	andi	r2,r3,1152
  80e840:	10009e1e 	bne	r2,zero,80eabc <__sfvwrite_r+0x3b0>
  80e844:	81000017 	ldw	r4,0(r16)
  80e848:	b80d883a 	mov	r6,r23
  80e84c:	e00b883a 	mov	r5,fp
  80e850:	080f0ec0 	call	80f0ec <memmove>
  80e854:	80c00217 	ldw	r3,8(r16)
  80e858:	81000017 	ldw	r4,0(r16)
  80e85c:	9005883a 	mov	r2,r18
  80e860:	1ce7c83a 	sub	r19,r3,r19
  80e864:	25cf883a 	add	r7,r4,r23
  80e868:	84c00215 	stw	r19,8(r16)
  80e86c:	81c00015 	stw	r7,0(r16)
  80e870:	a0c00217 	ldw	r3,8(r20)
  80e874:	e0b9883a 	add	fp,fp,r2
  80e878:	90a5c83a 	sub	r18,r18,r2
  80e87c:	18a7c83a 	sub	r19,r3,r2
  80e880:	a4c00215 	stw	r19,8(r20)
  80e884:	983fce26 	beq	r19,zero,80e7c0 <__alt_mem_onchip_mem+0xff8067c0>
  80e888:	80c0030b 	ldhu	r3,12(r16)
  80e88c:	903fe61e 	bne	r18,zero,80e828 <__alt_mem_onchip_mem+0xff806828>
  80e890:	8f000017 	ldw	fp,0(r17)
  80e894:	8c800117 	ldw	r18,4(r17)
  80e898:	8c400204 	addi	r17,r17,8
  80e89c:	003fe106 	br	80e824 <__alt_mem_onchip_mem+0xff806824>
  80e8a0:	8cc00017 	ldw	r19,0(r17)
  80e8a4:	8c800117 	ldw	r18,4(r17)
  80e8a8:	8c400204 	addi	r17,r17,8
  80e8ac:	003fb306 	br	80e77c <__alt_mem_onchip_mem+0xff80677c>
  80e8b0:	0005883a 	mov	r2,zero
  80e8b4:	f800283a 	ret
  80e8b8:	81000017 	ldw	r4,0(r16)
  80e8bc:	80800417 	ldw	r2,16(r16)
  80e8c0:	11005736 	bltu	r2,r4,80ea20 <__sfvwrite_r+0x314>
  80e8c4:	85c00517 	ldw	r23,20(r16)
  80e8c8:	95c05536 	bltu	r18,r23,80ea20 <__sfvwrite_r+0x314>
  80e8cc:	00a00034 	movhi	r2,32768
  80e8d0:	10bfffc4 	addi	r2,r2,-1
  80e8d4:	9009883a 	mov	r4,r18
  80e8d8:	1480012e 	bgeu	r2,r18,80e8e0 <__sfvwrite_r+0x1d4>
  80e8dc:	1009883a 	mov	r4,r2
  80e8e0:	b80b883a 	mov	r5,r23
  80e8e4:	08068f40 	call	8068f4 <__divsi3>
  80e8e8:	15cf383a 	mul	r7,r2,r23
  80e8ec:	81400717 	ldw	r5,28(r16)
  80e8f0:	80800917 	ldw	r2,36(r16)
  80e8f4:	e00d883a 	mov	r6,fp
  80e8f8:	a809883a 	mov	r4,r21
  80e8fc:	103ee83a 	callr	r2
  80e900:	00bfdb16 	blt	zero,r2,80e870 <__alt_mem_onchip_mem+0xff806870>
  80e904:	8080030b 	ldhu	r2,12(r16)
  80e908:	10801014 	ori	r2,r2,64
  80e90c:	8080030d 	sth	r2,12(r16)
  80e910:	00bfffc4 	movi	r2,-1
  80e914:	003fab06 	br	80e7c4 <__alt_mem_onchip_mem+0xff8067c4>
  80e918:	0027883a 	mov	r19,zero
  80e91c:	0011883a 	mov	r8,zero
  80e920:	0039883a 	mov	fp,zero
  80e924:	0025883a 	mov	r18,zero
  80e928:	90001f26 	beq	r18,zero,80e9a8 <__sfvwrite_r+0x29c>
  80e92c:	40005a26 	beq	r8,zero,80ea98 <__sfvwrite_r+0x38c>
  80e930:	982d883a 	mov	r22,r19
  80e934:	94c0012e 	bgeu	r18,r19,80e93c <__sfvwrite_r+0x230>
  80e938:	902d883a 	mov	r22,r18
  80e93c:	81000017 	ldw	r4,0(r16)
  80e940:	80800417 	ldw	r2,16(r16)
  80e944:	b02f883a 	mov	r23,r22
  80e948:	81c00517 	ldw	r7,20(r16)
  80e94c:	1100032e 	bgeu	r2,r4,80e95c <__sfvwrite_r+0x250>
  80e950:	80c00217 	ldw	r3,8(r16)
  80e954:	38c7883a 	add	r3,r7,r3
  80e958:	1d801816 	blt	r3,r22,80e9bc <__sfvwrite_r+0x2b0>
  80e95c:	b1c03e16 	blt	r22,r7,80ea58 <__sfvwrite_r+0x34c>
  80e960:	80800917 	ldw	r2,36(r16)
  80e964:	81400717 	ldw	r5,28(r16)
  80e968:	e00d883a 	mov	r6,fp
  80e96c:	da000115 	stw	r8,4(sp)
  80e970:	a809883a 	mov	r4,r21
  80e974:	103ee83a 	callr	r2
  80e978:	102f883a 	mov	r23,r2
  80e97c:	da000117 	ldw	r8,4(sp)
  80e980:	00bfe00e 	bge	zero,r2,80e904 <__alt_mem_onchip_mem+0xff806904>
  80e984:	9de7c83a 	sub	r19,r19,r23
  80e988:	98001f26 	beq	r19,zero,80ea08 <__sfvwrite_r+0x2fc>
  80e98c:	a0800217 	ldw	r2,8(r20)
  80e990:	e5f9883a 	add	fp,fp,r23
  80e994:	95e5c83a 	sub	r18,r18,r23
  80e998:	15efc83a 	sub	r23,r2,r23
  80e99c:	a5c00215 	stw	r23,8(r20)
  80e9a0:	b83f8726 	beq	r23,zero,80e7c0 <__alt_mem_onchip_mem+0xff8067c0>
  80e9a4:	903fe11e 	bne	r18,zero,80e92c <__alt_mem_onchip_mem+0xff80692c>
  80e9a8:	8f000017 	ldw	fp,0(r17)
  80e9ac:	8c800117 	ldw	r18,4(r17)
  80e9b0:	0011883a 	mov	r8,zero
  80e9b4:	8c400204 	addi	r17,r17,8
  80e9b8:	003fdb06 	br	80e928 <__alt_mem_onchip_mem+0xff806928>
  80e9bc:	180d883a 	mov	r6,r3
  80e9c0:	e00b883a 	mov	r5,fp
  80e9c4:	da000115 	stw	r8,4(sp)
  80e9c8:	d8c00015 	stw	r3,0(sp)
  80e9cc:	080f0ec0 	call	80f0ec <memmove>
  80e9d0:	d8c00017 	ldw	r3,0(sp)
  80e9d4:	80800017 	ldw	r2,0(r16)
  80e9d8:	800b883a 	mov	r5,r16
  80e9dc:	a809883a 	mov	r4,r21
  80e9e0:	10c5883a 	add	r2,r2,r3
  80e9e4:	80800015 	stw	r2,0(r16)
  80e9e8:	d8c00015 	stw	r3,0(sp)
  80e9ec:	08092240 	call	809224 <_fflush_r>
  80e9f0:	d8c00017 	ldw	r3,0(sp)
  80e9f4:	da000117 	ldw	r8,4(sp)
  80e9f8:	103fc21e 	bne	r2,zero,80e904 <__alt_mem_onchip_mem+0xff806904>
  80e9fc:	182f883a 	mov	r23,r3
  80ea00:	9de7c83a 	sub	r19,r19,r23
  80ea04:	983fe11e 	bne	r19,zero,80e98c <__alt_mem_onchip_mem+0xff80698c>
  80ea08:	800b883a 	mov	r5,r16
  80ea0c:	a809883a 	mov	r4,r21
  80ea10:	08092240 	call	809224 <_fflush_r>
  80ea14:	103fbb1e 	bne	r2,zero,80e904 <__alt_mem_onchip_mem+0xff806904>
  80ea18:	0011883a 	mov	r8,zero
  80ea1c:	003fdb06 	br	80e98c <__alt_mem_onchip_mem+0xff80698c>
  80ea20:	94c0012e 	bgeu	r18,r19,80ea28 <__sfvwrite_r+0x31c>
  80ea24:	9027883a 	mov	r19,r18
  80ea28:	980d883a 	mov	r6,r19
  80ea2c:	e00b883a 	mov	r5,fp
  80ea30:	080f0ec0 	call	80f0ec <memmove>
  80ea34:	80800217 	ldw	r2,8(r16)
  80ea38:	80c00017 	ldw	r3,0(r16)
  80ea3c:	14c5c83a 	sub	r2,r2,r19
  80ea40:	1cc7883a 	add	r3,r3,r19
  80ea44:	80800215 	stw	r2,8(r16)
  80ea48:	80c00015 	stw	r3,0(r16)
  80ea4c:	10004326 	beq	r2,zero,80eb5c <__sfvwrite_r+0x450>
  80ea50:	9805883a 	mov	r2,r19
  80ea54:	003f8606 	br	80e870 <__alt_mem_onchip_mem+0xff806870>
  80ea58:	b00d883a 	mov	r6,r22
  80ea5c:	e00b883a 	mov	r5,fp
  80ea60:	da000115 	stw	r8,4(sp)
  80ea64:	080f0ec0 	call	80f0ec <memmove>
  80ea68:	80800217 	ldw	r2,8(r16)
  80ea6c:	80c00017 	ldw	r3,0(r16)
  80ea70:	da000117 	ldw	r8,4(sp)
  80ea74:	1585c83a 	sub	r2,r2,r22
  80ea78:	1dad883a 	add	r22,r3,r22
  80ea7c:	80800215 	stw	r2,8(r16)
  80ea80:	85800015 	stw	r22,0(r16)
  80ea84:	003fbf06 	br	80e984 <__alt_mem_onchip_mem+0xff806984>
  80ea88:	81000017 	ldw	r4,0(r16)
  80ea8c:	9027883a 	mov	r19,r18
  80ea90:	902f883a 	mov	r23,r18
  80ea94:	003f6c06 	br	80e848 <__alt_mem_onchip_mem+0xff806848>
  80ea98:	900d883a 	mov	r6,r18
  80ea9c:	01400284 	movi	r5,10
  80eaa0:	e009883a 	mov	r4,fp
  80eaa4:	080eec00 	call	80eec0 <memchr>
  80eaa8:	10003e26 	beq	r2,zero,80eba4 <__sfvwrite_r+0x498>
  80eaac:	10800044 	addi	r2,r2,1
  80eab0:	1727c83a 	sub	r19,r2,fp
  80eab4:	02000044 	movi	r8,1
  80eab8:	003f9d06 	br	80e930 <__alt_mem_onchip_mem+0xff806930>
  80eabc:	80800517 	ldw	r2,20(r16)
  80eac0:	81400417 	ldw	r5,16(r16)
  80eac4:	81c00017 	ldw	r7,0(r16)
  80eac8:	10a7883a 	add	r19,r2,r2
  80eacc:	9885883a 	add	r2,r19,r2
  80ead0:	1026d7fa 	srli	r19,r2,31
  80ead4:	396dc83a 	sub	r22,r7,r5
  80ead8:	b1000044 	addi	r4,r22,1
  80eadc:	9885883a 	add	r2,r19,r2
  80eae0:	1027d07a 	srai	r19,r2,1
  80eae4:	2485883a 	add	r2,r4,r18
  80eae8:	980d883a 	mov	r6,r19
  80eaec:	9880022e 	bgeu	r19,r2,80eaf8 <__sfvwrite_r+0x3ec>
  80eaf0:	1027883a 	mov	r19,r2
  80eaf4:	100d883a 	mov	r6,r2
  80eaf8:	18c1000c 	andi	r3,r3,1024
  80eafc:	18001c26 	beq	r3,zero,80eb70 <__sfvwrite_r+0x464>
  80eb00:	300b883a 	mov	r5,r6
  80eb04:	a809883a 	mov	r4,r21
  80eb08:	0809c0c0 	call	809c0c <_malloc_r>
  80eb0c:	102f883a 	mov	r23,r2
  80eb10:	10002926 	beq	r2,zero,80ebb8 <__sfvwrite_r+0x4ac>
  80eb14:	81400417 	ldw	r5,16(r16)
  80eb18:	b00d883a 	mov	r6,r22
  80eb1c:	1009883a 	mov	r4,r2
  80eb20:	080efa40 	call	80efa4 <memcpy>
  80eb24:	8080030b 	ldhu	r2,12(r16)
  80eb28:	00fedfc4 	movi	r3,-1153
  80eb2c:	10c4703a 	and	r2,r2,r3
  80eb30:	10802014 	ori	r2,r2,128
  80eb34:	8080030d 	sth	r2,12(r16)
  80eb38:	bd89883a 	add	r4,r23,r22
  80eb3c:	9d8fc83a 	sub	r7,r19,r22
  80eb40:	85c00415 	stw	r23,16(r16)
  80eb44:	84c00515 	stw	r19,20(r16)
  80eb48:	81000015 	stw	r4,0(r16)
  80eb4c:	9027883a 	mov	r19,r18
  80eb50:	81c00215 	stw	r7,8(r16)
  80eb54:	902f883a 	mov	r23,r18
  80eb58:	003f3b06 	br	80e848 <__alt_mem_onchip_mem+0xff806848>
  80eb5c:	800b883a 	mov	r5,r16
  80eb60:	a809883a 	mov	r4,r21
  80eb64:	08092240 	call	809224 <_fflush_r>
  80eb68:	103fb926 	beq	r2,zero,80ea50 <__alt_mem_onchip_mem+0xff806a50>
  80eb6c:	003f6506 	br	80e904 <__alt_mem_onchip_mem+0xff806904>
  80eb70:	a809883a 	mov	r4,r21
  80eb74:	08102a40 	call	8102a4 <_realloc_r>
  80eb78:	102f883a 	mov	r23,r2
  80eb7c:	103fee1e 	bne	r2,zero,80eb38 <__alt_mem_onchip_mem+0xff806b38>
  80eb80:	81400417 	ldw	r5,16(r16)
  80eb84:	a809883a 	mov	r4,r21
  80eb88:	08097740 	call	809774 <_free_r>
  80eb8c:	8080030b 	ldhu	r2,12(r16)
  80eb90:	00ffdfc4 	movi	r3,-129
  80eb94:	1884703a 	and	r2,r3,r2
  80eb98:	00c00304 	movi	r3,12
  80eb9c:	a8c00015 	stw	r3,0(r21)
  80eba0:	003f5906 	br	80e908 <__alt_mem_onchip_mem+0xff806908>
  80eba4:	94c00044 	addi	r19,r18,1
  80eba8:	02000044 	movi	r8,1
  80ebac:	003f6006 	br	80e930 <__alt_mem_onchip_mem+0xff806930>
  80ebb0:	00bfffc4 	movi	r2,-1
  80ebb4:	003f0306 	br	80e7c4 <__alt_mem_onchip_mem+0xff8067c4>
  80ebb8:	00800304 	movi	r2,12
  80ebbc:	a8800015 	stw	r2,0(r21)
  80ebc0:	8080030b 	ldhu	r2,12(r16)
  80ebc4:	003f5006 	br	80e908 <__alt_mem_onchip_mem+0xff806908>

0080ebc8 <_setlocale_r>:
  80ebc8:	30001b26 	beq	r6,zero,80ec38 <_setlocale_r+0x70>
  80ebcc:	01402074 	movhi	r5,129
  80ebd0:	defffe04 	addi	sp,sp,-8
  80ebd4:	295c8d04 	addi	r5,r5,29236
  80ebd8:	3009883a 	mov	r4,r6
  80ebdc:	dc000015 	stw	r16,0(sp)
  80ebe0:	dfc00115 	stw	ra,4(sp)
  80ebe4:	3021883a 	mov	r16,r6
  80ebe8:	081087c0 	call	81087c <strcmp>
  80ebec:	1000061e 	bne	r2,zero,80ec08 <_setlocale_r+0x40>
  80ebf0:	00802074 	movhi	r2,129
  80ebf4:	109c6e04 	addi	r2,r2,29112
  80ebf8:	dfc00117 	ldw	ra,4(sp)
  80ebfc:	dc000017 	ldw	r16,0(sp)
  80ec00:	dec00204 	addi	sp,sp,8
  80ec04:	f800283a 	ret
  80ec08:	01402074 	movhi	r5,129
  80ec0c:	295c6e04 	addi	r5,r5,29112
  80ec10:	8009883a 	mov	r4,r16
  80ec14:	081087c0 	call	81087c <strcmp>
  80ec18:	103ff526 	beq	r2,zero,80ebf0 <__alt_mem_onchip_mem+0xff806bf0>
  80ec1c:	01402074 	movhi	r5,129
  80ec20:	295c7804 	addi	r5,r5,29152
  80ec24:	8009883a 	mov	r4,r16
  80ec28:	081087c0 	call	81087c <strcmp>
  80ec2c:	103ff026 	beq	r2,zero,80ebf0 <__alt_mem_onchip_mem+0xff806bf0>
  80ec30:	0005883a 	mov	r2,zero
  80ec34:	003ff006 	br	80ebf8 <__alt_mem_onchip_mem+0xff806bf8>
  80ec38:	00802074 	movhi	r2,129
  80ec3c:	109c6e04 	addi	r2,r2,29112
  80ec40:	f800283a 	ret

0080ec44 <__locale_charset>:
  80ec44:	00802074 	movhi	r2,129
  80ec48:	109fa504 	addi	r2,r2,32404
  80ec4c:	f800283a 	ret

0080ec50 <__locale_mb_cur_max>:
  80ec50:	008020b4 	movhi	r2,130
  80ec54:	10a4bd04 	addi	r2,r2,-27916
  80ec58:	10800017 	ldw	r2,0(r2)
  80ec5c:	f800283a 	ret

0080ec60 <__locale_msgcharset>:
  80ec60:	00802074 	movhi	r2,129
  80ec64:	109f9d04 	addi	r2,r2,32372
  80ec68:	f800283a 	ret

0080ec6c <__locale_cjk_lang>:
  80ec6c:	0005883a 	mov	r2,zero
  80ec70:	f800283a 	ret

0080ec74 <_localeconv_r>:
  80ec74:	00802074 	movhi	r2,129
  80ec78:	109fad04 	addi	r2,r2,32436
  80ec7c:	f800283a 	ret

0080ec80 <setlocale>:
  80ec80:	008020b4 	movhi	r2,130
  80ec84:	10a4ba04 	addi	r2,r2,-27928
  80ec88:	280d883a 	mov	r6,r5
  80ec8c:	200b883a 	mov	r5,r4
  80ec90:	11000017 	ldw	r4,0(r2)
  80ec94:	080ebc81 	jmpi	80ebc8 <_setlocale_r>

0080ec98 <localeconv>:
  80ec98:	00802074 	movhi	r2,129
  80ec9c:	109fad04 	addi	r2,r2,32436
  80eca0:	f800283a 	ret

0080eca4 <_lseek_r>:
  80eca4:	defffd04 	addi	sp,sp,-12
  80eca8:	2805883a 	mov	r2,r5
  80ecac:	dc000015 	stw	r16,0(sp)
  80ecb0:	040020b4 	movhi	r16,130
  80ecb4:	dc400115 	stw	r17,4(sp)
  80ecb8:	300b883a 	mov	r5,r6
  80ecbc:	842c0b04 	addi	r16,r16,-20436
  80ecc0:	2023883a 	mov	r17,r4
  80ecc4:	380d883a 	mov	r6,r7
  80ecc8:	1009883a 	mov	r4,r2
  80eccc:	dfc00215 	stw	ra,8(sp)
  80ecd0:	80000015 	stw	zero,0(r16)
  80ecd4:	08130c80 	call	8130c8 <lseek>
  80ecd8:	00ffffc4 	movi	r3,-1
  80ecdc:	10c00526 	beq	r2,r3,80ecf4 <_lseek_r+0x50>
  80ece0:	dfc00217 	ldw	ra,8(sp)
  80ece4:	dc400117 	ldw	r17,4(sp)
  80ece8:	dc000017 	ldw	r16,0(sp)
  80ecec:	dec00304 	addi	sp,sp,12
  80ecf0:	f800283a 	ret
  80ecf4:	80c00017 	ldw	r3,0(r16)
  80ecf8:	183ff926 	beq	r3,zero,80ece0 <__alt_mem_onchip_mem+0xff806ce0>
  80ecfc:	88c00015 	stw	r3,0(r17)
  80ed00:	003ff706 	br	80ece0 <__alt_mem_onchip_mem+0xff806ce0>

0080ed04 <__smakebuf_r>:
  80ed04:	2880030b 	ldhu	r2,12(r5)
  80ed08:	10c0008c 	andi	r3,r2,2
  80ed0c:	1800411e 	bne	r3,zero,80ee14 <__smakebuf_r+0x110>
  80ed10:	deffec04 	addi	sp,sp,-80
  80ed14:	dc000f15 	stw	r16,60(sp)
  80ed18:	2821883a 	mov	r16,r5
  80ed1c:	2940038f 	ldh	r5,14(r5)
  80ed20:	dc401015 	stw	r17,64(sp)
  80ed24:	dfc01315 	stw	ra,76(sp)
  80ed28:	dcc01215 	stw	r19,72(sp)
  80ed2c:	dc801115 	stw	r18,68(sp)
  80ed30:	2023883a 	mov	r17,r4
  80ed34:	28001c16 	blt	r5,zero,80eda8 <__smakebuf_r+0xa4>
  80ed38:	d80d883a 	mov	r6,sp
  80ed3c:	081226c0 	call	81226c <_fstat_r>
  80ed40:	10001816 	blt	r2,zero,80eda4 <__smakebuf_r+0xa0>
  80ed44:	d8800117 	ldw	r2,4(sp)
  80ed48:	00e00014 	movui	r3,32768
  80ed4c:	10bc000c 	andi	r2,r2,61440
  80ed50:	14c80020 	cmpeqi	r19,r2,8192
  80ed54:	10c03726 	beq	r2,r3,80ee34 <__smakebuf_r+0x130>
  80ed58:	80c0030b 	ldhu	r3,12(r16)
  80ed5c:	18c20014 	ori	r3,r3,2048
  80ed60:	80c0030d 	sth	r3,12(r16)
  80ed64:	00c80004 	movi	r3,8192
  80ed68:	10c0521e 	bne	r2,r3,80eeb4 <__smakebuf_r+0x1b0>
  80ed6c:	8140038f 	ldh	r5,14(r16)
  80ed70:	8809883a 	mov	r4,r17
  80ed74:	08122c80 	call	8122c8 <_isatty_r>
  80ed78:	10004c26 	beq	r2,zero,80eeac <__smakebuf_r+0x1a8>
  80ed7c:	8080030b 	ldhu	r2,12(r16)
  80ed80:	80c010c4 	addi	r3,r16,67
  80ed84:	80c00015 	stw	r3,0(r16)
  80ed88:	10800054 	ori	r2,r2,1
  80ed8c:	8080030d 	sth	r2,12(r16)
  80ed90:	00800044 	movi	r2,1
  80ed94:	80c00415 	stw	r3,16(r16)
  80ed98:	80800515 	stw	r2,20(r16)
  80ed9c:	04810004 	movi	r18,1024
  80eda0:	00000706 	br	80edc0 <__smakebuf_r+0xbc>
  80eda4:	8080030b 	ldhu	r2,12(r16)
  80eda8:	10c0200c 	andi	r3,r2,128
  80edac:	18001f1e 	bne	r3,zero,80ee2c <__smakebuf_r+0x128>
  80edb0:	04810004 	movi	r18,1024
  80edb4:	10820014 	ori	r2,r2,2048
  80edb8:	8080030d 	sth	r2,12(r16)
  80edbc:	0027883a 	mov	r19,zero
  80edc0:	900b883a 	mov	r5,r18
  80edc4:	8809883a 	mov	r4,r17
  80edc8:	0809c0c0 	call	809c0c <_malloc_r>
  80edcc:	10002c26 	beq	r2,zero,80ee80 <__smakebuf_r+0x17c>
  80edd0:	80c0030b 	ldhu	r3,12(r16)
  80edd4:	01002074 	movhi	r4,129
  80edd8:	2124ae04 	addi	r4,r4,-27976
  80eddc:	89000f15 	stw	r4,60(r17)
  80ede0:	18c02014 	ori	r3,r3,128
  80ede4:	80c0030d 	sth	r3,12(r16)
  80ede8:	80800015 	stw	r2,0(r16)
  80edec:	80800415 	stw	r2,16(r16)
  80edf0:	84800515 	stw	r18,20(r16)
  80edf4:	98001a1e 	bne	r19,zero,80ee60 <__smakebuf_r+0x15c>
  80edf8:	dfc01317 	ldw	ra,76(sp)
  80edfc:	dcc01217 	ldw	r19,72(sp)
  80ee00:	dc801117 	ldw	r18,68(sp)
  80ee04:	dc401017 	ldw	r17,64(sp)
  80ee08:	dc000f17 	ldw	r16,60(sp)
  80ee0c:	dec01404 	addi	sp,sp,80
  80ee10:	f800283a 	ret
  80ee14:	288010c4 	addi	r2,r5,67
  80ee18:	28800015 	stw	r2,0(r5)
  80ee1c:	28800415 	stw	r2,16(r5)
  80ee20:	00800044 	movi	r2,1
  80ee24:	28800515 	stw	r2,20(r5)
  80ee28:	f800283a 	ret
  80ee2c:	04801004 	movi	r18,64
  80ee30:	003fe006 	br	80edb4 <__alt_mem_onchip_mem+0xff806db4>
  80ee34:	81000a17 	ldw	r4,40(r16)
  80ee38:	00c02074 	movhi	r3,129
  80ee3c:	18e9eb04 	addi	r3,r3,-22612
  80ee40:	20ffc51e 	bne	r4,r3,80ed58 <__alt_mem_onchip_mem+0xff806d58>
  80ee44:	8080030b 	ldhu	r2,12(r16)
  80ee48:	04810004 	movi	r18,1024
  80ee4c:	84801315 	stw	r18,76(r16)
  80ee50:	1484b03a 	or	r2,r2,r18
  80ee54:	8080030d 	sth	r2,12(r16)
  80ee58:	0027883a 	mov	r19,zero
  80ee5c:	003fd806 	br	80edc0 <__alt_mem_onchip_mem+0xff806dc0>
  80ee60:	8140038f 	ldh	r5,14(r16)
  80ee64:	8809883a 	mov	r4,r17
  80ee68:	08122c80 	call	8122c8 <_isatty_r>
  80ee6c:	103fe226 	beq	r2,zero,80edf8 <__alt_mem_onchip_mem+0xff806df8>
  80ee70:	8080030b 	ldhu	r2,12(r16)
  80ee74:	10800054 	ori	r2,r2,1
  80ee78:	8080030d 	sth	r2,12(r16)
  80ee7c:	003fde06 	br	80edf8 <__alt_mem_onchip_mem+0xff806df8>
  80ee80:	8080030b 	ldhu	r2,12(r16)
  80ee84:	10c0800c 	andi	r3,r2,512
  80ee88:	183fdb1e 	bne	r3,zero,80edf8 <__alt_mem_onchip_mem+0xff806df8>
  80ee8c:	10800094 	ori	r2,r2,2
  80ee90:	80c010c4 	addi	r3,r16,67
  80ee94:	8080030d 	sth	r2,12(r16)
  80ee98:	00800044 	movi	r2,1
  80ee9c:	80c00015 	stw	r3,0(r16)
  80eea0:	80c00415 	stw	r3,16(r16)
  80eea4:	80800515 	stw	r2,20(r16)
  80eea8:	003fd306 	br	80edf8 <__alt_mem_onchip_mem+0xff806df8>
  80eeac:	04810004 	movi	r18,1024
  80eeb0:	003fc306 	br	80edc0 <__alt_mem_onchip_mem+0xff806dc0>
  80eeb4:	0027883a 	mov	r19,zero
  80eeb8:	04810004 	movi	r18,1024
  80eebc:	003fc006 	br	80edc0 <__alt_mem_onchip_mem+0xff806dc0>

0080eec0 <memchr>:
  80eec0:	208000cc 	andi	r2,r4,3
  80eec4:	280f883a 	mov	r7,r5
  80eec8:	10003426 	beq	r2,zero,80ef9c <memchr+0xdc>
  80eecc:	30bfffc4 	addi	r2,r6,-1
  80eed0:	30001a26 	beq	r6,zero,80ef3c <memchr+0x7c>
  80eed4:	20c00003 	ldbu	r3,0(r4)
  80eed8:	29803fcc 	andi	r6,r5,255
  80eedc:	30c0051e 	bne	r6,r3,80eef4 <memchr+0x34>
  80eee0:	00001806 	br	80ef44 <memchr+0x84>
  80eee4:	10001526 	beq	r2,zero,80ef3c <memchr+0x7c>
  80eee8:	20c00003 	ldbu	r3,0(r4)
  80eeec:	10bfffc4 	addi	r2,r2,-1
  80eef0:	30c01426 	beq	r6,r3,80ef44 <memchr+0x84>
  80eef4:	21000044 	addi	r4,r4,1
  80eef8:	20c000cc 	andi	r3,r4,3
  80eefc:	183ff91e 	bne	r3,zero,80eee4 <__alt_mem_onchip_mem+0xff806ee4>
  80ef00:	020000c4 	movi	r8,3
  80ef04:	40801136 	bltu	r8,r2,80ef4c <memchr+0x8c>
  80ef08:	10000c26 	beq	r2,zero,80ef3c <memchr+0x7c>
  80ef0c:	20c00003 	ldbu	r3,0(r4)
  80ef10:	29403fcc 	andi	r5,r5,255
  80ef14:	28c00b26 	beq	r5,r3,80ef44 <memchr+0x84>
  80ef18:	20c00044 	addi	r3,r4,1
  80ef1c:	39803fcc 	andi	r6,r7,255
  80ef20:	2089883a 	add	r4,r4,r2
  80ef24:	00000306 	br	80ef34 <memchr+0x74>
  80ef28:	18c00044 	addi	r3,r3,1
  80ef2c:	197fffc3 	ldbu	r5,-1(r3)
  80ef30:	31400526 	beq	r6,r5,80ef48 <memchr+0x88>
  80ef34:	1805883a 	mov	r2,r3
  80ef38:	20fffb1e 	bne	r4,r3,80ef28 <__alt_mem_onchip_mem+0xff806f28>
  80ef3c:	0005883a 	mov	r2,zero
  80ef40:	f800283a 	ret
  80ef44:	2005883a 	mov	r2,r4
  80ef48:	f800283a 	ret
  80ef4c:	28c03fcc 	andi	r3,r5,255
  80ef50:	1812923a 	slli	r9,r3,8
  80ef54:	02ffbff4 	movhi	r11,65279
  80ef58:	02a02074 	movhi	r10,32897
  80ef5c:	48d2b03a 	or	r9,r9,r3
  80ef60:	4806943a 	slli	r3,r9,16
  80ef64:	5affbfc4 	addi	r11,r11,-257
  80ef68:	52a02004 	addi	r10,r10,-32640
  80ef6c:	48d2b03a 	or	r9,r9,r3
  80ef70:	20c00017 	ldw	r3,0(r4)
  80ef74:	48c6f03a 	xor	r3,r9,r3
  80ef78:	1acd883a 	add	r6,r3,r11
  80ef7c:	00c6303a 	nor	r3,zero,r3
  80ef80:	30c6703a 	and	r3,r6,r3
  80ef84:	1a86703a 	and	r3,r3,r10
  80ef88:	183fe01e 	bne	r3,zero,80ef0c <__alt_mem_onchip_mem+0xff806f0c>
  80ef8c:	10bfff04 	addi	r2,r2,-4
  80ef90:	21000104 	addi	r4,r4,4
  80ef94:	40bff636 	bltu	r8,r2,80ef70 <__alt_mem_onchip_mem+0xff806f70>
  80ef98:	003fdb06 	br	80ef08 <__alt_mem_onchip_mem+0xff806f08>
  80ef9c:	3005883a 	mov	r2,r6
  80efa0:	003fd706 	br	80ef00 <__alt_mem_onchip_mem+0xff806f00>

0080efa4 <memcpy>:
  80efa4:	defffd04 	addi	sp,sp,-12
  80efa8:	dfc00215 	stw	ra,8(sp)
  80efac:	dc400115 	stw	r17,4(sp)
  80efb0:	dc000015 	stw	r16,0(sp)
  80efb4:	00c003c4 	movi	r3,15
  80efb8:	2005883a 	mov	r2,r4
  80efbc:	1980452e 	bgeu	r3,r6,80f0d4 <memcpy+0x130>
  80efc0:	2906b03a 	or	r3,r5,r4
  80efc4:	18c000cc 	andi	r3,r3,3
  80efc8:	1800441e 	bne	r3,zero,80f0dc <memcpy+0x138>
  80efcc:	347ffc04 	addi	r17,r6,-16
  80efd0:	8822d13a 	srli	r17,r17,4
  80efd4:	28c00104 	addi	r3,r5,4
  80efd8:	23400104 	addi	r13,r4,4
  80efdc:	8820913a 	slli	r16,r17,4
  80efe0:	2b000204 	addi	r12,r5,8
  80efe4:	22c00204 	addi	r11,r4,8
  80efe8:	84000504 	addi	r16,r16,20
  80efec:	2a800304 	addi	r10,r5,12
  80eff0:	22400304 	addi	r9,r4,12
  80eff4:	2c21883a 	add	r16,r5,r16
  80eff8:	2811883a 	mov	r8,r5
  80effc:	200f883a 	mov	r7,r4
  80f000:	41000017 	ldw	r4,0(r8)
  80f004:	1fc00017 	ldw	ra,0(r3)
  80f008:	63c00017 	ldw	r15,0(r12)
  80f00c:	39000015 	stw	r4,0(r7)
  80f010:	53800017 	ldw	r14,0(r10)
  80f014:	6fc00015 	stw	ra,0(r13)
  80f018:	5bc00015 	stw	r15,0(r11)
  80f01c:	4b800015 	stw	r14,0(r9)
  80f020:	18c00404 	addi	r3,r3,16
  80f024:	39c00404 	addi	r7,r7,16
  80f028:	42000404 	addi	r8,r8,16
  80f02c:	6b400404 	addi	r13,r13,16
  80f030:	63000404 	addi	r12,r12,16
  80f034:	5ac00404 	addi	r11,r11,16
  80f038:	52800404 	addi	r10,r10,16
  80f03c:	4a400404 	addi	r9,r9,16
  80f040:	1c3fef1e 	bne	r3,r16,80f000 <__alt_mem_onchip_mem+0xff807000>
  80f044:	89c00044 	addi	r7,r17,1
  80f048:	380e913a 	slli	r7,r7,4
  80f04c:	310003cc 	andi	r4,r6,15
  80f050:	02c000c4 	movi	r11,3
  80f054:	11c7883a 	add	r3,r2,r7
  80f058:	29cb883a 	add	r5,r5,r7
  80f05c:	5900212e 	bgeu	r11,r4,80f0e4 <memcpy+0x140>
  80f060:	1813883a 	mov	r9,r3
  80f064:	2811883a 	mov	r8,r5
  80f068:	200f883a 	mov	r7,r4
  80f06c:	42800017 	ldw	r10,0(r8)
  80f070:	4a400104 	addi	r9,r9,4
  80f074:	39ffff04 	addi	r7,r7,-4
  80f078:	4abfff15 	stw	r10,-4(r9)
  80f07c:	42000104 	addi	r8,r8,4
  80f080:	59fffa36 	bltu	r11,r7,80f06c <__alt_mem_onchip_mem+0xff80706c>
  80f084:	213fff04 	addi	r4,r4,-4
  80f088:	2008d0ba 	srli	r4,r4,2
  80f08c:	318000cc 	andi	r6,r6,3
  80f090:	21000044 	addi	r4,r4,1
  80f094:	2109883a 	add	r4,r4,r4
  80f098:	2109883a 	add	r4,r4,r4
  80f09c:	1907883a 	add	r3,r3,r4
  80f0a0:	290b883a 	add	r5,r5,r4
  80f0a4:	30000626 	beq	r6,zero,80f0c0 <memcpy+0x11c>
  80f0a8:	198d883a 	add	r6,r3,r6
  80f0ac:	29c00003 	ldbu	r7,0(r5)
  80f0b0:	18c00044 	addi	r3,r3,1
  80f0b4:	29400044 	addi	r5,r5,1
  80f0b8:	19ffffc5 	stb	r7,-1(r3)
  80f0bc:	19bffb1e 	bne	r3,r6,80f0ac <__alt_mem_onchip_mem+0xff8070ac>
  80f0c0:	dfc00217 	ldw	ra,8(sp)
  80f0c4:	dc400117 	ldw	r17,4(sp)
  80f0c8:	dc000017 	ldw	r16,0(sp)
  80f0cc:	dec00304 	addi	sp,sp,12
  80f0d0:	f800283a 	ret
  80f0d4:	2007883a 	mov	r3,r4
  80f0d8:	003ff206 	br	80f0a4 <__alt_mem_onchip_mem+0xff8070a4>
  80f0dc:	2007883a 	mov	r3,r4
  80f0e0:	003ff106 	br	80f0a8 <__alt_mem_onchip_mem+0xff8070a8>
  80f0e4:	200d883a 	mov	r6,r4
  80f0e8:	003fee06 	br	80f0a4 <__alt_mem_onchip_mem+0xff8070a4>

0080f0ec <memmove>:
  80f0ec:	2005883a 	mov	r2,r4
  80f0f0:	29000b2e 	bgeu	r5,r4,80f120 <memmove+0x34>
  80f0f4:	298f883a 	add	r7,r5,r6
  80f0f8:	21c0092e 	bgeu	r4,r7,80f120 <memmove+0x34>
  80f0fc:	2187883a 	add	r3,r4,r6
  80f100:	198bc83a 	sub	r5,r3,r6
  80f104:	30004826 	beq	r6,zero,80f228 <memmove+0x13c>
  80f108:	39ffffc4 	addi	r7,r7,-1
  80f10c:	39000003 	ldbu	r4,0(r7)
  80f110:	18ffffc4 	addi	r3,r3,-1
  80f114:	19000005 	stb	r4,0(r3)
  80f118:	28fffb1e 	bne	r5,r3,80f108 <__alt_mem_onchip_mem+0xff807108>
  80f11c:	f800283a 	ret
  80f120:	00c003c4 	movi	r3,15
  80f124:	1980412e 	bgeu	r3,r6,80f22c <memmove+0x140>
  80f128:	2886b03a 	or	r3,r5,r2
  80f12c:	18c000cc 	andi	r3,r3,3
  80f130:	1800401e 	bne	r3,zero,80f234 <memmove+0x148>
  80f134:	33fffc04 	addi	r15,r6,-16
  80f138:	781ed13a 	srli	r15,r15,4
  80f13c:	28c00104 	addi	r3,r5,4
  80f140:	13400104 	addi	r13,r2,4
  80f144:	781c913a 	slli	r14,r15,4
  80f148:	2b000204 	addi	r12,r5,8
  80f14c:	12c00204 	addi	r11,r2,8
  80f150:	73800504 	addi	r14,r14,20
  80f154:	2a800304 	addi	r10,r5,12
  80f158:	12400304 	addi	r9,r2,12
  80f15c:	2b9d883a 	add	r14,r5,r14
  80f160:	2811883a 	mov	r8,r5
  80f164:	100f883a 	mov	r7,r2
  80f168:	41000017 	ldw	r4,0(r8)
  80f16c:	39c00404 	addi	r7,r7,16
  80f170:	18c00404 	addi	r3,r3,16
  80f174:	393ffc15 	stw	r4,-16(r7)
  80f178:	193ffc17 	ldw	r4,-16(r3)
  80f17c:	6b400404 	addi	r13,r13,16
  80f180:	5ac00404 	addi	r11,r11,16
  80f184:	693ffc15 	stw	r4,-16(r13)
  80f188:	61000017 	ldw	r4,0(r12)
  80f18c:	4a400404 	addi	r9,r9,16
  80f190:	42000404 	addi	r8,r8,16
  80f194:	593ffc15 	stw	r4,-16(r11)
  80f198:	51000017 	ldw	r4,0(r10)
  80f19c:	63000404 	addi	r12,r12,16
  80f1a0:	52800404 	addi	r10,r10,16
  80f1a4:	493ffc15 	stw	r4,-16(r9)
  80f1a8:	1bbfef1e 	bne	r3,r14,80f168 <__alt_mem_onchip_mem+0xff807168>
  80f1ac:	79000044 	addi	r4,r15,1
  80f1b0:	2008913a 	slli	r4,r4,4
  80f1b4:	328003cc 	andi	r10,r6,15
  80f1b8:	02c000c4 	movi	r11,3
  80f1bc:	1107883a 	add	r3,r2,r4
  80f1c0:	290b883a 	add	r5,r5,r4
  80f1c4:	5a801e2e 	bgeu	r11,r10,80f240 <memmove+0x154>
  80f1c8:	1813883a 	mov	r9,r3
  80f1cc:	2811883a 	mov	r8,r5
  80f1d0:	500f883a 	mov	r7,r10
  80f1d4:	41000017 	ldw	r4,0(r8)
  80f1d8:	4a400104 	addi	r9,r9,4
  80f1dc:	39ffff04 	addi	r7,r7,-4
  80f1e0:	493fff15 	stw	r4,-4(r9)
  80f1e4:	42000104 	addi	r8,r8,4
  80f1e8:	59fffa36 	bltu	r11,r7,80f1d4 <__alt_mem_onchip_mem+0xff8071d4>
  80f1ec:	513fff04 	addi	r4,r10,-4
  80f1f0:	2008d0ba 	srli	r4,r4,2
  80f1f4:	318000cc 	andi	r6,r6,3
  80f1f8:	21000044 	addi	r4,r4,1
  80f1fc:	2109883a 	add	r4,r4,r4
  80f200:	2109883a 	add	r4,r4,r4
  80f204:	1907883a 	add	r3,r3,r4
  80f208:	290b883a 	add	r5,r5,r4
  80f20c:	30000b26 	beq	r6,zero,80f23c <memmove+0x150>
  80f210:	198d883a 	add	r6,r3,r6
  80f214:	29c00003 	ldbu	r7,0(r5)
  80f218:	18c00044 	addi	r3,r3,1
  80f21c:	29400044 	addi	r5,r5,1
  80f220:	19ffffc5 	stb	r7,-1(r3)
  80f224:	19bffb1e 	bne	r3,r6,80f214 <__alt_mem_onchip_mem+0xff807214>
  80f228:	f800283a 	ret
  80f22c:	1007883a 	mov	r3,r2
  80f230:	003ff606 	br	80f20c <__alt_mem_onchip_mem+0xff80720c>
  80f234:	1007883a 	mov	r3,r2
  80f238:	003ff506 	br	80f210 <__alt_mem_onchip_mem+0xff807210>
  80f23c:	f800283a 	ret
  80f240:	500d883a 	mov	r6,r10
  80f244:	003ff106 	br	80f20c <__alt_mem_onchip_mem+0xff80720c>

0080f248 <_Balloc>:
  80f248:	20801317 	ldw	r2,76(r4)
  80f24c:	defffc04 	addi	sp,sp,-16
  80f250:	dc400115 	stw	r17,4(sp)
  80f254:	dc000015 	stw	r16,0(sp)
  80f258:	dfc00315 	stw	ra,12(sp)
  80f25c:	dc800215 	stw	r18,8(sp)
  80f260:	2023883a 	mov	r17,r4
  80f264:	2821883a 	mov	r16,r5
  80f268:	10000f26 	beq	r2,zero,80f2a8 <_Balloc+0x60>
  80f26c:	8407883a 	add	r3,r16,r16
  80f270:	18c7883a 	add	r3,r3,r3
  80f274:	10c7883a 	add	r3,r2,r3
  80f278:	18800017 	ldw	r2,0(r3)
  80f27c:	10001126 	beq	r2,zero,80f2c4 <_Balloc+0x7c>
  80f280:	11000017 	ldw	r4,0(r2)
  80f284:	19000015 	stw	r4,0(r3)
  80f288:	10000415 	stw	zero,16(r2)
  80f28c:	10000315 	stw	zero,12(r2)
  80f290:	dfc00317 	ldw	ra,12(sp)
  80f294:	dc800217 	ldw	r18,8(sp)
  80f298:	dc400117 	ldw	r17,4(sp)
  80f29c:	dc000017 	ldw	r16,0(sp)
  80f2a0:	dec00404 	addi	sp,sp,16
  80f2a4:	f800283a 	ret
  80f2a8:	01800844 	movi	r6,33
  80f2ac:	01400104 	movi	r5,4
  80f2b0:	0811fa00 	call	811fa0 <_calloc_r>
  80f2b4:	88801315 	stw	r2,76(r17)
  80f2b8:	103fec1e 	bne	r2,zero,80f26c <__alt_mem_onchip_mem+0xff80726c>
  80f2bc:	0005883a 	mov	r2,zero
  80f2c0:	003ff306 	br	80f290 <__alt_mem_onchip_mem+0xff807290>
  80f2c4:	01400044 	movi	r5,1
  80f2c8:	2c24983a 	sll	r18,r5,r16
  80f2cc:	8809883a 	mov	r4,r17
  80f2d0:	91800144 	addi	r6,r18,5
  80f2d4:	318d883a 	add	r6,r6,r6
  80f2d8:	318d883a 	add	r6,r6,r6
  80f2dc:	0811fa00 	call	811fa0 <_calloc_r>
  80f2e0:	103ff626 	beq	r2,zero,80f2bc <__alt_mem_onchip_mem+0xff8072bc>
  80f2e4:	14000115 	stw	r16,4(r2)
  80f2e8:	14800215 	stw	r18,8(r2)
  80f2ec:	003fe606 	br	80f288 <__alt_mem_onchip_mem+0xff807288>

0080f2f0 <_Bfree>:
  80f2f0:	28000826 	beq	r5,zero,80f314 <_Bfree+0x24>
  80f2f4:	28c00117 	ldw	r3,4(r5)
  80f2f8:	20801317 	ldw	r2,76(r4)
  80f2fc:	18c7883a 	add	r3,r3,r3
  80f300:	18c7883a 	add	r3,r3,r3
  80f304:	10c5883a 	add	r2,r2,r3
  80f308:	10c00017 	ldw	r3,0(r2)
  80f30c:	28c00015 	stw	r3,0(r5)
  80f310:	11400015 	stw	r5,0(r2)
  80f314:	f800283a 	ret

0080f318 <__multadd>:
  80f318:	defffa04 	addi	sp,sp,-24
  80f31c:	dc800315 	stw	r18,12(sp)
  80f320:	dc400215 	stw	r17,8(sp)
  80f324:	dc000115 	stw	r16,4(sp)
  80f328:	2823883a 	mov	r17,r5
  80f32c:	2c000417 	ldw	r16,16(r5)
  80f330:	dfc00515 	stw	ra,20(sp)
  80f334:	dcc00415 	stw	r19,16(sp)
  80f338:	2025883a 	mov	r18,r4
  80f33c:	29400504 	addi	r5,r5,20
  80f340:	0011883a 	mov	r8,zero
  80f344:	28c00017 	ldw	r3,0(r5)
  80f348:	29400104 	addi	r5,r5,4
  80f34c:	42000044 	addi	r8,r8,1
  80f350:	18bfffcc 	andi	r2,r3,65535
  80f354:	1185383a 	mul	r2,r2,r6
  80f358:	1806d43a 	srli	r3,r3,16
  80f35c:	11cf883a 	add	r7,r2,r7
  80f360:	3808d43a 	srli	r4,r7,16
  80f364:	1987383a 	mul	r3,r3,r6
  80f368:	38bfffcc 	andi	r2,r7,65535
  80f36c:	1907883a 	add	r3,r3,r4
  80f370:	1808943a 	slli	r4,r3,16
  80f374:	180ed43a 	srli	r7,r3,16
  80f378:	2085883a 	add	r2,r4,r2
  80f37c:	28bfff15 	stw	r2,-4(r5)
  80f380:	443ff016 	blt	r8,r16,80f344 <__alt_mem_onchip_mem+0xff807344>
  80f384:	38000926 	beq	r7,zero,80f3ac <__multadd+0x94>
  80f388:	88800217 	ldw	r2,8(r17)
  80f38c:	80800f0e 	bge	r16,r2,80f3cc <__multadd+0xb4>
  80f390:	80800144 	addi	r2,r16,5
  80f394:	1085883a 	add	r2,r2,r2
  80f398:	1085883a 	add	r2,r2,r2
  80f39c:	8885883a 	add	r2,r17,r2
  80f3a0:	11c00015 	stw	r7,0(r2)
  80f3a4:	84000044 	addi	r16,r16,1
  80f3a8:	8c000415 	stw	r16,16(r17)
  80f3ac:	8805883a 	mov	r2,r17
  80f3b0:	dfc00517 	ldw	ra,20(sp)
  80f3b4:	dcc00417 	ldw	r19,16(sp)
  80f3b8:	dc800317 	ldw	r18,12(sp)
  80f3bc:	dc400217 	ldw	r17,8(sp)
  80f3c0:	dc000117 	ldw	r16,4(sp)
  80f3c4:	dec00604 	addi	sp,sp,24
  80f3c8:	f800283a 	ret
  80f3cc:	89400117 	ldw	r5,4(r17)
  80f3d0:	9009883a 	mov	r4,r18
  80f3d4:	d9c00015 	stw	r7,0(sp)
  80f3d8:	29400044 	addi	r5,r5,1
  80f3dc:	080f2480 	call	80f248 <_Balloc>
  80f3e0:	89800417 	ldw	r6,16(r17)
  80f3e4:	89400304 	addi	r5,r17,12
  80f3e8:	11000304 	addi	r4,r2,12
  80f3ec:	31800084 	addi	r6,r6,2
  80f3f0:	318d883a 	add	r6,r6,r6
  80f3f4:	318d883a 	add	r6,r6,r6
  80f3f8:	1027883a 	mov	r19,r2
  80f3fc:	080efa40 	call	80efa4 <memcpy>
  80f400:	d9c00017 	ldw	r7,0(sp)
  80f404:	88000a26 	beq	r17,zero,80f430 <__multadd+0x118>
  80f408:	88c00117 	ldw	r3,4(r17)
  80f40c:	90801317 	ldw	r2,76(r18)
  80f410:	18c7883a 	add	r3,r3,r3
  80f414:	18c7883a 	add	r3,r3,r3
  80f418:	10c5883a 	add	r2,r2,r3
  80f41c:	10c00017 	ldw	r3,0(r2)
  80f420:	88c00015 	stw	r3,0(r17)
  80f424:	14400015 	stw	r17,0(r2)
  80f428:	9823883a 	mov	r17,r19
  80f42c:	003fd806 	br	80f390 <__alt_mem_onchip_mem+0xff807390>
  80f430:	9823883a 	mov	r17,r19
  80f434:	003fd606 	br	80f390 <__alt_mem_onchip_mem+0xff807390>

0080f438 <__s2b>:
  80f438:	defff904 	addi	sp,sp,-28
  80f43c:	dc400115 	stw	r17,4(sp)
  80f440:	dc000015 	stw	r16,0(sp)
  80f444:	2023883a 	mov	r17,r4
  80f448:	2821883a 	mov	r16,r5
  80f44c:	39000204 	addi	r4,r7,8
  80f450:	01400244 	movi	r5,9
  80f454:	dcc00315 	stw	r19,12(sp)
  80f458:	dc800215 	stw	r18,8(sp)
  80f45c:	dfc00615 	stw	ra,24(sp)
  80f460:	dd400515 	stw	r21,20(sp)
  80f464:	dd000415 	stw	r20,16(sp)
  80f468:	3825883a 	mov	r18,r7
  80f46c:	3027883a 	mov	r19,r6
  80f470:	08068f40 	call	8068f4 <__divsi3>
  80f474:	00c00044 	movi	r3,1
  80f478:	000b883a 	mov	r5,zero
  80f47c:	1880030e 	bge	r3,r2,80f48c <__s2b+0x54>
  80f480:	18c7883a 	add	r3,r3,r3
  80f484:	29400044 	addi	r5,r5,1
  80f488:	18bffd16 	blt	r3,r2,80f480 <__alt_mem_onchip_mem+0xff807480>
  80f48c:	8809883a 	mov	r4,r17
  80f490:	080f2480 	call	80f248 <_Balloc>
  80f494:	d8c00717 	ldw	r3,28(sp)
  80f498:	10c00515 	stw	r3,20(r2)
  80f49c:	00c00044 	movi	r3,1
  80f4a0:	10c00415 	stw	r3,16(r2)
  80f4a4:	00c00244 	movi	r3,9
  80f4a8:	1cc0210e 	bge	r3,r19,80f530 <__s2b+0xf8>
  80f4ac:	80eb883a 	add	r21,r16,r3
  80f4b0:	a829883a 	mov	r20,r21
  80f4b4:	84e1883a 	add	r16,r16,r19
  80f4b8:	a1c00007 	ldb	r7,0(r20)
  80f4bc:	01800284 	movi	r6,10
  80f4c0:	a5000044 	addi	r20,r20,1
  80f4c4:	100b883a 	mov	r5,r2
  80f4c8:	39fff404 	addi	r7,r7,-48
  80f4cc:	8809883a 	mov	r4,r17
  80f4d0:	080f3180 	call	80f318 <__multadd>
  80f4d4:	a43ff81e 	bne	r20,r16,80f4b8 <__alt_mem_onchip_mem+0xff8074b8>
  80f4d8:	ace1883a 	add	r16,r21,r19
  80f4dc:	843ffe04 	addi	r16,r16,-8
  80f4e0:	9c800a0e 	bge	r19,r18,80f50c <__s2b+0xd4>
  80f4e4:	94e5c83a 	sub	r18,r18,r19
  80f4e8:	84a5883a 	add	r18,r16,r18
  80f4ec:	81c00007 	ldb	r7,0(r16)
  80f4f0:	01800284 	movi	r6,10
  80f4f4:	84000044 	addi	r16,r16,1
  80f4f8:	100b883a 	mov	r5,r2
  80f4fc:	39fff404 	addi	r7,r7,-48
  80f500:	8809883a 	mov	r4,r17
  80f504:	080f3180 	call	80f318 <__multadd>
  80f508:	84bff81e 	bne	r16,r18,80f4ec <__alt_mem_onchip_mem+0xff8074ec>
  80f50c:	dfc00617 	ldw	ra,24(sp)
  80f510:	dd400517 	ldw	r21,20(sp)
  80f514:	dd000417 	ldw	r20,16(sp)
  80f518:	dcc00317 	ldw	r19,12(sp)
  80f51c:	dc800217 	ldw	r18,8(sp)
  80f520:	dc400117 	ldw	r17,4(sp)
  80f524:	dc000017 	ldw	r16,0(sp)
  80f528:	dec00704 	addi	sp,sp,28
  80f52c:	f800283a 	ret
  80f530:	84000284 	addi	r16,r16,10
  80f534:	1827883a 	mov	r19,r3
  80f538:	003fe906 	br	80f4e0 <__alt_mem_onchip_mem+0xff8074e0>

0080f53c <__hi0bits>:
  80f53c:	20bfffec 	andhi	r2,r4,65535
  80f540:	1000141e 	bne	r2,zero,80f594 <__hi0bits+0x58>
  80f544:	2008943a 	slli	r4,r4,16
  80f548:	00800404 	movi	r2,16
  80f54c:	20ffc02c 	andhi	r3,r4,65280
  80f550:	1800021e 	bne	r3,zero,80f55c <__hi0bits+0x20>
  80f554:	2008923a 	slli	r4,r4,8
  80f558:	10800204 	addi	r2,r2,8
  80f55c:	20fc002c 	andhi	r3,r4,61440
  80f560:	1800021e 	bne	r3,zero,80f56c <__hi0bits+0x30>
  80f564:	2008913a 	slli	r4,r4,4
  80f568:	10800104 	addi	r2,r2,4
  80f56c:	20f0002c 	andhi	r3,r4,49152
  80f570:	1800031e 	bne	r3,zero,80f580 <__hi0bits+0x44>
  80f574:	2109883a 	add	r4,r4,r4
  80f578:	10800084 	addi	r2,r2,2
  80f57c:	2109883a 	add	r4,r4,r4
  80f580:	20000316 	blt	r4,zero,80f590 <__hi0bits+0x54>
  80f584:	2110002c 	andhi	r4,r4,16384
  80f588:	2000041e 	bne	r4,zero,80f59c <__hi0bits+0x60>
  80f58c:	00800804 	movi	r2,32
  80f590:	f800283a 	ret
  80f594:	0005883a 	mov	r2,zero
  80f598:	003fec06 	br	80f54c <__alt_mem_onchip_mem+0xff80754c>
  80f59c:	10800044 	addi	r2,r2,1
  80f5a0:	f800283a 	ret

0080f5a4 <__lo0bits>:
  80f5a4:	20c00017 	ldw	r3,0(r4)
  80f5a8:	188001cc 	andi	r2,r3,7
  80f5ac:	10000826 	beq	r2,zero,80f5d0 <__lo0bits+0x2c>
  80f5b0:	1880004c 	andi	r2,r3,1
  80f5b4:	1000211e 	bne	r2,zero,80f63c <__lo0bits+0x98>
  80f5b8:	1880008c 	andi	r2,r3,2
  80f5bc:	1000211e 	bne	r2,zero,80f644 <__lo0bits+0xa0>
  80f5c0:	1806d0ba 	srli	r3,r3,2
  80f5c4:	00800084 	movi	r2,2
  80f5c8:	20c00015 	stw	r3,0(r4)
  80f5cc:	f800283a 	ret
  80f5d0:	18bfffcc 	andi	r2,r3,65535
  80f5d4:	10001326 	beq	r2,zero,80f624 <__lo0bits+0x80>
  80f5d8:	0005883a 	mov	r2,zero
  80f5dc:	19403fcc 	andi	r5,r3,255
  80f5e0:	2800021e 	bne	r5,zero,80f5ec <__lo0bits+0x48>
  80f5e4:	1806d23a 	srli	r3,r3,8
  80f5e8:	10800204 	addi	r2,r2,8
  80f5ec:	194003cc 	andi	r5,r3,15
  80f5f0:	2800021e 	bne	r5,zero,80f5fc <__lo0bits+0x58>
  80f5f4:	1806d13a 	srli	r3,r3,4
  80f5f8:	10800104 	addi	r2,r2,4
  80f5fc:	194000cc 	andi	r5,r3,3
  80f600:	2800021e 	bne	r5,zero,80f60c <__lo0bits+0x68>
  80f604:	1806d0ba 	srli	r3,r3,2
  80f608:	10800084 	addi	r2,r2,2
  80f60c:	1940004c 	andi	r5,r3,1
  80f610:	2800081e 	bne	r5,zero,80f634 <__lo0bits+0x90>
  80f614:	1806d07a 	srli	r3,r3,1
  80f618:	1800051e 	bne	r3,zero,80f630 <__lo0bits+0x8c>
  80f61c:	00800804 	movi	r2,32
  80f620:	f800283a 	ret
  80f624:	1806d43a 	srli	r3,r3,16
  80f628:	00800404 	movi	r2,16
  80f62c:	003feb06 	br	80f5dc <__alt_mem_onchip_mem+0xff8075dc>
  80f630:	10800044 	addi	r2,r2,1
  80f634:	20c00015 	stw	r3,0(r4)
  80f638:	f800283a 	ret
  80f63c:	0005883a 	mov	r2,zero
  80f640:	f800283a 	ret
  80f644:	1806d07a 	srli	r3,r3,1
  80f648:	00800044 	movi	r2,1
  80f64c:	20c00015 	stw	r3,0(r4)
  80f650:	f800283a 	ret

0080f654 <__i2b>:
  80f654:	defffd04 	addi	sp,sp,-12
  80f658:	dc000015 	stw	r16,0(sp)
  80f65c:	04000044 	movi	r16,1
  80f660:	dc400115 	stw	r17,4(sp)
  80f664:	2823883a 	mov	r17,r5
  80f668:	800b883a 	mov	r5,r16
  80f66c:	dfc00215 	stw	ra,8(sp)
  80f670:	080f2480 	call	80f248 <_Balloc>
  80f674:	14400515 	stw	r17,20(r2)
  80f678:	14000415 	stw	r16,16(r2)
  80f67c:	dfc00217 	ldw	ra,8(sp)
  80f680:	dc400117 	ldw	r17,4(sp)
  80f684:	dc000017 	ldw	r16,0(sp)
  80f688:	dec00304 	addi	sp,sp,12
  80f68c:	f800283a 	ret

0080f690 <__multiply>:
  80f690:	defffa04 	addi	sp,sp,-24
  80f694:	dcc00315 	stw	r19,12(sp)
  80f698:	dc800215 	stw	r18,8(sp)
  80f69c:	34c00417 	ldw	r19,16(r6)
  80f6a0:	2c800417 	ldw	r18,16(r5)
  80f6a4:	dd000415 	stw	r20,16(sp)
  80f6a8:	dc400115 	stw	r17,4(sp)
  80f6ac:	dfc00515 	stw	ra,20(sp)
  80f6b0:	dc000015 	stw	r16,0(sp)
  80f6b4:	2829883a 	mov	r20,r5
  80f6b8:	3023883a 	mov	r17,r6
  80f6bc:	94c0050e 	bge	r18,r19,80f6d4 <__multiply+0x44>
  80f6c0:	9007883a 	mov	r3,r18
  80f6c4:	3029883a 	mov	r20,r6
  80f6c8:	9825883a 	mov	r18,r19
  80f6cc:	2823883a 	mov	r17,r5
  80f6d0:	1827883a 	mov	r19,r3
  80f6d4:	a0800217 	ldw	r2,8(r20)
  80f6d8:	94e1883a 	add	r16,r18,r19
  80f6dc:	a1400117 	ldw	r5,4(r20)
  80f6e0:	1400010e 	bge	r2,r16,80f6e8 <__multiply+0x58>
  80f6e4:	29400044 	addi	r5,r5,1
  80f6e8:	080f2480 	call	80f248 <_Balloc>
  80f6ec:	8415883a 	add	r10,r16,r16
  80f6f0:	12c00504 	addi	r11,r2,20
  80f6f4:	5295883a 	add	r10,r10,r10
  80f6f8:	5a95883a 	add	r10,r11,r10
  80f6fc:	5807883a 	mov	r3,r11
  80f700:	5a80032e 	bgeu	r11,r10,80f710 <__multiply+0x80>
  80f704:	18000015 	stw	zero,0(r3)
  80f708:	18c00104 	addi	r3,r3,4
  80f70c:	1abffd36 	bltu	r3,r10,80f704 <__alt_mem_onchip_mem+0xff807704>
  80f710:	9ce7883a 	add	r19,r19,r19
  80f714:	94a5883a 	add	r18,r18,r18
  80f718:	89800504 	addi	r6,r17,20
  80f71c:	9ce7883a 	add	r19,r19,r19
  80f720:	a3400504 	addi	r13,r20,20
  80f724:	94a5883a 	add	r18,r18,r18
  80f728:	34d9883a 	add	r12,r6,r19
  80f72c:	6c93883a 	add	r9,r13,r18
  80f730:	3300422e 	bgeu	r6,r12,80f83c <__multiply+0x1ac>
  80f734:	37c00017 	ldw	ra,0(r6)
  80f738:	fbffffcc 	andi	r15,ra,65535
  80f73c:	78001b26 	beq	r15,zero,80f7ac <__multiply+0x11c>
  80f740:	5811883a 	mov	r8,r11
  80f744:	681d883a 	mov	r14,r13
  80f748:	000f883a 	mov	r7,zero
  80f74c:	71000017 	ldw	r4,0(r14)
  80f750:	40c00017 	ldw	r3,0(r8)
  80f754:	73800104 	addi	r14,r14,4
  80f758:	217fffcc 	andi	r5,r4,65535
  80f75c:	2bcb383a 	mul	r5,r5,r15
  80f760:	2008d43a 	srli	r4,r4,16
  80f764:	1c7fffcc 	andi	r17,r3,65535
  80f768:	2c4b883a 	add	r5,r5,r17
  80f76c:	29cb883a 	add	r5,r5,r7
  80f770:	23c9383a 	mul	r4,r4,r15
  80f774:	1806d43a 	srli	r3,r3,16
  80f778:	280ed43a 	srli	r7,r5,16
  80f77c:	297fffcc 	andi	r5,r5,65535
  80f780:	20c7883a 	add	r3,r4,r3
  80f784:	19c7883a 	add	r3,r3,r7
  80f788:	1808943a 	slli	r4,r3,16
  80f78c:	4023883a 	mov	r17,r8
  80f790:	180ed43a 	srli	r7,r3,16
  80f794:	214ab03a 	or	r5,r4,r5
  80f798:	41400015 	stw	r5,0(r8)
  80f79c:	42000104 	addi	r8,r8,4
  80f7a0:	727fea36 	bltu	r14,r9,80f74c <__alt_mem_onchip_mem+0xff80774c>
  80f7a4:	89c00115 	stw	r7,4(r17)
  80f7a8:	37c00017 	ldw	ra,0(r6)
  80f7ac:	f83ed43a 	srli	ra,ra,16
  80f7b0:	f8001f26 	beq	ra,zero,80f830 <__multiply+0x1a0>
  80f7b4:	58c00017 	ldw	r3,0(r11)
  80f7b8:	681d883a 	mov	r14,r13
  80f7bc:	581f883a 	mov	r15,r11
  80f7c0:	1811883a 	mov	r8,r3
  80f7c4:	5825883a 	mov	r18,r11
  80f7c8:	000f883a 	mov	r7,zero
  80f7cc:	00000106 	br	80f7d4 <__multiply+0x144>
  80f7d0:	8825883a 	mov	r18,r17
  80f7d4:	7140000b 	ldhu	r5,0(r14)
  80f7d8:	4010d43a 	srli	r8,r8,16
  80f7dc:	193fffcc 	andi	r4,r3,65535
  80f7e0:	2fcb383a 	mul	r5,r5,ra
  80f7e4:	7bc00104 	addi	r15,r15,4
  80f7e8:	73800104 	addi	r14,r14,4
  80f7ec:	2a0b883a 	add	r5,r5,r8
  80f7f0:	29cb883a 	add	r5,r5,r7
  80f7f4:	2806943a 	slli	r3,r5,16
  80f7f8:	94400104 	addi	r17,r18,4
  80f7fc:	280ad43a 	srli	r5,r5,16
  80f800:	1908b03a 	or	r4,r3,r4
  80f804:	793fff15 	stw	r4,-4(r15)
  80f808:	70ffff17 	ldw	r3,-4(r14)
  80f80c:	8a000017 	ldw	r8,0(r17)
  80f810:	1806d43a 	srli	r3,r3,16
  80f814:	413fffcc 	andi	r4,r8,65535
  80f818:	1fc7383a 	mul	r3,r3,ra
  80f81c:	1907883a 	add	r3,r3,r4
  80f820:	1947883a 	add	r3,r3,r5
  80f824:	180ed43a 	srli	r7,r3,16
  80f828:	727fe936 	bltu	r14,r9,80f7d0 <__alt_mem_onchip_mem+0xff8077d0>
  80f82c:	90c00115 	stw	r3,4(r18)
  80f830:	31800104 	addi	r6,r6,4
  80f834:	5ac00104 	addi	r11,r11,4
  80f838:	333fbe36 	bltu	r6,r12,80f734 <__alt_mem_onchip_mem+0xff807734>
  80f83c:	0400090e 	bge	zero,r16,80f864 <__multiply+0x1d4>
  80f840:	50ffff17 	ldw	r3,-4(r10)
  80f844:	52bfff04 	addi	r10,r10,-4
  80f848:	18000326 	beq	r3,zero,80f858 <__multiply+0x1c8>
  80f84c:	00000506 	br	80f864 <__multiply+0x1d4>
  80f850:	50c00017 	ldw	r3,0(r10)
  80f854:	1800031e 	bne	r3,zero,80f864 <__multiply+0x1d4>
  80f858:	843fffc4 	addi	r16,r16,-1
  80f85c:	52bfff04 	addi	r10,r10,-4
  80f860:	803ffb1e 	bne	r16,zero,80f850 <__alt_mem_onchip_mem+0xff807850>
  80f864:	14000415 	stw	r16,16(r2)
  80f868:	dfc00517 	ldw	ra,20(sp)
  80f86c:	dd000417 	ldw	r20,16(sp)
  80f870:	dcc00317 	ldw	r19,12(sp)
  80f874:	dc800217 	ldw	r18,8(sp)
  80f878:	dc400117 	ldw	r17,4(sp)
  80f87c:	dc000017 	ldw	r16,0(sp)
  80f880:	dec00604 	addi	sp,sp,24
  80f884:	f800283a 	ret

0080f888 <__pow5mult>:
  80f888:	defffa04 	addi	sp,sp,-24
  80f88c:	dcc00315 	stw	r19,12(sp)
  80f890:	dc000015 	stw	r16,0(sp)
  80f894:	dfc00515 	stw	ra,20(sp)
  80f898:	dd000415 	stw	r20,16(sp)
  80f89c:	dc800215 	stw	r18,8(sp)
  80f8a0:	dc400115 	stw	r17,4(sp)
  80f8a4:	308000cc 	andi	r2,r6,3
  80f8a8:	3021883a 	mov	r16,r6
  80f8ac:	2027883a 	mov	r19,r4
  80f8b0:	10002f1e 	bne	r2,zero,80f970 <__pow5mult+0xe8>
  80f8b4:	2825883a 	mov	r18,r5
  80f8b8:	8021d0ba 	srai	r16,r16,2
  80f8bc:	80001a26 	beq	r16,zero,80f928 <__pow5mult+0xa0>
  80f8c0:	9c401217 	ldw	r17,72(r19)
  80f8c4:	8800061e 	bne	r17,zero,80f8e0 <__pow5mult+0x58>
  80f8c8:	00003406 	br	80f99c <__pow5mult+0x114>
  80f8cc:	8021d07a 	srai	r16,r16,1
  80f8d0:	80001526 	beq	r16,zero,80f928 <__pow5mult+0xa0>
  80f8d4:	88800017 	ldw	r2,0(r17)
  80f8d8:	10001c26 	beq	r2,zero,80f94c <__pow5mult+0xc4>
  80f8dc:	1023883a 	mov	r17,r2
  80f8e0:	8080004c 	andi	r2,r16,1
  80f8e4:	103ff926 	beq	r2,zero,80f8cc <__alt_mem_onchip_mem+0xff8078cc>
  80f8e8:	880d883a 	mov	r6,r17
  80f8ec:	900b883a 	mov	r5,r18
  80f8f0:	9809883a 	mov	r4,r19
  80f8f4:	080f6900 	call	80f690 <__multiply>
  80f8f8:	90001b26 	beq	r18,zero,80f968 <__pow5mult+0xe0>
  80f8fc:	91000117 	ldw	r4,4(r18)
  80f900:	98c01317 	ldw	r3,76(r19)
  80f904:	8021d07a 	srai	r16,r16,1
  80f908:	2109883a 	add	r4,r4,r4
  80f90c:	2109883a 	add	r4,r4,r4
  80f910:	1907883a 	add	r3,r3,r4
  80f914:	19000017 	ldw	r4,0(r3)
  80f918:	91000015 	stw	r4,0(r18)
  80f91c:	1c800015 	stw	r18,0(r3)
  80f920:	1025883a 	mov	r18,r2
  80f924:	803feb1e 	bne	r16,zero,80f8d4 <__alt_mem_onchip_mem+0xff8078d4>
  80f928:	9005883a 	mov	r2,r18
  80f92c:	dfc00517 	ldw	ra,20(sp)
  80f930:	dd000417 	ldw	r20,16(sp)
  80f934:	dcc00317 	ldw	r19,12(sp)
  80f938:	dc800217 	ldw	r18,8(sp)
  80f93c:	dc400117 	ldw	r17,4(sp)
  80f940:	dc000017 	ldw	r16,0(sp)
  80f944:	dec00604 	addi	sp,sp,24
  80f948:	f800283a 	ret
  80f94c:	880d883a 	mov	r6,r17
  80f950:	880b883a 	mov	r5,r17
  80f954:	9809883a 	mov	r4,r19
  80f958:	080f6900 	call	80f690 <__multiply>
  80f95c:	88800015 	stw	r2,0(r17)
  80f960:	10000015 	stw	zero,0(r2)
  80f964:	003fdd06 	br	80f8dc <__alt_mem_onchip_mem+0xff8078dc>
  80f968:	1025883a 	mov	r18,r2
  80f96c:	003fd706 	br	80f8cc <__alt_mem_onchip_mem+0xff8078cc>
  80f970:	10bfffc4 	addi	r2,r2,-1
  80f974:	1085883a 	add	r2,r2,r2
  80f978:	00c02074 	movhi	r3,129
  80f97c:	18dc9004 	addi	r3,r3,29248
  80f980:	1085883a 	add	r2,r2,r2
  80f984:	1885883a 	add	r2,r3,r2
  80f988:	11800017 	ldw	r6,0(r2)
  80f98c:	000f883a 	mov	r7,zero
  80f990:	080f3180 	call	80f318 <__multadd>
  80f994:	1025883a 	mov	r18,r2
  80f998:	003fc706 	br	80f8b8 <__alt_mem_onchip_mem+0xff8078b8>
  80f99c:	05000044 	movi	r20,1
  80f9a0:	a00b883a 	mov	r5,r20
  80f9a4:	9809883a 	mov	r4,r19
  80f9a8:	080f2480 	call	80f248 <_Balloc>
  80f9ac:	1023883a 	mov	r17,r2
  80f9b0:	00809c44 	movi	r2,625
  80f9b4:	88800515 	stw	r2,20(r17)
  80f9b8:	8d000415 	stw	r20,16(r17)
  80f9bc:	9c401215 	stw	r17,72(r19)
  80f9c0:	88000015 	stw	zero,0(r17)
  80f9c4:	003fc606 	br	80f8e0 <__alt_mem_onchip_mem+0xff8078e0>

0080f9c8 <__lshift>:
  80f9c8:	defff904 	addi	sp,sp,-28
  80f9cc:	dd400515 	stw	r21,20(sp)
  80f9d0:	dcc00315 	stw	r19,12(sp)
  80f9d4:	302bd17a 	srai	r21,r6,5
  80f9d8:	2cc00417 	ldw	r19,16(r5)
  80f9dc:	28800217 	ldw	r2,8(r5)
  80f9e0:	dd000415 	stw	r20,16(sp)
  80f9e4:	ace7883a 	add	r19,r21,r19
  80f9e8:	dc800215 	stw	r18,8(sp)
  80f9ec:	dc400115 	stw	r17,4(sp)
  80f9f0:	dc000015 	stw	r16,0(sp)
  80f9f4:	dfc00615 	stw	ra,24(sp)
  80f9f8:	9c000044 	addi	r16,r19,1
  80f9fc:	2823883a 	mov	r17,r5
  80fa00:	3029883a 	mov	r20,r6
  80fa04:	2025883a 	mov	r18,r4
  80fa08:	29400117 	ldw	r5,4(r5)
  80fa0c:	1400030e 	bge	r2,r16,80fa1c <__lshift+0x54>
  80fa10:	1085883a 	add	r2,r2,r2
  80fa14:	29400044 	addi	r5,r5,1
  80fa18:	143ffd16 	blt	r2,r16,80fa10 <__alt_mem_onchip_mem+0xff807a10>
  80fa1c:	9009883a 	mov	r4,r18
  80fa20:	080f2480 	call	80f248 <_Balloc>
  80fa24:	10c00504 	addi	r3,r2,20
  80fa28:	0540070e 	bge	zero,r21,80fa48 <__lshift+0x80>
  80fa2c:	ad6b883a 	add	r21,r21,r21
  80fa30:	ad6b883a 	add	r21,r21,r21
  80fa34:	1809883a 	mov	r4,r3
  80fa38:	1d47883a 	add	r3,r3,r21
  80fa3c:	20000015 	stw	zero,0(r4)
  80fa40:	21000104 	addi	r4,r4,4
  80fa44:	193ffd1e 	bne	r3,r4,80fa3c <__alt_mem_onchip_mem+0xff807a3c>
  80fa48:	8a000417 	ldw	r8,16(r17)
  80fa4c:	89000504 	addi	r4,r17,20
  80fa50:	a18007cc 	andi	r6,r20,31
  80fa54:	4211883a 	add	r8,r8,r8
  80fa58:	4211883a 	add	r8,r8,r8
  80fa5c:	2211883a 	add	r8,r4,r8
  80fa60:	30002326 	beq	r6,zero,80faf0 <__lshift+0x128>
  80fa64:	02400804 	movi	r9,32
  80fa68:	4993c83a 	sub	r9,r9,r6
  80fa6c:	000b883a 	mov	r5,zero
  80fa70:	21c00017 	ldw	r7,0(r4)
  80fa74:	1815883a 	mov	r10,r3
  80fa78:	18c00104 	addi	r3,r3,4
  80fa7c:	398e983a 	sll	r7,r7,r6
  80fa80:	21000104 	addi	r4,r4,4
  80fa84:	394ab03a 	or	r5,r7,r5
  80fa88:	197fff15 	stw	r5,-4(r3)
  80fa8c:	217fff17 	ldw	r5,-4(r4)
  80fa90:	2a4ad83a 	srl	r5,r5,r9
  80fa94:	223ff636 	bltu	r4,r8,80fa70 <__alt_mem_onchip_mem+0xff807a70>
  80fa98:	51400115 	stw	r5,4(r10)
  80fa9c:	28001a1e 	bne	r5,zero,80fb08 <__lshift+0x140>
  80faa0:	843fffc4 	addi	r16,r16,-1
  80faa4:	14000415 	stw	r16,16(r2)
  80faa8:	88000826 	beq	r17,zero,80facc <__lshift+0x104>
  80faac:	89000117 	ldw	r4,4(r17)
  80fab0:	90c01317 	ldw	r3,76(r18)
  80fab4:	2109883a 	add	r4,r4,r4
  80fab8:	2109883a 	add	r4,r4,r4
  80fabc:	1907883a 	add	r3,r3,r4
  80fac0:	19000017 	ldw	r4,0(r3)
  80fac4:	89000015 	stw	r4,0(r17)
  80fac8:	1c400015 	stw	r17,0(r3)
  80facc:	dfc00617 	ldw	ra,24(sp)
  80fad0:	dd400517 	ldw	r21,20(sp)
  80fad4:	dd000417 	ldw	r20,16(sp)
  80fad8:	dcc00317 	ldw	r19,12(sp)
  80fadc:	dc800217 	ldw	r18,8(sp)
  80fae0:	dc400117 	ldw	r17,4(sp)
  80fae4:	dc000017 	ldw	r16,0(sp)
  80fae8:	dec00704 	addi	sp,sp,28
  80faec:	f800283a 	ret
  80faf0:	21400017 	ldw	r5,0(r4)
  80faf4:	18c00104 	addi	r3,r3,4
  80faf8:	21000104 	addi	r4,r4,4
  80fafc:	197fff15 	stw	r5,-4(r3)
  80fb00:	223ffb36 	bltu	r4,r8,80faf0 <__alt_mem_onchip_mem+0xff807af0>
  80fb04:	003fe606 	br	80faa0 <__alt_mem_onchip_mem+0xff807aa0>
  80fb08:	9c000084 	addi	r16,r19,2
  80fb0c:	003fe406 	br	80faa0 <__alt_mem_onchip_mem+0xff807aa0>

0080fb10 <__mcmp>:
  80fb10:	20800417 	ldw	r2,16(r4)
  80fb14:	28c00417 	ldw	r3,16(r5)
  80fb18:	10c5c83a 	sub	r2,r2,r3
  80fb1c:	1000111e 	bne	r2,zero,80fb64 <__mcmp+0x54>
  80fb20:	18c7883a 	add	r3,r3,r3
  80fb24:	18c7883a 	add	r3,r3,r3
  80fb28:	21000504 	addi	r4,r4,20
  80fb2c:	29400504 	addi	r5,r5,20
  80fb30:	20c5883a 	add	r2,r4,r3
  80fb34:	28cb883a 	add	r5,r5,r3
  80fb38:	00000106 	br	80fb40 <__mcmp+0x30>
  80fb3c:	20800a2e 	bgeu	r4,r2,80fb68 <__mcmp+0x58>
  80fb40:	10bfff04 	addi	r2,r2,-4
  80fb44:	297fff04 	addi	r5,r5,-4
  80fb48:	11800017 	ldw	r6,0(r2)
  80fb4c:	28c00017 	ldw	r3,0(r5)
  80fb50:	30fffa26 	beq	r6,r3,80fb3c <__alt_mem_onchip_mem+0xff807b3c>
  80fb54:	30c00236 	bltu	r6,r3,80fb60 <__mcmp+0x50>
  80fb58:	00800044 	movi	r2,1
  80fb5c:	f800283a 	ret
  80fb60:	00bfffc4 	movi	r2,-1
  80fb64:	f800283a 	ret
  80fb68:	0005883a 	mov	r2,zero
  80fb6c:	f800283a 	ret

0080fb70 <__mdiff>:
  80fb70:	28c00417 	ldw	r3,16(r5)
  80fb74:	30800417 	ldw	r2,16(r6)
  80fb78:	defffa04 	addi	sp,sp,-24
  80fb7c:	dcc00315 	stw	r19,12(sp)
  80fb80:	dc800215 	stw	r18,8(sp)
  80fb84:	dfc00515 	stw	ra,20(sp)
  80fb88:	dd000415 	stw	r20,16(sp)
  80fb8c:	dc400115 	stw	r17,4(sp)
  80fb90:	dc000015 	stw	r16,0(sp)
  80fb94:	1887c83a 	sub	r3,r3,r2
  80fb98:	2825883a 	mov	r18,r5
  80fb9c:	3027883a 	mov	r19,r6
  80fba0:	1800141e 	bne	r3,zero,80fbf4 <__mdiff+0x84>
  80fba4:	1085883a 	add	r2,r2,r2
  80fba8:	1085883a 	add	r2,r2,r2
  80fbac:	2a000504 	addi	r8,r5,20
  80fbb0:	34000504 	addi	r16,r6,20
  80fbb4:	4087883a 	add	r3,r8,r2
  80fbb8:	8085883a 	add	r2,r16,r2
  80fbbc:	00000106 	br	80fbc4 <__mdiff+0x54>
  80fbc0:	40c0592e 	bgeu	r8,r3,80fd28 <__mdiff+0x1b8>
  80fbc4:	18ffff04 	addi	r3,r3,-4
  80fbc8:	10bfff04 	addi	r2,r2,-4
  80fbcc:	19c00017 	ldw	r7,0(r3)
  80fbd0:	11400017 	ldw	r5,0(r2)
  80fbd4:	397ffa26 	beq	r7,r5,80fbc0 <__alt_mem_onchip_mem+0xff807bc0>
  80fbd8:	3940592e 	bgeu	r7,r5,80fd40 <__mdiff+0x1d0>
  80fbdc:	9005883a 	mov	r2,r18
  80fbe0:	4023883a 	mov	r17,r8
  80fbe4:	9825883a 	mov	r18,r19
  80fbe8:	05000044 	movi	r20,1
  80fbec:	1027883a 	mov	r19,r2
  80fbf0:	00000406 	br	80fc04 <__mdiff+0x94>
  80fbf4:	18005616 	blt	r3,zero,80fd50 <__mdiff+0x1e0>
  80fbf8:	34400504 	addi	r17,r6,20
  80fbfc:	2c000504 	addi	r16,r5,20
  80fc00:	0029883a 	mov	r20,zero
  80fc04:	91400117 	ldw	r5,4(r18)
  80fc08:	080f2480 	call	80f248 <_Balloc>
  80fc0c:	92400417 	ldw	r9,16(r18)
  80fc10:	9b000417 	ldw	r12,16(r19)
  80fc14:	12c00504 	addi	r11,r2,20
  80fc18:	4a51883a 	add	r8,r9,r9
  80fc1c:	6319883a 	add	r12,r12,r12
  80fc20:	4211883a 	add	r8,r8,r8
  80fc24:	6319883a 	add	r12,r12,r12
  80fc28:	15000315 	stw	r20,12(r2)
  80fc2c:	8211883a 	add	r8,r16,r8
  80fc30:	8b19883a 	add	r12,r17,r12
  80fc34:	0007883a 	mov	r3,zero
  80fc38:	81400017 	ldw	r5,0(r16)
  80fc3c:	89c00017 	ldw	r7,0(r17)
  80fc40:	59800104 	addi	r6,r11,4
  80fc44:	293fffcc 	andi	r4,r5,65535
  80fc48:	20c7883a 	add	r3,r4,r3
  80fc4c:	393fffcc 	andi	r4,r7,65535
  80fc50:	1909c83a 	sub	r4,r3,r4
  80fc54:	280ad43a 	srli	r5,r5,16
  80fc58:	380ed43a 	srli	r7,r7,16
  80fc5c:	2007d43a 	srai	r3,r4,16
  80fc60:	213fffcc 	andi	r4,r4,65535
  80fc64:	29cbc83a 	sub	r5,r5,r7
  80fc68:	28c7883a 	add	r3,r5,r3
  80fc6c:	180a943a 	slli	r5,r3,16
  80fc70:	8c400104 	addi	r17,r17,4
  80fc74:	84000104 	addi	r16,r16,4
  80fc78:	2908b03a 	or	r4,r5,r4
  80fc7c:	59000015 	stw	r4,0(r11)
  80fc80:	1807d43a 	srai	r3,r3,16
  80fc84:	3015883a 	mov	r10,r6
  80fc88:	3017883a 	mov	r11,r6
  80fc8c:	8b3fea36 	bltu	r17,r12,80fc38 <__alt_mem_onchip_mem+0xff807c38>
  80fc90:	8200162e 	bgeu	r16,r8,80fcec <__mdiff+0x17c>
  80fc94:	8017883a 	mov	r11,r16
  80fc98:	59400017 	ldw	r5,0(r11)
  80fc9c:	31800104 	addi	r6,r6,4
  80fca0:	5ac00104 	addi	r11,r11,4
  80fca4:	293fffcc 	andi	r4,r5,65535
  80fca8:	20c7883a 	add	r3,r4,r3
  80fcac:	280ed43a 	srli	r7,r5,16
  80fcb0:	180bd43a 	srai	r5,r3,16
  80fcb4:	193fffcc 	andi	r4,r3,65535
  80fcb8:	3947883a 	add	r3,r7,r5
  80fcbc:	180a943a 	slli	r5,r3,16
  80fcc0:	1807d43a 	srai	r3,r3,16
  80fcc4:	2908b03a 	or	r4,r5,r4
  80fcc8:	313fff15 	stw	r4,-4(r6)
  80fccc:	5a3ff236 	bltu	r11,r8,80fc98 <__alt_mem_onchip_mem+0xff807c98>
  80fcd0:	0406303a 	nor	r3,zero,r16
  80fcd4:	1a07883a 	add	r3,r3,r8
  80fcd8:	1806d0ba 	srli	r3,r3,2
  80fcdc:	18c00044 	addi	r3,r3,1
  80fce0:	18c7883a 	add	r3,r3,r3
  80fce4:	18c7883a 	add	r3,r3,r3
  80fce8:	50d5883a 	add	r10,r10,r3
  80fcec:	50ffff04 	addi	r3,r10,-4
  80fcf0:	2000041e 	bne	r4,zero,80fd04 <__mdiff+0x194>
  80fcf4:	18ffff04 	addi	r3,r3,-4
  80fcf8:	19000017 	ldw	r4,0(r3)
  80fcfc:	4a7fffc4 	addi	r9,r9,-1
  80fd00:	203ffc26 	beq	r4,zero,80fcf4 <__alt_mem_onchip_mem+0xff807cf4>
  80fd04:	12400415 	stw	r9,16(r2)
  80fd08:	dfc00517 	ldw	ra,20(sp)
  80fd0c:	dd000417 	ldw	r20,16(sp)
  80fd10:	dcc00317 	ldw	r19,12(sp)
  80fd14:	dc800217 	ldw	r18,8(sp)
  80fd18:	dc400117 	ldw	r17,4(sp)
  80fd1c:	dc000017 	ldw	r16,0(sp)
  80fd20:	dec00604 	addi	sp,sp,24
  80fd24:	f800283a 	ret
  80fd28:	000b883a 	mov	r5,zero
  80fd2c:	080f2480 	call	80f248 <_Balloc>
  80fd30:	00c00044 	movi	r3,1
  80fd34:	10c00415 	stw	r3,16(r2)
  80fd38:	10000515 	stw	zero,20(r2)
  80fd3c:	003ff206 	br	80fd08 <__alt_mem_onchip_mem+0xff807d08>
  80fd40:	8023883a 	mov	r17,r16
  80fd44:	0029883a 	mov	r20,zero
  80fd48:	4021883a 	mov	r16,r8
  80fd4c:	003fad06 	br	80fc04 <__alt_mem_onchip_mem+0xff807c04>
  80fd50:	9005883a 	mov	r2,r18
  80fd54:	94400504 	addi	r17,r18,20
  80fd58:	9c000504 	addi	r16,r19,20
  80fd5c:	9825883a 	mov	r18,r19
  80fd60:	05000044 	movi	r20,1
  80fd64:	1027883a 	mov	r19,r2
  80fd68:	003fa606 	br	80fc04 <__alt_mem_onchip_mem+0xff807c04>

0080fd6c <__ulp>:
  80fd6c:	295ffc2c 	andhi	r5,r5,32752
  80fd70:	00bf3034 	movhi	r2,64704
  80fd74:	2887883a 	add	r3,r5,r2
  80fd78:	00c0020e 	bge	zero,r3,80fd84 <__ulp+0x18>
  80fd7c:	0005883a 	mov	r2,zero
  80fd80:	f800283a 	ret
  80fd84:	00c7c83a 	sub	r3,zero,r3
  80fd88:	1807d53a 	srai	r3,r3,20
  80fd8c:	008004c4 	movi	r2,19
  80fd90:	10c00b0e 	bge	r2,r3,80fdc0 <__ulp+0x54>
  80fd94:	18bffb04 	addi	r2,r3,-20
  80fd98:	01000784 	movi	r4,30
  80fd9c:	0007883a 	mov	r3,zero
  80fda0:	20800516 	blt	r4,r2,80fdb8 <__ulp+0x4c>
  80fda4:	010007c4 	movi	r4,31
  80fda8:	2089c83a 	sub	r4,r4,r2
  80fdac:	00800044 	movi	r2,1
  80fdb0:	1104983a 	sll	r2,r2,r4
  80fdb4:	f800283a 	ret
  80fdb8:	00800044 	movi	r2,1
  80fdbc:	f800283a 	ret
  80fdc0:	01400234 	movhi	r5,8
  80fdc4:	28c7d83a 	sra	r3,r5,r3
  80fdc8:	0005883a 	mov	r2,zero
  80fdcc:	f800283a 	ret

0080fdd0 <__b2d>:
  80fdd0:	defffa04 	addi	sp,sp,-24
  80fdd4:	dc000015 	stw	r16,0(sp)
  80fdd8:	24000417 	ldw	r16,16(r4)
  80fddc:	dc400115 	stw	r17,4(sp)
  80fde0:	24400504 	addi	r17,r4,20
  80fde4:	8421883a 	add	r16,r16,r16
  80fde8:	8421883a 	add	r16,r16,r16
  80fdec:	8c21883a 	add	r16,r17,r16
  80fdf0:	dc800215 	stw	r18,8(sp)
  80fdf4:	84bfff17 	ldw	r18,-4(r16)
  80fdf8:	dd000415 	stw	r20,16(sp)
  80fdfc:	dcc00315 	stw	r19,12(sp)
  80fe00:	9009883a 	mov	r4,r18
  80fe04:	2829883a 	mov	r20,r5
  80fe08:	dfc00515 	stw	ra,20(sp)
  80fe0c:	080f53c0 	call	80f53c <__hi0bits>
  80fe10:	00c00804 	movi	r3,32
  80fe14:	1889c83a 	sub	r4,r3,r2
  80fe18:	a1000015 	stw	r4,0(r20)
  80fe1c:	01000284 	movi	r4,10
  80fe20:	84ffff04 	addi	r19,r16,-4
  80fe24:	20801216 	blt	r4,r2,80fe70 <__b2d+0xa0>
  80fe28:	018002c4 	movi	r6,11
  80fe2c:	308dc83a 	sub	r6,r6,r2
  80fe30:	9186d83a 	srl	r3,r18,r6
  80fe34:	18cffc34 	orhi	r3,r3,16368
  80fe38:	8cc0212e 	bgeu	r17,r19,80fec0 <__b2d+0xf0>
  80fe3c:	813ffe17 	ldw	r4,-8(r16)
  80fe40:	218cd83a 	srl	r6,r4,r6
  80fe44:	10800544 	addi	r2,r2,21
  80fe48:	9084983a 	sll	r2,r18,r2
  80fe4c:	1184b03a 	or	r2,r2,r6
  80fe50:	dfc00517 	ldw	ra,20(sp)
  80fe54:	dd000417 	ldw	r20,16(sp)
  80fe58:	dcc00317 	ldw	r19,12(sp)
  80fe5c:	dc800217 	ldw	r18,8(sp)
  80fe60:	dc400117 	ldw	r17,4(sp)
  80fe64:	dc000017 	ldw	r16,0(sp)
  80fe68:	dec00604 	addi	sp,sp,24
  80fe6c:	f800283a 	ret
  80fe70:	8cc00f2e 	bgeu	r17,r19,80feb0 <__b2d+0xe0>
  80fe74:	117ffd44 	addi	r5,r2,-11
  80fe78:	80bffe17 	ldw	r2,-8(r16)
  80fe7c:	28000e26 	beq	r5,zero,80feb8 <__b2d+0xe8>
  80fe80:	1949c83a 	sub	r4,r3,r5
  80fe84:	9164983a 	sll	r18,r18,r5
  80fe88:	1106d83a 	srl	r3,r2,r4
  80fe8c:	81bffe04 	addi	r6,r16,-8
  80fe90:	948ffc34 	orhi	r18,r18,16368
  80fe94:	90c6b03a 	or	r3,r18,r3
  80fe98:	89800e2e 	bgeu	r17,r6,80fed4 <__b2d+0x104>
  80fe9c:	81bffd17 	ldw	r6,-12(r16)
  80fea0:	1144983a 	sll	r2,r2,r5
  80fea4:	310ad83a 	srl	r5,r6,r4
  80fea8:	2884b03a 	or	r2,r5,r2
  80feac:	003fe806 	br	80fe50 <__alt_mem_onchip_mem+0xff807e50>
  80feb0:	10bffd44 	addi	r2,r2,-11
  80feb4:	1000041e 	bne	r2,zero,80fec8 <__b2d+0xf8>
  80feb8:	90cffc34 	orhi	r3,r18,16368
  80febc:	003fe406 	br	80fe50 <__alt_mem_onchip_mem+0xff807e50>
  80fec0:	000d883a 	mov	r6,zero
  80fec4:	003fdf06 	br	80fe44 <__alt_mem_onchip_mem+0xff807e44>
  80fec8:	90a4983a 	sll	r18,r18,r2
  80fecc:	0005883a 	mov	r2,zero
  80fed0:	003ff906 	br	80feb8 <__alt_mem_onchip_mem+0xff807eb8>
  80fed4:	1144983a 	sll	r2,r2,r5
  80fed8:	003fdd06 	br	80fe50 <__alt_mem_onchip_mem+0xff807e50>

0080fedc <__d2b>:
  80fedc:	defff804 	addi	sp,sp,-32
  80fee0:	dc000215 	stw	r16,8(sp)
  80fee4:	3021883a 	mov	r16,r6
  80fee8:	dc400315 	stw	r17,12(sp)
  80feec:	8022907a 	slli	r17,r16,1
  80fef0:	dd000615 	stw	r20,24(sp)
  80fef4:	2829883a 	mov	r20,r5
  80fef8:	01400044 	movi	r5,1
  80fefc:	dcc00515 	stw	r19,20(sp)
  80ff00:	dc800415 	stw	r18,16(sp)
  80ff04:	dfc00715 	stw	ra,28(sp)
  80ff08:	3825883a 	mov	r18,r7
  80ff0c:	8822d57a 	srli	r17,r17,21
  80ff10:	080f2480 	call	80f248 <_Balloc>
  80ff14:	1027883a 	mov	r19,r2
  80ff18:	00800434 	movhi	r2,16
  80ff1c:	10bfffc4 	addi	r2,r2,-1
  80ff20:	808c703a 	and	r6,r16,r2
  80ff24:	88000126 	beq	r17,zero,80ff2c <__d2b+0x50>
  80ff28:	31800434 	orhi	r6,r6,16
  80ff2c:	d9800015 	stw	r6,0(sp)
  80ff30:	a0002426 	beq	r20,zero,80ffc4 <__d2b+0xe8>
  80ff34:	d9000104 	addi	r4,sp,4
  80ff38:	dd000115 	stw	r20,4(sp)
  80ff3c:	080f5a40 	call	80f5a4 <__lo0bits>
  80ff40:	d8c00017 	ldw	r3,0(sp)
  80ff44:	10002f1e 	bne	r2,zero,810004 <__d2b+0x128>
  80ff48:	d9000117 	ldw	r4,4(sp)
  80ff4c:	99000515 	stw	r4,20(r19)
  80ff50:	1821003a 	cmpeq	r16,r3,zero
  80ff54:	01000084 	movi	r4,2
  80ff58:	2421c83a 	sub	r16,r4,r16
  80ff5c:	98c00615 	stw	r3,24(r19)
  80ff60:	9c000415 	stw	r16,16(r19)
  80ff64:	88001f1e 	bne	r17,zero,80ffe4 <__d2b+0x108>
  80ff68:	10bef384 	addi	r2,r2,-1074
  80ff6c:	90800015 	stw	r2,0(r18)
  80ff70:	00900034 	movhi	r2,16384
  80ff74:	10bfffc4 	addi	r2,r2,-1
  80ff78:	8085883a 	add	r2,r16,r2
  80ff7c:	1085883a 	add	r2,r2,r2
  80ff80:	1085883a 	add	r2,r2,r2
  80ff84:	9885883a 	add	r2,r19,r2
  80ff88:	11000517 	ldw	r4,20(r2)
  80ff8c:	8020917a 	slli	r16,r16,5
  80ff90:	080f53c0 	call	80f53c <__hi0bits>
  80ff94:	d8c00817 	ldw	r3,32(sp)
  80ff98:	8085c83a 	sub	r2,r16,r2
  80ff9c:	18800015 	stw	r2,0(r3)
  80ffa0:	9805883a 	mov	r2,r19
  80ffa4:	dfc00717 	ldw	ra,28(sp)
  80ffa8:	dd000617 	ldw	r20,24(sp)
  80ffac:	dcc00517 	ldw	r19,20(sp)
  80ffb0:	dc800417 	ldw	r18,16(sp)
  80ffb4:	dc400317 	ldw	r17,12(sp)
  80ffb8:	dc000217 	ldw	r16,8(sp)
  80ffbc:	dec00804 	addi	sp,sp,32
  80ffc0:	f800283a 	ret
  80ffc4:	d809883a 	mov	r4,sp
  80ffc8:	080f5a40 	call	80f5a4 <__lo0bits>
  80ffcc:	d8c00017 	ldw	r3,0(sp)
  80ffd0:	04000044 	movi	r16,1
  80ffd4:	9c000415 	stw	r16,16(r19)
  80ffd8:	98c00515 	stw	r3,20(r19)
  80ffdc:	10800804 	addi	r2,r2,32
  80ffe0:	883fe126 	beq	r17,zero,80ff68 <__alt_mem_onchip_mem+0xff807f68>
  80ffe4:	00c00d44 	movi	r3,53
  80ffe8:	8c7ef344 	addi	r17,r17,-1075
  80ffec:	88a3883a 	add	r17,r17,r2
  80fff0:	1885c83a 	sub	r2,r3,r2
  80fff4:	d8c00817 	ldw	r3,32(sp)
  80fff8:	94400015 	stw	r17,0(r18)
  80fffc:	18800015 	stw	r2,0(r3)
  810000:	003fe706 	br	80ffa0 <__alt_mem_onchip_mem+0xff807fa0>
  810004:	01000804 	movi	r4,32
  810008:	2089c83a 	sub	r4,r4,r2
  81000c:	1908983a 	sll	r4,r3,r4
  810010:	d9400117 	ldw	r5,4(sp)
  810014:	1886d83a 	srl	r3,r3,r2
  810018:	2148b03a 	or	r4,r4,r5
  81001c:	99000515 	stw	r4,20(r19)
  810020:	d8c00015 	stw	r3,0(sp)
  810024:	003fca06 	br	80ff50 <__alt_mem_onchip_mem+0xff807f50>

00810028 <__ratio>:
  810028:	defff904 	addi	sp,sp,-28
  81002c:	dc400315 	stw	r17,12(sp)
  810030:	2823883a 	mov	r17,r5
  810034:	d9400104 	addi	r5,sp,4
  810038:	dfc00615 	stw	ra,24(sp)
  81003c:	dcc00515 	stw	r19,20(sp)
  810040:	dc800415 	stw	r18,16(sp)
  810044:	2027883a 	mov	r19,r4
  810048:	dc000215 	stw	r16,8(sp)
  81004c:	080fdd00 	call	80fdd0 <__b2d>
  810050:	d80b883a 	mov	r5,sp
  810054:	8809883a 	mov	r4,r17
  810058:	1025883a 	mov	r18,r2
  81005c:	1821883a 	mov	r16,r3
  810060:	080fdd00 	call	80fdd0 <__b2d>
  810064:	8a000417 	ldw	r8,16(r17)
  810068:	99000417 	ldw	r4,16(r19)
  81006c:	d9400117 	ldw	r5,4(sp)
  810070:	2209c83a 	sub	r4,r4,r8
  810074:	2010917a 	slli	r8,r4,5
  810078:	d9000017 	ldw	r4,0(sp)
  81007c:	2909c83a 	sub	r4,r5,r4
  810080:	4109883a 	add	r4,r8,r4
  810084:	01000e0e 	bge	zero,r4,8100c0 <__ratio+0x98>
  810088:	2008953a 	slli	r4,r4,20
  81008c:	2421883a 	add	r16,r4,r16
  810090:	100d883a 	mov	r6,r2
  810094:	180f883a 	mov	r7,r3
  810098:	9009883a 	mov	r4,r18
  81009c:	800b883a 	mov	r5,r16
  8100a0:	08073540 	call	807354 <__divdf3>
  8100a4:	dfc00617 	ldw	ra,24(sp)
  8100a8:	dcc00517 	ldw	r19,20(sp)
  8100ac:	dc800417 	ldw	r18,16(sp)
  8100b0:	dc400317 	ldw	r17,12(sp)
  8100b4:	dc000217 	ldw	r16,8(sp)
  8100b8:	dec00704 	addi	sp,sp,28
  8100bc:	f800283a 	ret
  8100c0:	2008953a 	slli	r4,r4,20
  8100c4:	1907c83a 	sub	r3,r3,r4
  8100c8:	003ff106 	br	810090 <__alt_mem_onchip_mem+0xff808090>

008100cc <_mprec_log10>:
  8100cc:	defffe04 	addi	sp,sp,-8
  8100d0:	dc000015 	stw	r16,0(sp)
  8100d4:	dfc00115 	stw	ra,4(sp)
  8100d8:	008005c4 	movi	r2,23
  8100dc:	2021883a 	mov	r16,r4
  8100e0:	11000d0e 	bge	r2,r4,810118 <_mprec_log10+0x4c>
  8100e4:	0005883a 	mov	r2,zero
  8100e8:	00cffc34 	movhi	r3,16368
  8100ec:	843fffc4 	addi	r16,r16,-1
  8100f0:	000d883a 	mov	r6,zero
  8100f4:	01d00934 	movhi	r7,16420
  8100f8:	1009883a 	mov	r4,r2
  8100fc:	180b883a 	mov	r5,r3
  810100:	0807e0c0 	call	807e0c <__muldf3>
  810104:	803ff91e 	bne	r16,zero,8100ec <__alt_mem_onchip_mem+0xff8080ec>
  810108:	dfc00117 	ldw	ra,4(sp)
  81010c:	dc000017 	ldw	r16,0(sp)
  810110:	dec00204 	addi	sp,sp,8
  810114:	f800283a 	ret
  810118:	202090fa 	slli	r16,r4,3
  81011c:	00802074 	movhi	r2,129
  810120:	109ca704 	addi	r2,r2,29340
  810124:	1421883a 	add	r16,r2,r16
  810128:	80800017 	ldw	r2,0(r16)
  81012c:	80c00117 	ldw	r3,4(r16)
  810130:	dfc00117 	ldw	ra,4(sp)
  810134:	dc000017 	ldw	r16,0(sp)
  810138:	dec00204 	addi	sp,sp,8
  81013c:	f800283a 	ret

00810140 <__copybits>:
  810140:	297fffc4 	addi	r5,r5,-1
  810144:	280fd17a 	srai	r7,r5,5
  810148:	30c00417 	ldw	r3,16(r6)
  81014c:	30800504 	addi	r2,r6,20
  810150:	39c00044 	addi	r7,r7,1
  810154:	18c7883a 	add	r3,r3,r3
  810158:	39cf883a 	add	r7,r7,r7
  81015c:	18c7883a 	add	r3,r3,r3
  810160:	39cf883a 	add	r7,r7,r7
  810164:	10c7883a 	add	r3,r2,r3
  810168:	21cf883a 	add	r7,r4,r7
  81016c:	10c00d2e 	bgeu	r2,r3,8101a4 <__copybits+0x64>
  810170:	200b883a 	mov	r5,r4
  810174:	12000017 	ldw	r8,0(r2)
  810178:	29400104 	addi	r5,r5,4
  81017c:	10800104 	addi	r2,r2,4
  810180:	2a3fff15 	stw	r8,-4(r5)
  810184:	10fffb36 	bltu	r2,r3,810174 <__alt_mem_onchip_mem+0xff808174>
  810188:	1985c83a 	sub	r2,r3,r6
  81018c:	10bffac4 	addi	r2,r2,-21
  810190:	1004d0ba 	srli	r2,r2,2
  810194:	10800044 	addi	r2,r2,1
  810198:	1085883a 	add	r2,r2,r2
  81019c:	1085883a 	add	r2,r2,r2
  8101a0:	2089883a 	add	r4,r4,r2
  8101a4:	21c0032e 	bgeu	r4,r7,8101b4 <__copybits+0x74>
  8101a8:	20000015 	stw	zero,0(r4)
  8101ac:	21000104 	addi	r4,r4,4
  8101b0:	21fffd36 	bltu	r4,r7,8101a8 <__alt_mem_onchip_mem+0xff8081a8>
  8101b4:	f800283a 	ret

008101b8 <__any_on>:
  8101b8:	20c00417 	ldw	r3,16(r4)
  8101bc:	2805d17a 	srai	r2,r5,5
  8101c0:	21000504 	addi	r4,r4,20
  8101c4:	18800d0e 	bge	r3,r2,8101fc <__any_on+0x44>
  8101c8:	18c7883a 	add	r3,r3,r3
  8101cc:	18c7883a 	add	r3,r3,r3
  8101d0:	20c7883a 	add	r3,r4,r3
  8101d4:	20c0192e 	bgeu	r4,r3,81023c <__any_on+0x84>
  8101d8:	18bfff17 	ldw	r2,-4(r3)
  8101dc:	18ffff04 	addi	r3,r3,-4
  8101e0:	1000041e 	bne	r2,zero,8101f4 <__any_on+0x3c>
  8101e4:	20c0142e 	bgeu	r4,r3,810238 <__any_on+0x80>
  8101e8:	18ffff04 	addi	r3,r3,-4
  8101ec:	19400017 	ldw	r5,0(r3)
  8101f0:	283ffc26 	beq	r5,zero,8101e4 <__alt_mem_onchip_mem+0xff8081e4>
  8101f4:	00800044 	movi	r2,1
  8101f8:	f800283a 	ret
  8101fc:	10c00a0e 	bge	r2,r3,810228 <__any_on+0x70>
  810200:	1085883a 	add	r2,r2,r2
  810204:	1085883a 	add	r2,r2,r2
  810208:	294007cc 	andi	r5,r5,31
  81020c:	2087883a 	add	r3,r4,r2
  810210:	283ff026 	beq	r5,zero,8101d4 <__alt_mem_onchip_mem+0xff8081d4>
  810214:	19800017 	ldw	r6,0(r3)
  810218:	3144d83a 	srl	r2,r6,r5
  81021c:	114a983a 	sll	r5,r2,r5
  810220:	317ff41e 	bne	r6,r5,8101f4 <__alt_mem_onchip_mem+0xff8081f4>
  810224:	003feb06 	br	8101d4 <__alt_mem_onchip_mem+0xff8081d4>
  810228:	1085883a 	add	r2,r2,r2
  81022c:	1085883a 	add	r2,r2,r2
  810230:	2087883a 	add	r3,r4,r2
  810234:	003fe706 	br	8101d4 <__alt_mem_onchip_mem+0xff8081d4>
  810238:	f800283a 	ret
  81023c:	0005883a 	mov	r2,zero
  810240:	f800283a 	ret

00810244 <_read_r>:
  810244:	defffd04 	addi	sp,sp,-12
  810248:	2805883a 	mov	r2,r5
  81024c:	dc000015 	stw	r16,0(sp)
  810250:	040020b4 	movhi	r16,130
  810254:	dc400115 	stw	r17,4(sp)
  810258:	300b883a 	mov	r5,r6
  81025c:	842c0b04 	addi	r16,r16,-20436
  810260:	2023883a 	mov	r17,r4
  810264:	380d883a 	mov	r6,r7
  810268:	1009883a 	mov	r4,r2
  81026c:	dfc00215 	stw	ra,8(sp)
  810270:	80000015 	stw	zero,0(r16)
  810274:	08134f00 	call	8134f0 <read>
  810278:	00ffffc4 	movi	r3,-1
  81027c:	10c00526 	beq	r2,r3,810294 <_read_r+0x50>
  810280:	dfc00217 	ldw	ra,8(sp)
  810284:	dc400117 	ldw	r17,4(sp)
  810288:	dc000017 	ldw	r16,0(sp)
  81028c:	dec00304 	addi	sp,sp,12
  810290:	f800283a 	ret
  810294:	80c00017 	ldw	r3,0(r16)
  810298:	183ff926 	beq	r3,zero,810280 <__alt_mem_onchip_mem+0xff808280>
  81029c:	88c00015 	stw	r3,0(r17)
  8102a0:	003ff706 	br	810280 <__alt_mem_onchip_mem+0xff808280>

008102a4 <_realloc_r>:
  8102a4:	defff604 	addi	sp,sp,-40
  8102a8:	dc800215 	stw	r18,8(sp)
  8102ac:	dfc00915 	stw	ra,36(sp)
  8102b0:	df000815 	stw	fp,32(sp)
  8102b4:	ddc00715 	stw	r23,28(sp)
  8102b8:	dd800615 	stw	r22,24(sp)
  8102bc:	dd400515 	stw	r21,20(sp)
  8102c0:	dd000415 	stw	r20,16(sp)
  8102c4:	dcc00315 	stw	r19,12(sp)
  8102c8:	dc400115 	stw	r17,4(sp)
  8102cc:	dc000015 	stw	r16,0(sp)
  8102d0:	3025883a 	mov	r18,r6
  8102d4:	2800b726 	beq	r5,zero,8105b4 <_realloc_r+0x310>
  8102d8:	282b883a 	mov	r21,r5
  8102dc:	2029883a 	mov	r20,r4
  8102e0:	08132180 	call	813218 <__malloc_lock>
  8102e4:	a8bfff17 	ldw	r2,-4(r21)
  8102e8:	043fff04 	movi	r16,-4
  8102ec:	90c002c4 	addi	r3,r18,11
  8102f0:	01000584 	movi	r4,22
  8102f4:	acfffe04 	addi	r19,r21,-8
  8102f8:	1420703a 	and	r16,r2,r16
  8102fc:	20c0332e 	bgeu	r4,r3,8103cc <_realloc_r+0x128>
  810300:	047ffe04 	movi	r17,-8
  810304:	1c62703a 	and	r17,r3,r17
  810308:	8807883a 	mov	r3,r17
  81030c:	88005816 	blt	r17,zero,810470 <_realloc_r+0x1cc>
  810310:	8c805736 	bltu	r17,r18,810470 <_realloc_r+0x1cc>
  810314:	80c0300e 	bge	r16,r3,8103d8 <_realloc_r+0x134>
  810318:	07002074 	movhi	fp,129
  81031c:	e71e9b04 	addi	fp,fp,31340
  810320:	e1c00217 	ldw	r7,8(fp)
  810324:	9c09883a 	add	r4,r19,r16
  810328:	22000117 	ldw	r8,4(r4)
  81032c:	21c06326 	beq	r4,r7,8104bc <_realloc_r+0x218>
  810330:	017fff84 	movi	r5,-2
  810334:	414a703a 	and	r5,r8,r5
  810338:	214b883a 	add	r5,r4,r5
  81033c:	29800117 	ldw	r6,4(r5)
  810340:	3180004c 	andi	r6,r6,1
  810344:	30003f26 	beq	r6,zero,810444 <_realloc_r+0x1a0>
  810348:	1080004c 	andi	r2,r2,1
  81034c:	10008326 	beq	r2,zero,81055c <_realloc_r+0x2b8>
  810350:	900b883a 	mov	r5,r18
  810354:	a009883a 	mov	r4,r20
  810358:	0809c0c0 	call	809c0c <_malloc_r>
  81035c:	1025883a 	mov	r18,r2
  810360:	10011e26 	beq	r2,zero,8107dc <_realloc_r+0x538>
  810364:	a93fff17 	ldw	r4,-4(r21)
  810368:	10fffe04 	addi	r3,r2,-8
  81036c:	00bfff84 	movi	r2,-2
  810370:	2084703a 	and	r2,r4,r2
  810374:	9885883a 	add	r2,r19,r2
  810378:	1880ee26 	beq	r3,r2,810734 <_realloc_r+0x490>
  81037c:	81bfff04 	addi	r6,r16,-4
  810380:	00800904 	movi	r2,36
  810384:	1180b836 	bltu	r2,r6,810668 <_realloc_r+0x3c4>
  810388:	00c004c4 	movi	r3,19
  81038c:	19809636 	bltu	r3,r6,8105e8 <_realloc_r+0x344>
  810390:	9005883a 	mov	r2,r18
  810394:	a807883a 	mov	r3,r21
  810398:	19000017 	ldw	r4,0(r3)
  81039c:	11000015 	stw	r4,0(r2)
  8103a0:	19000117 	ldw	r4,4(r3)
  8103a4:	11000115 	stw	r4,4(r2)
  8103a8:	18c00217 	ldw	r3,8(r3)
  8103ac:	10c00215 	stw	r3,8(r2)
  8103b0:	a80b883a 	mov	r5,r21
  8103b4:	a009883a 	mov	r4,r20
  8103b8:	08097740 	call	809774 <_free_r>
  8103bc:	a009883a 	mov	r4,r20
  8103c0:	081323c0 	call	81323c <__malloc_unlock>
  8103c4:	9005883a 	mov	r2,r18
  8103c8:	00001206 	br	810414 <_realloc_r+0x170>
  8103cc:	00c00404 	movi	r3,16
  8103d0:	1823883a 	mov	r17,r3
  8103d4:	003fce06 	br	810310 <__alt_mem_onchip_mem+0xff808310>
  8103d8:	a825883a 	mov	r18,r21
  8103dc:	8445c83a 	sub	r2,r16,r17
  8103e0:	00c003c4 	movi	r3,15
  8103e4:	18802636 	bltu	r3,r2,810480 <_realloc_r+0x1dc>
  8103e8:	99800117 	ldw	r6,4(r19)
  8103ec:	9c07883a 	add	r3,r19,r16
  8103f0:	3180004c 	andi	r6,r6,1
  8103f4:	3420b03a 	or	r16,r6,r16
  8103f8:	9c000115 	stw	r16,4(r19)
  8103fc:	18800117 	ldw	r2,4(r3)
  810400:	10800054 	ori	r2,r2,1
  810404:	18800115 	stw	r2,4(r3)
  810408:	a009883a 	mov	r4,r20
  81040c:	081323c0 	call	81323c <__malloc_unlock>
  810410:	9005883a 	mov	r2,r18
  810414:	dfc00917 	ldw	ra,36(sp)
  810418:	df000817 	ldw	fp,32(sp)
  81041c:	ddc00717 	ldw	r23,28(sp)
  810420:	dd800617 	ldw	r22,24(sp)
  810424:	dd400517 	ldw	r21,20(sp)
  810428:	dd000417 	ldw	r20,16(sp)
  81042c:	dcc00317 	ldw	r19,12(sp)
  810430:	dc800217 	ldw	r18,8(sp)
  810434:	dc400117 	ldw	r17,4(sp)
  810438:	dc000017 	ldw	r16,0(sp)
  81043c:	dec00a04 	addi	sp,sp,40
  810440:	f800283a 	ret
  810444:	017fff04 	movi	r5,-4
  810448:	414a703a 	and	r5,r8,r5
  81044c:	814d883a 	add	r6,r16,r5
  810450:	30c01f16 	blt	r6,r3,8104d0 <_realloc_r+0x22c>
  810454:	20800317 	ldw	r2,12(r4)
  810458:	20c00217 	ldw	r3,8(r4)
  81045c:	a825883a 	mov	r18,r21
  810460:	3021883a 	mov	r16,r6
  810464:	18800315 	stw	r2,12(r3)
  810468:	10c00215 	stw	r3,8(r2)
  81046c:	003fdb06 	br	8103dc <__alt_mem_onchip_mem+0xff8083dc>
  810470:	00800304 	movi	r2,12
  810474:	a0800015 	stw	r2,0(r20)
  810478:	0005883a 	mov	r2,zero
  81047c:	003fe506 	br	810414 <__alt_mem_onchip_mem+0xff808414>
  810480:	98c00117 	ldw	r3,4(r19)
  810484:	9c4b883a 	add	r5,r19,r17
  810488:	11000054 	ori	r4,r2,1
  81048c:	18c0004c 	andi	r3,r3,1
  810490:	1c62b03a 	or	r17,r3,r17
  810494:	9c400115 	stw	r17,4(r19)
  810498:	29000115 	stw	r4,4(r5)
  81049c:	2885883a 	add	r2,r5,r2
  8104a0:	10c00117 	ldw	r3,4(r2)
  8104a4:	29400204 	addi	r5,r5,8
  8104a8:	a009883a 	mov	r4,r20
  8104ac:	18c00054 	ori	r3,r3,1
  8104b0:	10c00115 	stw	r3,4(r2)
  8104b4:	08097740 	call	809774 <_free_r>
  8104b8:	003fd306 	br	810408 <__alt_mem_onchip_mem+0xff808408>
  8104bc:	017fff04 	movi	r5,-4
  8104c0:	414a703a 	and	r5,r8,r5
  8104c4:	89800404 	addi	r6,r17,16
  8104c8:	8151883a 	add	r8,r16,r5
  8104cc:	4180590e 	bge	r8,r6,810634 <_realloc_r+0x390>
  8104d0:	1080004c 	andi	r2,r2,1
  8104d4:	103f9e1e 	bne	r2,zero,810350 <__alt_mem_onchip_mem+0xff808350>
  8104d8:	adbffe17 	ldw	r22,-8(r21)
  8104dc:	00bfff04 	movi	r2,-4
  8104e0:	9dadc83a 	sub	r22,r19,r22
  8104e4:	b1800117 	ldw	r6,4(r22)
  8104e8:	3084703a 	and	r2,r6,r2
  8104ec:	20002026 	beq	r4,zero,810570 <_realloc_r+0x2cc>
  8104f0:	80af883a 	add	r23,r16,r2
  8104f4:	b96f883a 	add	r23,r23,r5
  8104f8:	21c05f26 	beq	r4,r7,810678 <_realloc_r+0x3d4>
  8104fc:	b8c01c16 	blt	r23,r3,810570 <_realloc_r+0x2cc>
  810500:	20800317 	ldw	r2,12(r4)
  810504:	20c00217 	ldw	r3,8(r4)
  810508:	81bfff04 	addi	r6,r16,-4
  81050c:	01000904 	movi	r4,36
  810510:	18800315 	stw	r2,12(r3)
  810514:	10c00215 	stw	r3,8(r2)
  810518:	b0c00217 	ldw	r3,8(r22)
  81051c:	b0800317 	ldw	r2,12(r22)
  810520:	b4800204 	addi	r18,r22,8
  810524:	18800315 	stw	r2,12(r3)
  810528:	10c00215 	stw	r3,8(r2)
  81052c:	21801b36 	bltu	r4,r6,81059c <_realloc_r+0x2f8>
  810530:	008004c4 	movi	r2,19
  810534:	1180352e 	bgeu	r2,r6,81060c <_realloc_r+0x368>
  810538:	a8800017 	ldw	r2,0(r21)
  81053c:	b0800215 	stw	r2,8(r22)
  810540:	a8800117 	ldw	r2,4(r21)
  810544:	b0800315 	stw	r2,12(r22)
  810548:	008006c4 	movi	r2,27
  81054c:	11807f36 	bltu	r2,r6,81074c <_realloc_r+0x4a8>
  810550:	b0800404 	addi	r2,r22,16
  810554:	ad400204 	addi	r21,r21,8
  810558:	00002d06 	br	810610 <_realloc_r+0x36c>
  81055c:	adbffe17 	ldw	r22,-8(r21)
  810560:	00bfff04 	movi	r2,-4
  810564:	9dadc83a 	sub	r22,r19,r22
  810568:	b1000117 	ldw	r4,4(r22)
  81056c:	2084703a 	and	r2,r4,r2
  810570:	b03f7726 	beq	r22,zero,810350 <__alt_mem_onchip_mem+0xff808350>
  810574:	80af883a 	add	r23,r16,r2
  810578:	b8ff7516 	blt	r23,r3,810350 <__alt_mem_onchip_mem+0xff808350>
  81057c:	b0800317 	ldw	r2,12(r22)
  810580:	b0c00217 	ldw	r3,8(r22)
  810584:	81bfff04 	addi	r6,r16,-4
  810588:	01000904 	movi	r4,36
  81058c:	18800315 	stw	r2,12(r3)
  810590:	10c00215 	stw	r3,8(r2)
  810594:	b4800204 	addi	r18,r22,8
  810598:	21bfe52e 	bgeu	r4,r6,810530 <__alt_mem_onchip_mem+0xff808530>
  81059c:	a80b883a 	mov	r5,r21
  8105a0:	9009883a 	mov	r4,r18
  8105a4:	080f0ec0 	call	80f0ec <memmove>
  8105a8:	b821883a 	mov	r16,r23
  8105ac:	b027883a 	mov	r19,r22
  8105b0:	003f8a06 	br	8103dc <__alt_mem_onchip_mem+0xff8083dc>
  8105b4:	300b883a 	mov	r5,r6
  8105b8:	dfc00917 	ldw	ra,36(sp)
  8105bc:	df000817 	ldw	fp,32(sp)
  8105c0:	ddc00717 	ldw	r23,28(sp)
  8105c4:	dd800617 	ldw	r22,24(sp)
  8105c8:	dd400517 	ldw	r21,20(sp)
  8105cc:	dd000417 	ldw	r20,16(sp)
  8105d0:	dcc00317 	ldw	r19,12(sp)
  8105d4:	dc800217 	ldw	r18,8(sp)
  8105d8:	dc400117 	ldw	r17,4(sp)
  8105dc:	dc000017 	ldw	r16,0(sp)
  8105e0:	dec00a04 	addi	sp,sp,40
  8105e4:	0809c0c1 	jmpi	809c0c <_malloc_r>
  8105e8:	a8c00017 	ldw	r3,0(r21)
  8105ec:	90c00015 	stw	r3,0(r18)
  8105f0:	a8c00117 	ldw	r3,4(r21)
  8105f4:	90c00115 	stw	r3,4(r18)
  8105f8:	00c006c4 	movi	r3,27
  8105fc:	19804536 	bltu	r3,r6,810714 <_realloc_r+0x470>
  810600:	90800204 	addi	r2,r18,8
  810604:	a8c00204 	addi	r3,r21,8
  810608:	003f6306 	br	810398 <__alt_mem_onchip_mem+0xff808398>
  81060c:	9005883a 	mov	r2,r18
  810610:	a8c00017 	ldw	r3,0(r21)
  810614:	b821883a 	mov	r16,r23
  810618:	b027883a 	mov	r19,r22
  81061c:	10c00015 	stw	r3,0(r2)
  810620:	a8c00117 	ldw	r3,4(r21)
  810624:	10c00115 	stw	r3,4(r2)
  810628:	a8c00217 	ldw	r3,8(r21)
  81062c:	10c00215 	stw	r3,8(r2)
  810630:	003f6a06 	br	8103dc <__alt_mem_onchip_mem+0xff8083dc>
  810634:	9c67883a 	add	r19,r19,r17
  810638:	4445c83a 	sub	r2,r8,r17
  81063c:	e4c00215 	stw	r19,8(fp)
  810640:	10800054 	ori	r2,r2,1
  810644:	98800115 	stw	r2,4(r19)
  810648:	a8bfff17 	ldw	r2,-4(r21)
  81064c:	a009883a 	mov	r4,r20
  810650:	1080004c 	andi	r2,r2,1
  810654:	1462b03a 	or	r17,r2,r17
  810658:	ac7fff15 	stw	r17,-4(r21)
  81065c:	081323c0 	call	81323c <__malloc_unlock>
  810660:	a805883a 	mov	r2,r21
  810664:	003f6b06 	br	810414 <__alt_mem_onchip_mem+0xff808414>
  810668:	a80b883a 	mov	r5,r21
  81066c:	9009883a 	mov	r4,r18
  810670:	080f0ec0 	call	80f0ec <memmove>
  810674:	003f4e06 	br	8103b0 <__alt_mem_onchip_mem+0xff8083b0>
  810678:	89000404 	addi	r4,r17,16
  81067c:	b93fbc16 	blt	r23,r4,810570 <__alt_mem_onchip_mem+0xff808570>
  810680:	b0800317 	ldw	r2,12(r22)
  810684:	b0c00217 	ldw	r3,8(r22)
  810688:	81bfff04 	addi	r6,r16,-4
  81068c:	01000904 	movi	r4,36
  810690:	18800315 	stw	r2,12(r3)
  810694:	10c00215 	stw	r3,8(r2)
  810698:	b4800204 	addi	r18,r22,8
  81069c:	21804336 	bltu	r4,r6,8107ac <_realloc_r+0x508>
  8106a0:	008004c4 	movi	r2,19
  8106a4:	11803f2e 	bgeu	r2,r6,8107a4 <_realloc_r+0x500>
  8106a8:	a8800017 	ldw	r2,0(r21)
  8106ac:	b0800215 	stw	r2,8(r22)
  8106b0:	a8800117 	ldw	r2,4(r21)
  8106b4:	b0800315 	stw	r2,12(r22)
  8106b8:	008006c4 	movi	r2,27
  8106bc:	11803f36 	bltu	r2,r6,8107bc <_realloc_r+0x518>
  8106c0:	b0800404 	addi	r2,r22,16
  8106c4:	ad400204 	addi	r21,r21,8
  8106c8:	a8c00017 	ldw	r3,0(r21)
  8106cc:	10c00015 	stw	r3,0(r2)
  8106d0:	a8c00117 	ldw	r3,4(r21)
  8106d4:	10c00115 	stw	r3,4(r2)
  8106d8:	a8c00217 	ldw	r3,8(r21)
  8106dc:	10c00215 	stw	r3,8(r2)
  8106e0:	b447883a 	add	r3,r22,r17
  8106e4:	bc45c83a 	sub	r2,r23,r17
  8106e8:	e0c00215 	stw	r3,8(fp)
  8106ec:	10800054 	ori	r2,r2,1
  8106f0:	18800115 	stw	r2,4(r3)
  8106f4:	b0800117 	ldw	r2,4(r22)
  8106f8:	a009883a 	mov	r4,r20
  8106fc:	1080004c 	andi	r2,r2,1
  810700:	1462b03a 	or	r17,r2,r17
  810704:	b4400115 	stw	r17,4(r22)
  810708:	081323c0 	call	81323c <__malloc_unlock>
  81070c:	9005883a 	mov	r2,r18
  810710:	003f4006 	br	810414 <__alt_mem_onchip_mem+0xff808414>
  810714:	a8c00217 	ldw	r3,8(r21)
  810718:	90c00215 	stw	r3,8(r18)
  81071c:	a8c00317 	ldw	r3,12(r21)
  810720:	90c00315 	stw	r3,12(r18)
  810724:	30801126 	beq	r6,r2,81076c <_realloc_r+0x4c8>
  810728:	90800404 	addi	r2,r18,16
  81072c:	a8c00404 	addi	r3,r21,16
  810730:	003f1906 	br	810398 <__alt_mem_onchip_mem+0xff808398>
  810734:	90ffff17 	ldw	r3,-4(r18)
  810738:	00bfff04 	movi	r2,-4
  81073c:	a825883a 	mov	r18,r21
  810740:	1884703a 	and	r2,r3,r2
  810744:	80a1883a 	add	r16,r16,r2
  810748:	003f2406 	br	8103dc <__alt_mem_onchip_mem+0xff8083dc>
  81074c:	a8800217 	ldw	r2,8(r21)
  810750:	b0800415 	stw	r2,16(r22)
  810754:	a8800317 	ldw	r2,12(r21)
  810758:	b0800515 	stw	r2,20(r22)
  81075c:	31000a26 	beq	r6,r4,810788 <_realloc_r+0x4e4>
  810760:	b0800604 	addi	r2,r22,24
  810764:	ad400404 	addi	r21,r21,16
  810768:	003fa906 	br	810610 <__alt_mem_onchip_mem+0xff808610>
  81076c:	a9000417 	ldw	r4,16(r21)
  810770:	90800604 	addi	r2,r18,24
  810774:	a8c00604 	addi	r3,r21,24
  810778:	91000415 	stw	r4,16(r18)
  81077c:	a9000517 	ldw	r4,20(r21)
  810780:	91000515 	stw	r4,20(r18)
  810784:	003f0406 	br	810398 <__alt_mem_onchip_mem+0xff808398>
  810788:	a8c00417 	ldw	r3,16(r21)
  81078c:	ad400604 	addi	r21,r21,24
  810790:	b0800804 	addi	r2,r22,32
  810794:	b0c00615 	stw	r3,24(r22)
  810798:	a8ffff17 	ldw	r3,-4(r21)
  81079c:	b0c00715 	stw	r3,28(r22)
  8107a0:	003f9b06 	br	810610 <__alt_mem_onchip_mem+0xff808610>
  8107a4:	9005883a 	mov	r2,r18
  8107a8:	003fc706 	br	8106c8 <__alt_mem_onchip_mem+0xff8086c8>
  8107ac:	a80b883a 	mov	r5,r21
  8107b0:	9009883a 	mov	r4,r18
  8107b4:	080f0ec0 	call	80f0ec <memmove>
  8107b8:	003fc906 	br	8106e0 <__alt_mem_onchip_mem+0xff8086e0>
  8107bc:	a8800217 	ldw	r2,8(r21)
  8107c0:	b0800415 	stw	r2,16(r22)
  8107c4:	a8800317 	ldw	r2,12(r21)
  8107c8:	b0800515 	stw	r2,20(r22)
  8107cc:	31000726 	beq	r6,r4,8107ec <_realloc_r+0x548>
  8107d0:	b0800604 	addi	r2,r22,24
  8107d4:	ad400404 	addi	r21,r21,16
  8107d8:	003fbb06 	br	8106c8 <__alt_mem_onchip_mem+0xff8086c8>
  8107dc:	a009883a 	mov	r4,r20
  8107e0:	081323c0 	call	81323c <__malloc_unlock>
  8107e4:	0005883a 	mov	r2,zero
  8107e8:	003f0a06 	br	810414 <__alt_mem_onchip_mem+0xff808414>
  8107ec:	a8c00417 	ldw	r3,16(r21)
  8107f0:	ad400604 	addi	r21,r21,24
  8107f4:	b0800804 	addi	r2,r22,32
  8107f8:	b0c00615 	stw	r3,24(r22)
  8107fc:	a8ffff17 	ldw	r3,-4(r21)
  810800:	b0c00715 	stw	r3,28(r22)
  810804:	003fb006 	br	8106c8 <__alt_mem_onchip_mem+0xff8086c8>

00810808 <__fpclassifyd>:
  810808:	00a00034 	movhi	r2,32768
  81080c:	10bfffc4 	addi	r2,r2,-1
  810810:	2884703a 	and	r2,r5,r2
  810814:	10000726 	beq	r2,zero,810834 <__fpclassifyd+0x2c>
  810818:	00fffc34 	movhi	r3,65520
  81081c:	019ff834 	movhi	r6,32736
  810820:	28c7883a 	add	r3,r5,r3
  810824:	31bfffc4 	addi	r6,r6,-1
  810828:	30c00536 	bltu	r6,r3,810840 <__fpclassifyd+0x38>
  81082c:	00800104 	movi	r2,4
  810830:	f800283a 	ret
  810834:	2000021e 	bne	r4,zero,810840 <__fpclassifyd+0x38>
  810838:	00800084 	movi	r2,2
  81083c:	f800283a 	ret
  810840:	00dffc34 	movhi	r3,32752
  810844:	019ff834 	movhi	r6,32736
  810848:	28cb883a 	add	r5,r5,r3
  81084c:	31bfffc4 	addi	r6,r6,-1
  810850:	317ff62e 	bgeu	r6,r5,81082c <__alt_mem_onchip_mem+0xff80882c>
  810854:	01400434 	movhi	r5,16
  810858:	297fffc4 	addi	r5,r5,-1
  81085c:	28800236 	bltu	r5,r2,810868 <__fpclassifyd+0x60>
  810860:	008000c4 	movi	r2,3
  810864:	f800283a 	ret
  810868:	10c00226 	beq	r2,r3,810874 <__fpclassifyd+0x6c>
  81086c:	0005883a 	mov	r2,zero
  810870:	f800283a 	ret
  810874:	2005003a 	cmpeq	r2,r4,zero
  810878:	f800283a 	ret

0081087c <strcmp>:
  81087c:	2144b03a 	or	r2,r4,r5
  810880:	108000cc 	andi	r2,r2,3
  810884:	1000171e 	bne	r2,zero,8108e4 <strcmp+0x68>
  810888:	20800017 	ldw	r2,0(r4)
  81088c:	28c00017 	ldw	r3,0(r5)
  810890:	10c0141e 	bne	r2,r3,8108e4 <strcmp+0x68>
  810894:	027fbff4 	movhi	r9,65279
  810898:	4a7fbfc4 	addi	r9,r9,-257
  81089c:	0086303a 	nor	r3,zero,r2
  8108a0:	02202074 	movhi	r8,32897
  8108a4:	1245883a 	add	r2,r2,r9
  8108a8:	42202004 	addi	r8,r8,-32640
  8108ac:	10c4703a 	and	r2,r2,r3
  8108b0:	1204703a 	and	r2,r2,r8
  8108b4:	10000226 	beq	r2,zero,8108c0 <strcmp+0x44>
  8108b8:	00002306 	br	810948 <strcmp+0xcc>
  8108bc:	1000221e 	bne	r2,zero,810948 <strcmp+0xcc>
  8108c0:	21000104 	addi	r4,r4,4
  8108c4:	20c00017 	ldw	r3,0(r4)
  8108c8:	29400104 	addi	r5,r5,4
  8108cc:	29800017 	ldw	r6,0(r5)
  8108d0:	1a4f883a 	add	r7,r3,r9
  8108d4:	00c4303a 	nor	r2,zero,r3
  8108d8:	3884703a 	and	r2,r7,r2
  8108dc:	1204703a 	and	r2,r2,r8
  8108e0:	19bff626 	beq	r3,r6,8108bc <__alt_mem_onchip_mem+0xff8088bc>
  8108e4:	20800003 	ldbu	r2,0(r4)
  8108e8:	10c03fcc 	andi	r3,r2,255
  8108ec:	18c0201c 	xori	r3,r3,128
  8108f0:	18ffe004 	addi	r3,r3,-128
  8108f4:	18000c26 	beq	r3,zero,810928 <strcmp+0xac>
  8108f8:	29800007 	ldb	r6,0(r5)
  8108fc:	19800326 	beq	r3,r6,81090c <strcmp+0x90>
  810900:	00001306 	br	810950 <strcmp+0xd4>
  810904:	29800007 	ldb	r6,0(r5)
  810908:	11800b1e 	bne	r2,r6,810938 <strcmp+0xbc>
  81090c:	21000044 	addi	r4,r4,1
  810910:	20c00003 	ldbu	r3,0(r4)
  810914:	29400044 	addi	r5,r5,1
  810918:	18803fcc 	andi	r2,r3,255
  81091c:	1080201c 	xori	r2,r2,128
  810920:	10bfe004 	addi	r2,r2,-128
  810924:	103ff71e 	bne	r2,zero,810904 <__alt_mem_onchip_mem+0xff808904>
  810928:	0007883a 	mov	r3,zero
  81092c:	28800003 	ldbu	r2,0(r5)
  810930:	1885c83a 	sub	r2,r3,r2
  810934:	f800283a 	ret
  810938:	28800003 	ldbu	r2,0(r5)
  81093c:	18c03fcc 	andi	r3,r3,255
  810940:	1885c83a 	sub	r2,r3,r2
  810944:	f800283a 	ret
  810948:	0005883a 	mov	r2,zero
  81094c:	f800283a 	ret
  810950:	10c03fcc 	andi	r3,r2,255
  810954:	003ff506 	br	81092c <__alt_mem_onchip_mem+0xff80892c>

00810958 <__sprint_r.part.0>:
  810958:	28801917 	ldw	r2,100(r5)
  81095c:	defff604 	addi	sp,sp,-40
  810960:	dd400515 	stw	r21,20(sp)
  810964:	dfc00915 	stw	ra,36(sp)
  810968:	df000815 	stw	fp,32(sp)
  81096c:	ddc00715 	stw	r23,28(sp)
  810970:	dd800615 	stw	r22,24(sp)
  810974:	dd000415 	stw	r20,16(sp)
  810978:	dcc00315 	stw	r19,12(sp)
  81097c:	dc800215 	stw	r18,8(sp)
  810980:	dc400115 	stw	r17,4(sp)
  810984:	dc000015 	stw	r16,0(sp)
  810988:	1088000c 	andi	r2,r2,8192
  81098c:	302b883a 	mov	r21,r6
  810990:	10002e26 	beq	r2,zero,810a4c <__sprint_r.part.0+0xf4>
  810994:	30800217 	ldw	r2,8(r6)
  810998:	35800017 	ldw	r22,0(r6)
  81099c:	10002926 	beq	r2,zero,810a44 <__sprint_r.part.0+0xec>
  8109a0:	2827883a 	mov	r19,r5
  8109a4:	2029883a 	mov	r20,r4
  8109a8:	b5c00104 	addi	r23,r22,4
  8109ac:	04bfffc4 	movi	r18,-1
  8109b0:	bc400017 	ldw	r17,0(r23)
  8109b4:	b4000017 	ldw	r16,0(r22)
  8109b8:	0039883a 	mov	fp,zero
  8109bc:	8822d0ba 	srli	r17,r17,2
  8109c0:	8800031e 	bne	r17,zero,8109d0 <__sprint_r.part.0+0x78>
  8109c4:	00001806 	br	810a28 <__sprint_r.part.0+0xd0>
  8109c8:	84000104 	addi	r16,r16,4
  8109cc:	8f001526 	beq	r17,fp,810a24 <__sprint_r.part.0+0xcc>
  8109d0:	81400017 	ldw	r5,0(r16)
  8109d4:	980d883a 	mov	r6,r19
  8109d8:	a009883a 	mov	r4,r20
  8109dc:	08121c80 	call	8121c8 <_fputwc_r>
  8109e0:	e7000044 	addi	fp,fp,1
  8109e4:	14bff81e 	bne	r2,r18,8109c8 <__alt_mem_onchip_mem+0xff8089c8>
  8109e8:	9005883a 	mov	r2,r18
  8109ec:	a8000215 	stw	zero,8(r21)
  8109f0:	a8000115 	stw	zero,4(r21)
  8109f4:	dfc00917 	ldw	ra,36(sp)
  8109f8:	df000817 	ldw	fp,32(sp)
  8109fc:	ddc00717 	ldw	r23,28(sp)
  810a00:	dd800617 	ldw	r22,24(sp)
  810a04:	dd400517 	ldw	r21,20(sp)
  810a08:	dd000417 	ldw	r20,16(sp)
  810a0c:	dcc00317 	ldw	r19,12(sp)
  810a10:	dc800217 	ldw	r18,8(sp)
  810a14:	dc400117 	ldw	r17,4(sp)
  810a18:	dc000017 	ldw	r16,0(sp)
  810a1c:	dec00a04 	addi	sp,sp,40
  810a20:	f800283a 	ret
  810a24:	a8800217 	ldw	r2,8(r21)
  810a28:	8c63883a 	add	r17,r17,r17
  810a2c:	8c63883a 	add	r17,r17,r17
  810a30:	1445c83a 	sub	r2,r2,r17
  810a34:	a8800215 	stw	r2,8(r21)
  810a38:	b5800204 	addi	r22,r22,8
  810a3c:	bdc00204 	addi	r23,r23,8
  810a40:	103fdb1e 	bne	r2,zero,8109b0 <__alt_mem_onchip_mem+0xff8089b0>
  810a44:	0005883a 	mov	r2,zero
  810a48:	003fe806 	br	8109ec <__alt_mem_onchip_mem+0xff8089ec>
  810a4c:	080e70c0 	call	80e70c <__sfvwrite_r>
  810a50:	003fe606 	br	8109ec <__alt_mem_onchip_mem+0xff8089ec>

00810a54 <__sprint_r>:
  810a54:	30c00217 	ldw	r3,8(r6)
  810a58:	18000126 	beq	r3,zero,810a60 <__sprint_r+0xc>
  810a5c:	08109581 	jmpi	810958 <__sprint_r.part.0>
  810a60:	30000115 	stw	zero,4(r6)
  810a64:	0005883a 	mov	r2,zero
  810a68:	f800283a 	ret

00810a6c <___vfiprintf_internal_r>:
  810a6c:	deffc904 	addi	sp,sp,-220
  810a70:	df003515 	stw	fp,212(sp)
  810a74:	dd003115 	stw	r20,196(sp)
  810a78:	dfc03615 	stw	ra,216(sp)
  810a7c:	ddc03415 	stw	r23,208(sp)
  810a80:	dd803315 	stw	r22,204(sp)
  810a84:	dd403215 	stw	r21,200(sp)
  810a88:	dcc03015 	stw	r19,192(sp)
  810a8c:	dc802f15 	stw	r18,188(sp)
  810a90:	dc402e15 	stw	r17,184(sp)
  810a94:	dc002d15 	stw	r16,180(sp)
  810a98:	d9002015 	stw	r4,128(sp)
  810a9c:	d9c02215 	stw	r7,136(sp)
  810aa0:	2829883a 	mov	r20,r5
  810aa4:	3039883a 	mov	fp,r6
  810aa8:	20000226 	beq	r4,zero,810ab4 <___vfiprintf_internal_r+0x48>
  810aac:	20800e17 	ldw	r2,56(r4)
  810ab0:	1000cf26 	beq	r2,zero,810df0 <___vfiprintf_internal_r+0x384>
  810ab4:	a080030b 	ldhu	r2,12(r20)
  810ab8:	10c8000c 	andi	r3,r2,8192
  810abc:	1800061e 	bne	r3,zero,810ad8 <___vfiprintf_internal_r+0x6c>
  810ac0:	a1001917 	ldw	r4,100(r20)
  810ac4:	00f7ffc4 	movi	r3,-8193
  810ac8:	10880014 	ori	r2,r2,8192
  810acc:	20c6703a 	and	r3,r4,r3
  810ad0:	a080030d 	sth	r2,12(r20)
  810ad4:	a0c01915 	stw	r3,100(r20)
  810ad8:	10c0020c 	andi	r3,r2,8
  810adc:	1800a926 	beq	r3,zero,810d84 <___vfiprintf_internal_r+0x318>
  810ae0:	a0c00417 	ldw	r3,16(r20)
  810ae4:	1800a726 	beq	r3,zero,810d84 <___vfiprintf_internal_r+0x318>
  810ae8:	1080068c 	andi	r2,r2,26
  810aec:	00c00284 	movi	r3,10
  810af0:	10c0ac26 	beq	r2,r3,810da4 <___vfiprintf_internal_r+0x338>
  810af4:	da801a04 	addi	r10,sp,104
  810af8:	da801e15 	stw	r10,120(sp)
  810afc:	d8801e17 	ldw	r2,120(sp)
  810b00:	da8019c4 	addi	r10,sp,103
  810b04:	05802074 	movhi	r22,129
  810b08:	05c02074 	movhi	r23,129
  810b0c:	da801f15 	stw	r10,124(sp)
  810b10:	1295c83a 	sub	r10,r2,r10
  810b14:	b59cdd04 	addi	r22,r22,29556
  810b18:	bddcd904 	addi	r23,r23,29540
  810b1c:	dec01a15 	stw	sp,104(sp)
  810b20:	d8001c15 	stw	zero,112(sp)
  810b24:	d8001b15 	stw	zero,108(sp)
  810b28:	d8002615 	stw	zero,152(sp)
  810b2c:	d8002315 	stw	zero,140(sp)
  810b30:	da802715 	stw	r10,156(sp)
  810b34:	d811883a 	mov	r8,sp
  810b38:	dd002115 	stw	r20,132(sp)
  810b3c:	e021883a 	mov	r16,fp
  810b40:	80800007 	ldb	r2,0(r16)
  810b44:	1003ea26 	beq	r2,zero,811af0 <___vfiprintf_internal_r+0x1084>
  810b48:	00c00944 	movi	r3,37
  810b4c:	8025883a 	mov	r18,r16
  810b50:	10c0021e 	bne	r2,r3,810b5c <___vfiprintf_internal_r+0xf0>
  810b54:	00001606 	br	810bb0 <___vfiprintf_internal_r+0x144>
  810b58:	10c00326 	beq	r2,r3,810b68 <___vfiprintf_internal_r+0xfc>
  810b5c:	94800044 	addi	r18,r18,1
  810b60:	90800007 	ldb	r2,0(r18)
  810b64:	103ffc1e 	bne	r2,zero,810b58 <__alt_mem_onchip_mem+0xff808b58>
  810b68:	9423c83a 	sub	r17,r18,r16
  810b6c:	88001026 	beq	r17,zero,810bb0 <___vfiprintf_internal_r+0x144>
  810b70:	d8c01c17 	ldw	r3,112(sp)
  810b74:	d8801b17 	ldw	r2,108(sp)
  810b78:	44000015 	stw	r16,0(r8)
  810b7c:	88c7883a 	add	r3,r17,r3
  810b80:	10800044 	addi	r2,r2,1
  810b84:	44400115 	stw	r17,4(r8)
  810b88:	d8c01c15 	stw	r3,112(sp)
  810b8c:	d8801b15 	stw	r2,108(sp)
  810b90:	010001c4 	movi	r4,7
  810b94:	2080760e 	bge	r4,r2,810d70 <___vfiprintf_internal_r+0x304>
  810b98:	1803821e 	bne	r3,zero,8119a4 <___vfiprintf_internal_r+0xf38>
  810b9c:	da802317 	ldw	r10,140(sp)
  810ba0:	d8001b15 	stw	zero,108(sp)
  810ba4:	d811883a 	mov	r8,sp
  810ba8:	5455883a 	add	r10,r10,r17
  810bac:	da802315 	stw	r10,140(sp)
  810bb0:	90800007 	ldb	r2,0(r18)
  810bb4:	10044626 	beq	r2,zero,811cd0 <___vfiprintf_internal_r+0x1264>
  810bb8:	90c00047 	ldb	r3,1(r18)
  810bbc:	94000044 	addi	r16,r18,1
  810bc0:	d8001d85 	stb	zero,118(sp)
  810bc4:	0009883a 	mov	r4,zero
  810bc8:	000f883a 	mov	r7,zero
  810bcc:	027fffc4 	movi	r9,-1
  810bd0:	0023883a 	mov	r17,zero
  810bd4:	0029883a 	mov	r20,zero
  810bd8:	01401604 	movi	r5,88
  810bdc:	01800244 	movi	r6,9
  810be0:	03400a84 	movi	r13,42
  810be4:	03001b04 	movi	r12,108
  810be8:	84000044 	addi	r16,r16,1
  810bec:	18bff804 	addi	r2,r3,-32
  810bf0:	28827336 	bltu	r5,r2,8115c0 <___vfiprintf_internal_r+0xb54>
  810bf4:	100490ba 	slli	r2,r2,2
  810bf8:	02802074 	movhi	r10,129
  810bfc:	52830304 	addi	r10,r10,3084
  810c00:	1285883a 	add	r2,r2,r10
  810c04:	10800017 	ldw	r2,0(r2)
  810c08:	1000683a 	jmp	r2
  810c0c:	008112f4 	movhi	r2,1099
  810c10:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810c14:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810c18:	00811314 	movui	r2,1100
  810c1c:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810c20:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810c24:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810c28:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810c2c:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810c30:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810c34:	008114fc 	xorhi	r2,zero,1107
  810c38:	00811518 	cmpnei	r2,zero,1108
  810c3c:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810c40:	00810e00 	call	810e0 <__alt_mem_sdram-0x77ef20>
  810c44:	00811528 	cmpgeui	r2,zero,1108
  810c48:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810c4c:	00811320 	cmpeqi	r2,zero,1100
  810c50:	0081132c 	andhi	r2,zero,1100
  810c54:	0081132c 	andhi	r2,zero,1100
  810c58:	0081132c 	andhi	r2,zero,1100
  810c5c:	0081132c 	andhi	r2,zero,1100
  810c60:	0081132c 	andhi	r2,zero,1100
  810c64:	0081132c 	andhi	r2,zero,1100
  810c68:	0081132c 	andhi	r2,zero,1100
  810c6c:	0081132c 	andhi	r2,zero,1100
  810c70:	0081132c 	andhi	r2,zero,1100
  810c74:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810c78:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810c7c:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810c80:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810c84:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810c88:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810c8c:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810c90:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810c94:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810c98:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810c9c:	00811358 	cmpnei	r2,zero,1101
  810ca0:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810ca4:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810ca8:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810cac:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810cb0:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810cb4:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810cb8:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810cbc:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810cc0:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810cc4:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810cc8:	00811390 	cmplti	r2,zero,1102
  810ccc:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810cd0:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810cd4:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810cd8:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810cdc:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810ce0:	008113e8 	cmpgeui	r2,zero,1103
  810ce4:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810ce8:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810cec:	00811458 	cmpnei	r2,zero,1105
  810cf0:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810cf4:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810cf8:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810cfc:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810d00:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810d04:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810d08:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810d0c:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810d10:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810d14:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810d18:	00811204 	movi	r2,1096
  810d1c:	00811230 	cmpltui	r2,zero,1096
  810d20:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810d24:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810d28:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810d2c:	00811568 	cmpgeui	r2,zero,1109
  810d30:	00811230 	cmpltui	r2,zero,1096
  810d34:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810d38:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810d3c:	008110c4 	movi	r2,1091
  810d40:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810d44:	008110d4 	movui	r2,1091
  810d48:	00811110 	cmplti	r2,zero,1092
  810d4c:	00810e0c 	andi	r2,zero,1080
  810d50:	008110b8 	rdprs	r2,zero,1090
  810d54:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810d58:	00811494 	movui	r2,1106
  810d5c:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810d60:	008114ec 	andhi	r2,zero,1107
  810d64:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810d68:	008115c0 	call	8115c <__alt_mem_sdram-0x77eea4>
  810d6c:	008111b0 	cmpltui	r2,zero,1094
  810d70:	42000204 	addi	r8,r8,8
  810d74:	da802317 	ldw	r10,140(sp)
  810d78:	5455883a 	add	r10,r10,r17
  810d7c:	da802315 	stw	r10,140(sp)
  810d80:	003f8b06 	br	810bb0 <__alt_mem_onchip_mem+0xff808bb0>
  810d84:	d9002017 	ldw	r4,128(sp)
  810d88:	a00b883a 	mov	r5,r20
  810d8c:	080cbd80 	call	80cbd8 <__swsetup_r>
  810d90:	1003b11e 	bne	r2,zero,811c58 <___vfiprintf_internal_r+0x11ec>
  810d94:	a080030b 	ldhu	r2,12(r20)
  810d98:	00c00284 	movi	r3,10
  810d9c:	1080068c 	andi	r2,r2,26
  810da0:	10ff541e 	bne	r2,r3,810af4 <__alt_mem_onchip_mem+0xff808af4>
  810da4:	a080038f 	ldh	r2,14(r20)
  810da8:	103f5216 	blt	r2,zero,810af4 <__alt_mem_onchip_mem+0xff808af4>
  810dac:	d9c02217 	ldw	r7,136(sp)
  810db0:	d9002017 	ldw	r4,128(sp)
  810db4:	e00d883a 	mov	r6,fp
  810db8:	a00b883a 	mov	r5,r20
  810dbc:	0811ee40 	call	811ee4 <__sbprintf>
  810dc0:	dfc03617 	ldw	ra,216(sp)
  810dc4:	df003517 	ldw	fp,212(sp)
  810dc8:	ddc03417 	ldw	r23,208(sp)
  810dcc:	dd803317 	ldw	r22,204(sp)
  810dd0:	dd403217 	ldw	r21,200(sp)
  810dd4:	dd003117 	ldw	r20,196(sp)
  810dd8:	dcc03017 	ldw	r19,192(sp)
  810ddc:	dc802f17 	ldw	r18,188(sp)
  810de0:	dc402e17 	ldw	r17,184(sp)
  810de4:	dc002d17 	ldw	r16,180(sp)
  810de8:	dec03704 	addi	sp,sp,220
  810dec:	f800283a 	ret
  810df0:	08096000 	call	809600 <__sinit>
  810df4:	003f2f06 	br	810ab4 <__alt_mem_onchip_mem+0xff808ab4>
  810df8:	0463c83a 	sub	r17,zero,r17
  810dfc:	d8802215 	stw	r2,136(sp)
  810e00:	a5000114 	ori	r20,r20,4
  810e04:	80c00007 	ldb	r3,0(r16)
  810e08:	003f7706 	br	810be8 <__alt_mem_onchip_mem+0xff808be8>
  810e0c:	00800c04 	movi	r2,48
  810e10:	da802217 	ldw	r10,136(sp)
  810e14:	d8801d05 	stb	r2,116(sp)
  810e18:	00801e04 	movi	r2,120
  810e1c:	d8801d45 	stb	r2,117(sp)
  810e20:	d8001d85 	stb	zero,118(sp)
  810e24:	50c00104 	addi	r3,r10,4
  810e28:	54800017 	ldw	r18,0(r10)
  810e2c:	0027883a 	mov	r19,zero
  810e30:	a0800094 	ori	r2,r20,2
  810e34:	48030b16 	blt	r9,zero,811a64 <___vfiprintf_internal_r+0xff8>
  810e38:	00bfdfc4 	movi	r2,-129
  810e3c:	a096703a 	and	r11,r20,r2
  810e40:	d8c02215 	stw	r3,136(sp)
  810e44:	5d000094 	ori	r20,r11,2
  810e48:	90032b1e 	bne	r18,zero,811af8 <___vfiprintf_internal_r+0x108c>
  810e4c:	00802074 	movhi	r2,129
  810e50:	109c7904 	addi	r2,r2,29156
  810e54:	d8802615 	stw	r2,152(sp)
  810e58:	0039883a 	mov	fp,zero
  810e5c:	48017b1e 	bne	r9,zero,81144c <___vfiprintf_internal_r+0x9e0>
  810e60:	0013883a 	mov	r9,zero
  810e64:	0027883a 	mov	r19,zero
  810e68:	dd401a04 	addi	r21,sp,104
  810e6c:	4825883a 	mov	r18,r9
  810e70:	4cc0010e 	bge	r9,r19,810e78 <___vfiprintf_internal_r+0x40c>
  810e74:	9825883a 	mov	r18,r19
  810e78:	e7003fcc 	andi	fp,fp,255
  810e7c:	e700201c 	xori	fp,fp,128
  810e80:	e73fe004 	addi	fp,fp,-128
  810e84:	e0000126 	beq	fp,zero,810e8c <___vfiprintf_internal_r+0x420>
  810e88:	94800044 	addi	r18,r18,1
  810e8c:	a380008c 	andi	r14,r20,2
  810e90:	70000126 	beq	r14,zero,810e98 <___vfiprintf_internal_r+0x42c>
  810e94:	94800084 	addi	r18,r18,2
  810e98:	a700210c 	andi	fp,r20,132
  810e9c:	e001df1e 	bne	fp,zero,81161c <___vfiprintf_internal_r+0xbb0>
  810ea0:	8c87c83a 	sub	r3,r17,r18
  810ea4:	00c1dd0e 	bge	zero,r3,81161c <___vfiprintf_internal_r+0xbb0>
  810ea8:	01c00404 	movi	r7,16
  810eac:	d8801c17 	ldw	r2,112(sp)
  810eb0:	38c3ad0e 	bge	r7,r3,811d68 <___vfiprintf_internal_r+0x12fc>
  810eb4:	02802074 	movhi	r10,129
  810eb8:	529cdd04 	addi	r10,r10,29556
  810ebc:	dc002915 	stw	r16,164(sp)
  810ec0:	d9801b17 	ldw	r6,108(sp)
  810ec4:	da802415 	stw	r10,144(sp)
  810ec8:	03c001c4 	movi	r15,7
  810ecc:	da402515 	stw	r9,148(sp)
  810ed0:	db802815 	stw	r14,160(sp)
  810ed4:	1821883a 	mov	r16,r3
  810ed8:	00000506 	br	810ef0 <___vfiprintf_internal_r+0x484>
  810edc:	31400084 	addi	r5,r6,2
  810ee0:	42000204 	addi	r8,r8,8
  810ee4:	200d883a 	mov	r6,r4
  810ee8:	843ffc04 	addi	r16,r16,-16
  810eec:	3c000d0e 	bge	r7,r16,810f24 <___vfiprintf_internal_r+0x4b8>
  810ef0:	10800404 	addi	r2,r2,16
  810ef4:	31000044 	addi	r4,r6,1
  810ef8:	45800015 	stw	r22,0(r8)
  810efc:	41c00115 	stw	r7,4(r8)
  810f00:	d8801c15 	stw	r2,112(sp)
  810f04:	d9001b15 	stw	r4,108(sp)
  810f08:	793ff40e 	bge	r15,r4,810edc <__alt_mem_onchip_mem+0xff808edc>
  810f0c:	1001b51e 	bne	r2,zero,8115e4 <___vfiprintf_internal_r+0xb78>
  810f10:	843ffc04 	addi	r16,r16,-16
  810f14:	000d883a 	mov	r6,zero
  810f18:	01400044 	movi	r5,1
  810f1c:	d811883a 	mov	r8,sp
  810f20:	3c3ff316 	blt	r7,r16,810ef0 <__alt_mem_onchip_mem+0xff808ef0>
  810f24:	8007883a 	mov	r3,r16
  810f28:	da402517 	ldw	r9,148(sp)
  810f2c:	db802817 	ldw	r14,160(sp)
  810f30:	dc002917 	ldw	r16,164(sp)
  810f34:	da802417 	ldw	r10,144(sp)
  810f38:	1885883a 	add	r2,r3,r2
  810f3c:	40c00115 	stw	r3,4(r8)
  810f40:	42800015 	stw	r10,0(r8)
  810f44:	d8801c15 	stw	r2,112(sp)
  810f48:	d9401b15 	stw	r5,108(sp)
  810f4c:	00c001c4 	movi	r3,7
  810f50:	19426016 	blt	r3,r5,8118d4 <___vfiprintf_internal_r+0xe68>
  810f54:	d8c01d87 	ldb	r3,118(sp)
  810f58:	42000204 	addi	r8,r8,8
  810f5c:	29000044 	addi	r4,r5,1
  810f60:	1801b31e 	bne	r3,zero,811630 <___vfiprintf_internal_r+0xbc4>
  810f64:	7001c026 	beq	r14,zero,811668 <___vfiprintf_internal_r+0xbfc>
  810f68:	d8c01d04 	addi	r3,sp,116
  810f6c:	10800084 	addi	r2,r2,2
  810f70:	40c00015 	stw	r3,0(r8)
  810f74:	00c00084 	movi	r3,2
  810f78:	40c00115 	stw	r3,4(r8)
  810f7c:	d8801c15 	stw	r2,112(sp)
  810f80:	d9001b15 	stw	r4,108(sp)
  810f84:	00c001c4 	movi	r3,7
  810f88:	1902650e 	bge	r3,r4,811920 <___vfiprintf_internal_r+0xeb4>
  810f8c:	10029a1e 	bne	r2,zero,8119f8 <___vfiprintf_internal_r+0xf8c>
  810f90:	00c02004 	movi	r3,128
  810f94:	01000044 	movi	r4,1
  810f98:	000b883a 	mov	r5,zero
  810f9c:	d811883a 	mov	r8,sp
  810fa0:	e0c1b31e 	bne	fp,r3,811670 <___vfiprintf_internal_r+0xc04>
  810fa4:	8cb9c83a 	sub	fp,r17,r18
  810fa8:	0701b10e 	bge	zero,fp,811670 <___vfiprintf_internal_r+0xc04>
  810fac:	01c00404 	movi	r7,16
  810fb0:	3f03890e 	bge	r7,fp,811dd8 <___vfiprintf_internal_r+0x136c>
  810fb4:	00c02074 	movhi	r3,129
  810fb8:	18dcd904 	addi	r3,r3,29540
  810fbc:	d8c02415 	stw	r3,144(sp)
  810fc0:	8007883a 	mov	r3,r16
  810fc4:	034001c4 	movi	r13,7
  810fc8:	e021883a 	mov	r16,fp
  810fcc:	da402515 	stw	r9,148(sp)
  810fd0:	1839883a 	mov	fp,r3
  810fd4:	00000506 	br	810fec <___vfiprintf_internal_r+0x580>
  810fd8:	29800084 	addi	r6,r5,2
  810fdc:	42000204 	addi	r8,r8,8
  810fe0:	180b883a 	mov	r5,r3
  810fe4:	843ffc04 	addi	r16,r16,-16
  810fe8:	3c000d0e 	bge	r7,r16,811020 <___vfiprintf_internal_r+0x5b4>
  810fec:	10800404 	addi	r2,r2,16
  810ff0:	28c00044 	addi	r3,r5,1
  810ff4:	45c00015 	stw	r23,0(r8)
  810ff8:	41c00115 	stw	r7,4(r8)
  810ffc:	d8801c15 	stw	r2,112(sp)
  811000:	d8c01b15 	stw	r3,108(sp)
  811004:	68fff40e 	bge	r13,r3,810fd8 <__alt_mem_onchip_mem+0xff808fd8>
  811008:	1002241e 	bne	r2,zero,81189c <___vfiprintf_internal_r+0xe30>
  81100c:	843ffc04 	addi	r16,r16,-16
  811010:	01800044 	movi	r6,1
  811014:	000b883a 	mov	r5,zero
  811018:	d811883a 	mov	r8,sp
  81101c:	3c3ff316 	blt	r7,r16,810fec <__alt_mem_onchip_mem+0xff808fec>
  811020:	da402517 	ldw	r9,148(sp)
  811024:	e007883a 	mov	r3,fp
  811028:	8039883a 	mov	fp,r16
  81102c:	1821883a 	mov	r16,r3
  811030:	d8c02417 	ldw	r3,144(sp)
  811034:	1705883a 	add	r2,r2,fp
  811038:	47000115 	stw	fp,4(r8)
  81103c:	40c00015 	stw	r3,0(r8)
  811040:	d8801c15 	stw	r2,112(sp)
  811044:	d9801b15 	stw	r6,108(sp)
  811048:	00c001c4 	movi	r3,7
  81104c:	19827616 	blt	r3,r6,811a28 <___vfiprintf_internal_r+0xfbc>
  811050:	4cf9c83a 	sub	fp,r9,r19
  811054:	42000204 	addi	r8,r8,8
  811058:	31000044 	addi	r4,r6,1
  81105c:	300b883a 	mov	r5,r6
  811060:	07018516 	blt	zero,fp,811678 <___vfiprintf_internal_r+0xc0c>
  811064:	9885883a 	add	r2,r19,r2
  811068:	45400015 	stw	r21,0(r8)
  81106c:	44c00115 	stw	r19,4(r8)
  811070:	d8801c15 	stw	r2,112(sp)
  811074:	d9001b15 	stw	r4,108(sp)
  811078:	00c001c4 	movi	r3,7
  81107c:	1901dd0e 	bge	r3,r4,8117f4 <___vfiprintf_internal_r+0xd88>
  811080:	1002401e 	bne	r2,zero,811984 <___vfiprintf_internal_r+0xf18>
  811084:	d8001b15 	stw	zero,108(sp)
  811088:	a2c0010c 	andi	r11,r20,4
  81108c:	58000226 	beq	r11,zero,811098 <___vfiprintf_internal_r+0x62c>
  811090:	8ca7c83a 	sub	r19,r17,r18
  811094:	04c2f216 	blt	zero,r19,811c60 <___vfiprintf_internal_r+0x11f4>
  811098:	8c80010e 	bge	r17,r18,8110a0 <___vfiprintf_internal_r+0x634>
  81109c:	9023883a 	mov	r17,r18
  8110a0:	da802317 	ldw	r10,140(sp)
  8110a4:	5455883a 	add	r10,r10,r17
  8110a8:	da802315 	stw	r10,140(sp)
  8110ac:	d8001b15 	stw	zero,108(sp)
  8110b0:	d811883a 	mov	r8,sp
  8110b4:	003ea206 	br	810b40 <__alt_mem_onchip_mem+0xff808b40>
  8110b8:	a5000814 	ori	r20,r20,32
  8110bc:	80c00007 	ldb	r3,0(r16)
  8110c0:	003ec906 	br	810be8 <__alt_mem_onchip_mem+0xff808be8>
  8110c4:	80c00007 	ldb	r3,0(r16)
  8110c8:	1b030926 	beq	r3,r12,811cf0 <___vfiprintf_internal_r+0x1284>
  8110cc:	a5000414 	ori	r20,r20,16
  8110d0:	003ec506 	br	810be8 <__alt_mem_onchip_mem+0xff808be8>
  8110d4:	21003fcc 	andi	r4,r4,255
  8110d8:	20035e1e 	bne	r4,zero,811e54 <___vfiprintf_internal_r+0x13e8>
  8110dc:	a080080c 	andi	r2,r20,32
  8110e0:	1002a526 	beq	r2,zero,811b78 <___vfiprintf_internal_r+0x110c>
  8110e4:	da802217 	ldw	r10,136(sp)
  8110e8:	50800017 	ldw	r2,0(r10)
  8110ec:	da802317 	ldw	r10,140(sp)
  8110f0:	5007d7fa 	srai	r3,r10,31
  8110f4:	da802217 	ldw	r10,136(sp)
  8110f8:	10c00115 	stw	r3,4(r2)
  8110fc:	52800104 	addi	r10,r10,4
  811100:	da802215 	stw	r10,136(sp)
  811104:	da802317 	ldw	r10,140(sp)
  811108:	12800015 	stw	r10,0(r2)
  81110c:	003e8c06 	br	810b40 <__alt_mem_onchip_mem+0xff808b40>
  811110:	21003fcc 	andi	r4,r4,255
  811114:	2003511e 	bne	r4,zero,811e5c <___vfiprintf_internal_r+0x13f0>
  811118:	a080080c 	andi	r2,r20,32
  81111c:	1000a126 	beq	r2,zero,8113a4 <___vfiprintf_internal_r+0x938>
  811120:	da802217 	ldw	r10,136(sp)
  811124:	d8001d85 	stb	zero,118(sp)
  811128:	50800204 	addi	r2,r10,8
  81112c:	54800017 	ldw	r18,0(r10)
  811130:	54c00117 	ldw	r19,4(r10)
  811134:	4802b416 	blt	r9,zero,811c08 <___vfiprintf_internal_r+0x119c>
  811138:	013fdfc4 	movi	r4,-129
  81113c:	94c6b03a 	or	r3,r18,r19
  811140:	d8802215 	stw	r2,136(sp)
  811144:	a128703a 	and	r20,r20,r4
  811148:	1800a226 	beq	r3,zero,8113d4 <___vfiprintf_internal_r+0x968>
  81114c:	0039883a 	mov	fp,zero
  811150:	dd401a04 	addi	r21,sp,104
  811154:	9006d0fa 	srli	r3,r18,3
  811158:	9808977a 	slli	r4,r19,29
  81115c:	9826d0fa 	srli	r19,r19,3
  811160:	948001cc 	andi	r18,r18,7
  811164:	90800c04 	addi	r2,r18,48
  811168:	ad7fffc4 	addi	r21,r21,-1
  81116c:	20e4b03a 	or	r18,r4,r3
  811170:	a8800005 	stb	r2,0(r21)
  811174:	94c6b03a 	or	r3,r18,r19
  811178:	183ff61e 	bne	r3,zero,811154 <__alt_mem_onchip_mem+0xff809154>
  81117c:	a0c0004c 	andi	r3,r20,1
  811180:	18005926 	beq	r3,zero,8112e8 <___vfiprintf_internal_r+0x87c>
  811184:	10803fcc 	andi	r2,r2,255
  811188:	1080201c 	xori	r2,r2,128
  81118c:	10bfe004 	addi	r2,r2,-128
  811190:	00c00c04 	movi	r3,48
  811194:	10c05426 	beq	r2,r3,8112e8 <___vfiprintf_internal_r+0x87c>
  811198:	da801e17 	ldw	r10,120(sp)
  81119c:	a8bfffc4 	addi	r2,r21,-1
  8111a0:	a8ffffc5 	stb	r3,-1(r21)
  8111a4:	50a7c83a 	sub	r19,r10,r2
  8111a8:	102b883a 	mov	r21,r2
  8111ac:	003f2f06 	br	810e6c <__alt_mem_onchip_mem+0xff808e6c>
  8111b0:	21003fcc 	andi	r4,r4,255
  8111b4:	2003421e 	bne	r4,zero,811ec0 <___vfiprintf_internal_r+0x1454>
  8111b8:	00802074 	movhi	r2,129
  8111bc:	109c7904 	addi	r2,r2,29156
  8111c0:	d8802615 	stw	r2,152(sp)
  8111c4:	a080080c 	andi	r2,r20,32
  8111c8:	1000aa26 	beq	r2,zero,811474 <___vfiprintf_internal_r+0xa08>
  8111cc:	da802217 	ldw	r10,136(sp)
  8111d0:	54800017 	ldw	r18,0(r10)
  8111d4:	54c00117 	ldw	r19,4(r10)
  8111d8:	52800204 	addi	r10,r10,8
  8111dc:	da802215 	stw	r10,136(sp)
  8111e0:	a080004c 	andi	r2,r20,1
  8111e4:	1001d226 	beq	r2,zero,811930 <___vfiprintf_internal_r+0xec4>
  8111e8:	94c4b03a 	or	r2,r18,r19
  8111ec:	1002351e 	bne	r2,zero,811ac4 <___vfiprintf_internal_r+0x1058>
  8111f0:	d8001d85 	stb	zero,118(sp)
  8111f4:	48022216 	blt	r9,zero,811a80 <___vfiprintf_internal_r+0x1014>
  8111f8:	00bfdfc4 	movi	r2,-129
  8111fc:	a0a8703a 	and	r20,r20,r2
  811200:	003f1506 	br	810e58 <__alt_mem_onchip_mem+0xff808e58>
  811204:	da802217 	ldw	r10,136(sp)
  811208:	04800044 	movi	r18,1
  81120c:	d8001d85 	stb	zero,118(sp)
  811210:	50800017 	ldw	r2,0(r10)
  811214:	52800104 	addi	r10,r10,4
  811218:	da802215 	stw	r10,136(sp)
  81121c:	d8801005 	stb	r2,64(sp)
  811220:	9027883a 	mov	r19,r18
  811224:	dd401004 	addi	r21,sp,64
  811228:	0013883a 	mov	r9,zero
  81122c:	003f1706 	br	810e8c <__alt_mem_onchip_mem+0xff808e8c>
  811230:	21003fcc 	andi	r4,r4,255
  811234:	2003201e 	bne	r4,zero,811eb8 <___vfiprintf_internal_r+0x144c>
  811238:	a080080c 	andi	r2,r20,32
  81123c:	10004b26 	beq	r2,zero,81136c <___vfiprintf_internal_r+0x900>
  811240:	da802217 	ldw	r10,136(sp)
  811244:	50800117 	ldw	r2,4(r10)
  811248:	54800017 	ldw	r18,0(r10)
  81124c:	52800204 	addi	r10,r10,8
  811250:	da802215 	stw	r10,136(sp)
  811254:	1027883a 	mov	r19,r2
  811258:	10022c16 	blt	r2,zero,811b0c <___vfiprintf_internal_r+0x10a0>
  81125c:	df001d83 	ldbu	fp,118(sp)
  811260:	48007216 	blt	r9,zero,81142c <___vfiprintf_internal_r+0x9c0>
  811264:	00ffdfc4 	movi	r3,-129
  811268:	94c4b03a 	or	r2,r18,r19
  81126c:	a0e8703a 	and	r20,r20,r3
  811270:	1000cc26 	beq	r2,zero,8115a4 <___vfiprintf_internal_r+0xb38>
  811274:	98021026 	beq	r19,zero,811ab8 <___vfiprintf_internal_r+0x104c>
  811278:	dc402415 	stw	r17,144(sp)
  81127c:	dc002515 	stw	r16,148(sp)
  811280:	9823883a 	mov	r17,r19
  811284:	9021883a 	mov	r16,r18
  811288:	dd401a04 	addi	r21,sp,104
  81128c:	4825883a 	mov	r18,r9
  811290:	4027883a 	mov	r19,r8
  811294:	8009883a 	mov	r4,r16
  811298:	880b883a 	mov	r5,r17
  81129c:	01800284 	movi	r6,10
  8112a0:	000f883a 	mov	r7,zero
  8112a4:	081265c0 	call	81265c <__umoddi3>
  8112a8:	10800c04 	addi	r2,r2,48
  8112ac:	ad7fffc4 	addi	r21,r21,-1
  8112b0:	8009883a 	mov	r4,r16
  8112b4:	880b883a 	mov	r5,r17
  8112b8:	a8800005 	stb	r2,0(r21)
  8112bc:	01800284 	movi	r6,10
  8112c0:	000f883a 	mov	r7,zero
  8112c4:	080637c0 	call	80637c <__udivdi3>
  8112c8:	1021883a 	mov	r16,r2
  8112cc:	10c4b03a 	or	r2,r2,r3
  8112d0:	1823883a 	mov	r17,r3
  8112d4:	103fef1e 	bne	r2,zero,811294 <__alt_mem_onchip_mem+0xff809294>
  8112d8:	dc402417 	ldw	r17,144(sp)
  8112dc:	dc002517 	ldw	r16,148(sp)
  8112e0:	9013883a 	mov	r9,r18
  8112e4:	9811883a 	mov	r8,r19
  8112e8:	da801e17 	ldw	r10,120(sp)
  8112ec:	5567c83a 	sub	r19,r10,r21
  8112f0:	003ede06 	br	810e6c <__alt_mem_onchip_mem+0xff808e6c>
  8112f4:	38803fcc 	andi	r2,r7,255
  8112f8:	1080201c 	xori	r2,r2,128
  8112fc:	10bfe004 	addi	r2,r2,-128
  811300:	1002371e 	bne	r2,zero,811be0 <___vfiprintf_internal_r+0x1174>
  811304:	01000044 	movi	r4,1
  811308:	01c00804 	movi	r7,32
  81130c:	80c00007 	ldb	r3,0(r16)
  811310:	003e3506 	br	810be8 <__alt_mem_onchip_mem+0xff808be8>
  811314:	a5000054 	ori	r20,r20,1
  811318:	80c00007 	ldb	r3,0(r16)
  81131c:	003e3206 	br	810be8 <__alt_mem_onchip_mem+0xff808be8>
  811320:	a5002014 	ori	r20,r20,128
  811324:	80c00007 	ldb	r3,0(r16)
  811328:	003e2f06 	br	810be8 <__alt_mem_onchip_mem+0xff808be8>
  81132c:	8015883a 	mov	r10,r16
  811330:	0023883a 	mov	r17,zero
  811334:	18bff404 	addi	r2,r3,-48
  811338:	50c00007 	ldb	r3,0(r10)
  81133c:	8c4002a4 	muli	r17,r17,10
  811340:	84000044 	addi	r16,r16,1
  811344:	8015883a 	mov	r10,r16
  811348:	1463883a 	add	r17,r2,r17
  81134c:	18bff404 	addi	r2,r3,-48
  811350:	30bff92e 	bgeu	r6,r2,811338 <__alt_mem_onchip_mem+0xff809338>
  811354:	003e2506 	br	810bec <__alt_mem_onchip_mem+0xff808bec>
  811358:	21003fcc 	andi	r4,r4,255
  81135c:	2002d41e 	bne	r4,zero,811eb0 <___vfiprintf_internal_r+0x1444>
  811360:	a5000414 	ori	r20,r20,16
  811364:	a080080c 	andi	r2,r20,32
  811368:	103fb51e 	bne	r2,zero,811240 <__alt_mem_onchip_mem+0xff809240>
  81136c:	a080040c 	andi	r2,r20,16
  811370:	1001f826 	beq	r2,zero,811b54 <___vfiprintf_internal_r+0x10e8>
  811374:	da802217 	ldw	r10,136(sp)
  811378:	54800017 	ldw	r18,0(r10)
  81137c:	52800104 	addi	r10,r10,4
  811380:	da802215 	stw	r10,136(sp)
  811384:	9027d7fa 	srai	r19,r18,31
  811388:	9805883a 	mov	r2,r19
  81138c:	003fb206 	br	811258 <__alt_mem_onchip_mem+0xff809258>
  811390:	21003fcc 	andi	r4,r4,255
  811394:	2002c41e 	bne	r4,zero,811ea8 <___vfiprintf_internal_r+0x143c>
  811398:	a5000414 	ori	r20,r20,16
  81139c:	a080080c 	andi	r2,r20,32
  8113a0:	103f5f1e 	bne	r2,zero,811120 <__alt_mem_onchip_mem+0xff809120>
  8113a4:	a080040c 	andi	r2,r20,16
  8113a8:	10020f26 	beq	r2,zero,811be8 <___vfiprintf_internal_r+0x117c>
  8113ac:	da802217 	ldw	r10,136(sp)
  8113b0:	d8001d85 	stb	zero,118(sp)
  8113b4:	0027883a 	mov	r19,zero
  8113b8:	50800104 	addi	r2,r10,4
  8113bc:	54800017 	ldw	r18,0(r10)
  8113c0:	48021116 	blt	r9,zero,811c08 <___vfiprintf_internal_r+0x119c>
  8113c4:	00ffdfc4 	movi	r3,-129
  8113c8:	d8802215 	stw	r2,136(sp)
  8113cc:	a0e8703a 	and	r20,r20,r3
  8113d0:	903f5e1e 	bne	r18,zero,81114c <__alt_mem_onchip_mem+0xff80914c>
  8113d4:	0039883a 	mov	fp,zero
  8113d8:	4802a626 	beq	r9,zero,811e74 <___vfiprintf_internal_r+0x1408>
  8113dc:	0025883a 	mov	r18,zero
  8113e0:	0027883a 	mov	r19,zero
  8113e4:	003f5a06 	br	811150 <__alt_mem_onchip_mem+0xff809150>
  8113e8:	21003fcc 	andi	r4,r4,255
  8113ec:	20029f1e 	bne	r4,zero,811e6c <___vfiprintf_internal_r+0x1400>
  8113f0:	a5000414 	ori	r20,r20,16
  8113f4:	a080080c 	andi	r2,r20,32
  8113f8:	10005e1e 	bne	r2,zero,811574 <___vfiprintf_internal_r+0xb08>
  8113fc:	a080040c 	andi	r2,r20,16
  811400:	1001a21e 	bne	r2,zero,811a8c <___vfiprintf_internal_r+0x1020>
  811404:	a080100c 	andi	r2,r20,64
  811408:	d8001d85 	stb	zero,118(sp)
  81140c:	da802217 	ldw	r10,136(sp)
  811410:	1002231e 	bne	r2,zero,811ca0 <___vfiprintf_internal_r+0x1234>
  811414:	50800104 	addi	r2,r10,4
  811418:	54800017 	ldw	r18,0(r10)
  81141c:	0027883a 	mov	r19,zero
  811420:	4801a00e 	bge	r9,zero,811aa4 <___vfiprintf_internal_r+0x1038>
  811424:	d8802215 	stw	r2,136(sp)
  811428:	0039883a 	mov	fp,zero
  81142c:	94c4b03a 	or	r2,r18,r19
  811430:	103f901e 	bne	r2,zero,811274 <__alt_mem_onchip_mem+0xff809274>
  811434:	00800044 	movi	r2,1
  811438:	10803fcc 	andi	r2,r2,255
  81143c:	00c00044 	movi	r3,1
  811440:	10c05926 	beq	r2,r3,8115a8 <___vfiprintf_internal_r+0xb3c>
  811444:	00c00084 	movi	r3,2
  811448:	10ffe41e 	bne	r2,r3,8113dc <__alt_mem_onchip_mem+0xff8093dc>
  81144c:	0025883a 	mov	r18,zero
  811450:	0027883a 	mov	r19,zero
  811454:	00013d06 	br	81194c <___vfiprintf_internal_r+0xee0>
  811458:	21003fcc 	andi	r4,r4,255
  81145c:	2002811e 	bne	r4,zero,811e64 <___vfiprintf_internal_r+0x13f8>
  811460:	00802074 	movhi	r2,129
  811464:	109c7404 	addi	r2,r2,29136
  811468:	d8802615 	stw	r2,152(sp)
  81146c:	a080080c 	andi	r2,r20,32
  811470:	103f561e 	bne	r2,zero,8111cc <__alt_mem_onchip_mem+0xff8091cc>
  811474:	a080040c 	andi	r2,r20,16
  811478:	1001d126 	beq	r2,zero,811bc0 <___vfiprintf_internal_r+0x1154>
  81147c:	da802217 	ldw	r10,136(sp)
  811480:	0027883a 	mov	r19,zero
  811484:	54800017 	ldw	r18,0(r10)
  811488:	52800104 	addi	r10,r10,4
  81148c:	da802215 	stw	r10,136(sp)
  811490:	003f5306 	br	8111e0 <__alt_mem_onchip_mem+0xff8091e0>
  811494:	da802217 	ldw	r10,136(sp)
  811498:	d8001d85 	stb	zero,118(sp)
  81149c:	55400017 	ldw	r21,0(r10)
  8114a0:	50c00104 	addi	r3,r10,4
  8114a4:	a8024226 	beq	r21,zero,811db0 <___vfiprintf_internal_r+0x1344>
  8114a8:	48021816 	blt	r9,zero,811d0c <___vfiprintf_internal_r+0x12a0>
  8114ac:	480d883a 	mov	r6,r9
  8114b0:	000b883a 	mov	r5,zero
  8114b4:	a809883a 	mov	r4,r21
  8114b8:	d8c02a15 	stw	r3,168(sp)
  8114bc:	da002b15 	stw	r8,172(sp)
  8114c0:	da402c15 	stw	r9,176(sp)
  8114c4:	080eec00 	call	80eec0 <memchr>
  8114c8:	d8c02a17 	ldw	r3,168(sp)
  8114cc:	da002b17 	ldw	r8,172(sp)
  8114d0:	da402c17 	ldw	r9,176(sp)
  8114d4:	10024826 	beq	r2,zero,811df8 <___vfiprintf_internal_r+0x138c>
  8114d8:	1567c83a 	sub	r19,r2,r21
  8114dc:	df001d83 	ldbu	fp,118(sp)
  8114e0:	d8c02215 	stw	r3,136(sp)
  8114e4:	0013883a 	mov	r9,zero
  8114e8:	003e6006 	br	810e6c <__alt_mem_onchip_mem+0xff808e6c>
  8114ec:	21003fcc 	andi	r4,r4,255
  8114f0:	203fc026 	beq	r4,zero,8113f4 <__alt_mem_onchip_mem+0xff8093f4>
  8114f4:	d9c01d85 	stb	r7,118(sp)
  8114f8:	003fbe06 	br	8113f4 <__alt_mem_onchip_mem+0xff8093f4>
  8114fc:	da802217 	ldw	r10,136(sp)
  811500:	54400017 	ldw	r17,0(r10)
  811504:	50800104 	addi	r2,r10,4
  811508:	883e3b16 	blt	r17,zero,810df8 <__alt_mem_onchip_mem+0xff808df8>
  81150c:	d8802215 	stw	r2,136(sp)
  811510:	80c00007 	ldb	r3,0(r16)
  811514:	003db406 	br	810be8 <__alt_mem_onchip_mem+0xff808be8>
  811518:	01000044 	movi	r4,1
  81151c:	01c00ac4 	movi	r7,43
  811520:	80c00007 	ldb	r3,0(r16)
  811524:	003db006 	br	810be8 <__alt_mem_onchip_mem+0xff808be8>
  811528:	80c00007 	ldb	r3,0(r16)
  81152c:	82800044 	addi	r10,r16,1
  811530:	1b423c26 	beq	r3,r13,811e24 <___vfiprintf_internal_r+0x13b8>
  811534:	18bff404 	addi	r2,r3,-48
  811538:	0013883a 	mov	r9,zero
  81153c:	30822b36 	bltu	r6,r2,811dec <___vfiprintf_internal_r+0x1380>
  811540:	50c00007 	ldb	r3,0(r10)
  811544:	4a4002a4 	muli	r9,r9,10
  811548:	54000044 	addi	r16,r10,1
  81154c:	8015883a 	mov	r10,r16
  811550:	4893883a 	add	r9,r9,r2
  811554:	18bff404 	addi	r2,r3,-48
  811558:	30bff92e 	bgeu	r6,r2,811540 <__alt_mem_onchip_mem+0xff809540>
  81155c:	483da30e 	bge	r9,zero,810bec <__alt_mem_onchip_mem+0xff808bec>
  811560:	027fffc4 	movi	r9,-1
  811564:	003da106 	br	810bec <__alt_mem_onchip_mem+0xff808bec>
  811568:	a5001014 	ori	r20,r20,64
  81156c:	80c00007 	ldb	r3,0(r16)
  811570:	003d9d06 	br	810be8 <__alt_mem_onchip_mem+0xff808be8>
  811574:	da802217 	ldw	r10,136(sp)
  811578:	d8001d85 	stb	zero,118(sp)
  81157c:	50c00204 	addi	r3,r10,8
  811580:	54800017 	ldw	r18,0(r10)
  811584:	54c00117 	ldw	r19,4(r10)
  811588:	4801ca16 	blt	r9,zero,811cb4 <___vfiprintf_internal_r+0x1248>
  81158c:	013fdfc4 	movi	r4,-129
  811590:	94c4b03a 	or	r2,r18,r19
  811594:	d8c02215 	stw	r3,136(sp)
  811598:	a128703a 	and	r20,r20,r4
  81159c:	0039883a 	mov	fp,zero
  8115a0:	103f341e 	bne	r2,zero,811274 <__alt_mem_onchip_mem+0xff809274>
  8115a4:	483e2e26 	beq	r9,zero,810e60 <__alt_mem_onchip_mem+0xff808e60>
  8115a8:	0025883a 	mov	r18,zero
  8115ac:	94800c04 	addi	r18,r18,48
  8115b0:	dc8019c5 	stb	r18,103(sp)
  8115b4:	dcc02717 	ldw	r19,156(sp)
  8115b8:	dd4019c4 	addi	r21,sp,103
  8115bc:	003e2b06 	br	810e6c <__alt_mem_onchip_mem+0xff808e6c>
  8115c0:	21003fcc 	andi	r4,r4,255
  8115c4:	2002361e 	bne	r4,zero,811ea0 <___vfiprintf_internal_r+0x1434>
  8115c8:	1801c126 	beq	r3,zero,811cd0 <___vfiprintf_internal_r+0x1264>
  8115cc:	04800044 	movi	r18,1
  8115d0:	d8c01005 	stb	r3,64(sp)
  8115d4:	d8001d85 	stb	zero,118(sp)
  8115d8:	9027883a 	mov	r19,r18
  8115dc:	dd401004 	addi	r21,sp,64
  8115e0:	003f1106 	br	811228 <__alt_mem_onchip_mem+0xff809228>
  8115e4:	d9402117 	ldw	r5,132(sp)
  8115e8:	d9002017 	ldw	r4,128(sp)
  8115ec:	d9801a04 	addi	r6,sp,104
  8115f0:	d9c02b15 	stw	r7,172(sp)
  8115f4:	dbc02a15 	stw	r15,168(sp)
  8115f8:	08109580 	call	810958 <__sprint_r.part.0>
  8115fc:	d9c02b17 	ldw	r7,172(sp)
  811600:	dbc02a17 	ldw	r15,168(sp)
  811604:	10006d1e 	bne	r2,zero,8117bc <___vfiprintf_internal_r+0xd50>
  811608:	d9801b17 	ldw	r6,108(sp)
  81160c:	d8801c17 	ldw	r2,112(sp)
  811610:	d811883a 	mov	r8,sp
  811614:	31400044 	addi	r5,r6,1
  811618:	003e3306 	br	810ee8 <__alt_mem_onchip_mem+0xff808ee8>
  81161c:	d9401b17 	ldw	r5,108(sp)
  811620:	d8801c17 	ldw	r2,112(sp)
  811624:	29000044 	addi	r4,r5,1
  811628:	d8c01d87 	ldb	r3,118(sp)
  81162c:	183e4d26 	beq	r3,zero,810f64 <__alt_mem_onchip_mem+0xff808f64>
  811630:	00c00044 	movi	r3,1
  811634:	d9401d84 	addi	r5,sp,118
  811638:	10c5883a 	add	r2,r2,r3
  81163c:	41400015 	stw	r5,0(r8)
  811640:	40c00115 	stw	r3,4(r8)
  811644:	d8801c15 	stw	r2,112(sp)
  811648:	d9001b15 	stw	r4,108(sp)
  81164c:	014001c4 	movi	r5,7
  811650:	2900a90e 	bge	r5,r4,8118f8 <___vfiprintf_internal_r+0xe8c>
  811654:	1000da1e 	bne	r2,zero,8119c0 <___vfiprintf_internal_r+0xf54>
  811658:	7000ab1e 	bne	r14,zero,811908 <___vfiprintf_internal_r+0xe9c>
  81165c:	000b883a 	mov	r5,zero
  811660:	1809883a 	mov	r4,r3
  811664:	d811883a 	mov	r8,sp
  811668:	00c02004 	movi	r3,128
  81166c:	e0fe4d26 	beq	fp,r3,810fa4 <__alt_mem_onchip_mem+0xff808fa4>
  811670:	4cf9c83a 	sub	fp,r9,r19
  811674:	073e7b0e 	bge	zero,fp,811064 <__alt_mem_onchip_mem+0xff809064>
  811678:	01c00404 	movi	r7,16
  81167c:	3f01900e 	bge	r7,fp,811cc0 <___vfiprintf_internal_r+0x1254>
  811680:	00c02074 	movhi	r3,129
  811684:	18dcd904 	addi	r3,r3,29540
  811688:	d8c02415 	stw	r3,144(sp)
  81168c:	034001c4 	movi	r13,7
  811690:	00000506 	br	8116a8 <___vfiprintf_internal_r+0xc3c>
  811694:	29000084 	addi	r4,r5,2
  811698:	42000204 	addi	r8,r8,8
  81169c:	180b883a 	mov	r5,r3
  8116a0:	e73ffc04 	addi	fp,fp,-16
  8116a4:	3f000d0e 	bge	r7,fp,8116dc <___vfiprintf_internal_r+0xc70>
  8116a8:	10800404 	addi	r2,r2,16
  8116ac:	28c00044 	addi	r3,r5,1
  8116b0:	45c00015 	stw	r23,0(r8)
  8116b4:	41c00115 	stw	r7,4(r8)
  8116b8:	d8801c15 	stw	r2,112(sp)
  8116bc:	d8c01b15 	stw	r3,108(sp)
  8116c0:	68fff40e 	bge	r13,r3,811694 <__alt_mem_onchip_mem+0xff809694>
  8116c4:	1000101e 	bne	r2,zero,811708 <___vfiprintf_internal_r+0xc9c>
  8116c8:	e73ffc04 	addi	fp,fp,-16
  8116cc:	01000044 	movi	r4,1
  8116d0:	000b883a 	mov	r5,zero
  8116d4:	d811883a 	mov	r8,sp
  8116d8:	3f3ff316 	blt	r7,fp,8116a8 <__alt_mem_onchip_mem+0xff8096a8>
  8116dc:	da802417 	ldw	r10,144(sp)
  8116e0:	1705883a 	add	r2,r2,fp
  8116e4:	47000115 	stw	fp,4(r8)
  8116e8:	42800015 	stw	r10,0(r8)
  8116ec:	d8801c15 	stw	r2,112(sp)
  8116f0:	d9001b15 	stw	r4,108(sp)
  8116f4:	00c001c4 	movi	r3,7
  8116f8:	19003616 	blt	r3,r4,8117d4 <___vfiprintf_internal_r+0xd68>
  8116fc:	42000204 	addi	r8,r8,8
  811700:	21000044 	addi	r4,r4,1
  811704:	003e5706 	br	811064 <__alt_mem_onchip_mem+0xff809064>
  811708:	d9402117 	ldw	r5,132(sp)
  81170c:	d9002017 	ldw	r4,128(sp)
  811710:	d9801a04 	addi	r6,sp,104
  811714:	d9c02b15 	stw	r7,172(sp)
  811718:	db402a15 	stw	r13,168(sp)
  81171c:	08109580 	call	810958 <__sprint_r.part.0>
  811720:	d9c02b17 	ldw	r7,172(sp)
  811724:	db402a17 	ldw	r13,168(sp)
  811728:	1000241e 	bne	r2,zero,8117bc <___vfiprintf_internal_r+0xd50>
  81172c:	d9401b17 	ldw	r5,108(sp)
  811730:	d8801c17 	ldw	r2,112(sp)
  811734:	d811883a 	mov	r8,sp
  811738:	29000044 	addi	r4,r5,1
  81173c:	003fd806 	br	8116a0 <__alt_mem_onchip_mem+0xff8096a0>
  811740:	d9401b17 	ldw	r5,108(sp)
  811744:	00c02074 	movhi	r3,129
  811748:	18dcdd04 	addi	r3,r3,29556
  81174c:	d8c02415 	stw	r3,144(sp)
  811750:	29400044 	addi	r5,r5,1
  811754:	d8c02417 	ldw	r3,144(sp)
  811758:	14c5883a 	add	r2,r2,r19
  81175c:	44c00115 	stw	r19,4(r8)
  811760:	40c00015 	stw	r3,0(r8)
  811764:	d8801c15 	stw	r2,112(sp)
  811768:	d9401b15 	stw	r5,108(sp)
  81176c:	00c001c4 	movi	r3,7
  811770:	1940070e 	bge	r3,r5,811790 <___vfiprintf_internal_r+0xd24>
  811774:	103e4826 	beq	r2,zero,811098 <__alt_mem_onchip_mem+0xff809098>
  811778:	d9402117 	ldw	r5,132(sp)
  81177c:	d9002017 	ldw	r4,128(sp)
  811780:	d9801a04 	addi	r6,sp,104
  811784:	08109580 	call	810958 <__sprint_r.part.0>
  811788:	10000c1e 	bne	r2,zero,8117bc <___vfiprintf_internal_r+0xd50>
  81178c:	d8801c17 	ldw	r2,112(sp)
  811790:	8c80010e 	bge	r17,r18,811798 <___vfiprintf_internal_r+0xd2c>
  811794:	9023883a 	mov	r17,r18
  811798:	da802317 	ldw	r10,140(sp)
  81179c:	5455883a 	add	r10,r10,r17
  8117a0:	da802315 	stw	r10,140(sp)
  8117a4:	103e4126 	beq	r2,zero,8110ac <__alt_mem_onchip_mem+0xff8090ac>
  8117a8:	d9402117 	ldw	r5,132(sp)
  8117ac:	d9002017 	ldw	r4,128(sp)
  8117b0:	d9801a04 	addi	r6,sp,104
  8117b4:	08109580 	call	810958 <__sprint_r.part.0>
  8117b8:	103e3c26 	beq	r2,zero,8110ac <__alt_mem_onchip_mem+0xff8090ac>
  8117bc:	dd002117 	ldw	r20,132(sp)
  8117c0:	a080030b 	ldhu	r2,12(r20)
  8117c4:	1080100c 	andi	r2,r2,64
  8117c8:	1001231e 	bne	r2,zero,811c58 <___vfiprintf_internal_r+0x11ec>
  8117cc:	d8802317 	ldw	r2,140(sp)
  8117d0:	003d7b06 	br	810dc0 <__alt_mem_onchip_mem+0xff808dc0>
  8117d4:	1000991e 	bne	r2,zero,811a3c <___vfiprintf_internal_r+0xfd0>
  8117d8:	00c00044 	movi	r3,1
  8117dc:	9805883a 	mov	r2,r19
  8117e0:	dd400015 	stw	r21,0(sp)
  8117e4:	dcc00115 	stw	r19,4(sp)
  8117e8:	dcc01c15 	stw	r19,112(sp)
  8117ec:	d8c01b15 	stw	r3,108(sp)
  8117f0:	d811883a 	mov	r8,sp
  8117f4:	42000204 	addi	r8,r8,8
  8117f8:	a2c0010c 	andi	r11,r20,4
  8117fc:	583fe426 	beq	r11,zero,811790 <__alt_mem_onchip_mem+0xff809790>
  811800:	8ca7c83a 	sub	r19,r17,r18
  811804:	04ffe20e 	bge	zero,r19,811790 <__alt_mem_onchip_mem+0xff809790>
  811808:	01c00404 	movi	r7,16
  81180c:	3cffcc0e 	bge	r7,r19,811740 <__alt_mem_onchip_mem+0xff809740>
  811810:	02802074 	movhi	r10,129
  811814:	529cdd04 	addi	r10,r10,29556
  811818:	d9001b17 	ldw	r4,108(sp)
  81181c:	da802415 	stw	r10,144(sp)
  811820:	382b883a 	mov	r21,r7
  811824:	050001c4 	movi	r20,7
  811828:	df002017 	ldw	fp,128(sp)
  81182c:	00000506 	br	811844 <___vfiprintf_internal_r+0xdd8>
  811830:	21400084 	addi	r5,r4,2
  811834:	42000204 	addi	r8,r8,8
  811838:	1809883a 	mov	r4,r3
  81183c:	9cfffc04 	addi	r19,r19,-16
  811840:	acffc40e 	bge	r21,r19,811754 <__alt_mem_onchip_mem+0xff809754>
  811844:	10800404 	addi	r2,r2,16
  811848:	20c00044 	addi	r3,r4,1
  81184c:	45800015 	stw	r22,0(r8)
  811850:	45400115 	stw	r21,4(r8)
  811854:	d8801c15 	stw	r2,112(sp)
  811858:	d8c01b15 	stw	r3,108(sp)
  81185c:	a0fff40e 	bge	r20,r3,811830 <__alt_mem_onchip_mem+0xff809830>
  811860:	1000041e 	bne	r2,zero,811874 <___vfiprintf_internal_r+0xe08>
  811864:	01400044 	movi	r5,1
  811868:	0009883a 	mov	r4,zero
  81186c:	d811883a 	mov	r8,sp
  811870:	003ff206 	br	81183c <__alt_mem_onchip_mem+0xff80983c>
  811874:	d9402117 	ldw	r5,132(sp)
  811878:	d9801a04 	addi	r6,sp,104
  81187c:	e009883a 	mov	r4,fp
  811880:	08109580 	call	810958 <__sprint_r.part.0>
  811884:	103fcd1e 	bne	r2,zero,8117bc <__alt_mem_onchip_mem+0xff8097bc>
  811888:	d9001b17 	ldw	r4,108(sp)
  81188c:	d8801c17 	ldw	r2,112(sp)
  811890:	d811883a 	mov	r8,sp
  811894:	21400044 	addi	r5,r4,1
  811898:	003fe806 	br	81183c <__alt_mem_onchip_mem+0xff80983c>
  81189c:	d9402117 	ldw	r5,132(sp)
  8118a0:	d9002017 	ldw	r4,128(sp)
  8118a4:	d9801a04 	addi	r6,sp,104
  8118a8:	d9c02b15 	stw	r7,172(sp)
  8118ac:	db402a15 	stw	r13,168(sp)
  8118b0:	08109580 	call	810958 <__sprint_r.part.0>
  8118b4:	d9c02b17 	ldw	r7,172(sp)
  8118b8:	db402a17 	ldw	r13,168(sp)
  8118bc:	103fbf1e 	bne	r2,zero,8117bc <__alt_mem_onchip_mem+0xff8097bc>
  8118c0:	d9401b17 	ldw	r5,108(sp)
  8118c4:	d8801c17 	ldw	r2,112(sp)
  8118c8:	d811883a 	mov	r8,sp
  8118cc:	29800044 	addi	r6,r5,1
  8118d0:	003dc406 	br	810fe4 <__alt_mem_onchip_mem+0xff808fe4>
  8118d4:	1000d21e 	bne	r2,zero,811c20 <___vfiprintf_internal_r+0x11b4>
  8118d8:	d8c01d87 	ldb	r3,118(sp)
  8118dc:	18009526 	beq	r3,zero,811b34 <___vfiprintf_internal_r+0x10c8>
  8118e0:	00800044 	movi	r2,1
  8118e4:	d8c01d84 	addi	r3,sp,118
  8118e8:	1009883a 	mov	r4,r2
  8118ec:	d8c00015 	stw	r3,0(sp)
  8118f0:	d8800115 	stw	r2,4(sp)
  8118f4:	d811883a 	mov	r8,sp
  8118f8:	200b883a 	mov	r5,r4
  8118fc:	42000204 	addi	r8,r8,8
  811900:	21000044 	addi	r4,r4,1
  811904:	003d9706 	br	810f64 <__alt_mem_onchip_mem+0xff808f64>
  811908:	d9001d04 	addi	r4,sp,116
  81190c:	00800084 	movi	r2,2
  811910:	d9000015 	stw	r4,0(sp)
  811914:	d8800115 	stw	r2,4(sp)
  811918:	1809883a 	mov	r4,r3
  81191c:	d811883a 	mov	r8,sp
  811920:	200b883a 	mov	r5,r4
  811924:	42000204 	addi	r8,r8,8
  811928:	21000044 	addi	r4,r4,1
  81192c:	003f4e06 	br	811668 <__alt_mem_onchip_mem+0xff809668>
  811930:	d8001d85 	stb	zero,118(sp)
  811934:	48005016 	blt	r9,zero,811a78 <___vfiprintf_internal_r+0x100c>
  811938:	00ffdfc4 	movi	r3,-129
  81193c:	94c4b03a 	or	r2,r18,r19
  811940:	a0e8703a 	and	r20,r20,r3
  811944:	103d4426 	beq	r2,zero,810e58 <__alt_mem_onchip_mem+0xff808e58>
  811948:	0039883a 	mov	fp,zero
  81194c:	d9002617 	ldw	r4,152(sp)
  811950:	dd401a04 	addi	r21,sp,104
  811954:	908003cc 	andi	r2,r18,15
  811958:	9806973a 	slli	r3,r19,28
  81195c:	2085883a 	add	r2,r4,r2
  811960:	9024d13a 	srli	r18,r18,4
  811964:	10800003 	ldbu	r2,0(r2)
  811968:	9826d13a 	srli	r19,r19,4
  81196c:	ad7fffc4 	addi	r21,r21,-1
  811970:	1ca4b03a 	or	r18,r3,r18
  811974:	a8800005 	stb	r2,0(r21)
  811978:	94c4b03a 	or	r2,r18,r19
  81197c:	103ff51e 	bne	r2,zero,811954 <__alt_mem_onchip_mem+0xff809954>
  811980:	003e5906 	br	8112e8 <__alt_mem_onchip_mem+0xff8092e8>
  811984:	d9402117 	ldw	r5,132(sp)
  811988:	d9002017 	ldw	r4,128(sp)
  81198c:	d9801a04 	addi	r6,sp,104
  811990:	08109580 	call	810958 <__sprint_r.part.0>
  811994:	103f891e 	bne	r2,zero,8117bc <__alt_mem_onchip_mem+0xff8097bc>
  811998:	d8801c17 	ldw	r2,112(sp)
  81199c:	d811883a 	mov	r8,sp
  8119a0:	003f9506 	br	8117f8 <__alt_mem_onchip_mem+0xff8097f8>
  8119a4:	d9402117 	ldw	r5,132(sp)
  8119a8:	d9002017 	ldw	r4,128(sp)
  8119ac:	d9801a04 	addi	r6,sp,104
  8119b0:	08109580 	call	810958 <__sprint_r.part.0>
  8119b4:	103f811e 	bne	r2,zero,8117bc <__alt_mem_onchip_mem+0xff8097bc>
  8119b8:	d811883a 	mov	r8,sp
  8119bc:	003ced06 	br	810d74 <__alt_mem_onchip_mem+0xff808d74>
  8119c0:	d9402117 	ldw	r5,132(sp)
  8119c4:	d9002017 	ldw	r4,128(sp)
  8119c8:	d9801a04 	addi	r6,sp,104
  8119cc:	da402c15 	stw	r9,176(sp)
  8119d0:	db802a15 	stw	r14,168(sp)
  8119d4:	08109580 	call	810958 <__sprint_r.part.0>
  8119d8:	da402c17 	ldw	r9,176(sp)
  8119dc:	db802a17 	ldw	r14,168(sp)
  8119e0:	103f761e 	bne	r2,zero,8117bc <__alt_mem_onchip_mem+0xff8097bc>
  8119e4:	d9401b17 	ldw	r5,108(sp)
  8119e8:	d8801c17 	ldw	r2,112(sp)
  8119ec:	d811883a 	mov	r8,sp
  8119f0:	29000044 	addi	r4,r5,1
  8119f4:	003d5b06 	br	810f64 <__alt_mem_onchip_mem+0xff808f64>
  8119f8:	d9402117 	ldw	r5,132(sp)
  8119fc:	d9002017 	ldw	r4,128(sp)
  811a00:	d9801a04 	addi	r6,sp,104
  811a04:	da402c15 	stw	r9,176(sp)
  811a08:	08109580 	call	810958 <__sprint_r.part.0>
  811a0c:	da402c17 	ldw	r9,176(sp)
  811a10:	103f6a1e 	bne	r2,zero,8117bc <__alt_mem_onchip_mem+0xff8097bc>
  811a14:	d9401b17 	ldw	r5,108(sp)
  811a18:	d8801c17 	ldw	r2,112(sp)
  811a1c:	d811883a 	mov	r8,sp
  811a20:	29000044 	addi	r4,r5,1
  811a24:	003f1006 	br	811668 <__alt_mem_onchip_mem+0xff809668>
  811a28:	1000c31e 	bne	r2,zero,811d38 <___vfiprintf_internal_r+0x12cc>
  811a2c:	01000044 	movi	r4,1
  811a30:	000b883a 	mov	r5,zero
  811a34:	d811883a 	mov	r8,sp
  811a38:	003f0d06 	br	811670 <__alt_mem_onchip_mem+0xff809670>
  811a3c:	d9402117 	ldw	r5,132(sp)
  811a40:	d9002017 	ldw	r4,128(sp)
  811a44:	d9801a04 	addi	r6,sp,104
  811a48:	08109580 	call	810958 <__sprint_r.part.0>
  811a4c:	103f5b1e 	bne	r2,zero,8117bc <__alt_mem_onchip_mem+0xff8097bc>
  811a50:	d9001b17 	ldw	r4,108(sp)
  811a54:	d8801c17 	ldw	r2,112(sp)
  811a58:	d811883a 	mov	r8,sp
  811a5c:	21000044 	addi	r4,r4,1
  811a60:	003d8006 	br	811064 <__alt_mem_onchip_mem+0xff809064>
  811a64:	01002074 	movhi	r4,129
  811a68:	211c7904 	addi	r4,r4,29156
  811a6c:	d9002615 	stw	r4,152(sp)
  811a70:	d8c02215 	stw	r3,136(sp)
  811a74:	1029883a 	mov	r20,r2
  811a78:	94c4b03a 	or	r2,r18,r19
  811a7c:	103fb21e 	bne	r2,zero,811948 <__alt_mem_onchip_mem+0xff809948>
  811a80:	0039883a 	mov	fp,zero
  811a84:	00800084 	movi	r2,2
  811a88:	003e6b06 	br	811438 <__alt_mem_onchip_mem+0xff809438>
  811a8c:	da802217 	ldw	r10,136(sp)
  811a90:	d8001d85 	stb	zero,118(sp)
  811a94:	0027883a 	mov	r19,zero
  811a98:	50800104 	addi	r2,r10,4
  811a9c:	54800017 	ldw	r18,0(r10)
  811aa0:	483e6016 	blt	r9,zero,811424 <__alt_mem_onchip_mem+0xff809424>
  811aa4:	00ffdfc4 	movi	r3,-129
  811aa8:	d8802215 	stw	r2,136(sp)
  811aac:	a0e8703a 	and	r20,r20,r3
  811ab0:	0039883a 	mov	fp,zero
  811ab4:	903ebb26 	beq	r18,zero,8115a4 <__alt_mem_onchip_mem+0xff8095a4>
  811ab8:	00800244 	movi	r2,9
  811abc:	14bdee36 	bltu	r2,r18,811278 <__alt_mem_onchip_mem+0xff809278>
  811ac0:	003eba06 	br	8115ac <__alt_mem_onchip_mem+0xff8095ac>
  811ac4:	00800c04 	movi	r2,48
  811ac8:	d8c01d45 	stb	r3,117(sp)
  811acc:	d8801d05 	stb	r2,116(sp)
  811ad0:	d8001d85 	stb	zero,118(sp)
  811ad4:	a0c00094 	ori	r3,r20,2
  811ad8:	4800a916 	blt	r9,zero,811d80 <___vfiprintf_internal_r+0x1314>
  811adc:	00bfdfc4 	movi	r2,-129
  811ae0:	a096703a 	and	r11,r20,r2
  811ae4:	5d000094 	ori	r20,r11,2
  811ae8:	0039883a 	mov	fp,zero
  811aec:	003f9706 	br	81194c <__alt_mem_onchip_mem+0xff80994c>
  811af0:	8025883a 	mov	r18,r16
  811af4:	003c2e06 	br	810bb0 <__alt_mem_onchip_mem+0xff808bb0>
  811af8:	00802074 	movhi	r2,129
  811afc:	109c7904 	addi	r2,r2,29156
  811b00:	0039883a 	mov	fp,zero
  811b04:	d8802615 	stw	r2,152(sp)
  811b08:	003f9006 	br	81194c <__alt_mem_onchip_mem+0xff80994c>
  811b0c:	04a5c83a 	sub	r18,zero,r18
  811b10:	07000b44 	movi	fp,45
  811b14:	9004c03a 	cmpne	r2,r18,zero
  811b18:	04e7c83a 	sub	r19,zero,r19
  811b1c:	df001d85 	stb	fp,118(sp)
  811b20:	98a7c83a 	sub	r19,r19,r2
  811b24:	48009f16 	blt	r9,zero,811da4 <___vfiprintf_internal_r+0x1338>
  811b28:	00bfdfc4 	movi	r2,-129
  811b2c:	a0a8703a 	and	r20,r20,r2
  811b30:	003dd006 	br	811274 <__alt_mem_onchip_mem+0xff809274>
  811b34:	70004c26 	beq	r14,zero,811c68 <___vfiprintf_internal_r+0x11fc>
  811b38:	00800084 	movi	r2,2
  811b3c:	d8c01d04 	addi	r3,sp,116
  811b40:	d8c00015 	stw	r3,0(sp)
  811b44:	d8800115 	stw	r2,4(sp)
  811b48:	01000044 	movi	r4,1
  811b4c:	d811883a 	mov	r8,sp
  811b50:	003f7306 	br	811920 <__alt_mem_onchip_mem+0xff809920>
  811b54:	a080100c 	andi	r2,r20,64
  811b58:	da802217 	ldw	r10,136(sp)
  811b5c:	103e0626 	beq	r2,zero,811378 <__alt_mem_onchip_mem+0xff809378>
  811b60:	5480000f 	ldh	r18,0(r10)
  811b64:	52800104 	addi	r10,r10,4
  811b68:	da802215 	stw	r10,136(sp)
  811b6c:	9027d7fa 	srai	r19,r18,31
  811b70:	9805883a 	mov	r2,r19
  811b74:	003db806 	br	811258 <__alt_mem_onchip_mem+0xff809258>
  811b78:	a080040c 	andi	r2,r20,16
  811b7c:	1000091e 	bne	r2,zero,811ba4 <___vfiprintf_internal_r+0x1138>
  811b80:	a2c0100c 	andi	r11,r20,64
  811b84:	58000726 	beq	r11,zero,811ba4 <___vfiprintf_internal_r+0x1138>
  811b88:	da802217 	ldw	r10,136(sp)
  811b8c:	50800017 	ldw	r2,0(r10)
  811b90:	52800104 	addi	r10,r10,4
  811b94:	da802215 	stw	r10,136(sp)
  811b98:	da802317 	ldw	r10,140(sp)
  811b9c:	1280000d 	sth	r10,0(r2)
  811ba0:	003be706 	br	810b40 <__alt_mem_onchip_mem+0xff808b40>
  811ba4:	da802217 	ldw	r10,136(sp)
  811ba8:	50800017 	ldw	r2,0(r10)
  811bac:	52800104 	addi	r10,r10,4
  811bb0:	da802215 	stw	r10,136(sp)
  811bb4:	da802317 	ldw	r10,140(sp)
  811bb8:	12800015 	stw	r10,0(r2)
  811bbc:	003be006 	br	810b40 <__alt_mem_onchip_mem+0xff808b40>
  811bc0:	a080100c 	andi	r2,r20,64
  811bc4:	da802217 	ldw	r10,136(sp)
  811bc8:	10003026 	beq	r2,zero,811c8c <___vfiprintf_internal_r+0x1220>
  811bcc:	5480000b 	ldhu	r18,0(r10)
  811bd0:	52800104 	addi	r10,r10,4
  811bd4:	0027883a 	mov	r19,zero
  811bd8:	da802215 	stw	r10,136(sp)
  811bdc:	003d8006 	br	8111e0 <__alt_mem_onchip_mem+0xff8091e0>
  811be0:	80c00007 	ldb	r3,0(r16)
  811be4:	003c0006 	br	810be8 <__alt_mem_onchip_mem+0xff808be8>
  811be8:	a080100c 	andi	r2,r20,64
  811bec:	d8001d85 	stb	zero,118(sp)
  811bf0:	da802217 	ldw	r10,136(sp)
  811bf4:	1000201e 	bne	r2,zero,811c78 <___vfiprintf_internal_r+0x120c>
  811bf8:	50800104 	addi	r2,r10,4
  811bfc:	54800017 	ldw	r18,0(r10)
  811c00:	0027883a 	mov	r19,zero
  811c04:	483def0e 	bge	r9,zero,8113c4 <__alt_mem_onchip_mem+0xff8093c4>
  811c08:	94c6b03a 	or	r3,r18,r19
  811c0c:	d8802215 	stw	r2,136(sp)
  811c10:	183d4e1e 	bne	r3,zero,81114c <__alt_mem_onchip_mem+0xff80914c>
  811c14:	0039883a 	mov	fp,zero
  811c18:	0005883a 	mov	r2,zero
  811c1c:	003e0606 	br	811438 <__alt_mem_onchip_mem+0xff809438>
  811c20:	d9402117 	ldw	r5,132(sp)
  811c24:	d9002017 	ldw	r4,128(sp)
  811c28:	d9801a04 	addi	r6,sp,104
  811c2c:	da402c15 	stw	r9,176(sp)
  811c30:	db802a15 	stw	r14,168(sp)
  811c34:	08109580 	call	810958 <__sprint_r.part.0>
  811c38:	da402c17 	ldw	r9,176(sp)
  811c3c:	db802a17 	ldw	r14,168(sp)
  811c40:	103ede1e 	bne	r2,zero,8117bc <__alt_mem_onchip_mem+0xff8097bc>
  811c44:	d9401b17 	ldw	r5,108(sp)
  811c48:	d8801c17 	ldw	r2,112(sp)
  811c4c:	d811883a 	mov	r8,sp
  811c50:	29000044 	addi	r4,r5,1
  811c54:	003e7406 	br	811628 <__alt_mem_onchip_mem+0xff809628>
  811c58:	00bfffc4 	movi	r2,-1
  811c5c:	003c5806 	br	810dc0 <__alt_mem_onchip_mem+0xff808dc0>
  811c60:	d811883a 	mov	r8,sp
  811c64:	003ee806 	br	811808 <__alt_mem_onchip_mem+0xff809808>
  811c68:	000b883a 	mov	r5,zero
  811c6c:	01000044 	movi	r4,1
  811c70:	d811883a 	mov	r8,sp
  811c74:	003e7c06 	br	811668 <__alt_mem_onchip_mem+0xff809668>
  811c78:	50800104 	addi	r2,r10,4
  811c7c:	5480000b 	ldhu	r18,0(r10)
  811c80:	0027883a 	mov	r19,zero
  811c84:	483dcf0e 	bge	r9,zero,8113c4 <__alt_mem_onchip_mem+0xff8093c4>
  811c88:	003fdf06 	br	811c08 <__alt_mem_onchip_mem+0xff809c08>
  811c8c:	54800017 	ldw	r18,0(r10)
  811c90:	52800104 	addi	r10,r10,4
  811c94:	0027883a 	mov	r19,zero
  811c98:	da802215 	stw	r10,136(sp)
  811c9c:	003d5006 	br	8111e0 <__alt_mem_onchip_mem+0xff8091e0>
  811ca0:	50800104 	addi	r2,r10,4
  811ca4:	5480000b 	ldhu	r18,0(r10)
  811ca8:	0027883a 	mov	r19,zero
  811cac:	483f7d0e 	bge	r9,zero,811aa4 <__alt_mem_onchip_mem+0xff809aa4>
  811cb0:	003ddc06 	br	811424 <__alt_mem_onchip_mem+0xff809424>
  811cb4:	d8c02215 	stw	r3,136(sp)
  811cb8:	0039883a 	mov	fp,zero
  811cbc:	003ddb06 	br	81142c <__alt_mem_onchip_mem+0xff80942c>
  811cc0:	02802074 	movhi	r10,129
  811cc4:	529cd904 	addi	r10,r10,29540
  811cc8:	da802415 	stw	r10,144(sp)
  811ccc:	003e8306 	br	8116dc <__alt_mem_onchip_mem+0xff8096dc>
  811cd0:	d8801c17 	ldw	r2,112(sp)
  811cd4:	dd002117 	ldw	r20,132(sp)
  811cd8:	103eb926 	beq	r2,zero,8117c0 <__alt_mem_onchip_mem+0xff8097c0>
  811cdc:	d9002017 	ldw	r4,128(sp)
  811ce0:	d9801a04 	addi	r6,sp,104
  811ce4:	a00b883a 	mov	r5,r20
  811ce8:	08109580 	call	810958 <__sprint_r.part.0>
  811cec:	003eb406 	br	8117c0 <__alt_mem_onchip_mem+0xff8097c0>
  811cf0:	80c00043 	ldbu	r3,1(r16)
  811cf4:	a5000814 	ori	r20,r20,32
  811cf8:	84000044 	addi	r16,r16,1
  811cfc:	18c03fcc 	andi	r3,r3,255
  811d00:	18c0201c 	xori	r3,r3,128
  811d04:	18ffe004 	addi	r3,r3,-128
  811d08:	003bb706 	br	810be8 <__alt_mem_onchip_mem+0xff808be8>
  811d0c:	a809883a 	mov	r4,r21
  811d10:	d8c02a15 	stw	r3,168(sp)
  811d14:	da002b15 	stw	r8,172(sp)
  811d18:	080a8100 	call	80a810 <strlen>
  811d1c:	d8c02a17 	ldw	r3,168(sp)
  811d20:	1027883a 	mov	r19,r2
  811d24:	df001d83 	ldbu	fp,118(sp)
  811d28:	d8c02215 	stw	r3,136(sp)
  811d2c:	0013883a 	mov	r9,zero
  811d30:	da002b17 	ldw	r8,172(sp)
  811d34:	003c4d06 	br	810e6c <__alt_mem_onchip_mem+0xff808e6c>
  811d38:	d9402117 	ldw	r5,132(sp)
  811d3c:	d9002017 	ldw	r4,128(sp)
  811d40:	d9801a04 	addi	r6,sp,104
  811d44:	da402c15 	stw	r9,176(sp)
  811d48:	08109580 	call	810958 <__sprint_r.part.0>
  811d4c:	da402c17 	ldw	r9,176(sp)
  811d50:	103e9a1e 	bne	r2,zero,8117bc <__alt_mem_onchip_mem+0xff8097bc>
  811d54:	d9401b17 	ldw	r5,108(sp)
  811d58:	d8801c17 	ldw	r2,112(sp)
  811d5c:	d811883a 	mov	r8,sp
  811d60:	29000044 	addi	r4,r5,1
  811d64:	003e4206 	br	811670 <__alt_mem_onchip_mem+0xff809670>
  811d68:	d9401b17 	ldw	r5,108(sp)
  811d6c:	01002074 	movhi	r4,129
  811d70:	211cdd04 	addi	r4,r4,29556
  811d74:	d9002415 	stw	r4,144(sp)
  811d78:	29400044 	addi	r5,r5,1
  811d7c:	003c6d06 	br	810f34 <__alt_mem_onchip_mem+0xff808f34>
  811d80:	0039883a 	mov	fp,zero
  811d84:	00800084 	movi	r2,2
  811d88:	10803fcc 	andi	r2,r2,255
  811d8c:	01000044 	movi	r4,1
  811d90:	11001e26 	beq	r2,r4,811e0c <___vfiprintf_internal_r+0x13a0>
  811d94:	01000084 	movi	r4,2
  811d98:	11001e1e 	bne	r2,r4,811e14 <___vfiprintf_internal_r+0x13a8>
  811d9c:	1829883a 	mov	r20,r3
  811da0:	003eea06 	br	81194c <__alt_mem_onchip_mem+0xff80994c>
  811da4:	a007883a 	mov	r3,r20
  811da8:	00800044 	movi	r2,1
  811dac:	003ff606 	br	811d88 <__alt_mem_onchip_mem+0xff809d88>
  811db0:	00800184 	movi	r2,6
  811db4:	1240012e 	bgeu	r2,r9,811dbc <___vfiprintf_internal_r+0x1350>
  811db8:	1013883a 	mov	r9,r2
  811dbc:	4827883a 	mov	r19,r9
  811dc0:	4825883a 	mov	r18,r9
  811dc4:	48001516 	blt	r9,zero,811e1c <___vfiprintf_internal_r+0x13b0>
  811dc8:	05402074 	movhi	r21,129
  811dcc:	d8c02215 	stw	r3,136(sp)
  811dd0:	ad5c7e04 	addi	r21,r21,29176
  811dd4:	003d1406 	br	811228 <__alt_mem_onchip_mem+0xff809228>
  811dd8:	02802074 	movhi	r10,129
  811ddc:	529cd904 	addi	r10,r10,29540
  811de0:	da802415 	stw	r10,144(sp)
  811de4:	200d883a 	mov	r6,r4
  811de8:	003c9106 	br	811030 <__alt_mem_onchip_mem+0xff809030>
  811dec:	5021883a 	mov	r16,r10
  811df0:	0013883a 	mov	r9,zero
  811df4:	003b7d06 	br	810bec <__alt_mem_onchip_mem+0xff808bec>
  811df8:	4827883a 	mov	r19,r9
  811dfc:	df001d83 	ldbu	fp,118(sp)
  811e00:	d8c02215 	stw	r3,136(sp)
  811e04:	0013883a 	mov	r9,zero
  811e08:	003c1806 	br	810e6c <__alt_mem_onchip_mem+0xff808e6c>
  811e0c:	1829883a 	mov	r20,r3
  811e10:	003d1806 	br	811274 <__alt_mem_onchip_mem+0xff809274>
  811e14:	1829883a 	mov	r20,r3
  811e18:	003ccd06 	br	811150 <__alt_mem_onchip_mem+0xff809150>
  811e1c:	0025883a 	mov	r18,zero
  811e20:	003fe906 	br	811dc8 <__alt_mem_onchip_mem+0xff809dc8>
  811e24:	d8802217 	ldw	r2,136(sp)
  811e28:	80c00043 	ldbu	r3,1(r16)
  811e2c:	5021883a 	mov	r16,r10
  811e30:	12400017 	ldw	r9,0(r2)
  811e34:	10800104 	addi	r2,r2,4
  811e38:	d8802215 	stw	r2,136(sp)
  811e3c:	483faf0e 	bge	r9,zero,811cfc <__alt_mem_onchip_mem+0xff809cfc>
  811e40:	18c03fcc 	andi	r3,r3,255
  811e44:	18c0201c 	xori	r3,r3,128
  811e48:	027fffc4 	movi	r9,-1
  811e4c:	18ffe004 	addi	r3,r3,-128
  811e50:	003b6506 	br	810be8 <__alt_mem_onchip_mem+0xff808be8>
  811e54:	d9c01d85 	stb	r7,118(sp)
  811e58:	003ca006 	br	8110dc <__alt_mem_onchip_mem+0xff8090dc>
  811e5c:	d9c01d85 	stb	r7,118(sp)
  811e60:	003cad06 	br	811118 <__alt_mem_onchip_mem+0xff809118>
  811e64:	d9c01d85 	stb	r7,118(sp)
  811e68:	003d7d06 	br	811460 <__alt_mem_onchip_mem+0xff809460>
  811e6c:	d9c01d85 	stb	r7,118(sp)
  811e70:	003d5f06 	br	8113f0 <__alt_mem_onchip_mem+0xff8093f0>
  811e74:	a080004c 	andi	r2,r20,1
  811e78:	0039883a 	mov	fp,zero
  811e7c:	10000526 	beq	r2,zero,811e94 <___vfiprintf_internal_r+0x1428>
  811e80:	00800c04 	movi	r2,48
  811e84:	d88019c5 	stb	r2,103(sp)
  811e88:	dcc02717 	ldw	r19,156(sp)
  811e8c:	dd4019c4 	addi	r21,sp,103
  811e90:	003bf606 	br	810e6c <__alt_mem_onchip_mem+0xff808e6c>
  811e94:	0027883a 	mov	r19,zero
  811e98:	dd401a04 	addi	r21,sp,104
  811e9c:	003bf306 	br	810e6c <__alt_mem_onchip_mem+0xff808e6c>
  811ea0:	d9c01d85 	stb	r7,118(sp)
  811ea4:	003dc806 	br	8115c8 <__alt_mem_onchip_mem+0xff8095c8>
  811ea8:	d9c01d85 	stb	r7,118(sp)
  811eac:	003d3a06 	br	811398 <__alt_mem_onchip_mem+0xff809398>
  811eb0:	d9c01d85 	stb	r7,118(sp)
  811eb4:	003d2a06 	br	811360 <__alt_mem_onchip_mem+0xff809360>
  811eb8:	d9c01d85 	stb	r7,118(sp)
  811ebc:	003cde06 	br	811238 <__alt_mem_onchip_mem+0xff809238>
  811ec0:	d9c01d85 	stb	r7,118(sp)
  811ec4:	003cbc06 	br	8111b8 <__alt_mem_onchip_mem+0xff8091b8>

00811ec8 <__vfiprintf_internal>:
  811ec8:	008020b4 	movhi	r2,130
  811ecc:	10a4ba04 	addi	r2,r2,-27928
  811ed0:	300f883a 	mov	r7,r6
  811ed4:	280d883a 	mov	r6,r5
  811ed8:	200b883a 	mov	r5,r4
  811edc:	11000017 	ldw	r4,0(r2)
  811ee0:	0810a6c1 	jmpi	810a6c <___vfiprintf_internal_r>

00811ee4 <__sbprintf>:
  811ee4:	2880030b 	ldhu	r2,12(r5)
  811ee8:	2ac01917 	ldw	r11,100(r5)
  811eec:	2a80038b 	ldhu	r10,14(r5)
  811ef0:	2a400717 	ldw	r9,28(r5)
  811ef4:	2a000917 	ldw	r8,36(r5)
  811ef8:	defee204 	addi	sp,sp,-1144
  811efc:	00c10004 	movi	r3,1024
  811f00:	dc011a15 	stw	r16,1128(sp)
  811f04:	10bfff4c 	andi	r2,r2,65533
  811f08:	2821883a 	mov	r16,r5
  811f0c:	d8cb883a 	add	r5,sp,r3
  811f10:	dc811c15 	stw	r18,1136(sp)
  811f14:	dc411b15 	stw	r17,1132(sp)
  811f18:	dfc11d15 	stw	ra,1140(sp)
  811f1c:	2025883a 	mov	r18,r4
  811f20:	d881030d 	sth	r2,1036(sp)
  811f24:	dac11915 	stw	r11,1124(sp)
  811f28:	da81038d 	sth	r10,1038(sp)
  811f2c:	da410715 	stw	r9,1052(sp)
  811f30:	da010915 	stw	r8,1060(sp)
  811f34:	dec10015 	stw	sp,1024(sp)
  811f38:	dec10415 	stw	sp,1040(sp)
  811f3c:	d8c10215 	stw	r3,1032(sp)
  811f40:	d8c10515 	stw	r3,1044(sp)
  811f44:	d8010615 	stw	zero,1048(sp)
  811f48:	0810a6c0 	call	810a6c <___vfiprintf_internal_r>
  811f4c:	1023883a 	mov	r17,r2
  811f50:	10000416 	blt	r2,zero,811f64 <__sbprintf+0x80>
  811f54:	d9410004 	addi	r5,sp,1024
  811f58:	9009883a 	mov	r4,r18
  811f5c:	08092240 	call	809224 <_fflush_r>
  811f60:	10000d1e 	bne	r2,zero,811f98 <__sbprintf+0xb4>
  811f64:	d881030b 	ldhu	r2,1036(sp)
  811f68:	1080100c 	andi	r2,r2,64
  811f6c:	10000326 	beq	r2,zero,811f7c <__sbprintf+0x98>
  811f70:	8080030b 	ldhu	r2,12(r16)
  811f74:	10801014 	ori	r2,r2,64
  811f78:	8080030d 	sth	r2,12(r16)
  811f7c:	8805883a 	mov	r2,r17
  811f80:	dfc11d17 	ldw	ra,1140(sp)
  811f84:	dc811c17 	ldw	r18,1136(sp)
  811f88:	dc411b17 	ldw	r17,1132(sp)
  811f8c:	dc011a17 	ldw	r16,1128(sp)
  811f90:	dec11e04 	addi	sp,sp,1144
  811f94:	f800283a 	ret
  811f98:	047fffc4 	movi	r17,-1
  811f9c:	003ff106 	br	811f64 <__alt_mem_onchip_mem+0xff809f64>

00811fa0 <_calloc_r>:
  811fa0:	298b383a 	mul	r5,r5,r6
  811fa4:	defffe04 	addi	sp,sp,-8
  811fa8:	dfc00115 	stw	ra,4(sp)
  811fac:	dc000015 	stw	r16,0(sp)
  811fb0:	0809c0c0 	call	809c0c <_malloc_r>
  811fb4:	10002926 	beq	r2,zero,81205c <_calloc_r+0xbc>
  811fb8:	11bfff17 	ldw	r6,-4(r2)
  811fbc:	1021883a 	mov	r16,r2
  811fc0:	00bfff04 	movi	r2,-4
  811fc4:	308c703a 	and	r6,r6,r2
  811fc8:	00c00904 	movi	r3,36
  811fcc:	308d883a 	add	r6,r6,r2
  811fd0:	19801636 	bltu	r3,r6,81202c <_calloc_r+0x8c>
  811fd4:	008004c4 	movi	r2,19
  811fd8:	11800b2e 	bgeu	r2,r6,812008 <_calloc_r+0x68>
  811fdc:	80000015 	stw	zero,0(r16)
  811fe0:	80000115 	stw	zero,4(r16)
  811fe4:	008006c4 	movi	r2,27
  811fe8:	11801a2e 	bgeu	r2,r6,812054 <_calloc_r+0xb4>
  811fec:	80000215 	stw	zero,8(r16)
  811ff0:	80000315 	stw	zero,12(r16)
  811ff4:	30c0151e 	bne	r6,r3,81204c <_calloc_r+0xac>
  811ff8:	80000415 	stw	zero,16(r16)
  811ffc:	80800604 	addi	r2,r16,24
  812000:	80000515 	stw	zero,20(r16)
  812004:	00000106 	br	81200c <_calloc_r+0x6c>
  812008:	8005883a 	mov	r2,r16
  81200c:	10000015 	stw	zero,0(r2)
  812010:	10000115 	stw	zero,4(r2)
  812014:	10000215 	stw	zero,8(r2)
  812018:	8005883a 	mov	r2,r16
  81201c:	dfc00117 	ldw	ra,4(sp)
  812020:	dc000017 	ldw	r16,0(sp)
  812024:	dec00204 	addi	sp,sp,8
  812028:	f800283a 	ret
  81202c:	000b883a 	mov	r5,zero
  812030:	8009883a 	mov	r4,r16
  812034:	080a4180 	call	80a418 <memset>
  812038:	8005883a 	mov	r2,r16
  81203c:	dfc00117 	ldw	ra,4(sp)
  812040:	dc000017 	ldw	r16,0(sp)
  812044:	dec00204 	addi	sp,sp,8
  812048:	f800283a 	ret
  81204c:	80800404 	addi	r2,r16,16
  812050:	003fee06 	br	81200c <__alt_mem_onchip_mem+0xff80a00c>
  812054:	80800204 	addi	r2,r16,8
  812058:	003fec06 	br	81200c <__alt_mem_onchip_mem+0xff80a00c>
  81205c:	0005883a 	mov	r2,zero
  812060:	003fee06 	br	81201c <__alt_mem_onchip_mem+0xff80a01c>

00812064 <__fputwc>:
  812064:	defff804 	addi	sp,sp,-32
  812068:	dcc00415 	stw	r19,16(sp)
  81206c:	dc800315 	stw	r18,12(sp)
  812070:	dc000115 	stw	r16,4(sp)
  812074:	dfc00715 	stw	ra,28(sp)
  812078:	dd400615 	stw	r21,24(sp)
  81207c:	dd000515 	stw	r20,20(sp)
  812080:	dc400215 	stw	r17,8(sp)
  812084:	2027883a 	mov	r19,r4
  812088:	2825883a 	mov	r18,r5
  81208c:	3021883a 	mov	r16,r6
  812090:	080ec500 	call	80ec50 <__locale_mb_cur_max>
  812094:	00c00044 	movi	r3,1
  812098:	10c03e26 	beq	r2,r3,812194 <__fputwc+0x130>
  81209c:	81c01704 	addi	r7,r16,92
  8120a0:	900d883a 	mov	r6,r18
  8120a4:	d80b883a 	mov	r5,sp
  8120a8:	9809883a 	mov	r4,r19
  8120ac:	08124740 	call	812474 <_wcrtomb_r>
  8120b0:	1029883a 	mov	r20,r2
  8120b4:	00bfffc4 	movi	r2,-1
  8120b8:	a0802026 	beq	r20,r2,81213c <__fputwc+0xd8>
  8120bc:	d9400003 	ldbu	r5,0(sp)
  8120c0:	a0001c26 	beq	r20,zero,812134 <__fputwc+0xd0>
  8120c4:	0023883a 	mov	r17,zero
  8120c8:	05400284 	movi	r21,10
  8120cc:	00000906 	br	8120f4 <__fputwc+0x90>
  8120d0:	80800017 	ldw	r2,0(r16)
  8120d4:	11400005 	stb	r5,0(r2)
  8120d8:	80c00017 	ldw	r3,0(r16)
  8120dc:	18c00044 	addi	r3,r3,1
  8120e0:	80c00015 	stw	r3,0(r16)
  8120e4:	8c400044 	addi	r17,r17,1
  8120e8:	dc45883a 	add	r2,sp,r17
  8120ec:	8d00112e 	bgeu	r17,r20,812134 <__fputwc+0xd0>
  8120f0:	11400003 	ldbu	r5,0(r2)
  8120f4:	80c00217 	ldw	r3,8(r16)
  8120f8:	18ffffc4 	addi	r3,r3,-1
  8120fc:	80c00215 	stw	r3,8(r16)
  812100:	183ff30e 	bge	r3,zero,8120d0 <__alt_mem_onchip_mem+0xff80a0d0>
  812104:	80800617 	ldw	r2,24(r16)
  812108:	18801916 	blt	r3,r2,812170 <__fputwc+0x10c>
  81210c:	80800017 	ldw	r2,0(r16)
  812110:	11400005 	stb	r5,0(r2)
  812114:	80800017 	ldw	r2,0(r16)
  812118:	10c00003 	ldbu	r3,0(r2)
  81211c:	10800044 	addi	r2,r2,1
  812120:	1d402326 	beq	r3,r21,8121b0 <__fputwc+0x14c>
  812124:	80800015 	stw	r2,0(r16)
  812128:	8c400044 	addi	r17,r17,1
  81212c:	dc45883a 	add	r2,sp,r17
  812130:	8d3fef36 	bltu	r17,r20,8120f0 <__alt_mem_onchip_mem+0xff80a0f0>
  812134:	9005883a 	mov	r2,r18
  812138:	00000406 	br	81214c <__fputwc+0xe8>
  81213c:	80c0030b 	ldhu	r3,12(r16)
  812140:	a005883a 	mov	r2,r20
  812144:	18c01014 	ori	r3,r3,64
  812148:	80c0030d 	sth	r3,12(r16)
  81214c:	dfc00717 	ldw	ra,28(sp)
  812150:	dd400617 	ldw	r21,24(sp)
  812154:	dd000517 	ldw	r20,20(sp)
  812158:	dcc00417 	ldw	r19,16(sp)
  81215c:	dc800317 	ldw	r18,12(sp)
  812160:	dc400217 	ldw	r17,8(sp)
  812164:	dc000117 	ldw	r16,4(sp)
  812168:	dec00804 	addi	sp,sp,32
  81216c:	f800283a 	ret
  812170:	800d883a 	mov	r6,r16
  812174:	29403fcc 	andi	r5,r5,255
  812178:	9809883a 	mov	r4,r19
  81217c:	081231c0 	call	81231c <__swbuf_r>
  812180:	10bfffe0 	cmpeqi	r2,r2,-1
  812184:	10803fcc 	andi	r2,r2,255
  812188:	103fd626 	beq	r2,zero,8120e4 <__alt_mem_onchip_mem+0xff80a0e4>
  81218c:	00bfffc4 	movi	r2,-1
  812190:	003fee06 	br	81214c <__alt_mem_onchip_mem+0xff80a14c>
  812194:	90ffffc4 	addi	r3,r18,-1
  812198:	01003f84 	movi	r4,254
  81219c:	20ffbf36 	bltu	r4,r3,81209c <__alt_mem_onchip_mem+0xff80a09c>
  8121a0:	900b883a 	mov	r5,r18
  8121a4:	dc800005 	stb	r18,0(sp)
  8121a8:	1029883a 	mov	r20,r2
  8121ac:	003fc506 	br	8120c4 <__alt_mem_onchip_mem+0xff80a0c4>
  8121b0:	800d883a 	mov	r6,r16
  8121b4:	a80b883a 	mov	r5,r21
  8121b8:	9809883a 	mov	r4,r19
  8121bc:	081231c0 	call	81231c <__swbuf_r>
  8121c0:	10bfffe0 	cmpeqi	r2,r2,-1
  8121c4:	003fef06 	br	812184 <__alt_mem_onchip_mem+0xff80a184>

008121c8 <_fputwc_r>:
  8121c8:	3080030b 	ldhu	r2,12(r6)
  8121cc:	10c8000c 	andi	r3,r2,8192
  8121d0:	1800051e 	bne	r3,zero,8121e8 <_fputwc_r+0x20>
  8121d4:	30c01917 	ldw	r3,100(r6)
  8121d8:	10880014 	ori	r2,r2,8192
  8121dc:	3080030d 	sth	r2,12(r6)
  8121e0:	18880014 	ori	r2,r3,8192
  8121e4:	30801915 	stw	r2,100(r6)
  8121e8:	08120641 	jmpi	812064 <__fputwc>

008121ec <fputwc>:
  8121ec:	008020b4 	movhi	r2,130
  8121f0:	defffc04 	addi	sp,sp,-16
  8121f4:	10a4ba04 	addi	r2,r2,-27928
  8121f8:	dc000115 	stw	r16,4(sp)
  8121fc:	14000017 	ldw	r16,0(r2)
  812200:	dc400215 	stw	r17,8(sp)
  812204:	dfc00315 	stw	ra,12(sp)
  812208:	2023883a 	mov	r17,r4
  81220c:	80000226 	beq	r16,zero,812218 <fputwc+0x2c>
  812210:	80800e17 	ldw	r2,56(r16)
  812214:	10001026 	beq	r2,zero,812258 <fputwc+0x6c>
  812218:	2880030b 	ldhu	r2,12(r5)
  81221c:	10c8000c 	andi	r3,r2,8192
  812220:	1800051e 	bne	r3,zero,812238 <fputwc+0x4c>
  812224:	28c01917 	ldw	r3,100(r5)
  812228:	10880014 	ori	r2,r2,8192
  81222c:	2880030d 	sth	r2,12(r5)
  812230:	18880014 	ori	r2,r3,8192
  812234:	28801915 	stw	r2,100(r5)
  812238:	280d883a 	mov	r6,r5
  81223c:	8009883a 	mov	r4,r16
  812240:	880b883a 	mov	r5,r17
  812244:	dfc00317 	ldw	ra,12(sp)
  812248:	dc400217 	ldw	r17,8(sp)
  81224c:	dc000117 	ldw	r16,4(sp)
  812250:	dec00404 	addi	sp,sp,16
  812254:	08120641 	jmpi	812064 <__fputwc>
  812258:	8009883a 	mov	r4,r16
  81225c:	d9400015 	stw	r5,0(sp)
  812260:	08096000 	call	809600 <__sinit>
  812264:	d9400017 	ldw	r5,0(sp)
  812268:	003feb06 	br	812218 <__alt_mem_onchip_mem+0xff80a218>

0081226c <_fstat_r>:
  81226c:	defffd04 	addi	sp,sp,-12
  812270:	2805883a 	mov	r2,r5
  812274:	dc000015 	stw	r16,0(sp)
  812278:	040020b4 	movhi	r16,130
  81227c:	dc400115 	stw	r17,4(sp)
  812280:	842c0b04 	addi	r16,r16,-20436
  812284:	2023883a 	mov	r17,r4
  812288:	300b883a 	mov	r5,r6
  81228c:	1009883a 	mov	r4,r2
  812290:	dfc00215 	stw	ra,8(sp)
  812294:	80000015 	stw	zero,0(r16)
  812298:	0812e100 	call	812e10 <fstat>
  81229c:	00ffffc4 	movi	r3,-1
  8122a0:	10c00526 	beq	r2,r3,8122b8 <_fstat_r+0x4c>
  8122a4:	dfc00217 	ldw	ra,8(sp)
  8122a8:	dc400117 	ldw	r17,4(sp)
  8122ac:	dc000017 	ldw	r16,0(sp)
  8122b0:	dec00304 	addi	sp,sp,12
  8122b4:	f800283a 	ret
  8122b8:	80c00017 	ldw	r3,0(r16)
  8122bc:	183ff926 	beq	r3,zero,8122a4 <__alt_mem_onchip_mem+0xff80a2a4>
  8122c0:	88c00015 	stw	r3,0(r17)
  8122c4:	003ff706 	br	8122a4 <__alt_mem_onchip_mem+0xff80a2a4>

008122c8 <_isatty_r>:
  8122c8:	defffd04 	addi	sp,sp,-12
  8122cc:	dc000015 	stw	r16,0(sp)
  8122d0:	040020b4 	movhi	r16,130
  8122d4:	dc400115 	stw	r17,4(sp)
  8122d8:	842c0b04 	addi	r16,r16,-20436
  8122dc:	2023883a 	mov	r17,r4
  8122e0:	2809883a 	mov	r4,r5
  8122e4:	dfc00215 	stw	ra,8(sp)
  8122e8:	80000015 	stw	zero,0(r16)
  8122ec:	0812efc0 	call	812efc <isatty>
  8122f0:	00ffffc4 	movi	r3,-1
  8122f4:	10c00526 	beq	r2,r3,81230c <_isatty_r+0x44>
  8122f8:	dfc00217 	ldw	ra,8(sp)
  8122fc:	dc400117 	ldw	r17,4(sp)
  812300:	dc000017 	ldw	r16,0(sp)
  812304:	dec00304 	addi	sp,sp,12
  812308:	f800283a 	ret
  81230c:	80c00017 	ldw	r3,0(r16)
  812310:	183ff926 	beq	r3,zero,8122f8 <__alt_mem_onchip_mem+0xff80a2f8>
  812314:	88c00015 	stw	r3,0(r17)
  812318:	003ff706 	br	8122f8 <__alt_mem_onchip_mem+0xff80a2f8>

0081231c <__swbuf_r>:
  81231c:	defffb04 	addi	sp,sp,-20
  812320:	dcc00315 	stw	r19,12(sp)
  812324:	dc800215 	stw	r18,8(sp)
  812328:	dc000015 	stw	r16,0(sp)
  81232c:	dfc00415 	stw	ra,16(sp)
  812330:	dc400115 	stw	r17,4(sp)
  812334:	2025883a 	mov	r18,r4
  812338:	2827883a 	mov	r19,r5
  81233c:	3021883a 	mov	r16,r6
  812340:	20000226 	beq	r4,zero,81234c <__swbuf_r+0x30>
  812344:	20800e17 	ldw	r2,56(r4)
  812348:	10004226 	beq	r2,zero,812454 <__swbuf_r+0x138>
  81234c:	80800617 	ldw	r2,24(r16)
  812350:	8100030b 	ldhu	r4,12(r16)
  812354:	80800215 	stw	r2,8(r16)
  812358:	2080020c 	andi	r2,r4,8
  81235c:	10003626 	beq	r2,zero,812438 <__swbuf_r+0x11c>
  812360:	80c00417 	ldw	r3,16(r16)
  812364:	18003426 	beq	r3,zero,812438 <__swbuf_r+0x11c>
  812368:	2088000c 	andi	r2,r4,8192
  81236c:	9c403fcc 	andi	r17,r19,255
  812370:	10001a26 	beq	r2,zero,8123dc <__swbuf_r+0xc0>
  812374:	80800017 	ldw	r2,0(r16)
  812378:	81000517 	ldw	r4,20(r16)
  81237c:	10c7c83a 	sub	r3,r2,r3
  812380:	1900200e 	bge	r3,r4,812404 <__swbuf_r+0xe8>
  812384:	18c00044 	addi	r3,r3,1
  812388:	81000217 	ldw	r4,8(r16)
  81238c:	11400044 	addi	r5,r2,1
  812390:	81400015 	stw	r5,0(r16)
  812394:	213fffc4 	addi	r4,r4,-1
  812398:	81000215 	stw	r4,8(r16)
  81239c:	14c00005 	stb	r19,0(r2)
  8123a0:	80800517 	ldw	r2,20(r16)
  8123a4:	10c01e26 	beq	r2,r3,812420 <__swbuf_r+0x104>
  8123a8:	8080030b 	ldhu	r2,12(r16)
  8123ac:	1080004c 	andi	r2,r2,1
  8123b0:	10000226 	beq	r2,zero,8123bc <__swbuf_r+0xa0>
  8123b4:	00800284 	movi	r2,10
  8123b8:	88801926 	beq	r17,r2,812420 <__swbuf_r+0x104>
  8123bc:	8805883a 	mov	r2,r17
  8123c0:	dfc00417 	ldw	ra,16(sp)
  8123c4:	dcc00317 	ldw	r19,12(sp)
  8123c8:	dc800217 	ldw	r18,8(sp)
  8123cc:	dc400117 	ldw	r17,4(sp)
  8123d0:	dc000017 	ldw	r16,0(sp)
  8123d4:	dec00504 	addi	sp,sp,20
  8123d8:	f800283a 	ret
  8123dc:	81401917 	ldw	r5,100(r16)
  8123e0:	00b7ffc4 	movi	r2,-8193
  8123e4:	21080014 	ori	r4,r4,8192
  8123e8:	2884703a 	and	r2,r5,r2
  8123ec:	80801915 	stw	r2,100(r16)
  8123f0:	80800017 	ldw	r2,0(r16)
  8123f4:	8100030d 	sth	r4,12(r16)
  8123f8:	81000517 	ldw	r4,20(r16)
  8123fc:	10c7c83a 	sub	r3,r2,r3
  812400:	193fe016 	blt	r3,r4,812384 <__alt_mem_onchip_mem+0xff80a384>
  812404:	800b883a 	mov	r5,r16
  812408:	9009883a 	mov	r4,r18
  81240c:	08092240 	call	809224 <_fflush_r>
  812410:	1000071e 	bne	r2,zero,812430 <__swbuf_r+0x114>
  812414:	80800017 	ldw	r2,0(r16)
  812418:	00c00044 	movi	r3,1
  81241c:	003fda06 	br	812388 <__alt_mem_onchip_mem+0xff80a388>
  812420:	800b883a 	mov	r5,r16
  812424:	9009883a 	mov	r4,r18
  812428:	08092240 	call	809224 <_fflush_r>
  81242c:	103fe326 	beq	r2,zero,8123bc <__alt_mem_onchip_mem+0xff80a3bc>
  812430:	00bfffc4 	movi	r2,-1
  812434:	003fe206 	br	8123c0 <__alt_mem_onchip_mem+0xff80a3c0>
  812438:	800b883a 	mov	r5,r16
  81243c:	9009883a 	mov	r4,r18
  812440:	080cbd80 	call	80cbd8 <__swsetup_r>
  812444:	103ffa1e 	bne	r2,zero,812430 <__alt_mem_onchip_mem+0xff80a430>
  812448:	8100030b 	ldhu	r4,12(r16)
  81244c:	80c00417 	ldw	r3,16(r16)
  812450:	003fc506 	br	812368 <__alt_mem_onchip_mem+0xff80a368>
  812454:	08096000 	call	809600 <__sinit>
  812458:	003fbc06 	br	81234c <__alt_mem_onchip_mem+0xff80a34c>

0081245c <__swbuf>:
  81245c:	008020b4 	movhi	r2,130
  812460:	10a4ba04 	addi	r2,r2,-27928
  812464:	280d883a 	mov	r6,r5
  812468:	200b883a 	mov	r5,r4
  81246c:	11000017 	ldw	r4,0(r2)
  812470:	081231c1 	jmpi	81231c <__swbuf_r>

00812474 <_wcrtomb_r>:
  812474:	defff604 	addi	sp,sp,-40
  812478:	008020b4 	movhi	r2,130
  81247c:	dc800815 	stw	r18,32(sp)
  812480:	dc400715 	stw	r17,28(sp)
  812484:	dc000615 	stw	r16,24(sp)
  812488:	10a4be04 	addi	r2,r2,-27912
  81248c:	dfc00915 	stw	ra,36(sp)
  812490:	2021883a 	mov	r16,r4
  812494:	3823883a 	mov	r17,r7
  812498:	14800017 	ldw	r18,0(r2)
  81249c:	28001426 	beq	r5,zero,8124f0 <_wcrtomb_r+0x7c>
  8124a0:	d9400415 	stw	r5,16(sp)
  8124a4:	d9800515 	stw	r6,20(sp)
  8124a8:	080ec440 	call	80ec44 <__locale_charset>
  8124ac:	d9800517 	ldw	r6,20(sp)
  8124b0:	d9400417 	ldw	r5,16(sp)
  8124b4:	100f883a 	mov	r7,r2
  8124b8:	dc400015 	stw	r17,0(sp)
  8124bc:	8009883a 	mov	r4,r16
  8124c0:	903ee83a 	callr	r18
  8124c4:	00ffffc4 	movi	r3,-1
  8124c8:	10c0031e 	bne	r2,r3,8124d8 <_wcrtomb_r+0x64>
  8124cc:	88000015 	stw	zero,0(r17)
  8124d0:	00c02284 	movi	r3,138
  8124d4:	80c00015 	stw	r3,0(r16)
  8124d8:	dfc00917 	ldw	ra,36(sp)
  8124dc:	dc800817 	ldw	r18,32(sp)
  8124e0:	dc400717 	ldw	r17,28(sp)
  8124e4:	dc000617 	ldw	r16,24(sp)
  8124e8:	dec00a04 	addi	sp,sp,40
  8124ec:	f800283a 	ret
  8124f0:	080ec440 	call	80ec44 <__locale_charset>
  8124f4:	100f883a 	mov	r7,r2
  8124f8:	dc400015 	stw	r17,0(sp)
  8124fc:	000d883a 	mov	r6,zero
  812500:	d9400104 	addi	r5,sp,4
  812504:	8009883a 	mov	r4,r16
  812508:	903ee83a 	callr	r18
  81250c:	003fed06 	br	8124c4 <__alt_mem_onchip_mem+0xff80a4c4>

00812510 <wcrtomb>:
  812510:	defff604 	addi	sp,sp,-40
  812514:	008020b4 	movhi	r2,130
  812518:	dc800615 	stw	r18,24(sp)
  81251c:	dc400515 	stw	r17,20(sp)
  812520:	10a4ba04 	addi	r2,r2,-27928
  812524:	dfc00915 	stw	ra,36(sp)
  812528:	dd000815 	stw	r20,32(sp)
  81252c:	dcc00715 	stw	r19,28(sp)
  812530:	dc000415 	stw	r16,16(sp)
  812534:	3025883a 	mov	r18,r6
  812538:	14400017 	ldw	r17,0(r2)
  81253c:	20001926 	beq	r4,zero,8125a4 <wcrtomb+0x94>
  812540:	008020b4 	movhi	r2,130
  812544:	10a4be04 	addi	r2,r2,-27912
  812548:	15000017 	ldw	r20,0(r2)
  81254c:	2021883a 	mov	r16,r4
  812550:	2827883a 	mov	r19,r5
  812554:	080ec440 	call	80ec44 <__locale_charset>
  812558:	100f883a 	mov	r7,r2
  81255c:	dc800015 	stw	r18,0(sp)
  812560:	980d883a 	mov	r6,r19
  812564:	800b883a 	mov	r5,r16
  812568:	8809883a 	mov	r4,r17
  81256c:	a03ee83a 	callr	r20
  812570:	00ffffc4 	movi	r3,-1
  812574:	10c0031e 	bne	r2,r3,812584 <wcrtomb+0x74>
  812578:	90000015 	stw	zero,0(r18)
  81257c:	00c02284 	movi	r3,138
  812580:	88c00015 	stw	r3,0(r17)
  812584:	dfc00917 	ldw	ra,36(sp)
  812588:	dd000817 	ldw	r20,32(sp)
  81258c:	dcc00717 	ldw	r19,28(sp)
  812590:	dc800617 	ldw	r18,24(sp)
  812594:	dc400517 	ldw	r17,20(sp)
  812598:	dc000417 	ldw	r16,16(sp)
  81259c:	dec00a04 	addi	sp,sp,40
  8125a0:	f800283a 	ret
  8125a4:	008020b4 	movhi	r2,130
  8125a8:	10a4be04 	addi	r2,r2,-27912
  8125ac:	14000017 	ldw	r16,0(r2)
  8125b0:	080ec440 	call	80ec44 <__locale_charset>
  8125b4:	100f883a 	mov	r7,r2
  8125b8:	dc800015 	stw	r18,0(sp)
  8125bc:	000d883a 	mov	r6,zero
  8125c0:	d9400104 	addi	r5,sp,4
  8125c4:	8809883a 	mov	r4,r17
  8125c8:	803ee83a 	callr	r16
  8125cc:	003fe806 	br	812570 <__alt_mem_onchip_mem+0xff80a570>

008125d0 <__ascii_wctomb>:
  8125d0:	28000526 	beq	r5,zero,8125e8 <__ascii_wctomb+0x18>
  8125d4:	00803fc4 	movi	r2,255
  8125d8:	11800536 	bltu	r2,r6,8125f0 <__ascii_wctomb+0x20>
  8125dc:	29800005 	stb	r6,0(r5)
  8125e0:	00800044 	movi	r2,1
  8125e4:	f800283a 	ret
  8125e8:	0005883a 	mov	r2,zero
  8125ec:	f800283a 	ret
  8125f0:	00802284 	movi	r2,138
  8125f4:	20800015 	stw	r2,0(r4)
  8125f8:	00bfffc4 	movi	r2,-1
  8125fc:	f800283a 	ret

00812600 <_wctomb_r>:
  812600:	008020b4 	movhi	r2,130
  812604:	defff904 	addi	sp,sp,-28
  812608:	10a4be04 	addi	r2,r2,-27912
  81260c:	dfc00615 	stw	ra,24(sp)
  812610:	dc400515 	stw	r17,20(sp)
  812614:	dc000415 	stw	r16,16(sp)
  812618:	3823883a 	mov	r17,r7
  81261c:	14000017 	ldw	r16,0(r2)
  812620:	d9000115 	stw	r4,4(sp)
  812624:	d9400215 	stw	r5,8(sp)
  812628:	d9800315 	stw	r6,12(sp)
  81262c:	080ec440 	call	80ec44 <__locale_charset>
  812630:	d9800317 	ldw	r6,12(sp)
  812634:	d9400217 	ldw	r5,8(sp)
  812638:	d9000117 	ldw	r4,4(sp)
  81263c:	100f883a 	mov	r7,r2
  812640:	dc400015 	stw	r17,0(sp)
  812644:	803ee83a 	callr	r16
  812648:	dfc00617 	ldw	ra,24(sp)
  81264c:	dc400517 	ldw	r17,20(sp)
  812650:	dc000417 	ldw	r16,16(sp)
  812654:	dec00704 	addi	sp,sp,28
  812658:	f800283a 	ret

0081265c <__umoddi3>:
  81265c:	defff404 	addi	sp,sp,-48
  812660:	df000a15 	stw	fp,40(sp)
  812664:	dc400315 	stw	r17,12(sp)
  812668:	dc000215 	stw	r16,8(sp)
  81266c:	dfc00b15 	stw	ra,44(sp)
  812670:	ddc00915 	stw	r23,36(sp)
  812674:	dd800815 	stw	r22,32(sp)
  812678:	dd400715 	stw	r21,28(sp)
  81267c:	dd000615 	stw	r20,24(sp)
  812680:	dcc00515 	stw	r19,20(sp)
  812684:	dc800415 	stw	r18,16(sp)
  812688:	2021883a 	mov	r16,r4
  81268c:	2823883a 	mov	r17,r5
  812690:	2839883a 	mov	fp,r5
  812694:	38003c1e 	bne	r7,zero,812788 <__umoddi3+0x12c>
  812698:	3027883a 	mov	r19,r6
  81269c:	2029883a 	mov	r20,r4
  8126a0:	2980512e 	bgeu	r5,r6,8127e8 <__umoddi3+0x18c>
  8126a4:	00bfffd4 	movui	r2,65535
  8126a8:	11809a36 	bltu	r2,r6,812914 <__umoddi3+0x2b8>
  8126ac:	01003fc4 	movi	r4,255
  8126b0:	2189803a 	cmpltu	r4,r4,r6
  8126b4:	200890fa 	slli	r4,r4,3
  8126b8:	3104d83a 	srl	r2,r6,r4
  8126bc:	00c02074 	movhi	r3,129
  8126c0:	18dc2d84 	addi	r3,r3,28854
  8126c4:	1885883a 	add	r2,r3,r2
  8126c8:	10c00003 	ldbu	r3,0(r2)
  8126cc:	00800804 	movi	r2,32
  8126d0:	1909883a 	add	r4,r3,r4
  8126d4:	1125c83a 	sub	r18,r2,r4
  8126d8:	90000526 	beq	r18,zero,8126f0 <__umoddi3+0x94>
  8126dc:	8ca2983a 	sll	r17,r17,r18
  8126e0:	8108d83a 	srl	r4,r16,r4
  8126e4:	34a6983a 	sll	r19,r6,r18
  8126e8:	84a8983a 	sll	r20,r16,r18
  8126ec:	2478b03a 	or	fp,r4,r17
  8126f0:	982ed43a 	srli	r23,r19,16
  8126f4:	e009883a 	mov	r4,fp
  8126f8:	9dbfffcc 	andi	r22,r19,65535
  8126fc:	b80b883a 	mov	r5,r23
  812700:	0806a500 	call	806a50 <__umodsi3>
  812704:	e009883a 	mov	r4,fp
  812708:	b80b883a 	mov	r5,r23
  81270c:	102b883a 	mov	r21,r2
  812710:	08069ec0 	call	8069ec <__udivsi3>
  812714:	a806943a 	slli	r3,r21,16
  812718:	a008d43a 	srli	r4,r20,16
  81271c:	b085383a 	mul	r2,r22,r2
  812720:	20c8b03a 	or	r4,r4,r3
  812724:	2080032e 	bgeu	r4,r2,812734 <__umoddi3+0xd8>
  812728:	24c9883a 	add	r4,r4,r19
  81272c:	24c00136 	bltu	r4,r19,812734 <__umoddi3+0xd8>
  812730:	20811036 	bltu	r4,r2,812b74 <__umoddi3+0x518>
  812734:	20abc83a 	sub	r21,r4,r2
  812738:	b80b883a 	mov	r5,r23
  81273c:	a809883a 	mov	r4,r21
  812740:	0806a500 	call	806a50 <__umodsi3>
  812744:	1023883a 	mov	r17,r2
  812748:	b80b883a 	mov	r5,r23
  81274c:	a809883a 	mov	r4,r21
  812750:	08069ec0 	call	8069ec <__udivsi3>
  812754:	8822943a 	slli	r17,r17,16
  812758:	b085383a 	mul	r2,r22,r2
  81275c:	a0ffffcc 	andi	r3,r20,65535
  812760:	1c46b03a 	or	r3,r3,r17
  812764:	1880042e 	bgeu	r3,r2,812778 <__umoddi3+0x11c>
  812768:	1cc7883a 	add	r3,r3,r19
  81276c:	1cc00236 	bltu	r3,r19,812778 <__umoddi3+0x11c>
  812770:	1880012e 	bgeu	r3,r2,812778 <__umoddi3+0x11c>
  812774:	1cc7883a 	add	r3,r3,r19
  812778:	1885c83a 	sub	r2,r3,r2
  81277c:	1484d83a 	srl	r2,r2,r18
  812780:	0007883a 	mov	r3,zero
  812784:	00004f06 	br	8128c4 <__umoddi3+0x268>
  812788:	29c04c36 	bltu	r5,r7,8128bc <__umoddi3+0x260>
  81278c:	00bfffd4 	movui	r2,65535
  812790:	11c0582e 	bgeu	r2,r7,8128f4 <__umoddi3+0x298>
  812794:	00804034 	movhi	r2,256
  812798:	10bfffc4 	addi	r2,r2,-1
  81279c:	11c0e736 	bltu	r2,r7,812b3c <__umoddi3+0x4e0>
  8127a0:	01000404 	movi	r4,16
  8127a4:	3904d83a 	srl	r2,r7,r4
  8127a8:	00c02074 	movhi	r3,129
  8127ac:	18dc2d84 	addi	r3,r3,28854
  8127b0:	1885883a 	add	r2,r3,r2
  8127b4:	14c00003 	ldbu	r19,0(r2)
  8127b8:	00c00804 	movi	r3,32
  8127bc:	9927883a 	add	r19,r19,r4
  8127c0:	1ce9c83a 	sub	r20,r3,r19
  8127c4:	a000581e 	bne	r20,zero,812928 <__umoddi3+0x2cc>
  8127c8:	3c400136 	bltu	r7,r17,8127d0 <__umoddi3+0x174>
  8127cc:	8180eb36 	bltu	r16,r6,812b7c <__umoddi3+0x520>
  8127d0:	8185c83a 	sub	r2,r16,r6
  8127d4:	89e3c83a 	sub	r17,r17,r7
  8127d8:	8089803a 	cmpltu	r4,r16,r2
  8127dc:	8939c83a 	sub	fp,r17,r4
  8127e0:	e007883a 	mov	r3,fp
  8127e4:	00003706 	br	8128c4 <__umoddi3+0x268>
  8127e8:	3000041e 	bne	r6,zero,8127fc <__umoddi3+0x1a0>
  8127ec:	000b883a 	mov	r5,zero
  8127f0:	01000044 	movi	r4,1
  8127f4:	08069ec0 	call	8069ec <__udivsi3>
  8127f8:	1027883a 	mov	r19,r2
  8127fc:	00bfffd4 	movui	r2,65535
  812800:	14c0402e 	bgeu	r2,r19,812904 <__umoddi3+0x2a8>
  812804:	00804034 	movhi	r2,256
  812808:	10bfffc4 	addi	r2,r2,-1
  81280c:	14c0cd36 	bltu	r2,r19,812b44 <__umoddi3+0x4e8>
  812810:	00800404 	movi	r2,16
  812814:	9886d83a 	srl	r3,r19,r2
  812818:	01002074 	movhi	r4,129
  81281c:	211c2d84 	addi	r4,r4,28854
  812820:	20c7883a 	add	r3,r4,r3
  812824:	18c00003 	ldbu	r3,0(r3)
  812828:	1887883a 	add	r3,r3,r2
  81282c:	00800804 	movi	r2,32
  812830:	10e5c83a 	sub	r18,r2,r3
  812834:	9000901e 	bne	r18,zero,812a78 <__umoddi3+0x41c>
  812838:	982cd43a 	srli	r22,r19,16
  81283c:	8ce3c83a 	sub	r17,r17,r19
  812840:	9d7fffcc 	andi	r21,r19,65535
  812844:	b00b883a 	mov	r5,r22
  812848:	8809883a 	mov	r4,r17
  81284c:	0806a500 	call	806a50 <__umodsi3>
  812850:	8809883a 	mov	r4,r17
  812854:	b00b883a 	mov	r5,r22
  812858:	1021883a 	mov	r16,r2
  81285c:	08069ec0 	call	8069ec <__udivsi3>
  812860:	8006943a 	slli	r3,r16,16
  812864:	a008d43a 	srli	r4,r20,16
  812868:	1545383a 	mul	r2,r2,r21
  81286c:	20c8b03a 	or	r4,r4,r3
  812870:	2080042e 	bgeu	r4,r2,812884 <__umoddi3+0x228>
  812874:	24c9883a 	add	r4,r4,r19
  812878:	24c00236 	bltu	r4,r19,812884 <__umoddi3+0x228>
  81287c:	2080012e 	bgeu	r4,r2,812884 <__umoddi3+0x228>
  812880:	24c9883a 	add	r4,r4,r19
  812884:	20a1c83a 	sub	r16,r4,r2
  812888:	b00b883a 	mov	r5,r22
  81288c:	8009883a 	mov	r4,r16
  812890:	0806a500 	call	806a50 <__umodsi3>
  812894:	1023883a 	mov	r17,r2
  812898:	b00b883a 	mov	r5,r22
  81289c:	8009883a 	mov	r4,r16
  8128a0:	08069ec0 	call	8069ec <__udivsi3>
  8128a4:	8822943a 	slli	r17,r17,16
  8128a8:	1545383a 	mul	r2,r2,r21
  8128ac:	a53fffcc 	andi	r20,r20,65535
  8128b0:	a446b03a 	or	r3,r20,r17
  8128b4:	18bfb02e 	bgeu	r3,r2,812778 <__alt_mem_onchip_mem+0xff80a778>
  8128b8:	003fab06 	br	812768 <__alt_mem_onchip_mem+0xff80a768>
  8128bc:	2005883a 	mov	r2,r4
  8128c0:	2807883a 	mov	r3,r5
  8128c4:	dfc00b17 	ldw	ra,44(sp)
  8128c8:	df000a17 	ldw	fp,40(sp)
  8128cc:	ddc00917 	ldw	r23,36(sp)
  8128d0:	dd800817 	ldw	r22,32(sp)
  8128d4:	dd400717 	ldw	r21,28(sp)
  8128d8:	dd000617 	ldw	r20,24(sp)
  8128dc:	dcc00517 	ldw	r19,20(sp)
  8128e0:	dc800417 	ldw	r18,16(sp)
  8128e4:	dc400317 	ldw	r17,12(sp)
  8128e8:	dc000217 	ldw	r16,8(sp)
  8128ec:	dec00c04 	addi	sp,sp,48
  8128f0:	f800283a 	ret
  8128f4:	04c03fc4 	movi	r19,255
  8128f8:	99c9803a 	cmpltu	r4,r19,r7
  8128fc:	200890fa 	slli	r4,r4,3
  812900:	003fa806 	br	8127a4 <__alt_mem_onchip_mem+0xff80a7a4>
  812904:	00803fc4 	movi	r2,255
  812908:	14c5803a 	cmpltu	r2,r2,r19
  81290c:	100490fa 	slli	r2,r2,3
  812910:	003fc006 	br	812814 <__alt_mem_onchip_mem+0xff80a814>
  812914:	00804034 	movhi	r2,256
  812918:	10bfffc4 	addi	r2,r2,-1
  81291c:	11808b36 	bltu	r2,r6,812b4c <__umoddi3+0x4f0>
  812920:	01000404 	movi	r4,16
  812924:	003f6406 	br	8126b8 <__alt_mem_onchip_mem+0xff80a6b8>
  812928:	34c4d83a 	srl	r2,r6,r19
  81292c:	3d0e983a 	sll	r7,r7,r20
  812930:	8cf8d83a 	srl	fp,r17,r19
  812934:	8d10983a 	sll	r8,r17,r20
  812938:	38aab03a 	or	r21,r7,r2
  81293c:	a82cd43a 	srli	r22,r21,16
  812940:	84e2d83a 	srl	r17,r16,r19
  812944:	e009883a 	mov	r4,fp
  812948:	b00b883a 	mov	r5,r22
  81294c:	8a22b03a 	or	r17,r17,r8
  812950:	3524983a 	sll	r18,r6,r20
  812954:	0806a500 	call	806a50 <__umodsi3>
  812958:	e009883a 	mov	r4,fp
  81295c:	b00b883a 	mov	r5,r22
  812960:	102f883a 	mov	r23,r2
  812964:	08069ec0 	call	8069ec <__udivsi3>
  812968:	100d883a 	mov	r6,r2
  81296c:	b808943a 	slli	r4,r23,16
  812970:	aa3fffcc 	andi	r8,r21,65535
  812974:	8804d43a 	srli	r2,r17,16
  812978:	41af383a 	mul	r23,r8,r6
  81297c:	8520983a 	sll	r16,r16,r20
  812980:	1104b03a 	or	r2,r2,r4
  812984:	15c0042e 	bgeu	r2,r23,812998 <__umoddi3+0x33c>
  812988:	1545883a 	add	r2,r2,r21
  81298c:	30ffffc4 	addi	r3,r6,-1
  812990:	1540742e 	bgeu	r2,r21,812b64 <__umoddi3+0x508>
  812994:	180d883a 	mov	r6,r3
  812998:	15efc83a 	sub	r23,r2,r23
  81299c:	b00b883a 	mov	r5,r22
  8129a0:	b809883a 	mov	r4,r23
  8129a4:	d9800115 	stw	r6,4(sp)
  8129a8:	da000015 	stw	r8,0(sp)
  8129ac:	0806a500 	call	806a50 <__umodsi3>
  8129b0:	b00b883a 	mov	r5,r22
  8129b4:	b809883a 	mov	r4,r23
  8129b8:	1039883a 	mov	fp,r2
  8129bc:	08069ec0 	call	8069ec <__udivsi3>
  8129c0:	da000017 	ldw	r8,0(sp)
  8129c4:	e038943a 	slli	fp,fp,16
  8129c8:	100b883a 	mov	r5,r2
  8129cc:	4089383a 	mul	r4,r8,r2
  8129d0:	8a3fffcc 	andi	r8,r17,65535
  8129d4:	4710b03a 	or	r8,r8,fp
  8129d8:	d9800117 	ldw	r6,4(sp)
  8129dc:	4100042e 	bgeu	r8,r4,8129f0 <__umoddi3+0x394>
  8129e0:	4551883a 	add	r8,r8,r21
  8129e4:	10bfffc4 	addi	r2,r2,-1
  8129e8:	45405a2e 	bgeu	r8,r21,812b54 <__umoddi3+0x4f8>
  8129ec:	100b883a 	mov	r5,r2
  8129f0:	300c943a 	slli	r6,r6,16
  8129f4:	91ffffcc 	andi	r7,r18,65535
  8129f8:	9004d43a 	srli	r2,r18,16
  8129fc:	314cb03a 	or	r6,r6,r5
  812a00:	317fffcc 	andi	r5,r6,65535
  812a04:	300cd43a 	srli	r6,r6,16
  812a08:	29d3383a 	mul	r9,r5,r7
  812a0c:	288b383a 	mul	r5,r5,r2
  812a10:	31cf383a 	mul	r7,r6,r7
  812a14:	4806d43a 	srli	r3,r9,16
  812a18:	4111c83a 	sub	r8,r8,r4
  812a1c:	29cb883a 	add	r5,r5,r7
  812a20:	194b883a 	add	r5,r3,r5
  812a24:	3085383a 	mul	r2,r6,r2
  812a28:	29c0022e 	bgeu	r5,r7,812a34 <__umoddi3+0x3d8>
  812a2c:	00c00074 	movhi	r3,1
  812a30:	10c5883a 	add	r2,r2,r3
  812a34:	2808d43a 	srli	r4,r5,16
  812a38:	280a943a 	slli	r5,r5,16
  812a3c:	4a7fffcc 	andi	r9,r9,65535
  812a40:	2085883a 	add	r2,r4,r2
  812a44:	2a4b883a 	add	r5,r5,r9
  812a48:	40803636 	bltu	r8,r2,812b24 <__umoddi3+0x4c8>
  812a4c:	40804d26 	beq	r8,r2,812b84 <__umoddi3+0x528>
  812a50:	4089c83a 	sub	r4,r8,r2
  812a54:	280f883a 	mov	r7,r5
  812a58:	81cfc83a 	sub	r7,r16,r7
  812a5c:	81c7803a 	cmpltu	r3,r16,r7
  812a60:	20c7c83a 	sub	r3,r4,r3
  812a64:	1cc4983a 	sll	r2,r3,r19
  812a68:	3d0ed83a 	srl	r7,r7,r20
  812a6c:	1d06d83a 	srl	r3,r3,r20
  812a70:	11c4b03a 	or	r2,r2,r7
  812a74:	003f9306 	br	8128c4 <__alt_mem_onchip_mem+0xff80a8c4>
  812a78:	9ca6983a 	sll	r19,r19,r18
  812a7c:	88e8d83a 	srl	r20,r17,r3
  812a80:	80c4d83a 	srl	r2,r16,r3
  812a84:	982cd43a 	srli	r22,r19,16
  812a88:	8ca2983a 	sll	r17,r17,r18
  812a8c:	a009883a 	mov	r4,r20
  812a90:	b00b883a 	mov	r5,r22
  812a94:	1478b03a 	or	fp,r2,r17
  812a98:	0806a500 	call	806a50 <__umodsi3>
  812a9c:	a009883a 	mov	r4,r20
  812aa0:	b00b883a 	mov	r5,r22
  812aa4:	1023883a 	mov	r17,r2
  812aa8:	08069ec0 	call	8069ec <__udivsi3>
  812aac:	9d7fffcc 	andi	r21,r19,65535
  812ab0:	880a943a 	slli	r5,r17,16
  812ab4:	e008d43a 	srli	r4,fp,16
  812ab8:	a885383a 	mul	r2,r21,r2
  812abc:	84a8983a 	sll	r20,r16,r18
  812ac0:	2148b03a 	or	r4,r4,r5
  812ac4:	2080042e 	bgeu	r4,r2,812ad8 <__umoddi3+0x47c>
  812ac8:	24c9883a 	add	r4,r4,r19
  812acc:	24c00236 	bltu	r4,r19,812ad8 <__umoddi3+0x47c>
  812ad0:	2080012e 	bgeu	r4,r2,812ad8 <__umoddi3+0x47c>
  812ad4:	24c9883a 	add	r4,r4,r19
  812ad8:	20a3c83a 	sub	r17,r4,r2
  812adc:	b00b883a 	mov	r5,r22
  812ae0:	8809883a 	mov	r4,r17
  812ae4:	0806a500 	call	806a50 <__umodsi3>
  812ae8:	102f883a 	mov	r23,r2
  812aec:	8809883a 	mov	r4,r17
  812af0:	b00b883a 	mov	r5,r22
  812af4:	08069ec0 	call	8069ec <__udivsi3>
  812af8:	b82e943a 	slli	r23,r23,16
  812afc:	a885383a 	mul	r2,r21,r2
  812b00:	e13fffcc 	andi	r4,fp,65535
  812b04:	25c8b03a 	or	r4,r4,r23
  812b08:	2080042e 	bgeu	r4,r2,812b1c <__umoddi3+0x4c0>
  812b0c:	24c9883a 	add	r4,r4,r19
  812b10:	24c00236 	bltu	r4,r19,812b1c <__umoddi3+0x4c0>
  812b14:	2080012e 	bgeu	r4,r2,812b1c <__umoddi3+0x4c0>
  812b18:	24c9883a 	add	r4,r4,r19
  812b1c:	20a3c83a 	sub	r17,r4,r2
  812b20:	003f4806 	br	812844 <__alt_mem_onchip_mem+0xff80a844>
  812b24:	2c8fc83a 	sub	r7,r5,r18
  812b28:	1545c83a 	sub	r2,r2,r21
  812b2c:	29cb803a 	cmpltu	r5,r5,r7
  812b30:	1145c83a 	sub	r2,r2,r5
  812b34:	4089c83a 	sub	r4,r8,r2
  812b38:	003fc706 	br	812a58 <__alt_mem_onchip_mem+0xff80aa58>
  812b3c:	01000604 	movi	r4,24
  812b40:	003f1806 	br	8127a4 <__alt_mem_onchip_mem+0xff80a7a4>
  812b44:	00800604 	movi	r2,24
  812b48:	003f3206 	br	812814 <__alt_mem_onchip_mem+0xff80a814>
  812b4c:	01000604 	movi	r4,24
  812b50:	003ed906 	br	8126b8 <__alt_mem_onchip_mem+0xff80a6b8>
  812b54:	413fa52e 	bgeu	r8,r4,8129ec <__alt_mem_onchip_mem+0xff80a9ec>
  812b58:	297fff84 	addi	r5,r5,-2
  812b5c:	4551883a 	add	r8,r8,r21
  812b60:	003fa306 	br	8129f0 <__alt_mem_onchip_mem+0xff80a9f0>
  812b64:	15ff8b2e 	bgeu	r2,r23,812994 <__alt_mem_onchip_mem+0xff80a994>
  812b68:	31bfff84 	addi	r6,r6,-2
  812b6c:	1545883a 	add	r2,r2,r21
  812b70:	003f8906 	br	812998 <__alt_mem_onchip_mem+0xff80a998>
  812b74:	24c9883a 	add	r4,r4,r19
  812b78:	003eee06 	br	812734 <__alt_mem_onchip_mem+0xff80a734>
  812b7c:	8005883a 	mov	r2,r16
  812b80:	003f1706 	br	8127e0 <__alt_mem_onchip_mem+0xff80a7e0>
  812b84:	817fe736 	bltu	r16,r5,812b24 <__alt_mem_onchip_mem+0xff80ab24>
  812b88:	280f883a 	mov	r7,r5
  812b8c:	0009883a 	mov	r4,zero
  812b90:	003fb106 	br	812a58 <__alt_mem_onchip_mem+0xff80aa58>

00812b94 <__eqdf2>:
  812b94:	2804d53a 	srli	r2,r5,20
  812b98:	3806d53a 	srli	r3,r7,20
  812b9c:	02000434 	movhi	r8,16
  812ba0:	423fffc4 	addi	r8,r8,-1
  812ba4:	1081ffcc 	andi	r2,r2,2047
  812ba8:	0281ffc4 	movi	r10,2047
  812bac:	2a12703a 	and	r9,r5,r8
  812bb0:	18c1ffcc 	andi	r3,r3,2047
  812bb4:	3a10703a 	and	r8,r7,r8
  812bb8:	280ad7fa 	srli	r5,r5,31
  812bbc:	380ed7fa 	srli	r7,r7,31
  812bc0:	12801026 	beq	r2,r10,812c04 <__eqdf2+0x70>
  812bc4:	0281ffc4 	movi	r10,2047
  812bc8:	1a800a26 	beq	r3,r10,812bf4 <__eqdf2+0x60>
  812bcc:	10c00226 	beq	r2,r3,812bd8 <__eqdf2+0x44>
  812bd0:	00800044 	movi	r2,1
  812bd4:	f800283a 	ret
  812bd8:	4a3ffd1e 	bne	r9,r8,812bd0 <__alt_mem_onchip_mem+0xff80abd0>
  812bdc:	21bffc1e 	bne	r4,r6,812bd0 <__alt_mem_onchip_mem+0xff80abd0>
  812be0:	29c00c26 	beq	r5,r7,812c14 <__eqdf2+0x80>
  812be4:	103ffa1e 	bne	r2,zero,812bd0 <__alt_mem_onchip_mem+0xff80abd0>
  812be8:	2244b03a 	or	r2,r4,r9
  812bec:	1004c03a 	cmpne	r2,r2,zero
  812bf0:	f800283a 	ret
  812bf4:	3214b03a 	or	r10,r6,r8
  812bf8:	503ff426 	beq	r10,zero,812bcc <__alt_mem_onchip_mem+0xff80abcc>
  812bfc:	00800044 	movi	r2,1
  812c00:	f800283a 	ret
  812c04:	2254b03a 	or	r10,r4,r9
  812c08:	503fee26 	beq	r10,zero,812bc4 <__alt_mem_onchip_mem+0xff80abc4>
  812c0c:	00800044 	movi	r2,1
  812c10:	f800283a 	ret
  812c14:	0005883a 	mov	r2,zero
  812c18:	f800283a 	ret

00812c1c <__fixdfsi>:
  812c1c:	280cd53a 	srli	r6,r5,20
  812c20:	00c00434 	movhi	r3,16
  812c24:	18ffffc4 	addi	r3,r3,-1
  812c28:	3181ffcc 	andi	r6,r6,2047
  812c2c:	01c0ff84 	movi	r7,1022
  812c30:	28c6703a 	and	r3,r5,r3
  812c34:	280ad7fa 	srli	r5,r5,31
  812c38:	3980120e 	bge	r7,r6,812c84 <__fixdfsi+0x68>
  812c3c:	00810744 	movi	r2,1053
  812c40:	11800c16 	blt	r2,r6,812c74 <__fixdfsi+0x58>
  812c44:	00810cc4 	movi	r2,1075
  812c48:	1185c83a 	sub	r2,r2,r6
  812c4c:	01c007c4 	movi	r7,31
  812c50:	18c00434 	orhi	r3,r3,16
  812c54:	38800d16 	blt	r7,r2,812c8c <__fixdfsi+0x70>
  812c58:	31befb44 	addi	r6,r6,-1043
  812c5c:	2084d83a 	srl	r2,r4,r2
  812c60:	1986983a 	sll	r3,r3,r6
  812c64:	1884b03a 	or	r2,r3,r2
  812c68:	28000726 	beq	r5,zero,812c88 <__fixdfsi+0x6c>
  812c6c:	0085c83a 	sub	r2,zero,r2
  812c70:	f800283a 	ret
  812c74:	00a00034 	movhi	r2,32768
  812c78:	10bfffc4 	addi	r2,r2,-1
  812c7c:	2885883a 	add	r2,r5,r2
  812c80:	f800283a 	ret
  812c84:	0005883a 	mov	r2,zero
  812c88:	f800283a 	ret
  812c8c:	008104c4 	movi	r2,1043
  812c90:	1185c83a 	sub	r2,r2,r6
  812c94:	1884d83a 	srl	r2,r3,r2
  812c98:	003ff306 	br	812c68 <__alt_mem_onchip_mem+0xff80ac68>

00812c9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812c9c:	defffe04 	addi	sp,sp,-8
  812ca0:	dfc00115 	stw	ra,4(sp)
  812ca4:	df000015 	stw	fp,0(sp)
  812ca8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812cac:	d0a00e17 	ldw	r2,-32712(gp)
  812cb0:	10000326 	beq	r2,zero,812cc0 <alt_get_errno+0x24>
  812cb4:	d0a00e17 	ldw	r2,-32712(gp)
  812cb8:	103ee83a 	callr	r2
  812cbc:	00000106 	br	812cc4 <alt_get_errno+0x28>
  812cc0:	d0a75504 	addi	r2,gp,-25260
}
  812cc4:	e037883a 	mov	sp,fp
  812cc8:	dfc00117 	ldw	ra,4(sp)
  812ccc:	df000017 	ldw	fp,0(sp)
  812cd0:	dec00204 	addi	sp,sp,8
  812cd4:	f800283a 	ret

00812cd8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  812cd8:	defffb04 	addi	sp,sp,-20
  812cdc:	dfc00415 	stw	ra,16(sp)
  812ce0:	df000315 	stw	fp,12(sp)
  812ce4:	df000304 	addi	fp,sp,12
  812ce8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  812cec:	e0bfff17 	ldw	r2,-4(fp)
  812cf0:	10000616 	blt	r2,zero,812d0c <close+0x34>
  812cf4:	e0bfff17 	ldw	r2,-4(fp)
  812cf8:	10c00324 	muli	r3,r2,12
  812cfc:	00802074 	movhi	r2,129
  812d00:	109fc504 	addi	r2,r2,32532
  812d04:	1885883a 	add	r2,r3,r2
  812d08:	00000106 	br	812d10 <close+0x38>
  812d0c:	0005883a 	mov	r2,zero
  812d10:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  812d14:	e0bffd17 	ldw	r2,-12(fp)
  812d18:	10001926 	beq	r2,zero,812d80 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  812d1c:	e0bffd17 	ldw	r2,-12(fp)
  812d20:	10800017 	ldw	r2,0(r2)
  812d24:	10800417 	ldw	r2,16(r2)
  812d28:	10000626 	beq	r2,zero,812d44 <close+0x6c>
  812d2c:	e0bffd17 	ldw	r2,-12(fp)
  812d30:	10800017 	ldw	r2,0(r2)
  812d34:	10800417 	ldw	r2,16(r2)
  812d38:	e13ffd17 	ldw	r4,-12(fp)
  812d3c:	103ee83a 	callr	r2
  812d40:	00000106 	br	812d48 <close+0x70>
  812d44:	0005883a 	mov	r2,zero
  812d48:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  812d4c:	e13fff17 	ldw	r4,-4(fp)
  812d50:	08135ec0 	call	8135ec <alt_release_fd>
    if (rval < 0)
  812d54:	e0bffe17 	ldw	r2,-8(fp)
  812d58:	1000070e 	bge	r2,zero,812d78 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  812d5c:	0812c9c0 	call	812c9c <alt_get_errno>
  812d60:	1007883a 	mov	r3,r2
  812d64:	e0bffe17 	ldw	r2,-8(fp)
  812d68:	0085c83a 	sub	r2,zero,r2
  812d6c:	18800015 	stw	r2,0(r3)
      return -1;
  812d70:	00bfffc4 	movi	r2,-1
  812d74:	00000706 	br	812d94 <close+0xbc>
    }
    return 0;
  812d78:	0005883a 	mov	r2,zero
  812d7c:	00000506 	br	812d94 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  812d80:	0812c9c0 	call	812c9c <alt_get_errno>
  812d84:	1007883a 	mov	r3,r2
  812d88:	00801444 	movi	r2,81
  812d8c:	18800015 	stw	r2,0(r3)
    return -1;
  812d90:	00bfffc4 	movi	r2,-1
  }
}
  812d94:	e037883a 	mov	sp,fp
  812d98:	dfc00117 	ldw	ra,4(sp)
  812d9c:	df000017 	ldw	fp,0(sp)
  812da0:	dec00204 	addi	sp,sp,8
  812da4:	f800283a 	ret

00812da8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  812da8:	defffc04 	addi	sp,sp,-16
  812dac:	df000315 	stw	fp,12(sp)
  812db0:	df000304 	addi	fp,sp,12
  812db4:	e13ffd15 	stw	r4,-12(fp)
  812db8:	e17ffe15 	stw	r5,-8(fp)
  812dbc:	e1bfff15 	stw	r6,-4(fp)
  return len;
  812dc0:	e0bfff17 	ldw	r2,-4(fp)
}
  812dc4:	e037883a 	mov	sp,fp
  812dc8:	df000017 	ldw	fp,0(sp)
  812dcc:	dec00104 	addi	sp,sp,4
  812dd0:	f800283a 	ret

00812dd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812dd4:	defffe04 	addi	sp,sp,-8
  812dd8:	dfc00115 	stw	ra,4(sp)
  812ddc:	df000015 	stw	fp,0(sp)
  812de0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812de4:	d0a00e17 	ldw	r2,-32712(gp)
  812de8:	10000326 	beq	r2,zero,812df8 <alt_get_errno+0x24>
  812dec:	d0a00e17 	ldw	r2,-32712(gp)
  812df0:	103ee83a 	callr	r2
  812df4:	00000106 	br	812dfc <alt_get_errno+0x28>
  812df8:	d0a75504 	addi	r2,gp,-25260
}
  812dfc:	e037883a 	mov	sp,fp
  812e00:	dfc00117 	ldw	ra,4(sp)
  812e04:	df000017 	ldw	fp,0(sp)
  812e08:	dec00204 	addi	sp,sp,8
  812e0c:	f800283a 	ret

00812e10 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  812e10:	defffb04 	addi	sp,sp,-20
  812e14:	dfc00415 	stw	ra,16(sp)
  812e18:	df000315 	stw	fp,12(sp)
  812e1c:	df000304 	addi	fp,sp,12
  812e20:	e13ffe15 	stw	r4,-8(fp)
  812e24:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812e28:	e0bffe17 	ldw	r2,-8(fp)
  812e2c:	10000616 	blt	r2,zero,812e48 <fstat+0x38>
  812e30:	e0bffe17 	ldw	r2,-8(fp)
  812e34:	10c00324 	muli	r3,r2,12
  812e38:	00802074 	movhi	r2,129
  812e3c:	109fc504 	addi	r2,r2,32532
  812e40:	1885883a 	add	r2,r3,r2
  812e44:	00000106 	br	812e4c <fstat+0x3c>
  812e48:	0005883a 	mov	r2,zero
  812e4c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  812e50:	e0bffd17 	ldw	r2,-12(fp)
  812e54:	10001026 	beq	r2,zero,812e98 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  812e58:	e0bffd17 	ldw	r2,-12(fp)
  812e5c:	10800017 	ldw	r2,0(r2)
  812e60:	10800817 	ldw	r2,32(r2)
  812e64:	10000726 	beq	r2,zero,812e84 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  812e68:	e0bffd17 	ldw	r2,-12(fp)
  812e6c:	10800017 	ldw	r2,0(r2)
  812e70:	10800817 	ldw	r2,32(r2)
  812e74:	e17fff17 	ldw	r5,-4(fp)
  812e78:	e13ffd17 	ldw	r4,-12(fp)
  812e7c:	103ee83a 	callr	r2
  812e80:	00000a06 	br	812eac <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  812e84:	e0bfff17 	ldw	r2,-4(fp)
  812e88:	00c80004 	movi	r3,8192
  812e8c:	10c00115 	stw	r3,4(r2)
      return 0;
  812e90:	0005883a 	mov	r2,zero
  812e94:	00000506 	br	812eac <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  812e98:	0812dd40 	call	812dd4 <alt_get_errno>
  812e9c:	1007883a 	mov	r3,r2
  812ea0:	00801444 	movi	r2,81
  812ea4:	18800015 	stw	r2,0(r3)
    return -1;
  812ea8:	00bfffc4 	movi	r2,-1
  }
}
  812eac:	e037883a 	mov	sp,fp
  812eb0:	dfc00117 	ldw	ra,4(sp)
  812eb4:	df000017 	ldw	fp,0(sp)
  812eb8:	dec00204 	addi	sp,sp,8
  812ebc:	f800283a 	ret

00812ec0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812ec0:	defffe04 	addi	sp,sp,-8
  812ec4:	dfc00115 	stw	ra,4(sp)
  812ec8:	df000015 	stw	fp,0(sp)
  812ecc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812ed0:	d0a00e17 	ldw	r2,-32712(gp)
  812ed4:	10000326 	beq	r2,zero,812ee4 <alt_get_errno+0x24>
  812ed8:	d0a00e17 	ldw	r2,-32712(gp)
  812edc:	103ee83a 	callr	r2
  812ee0:	00000106 	br	812ee8 <alt_get_errno+0x28>
  812ee4:	d0a75504 	addi	r2,gp,-25260
}
  812ee8:	e037883a 	mov	sp,fp
  812eec:	dfc00117 	ldw	ra,4(sp)
  812ef0:	df000017 	ldw	fp,0(sp)
  812ef4:	dec00204 	addi	sp,sp,8
  812ef8:	f800283a 	ret

00812efc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  812efc:	deffed04 	addi	sp,sp,-76
  812f00:	dfc01215 	stw	ra,72(sp)
  812f04:	df001115 	stw	fp,68(sp)
  812f08:	df001104 	addi	fp,sp,68
  812f0c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812f10:	e0bfff17 	ldw	r2,-4(fp)
  812f14:	10000616 	blt	r2,zero,812f30 <isatty+0x34>
  812f18:	e0bfff17 	ldw	r2,-4(fp)
  812f1c:	10c00324 	muli	r3,r2,12
  812f20:	00802074 	movhi	r2,129
  812f24:	109fc504 	addi	r2,r2,32532
  812f28:	1885883a 	add	r2,r3,r2
  812f2c:	00000106 	br	812f34 <isatty+0x38>
  812f30:	0005883a 	mov	r2,zero
  812f34:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  812f38:	e0bfef17 	ldw	r2,-68(fp)
  812f3c:	10000e26 	beq	r2,zero,812f78 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  812f40:	e0bfef17 	ldw	r2,-68(fp)
  812f44:	10800017 	ldw	r2,0(r2)
  812f48:	10800817 	ldw	r2,32(r2)
  812f4c:	1000021e 	bne	r2,zero,812f58 <isatty+0x5c>
    {
      return 1;
  812f50:	00800044 	movi	r2,1
  812f54:	00000d06 	br	812f8c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  812f58:	e0bff004 	addi	r2,fp,-64
  812f5c:	100b883a 	mov	r5,r2
  812f60:	e13fff17 	ldw	r4,-4(fp)
  812f64:	0812e100 	call	812e10 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  812f68:	e0bff117 	ldw	r2,-60(fp)
  812f6c:	10880020 	cmpeqi	r2,r2,8192
  812f70:	10803fcc 	andi	r2,r2,255
  812f74:	00000506 	br	812f8c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  812f78:	0812ec00 	call	812ec0 <alt_get_errno>
  812f7c:	1007883a 	mov	r3,r2
  812f80:	00801444 	movi	r2,81
  812f84:	18800015 	stw	r2,0(r3)
    return 0;
  812f88:	0005883a 	mov	r2,zero
  }
}
  812f8c:	e037883a 	mov	sp,fp
  812f90:	dfc00117 	ldw	ra,4(sp)
  812f94:	df000017 	ldw	fp,0(sp)
  812f98:	dec00204 	addi	sp,sp,8
  812f9c:	f800283a 	ret

00812fa0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  812fa0:	defffc04 	addi	sp,sp,-16
  812fa4:	df000315 	stw	fp,12(sp)
  812fa8:	df000304 	addi	fp,sp,12
  812fac:	e13ffd15 	stw	r4,-12(fp)
  812fb0:	e17ffe15 	stw	r5,-8(fp)
  812fb4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  812fb8:	e0fffe17 	ldw	r3,-8(fp)
  812fbc:	e0bffd17 	ldw	r2,-12(fp)
  812fc0:	18800c26 	beq	r3,r2,812ff4 <alt_load_section+0x54>
  {
    while( to != end )
  812fc4:	00000806 	br	812fe8 <alt_load_section+0x48>
    {
      *to++ = *from++;
  812fc8:	e0bffe17 	ldw	r2,-8(fp)
  812fcc:	10c00104 	addi	r3,r2,4
  812fd0:	e0fffe15 	stw	r3,-8(fp)
  812fd4:	e0fffd17 	ldw	r3,-12(fp)
  812fd8:	19000104 	addi	r4,r3,4
  812fdc:	e13ffd15 	stw	r4,-12(fp)
  812fe0:	18c00017 	ldw	r3,0(r3)
  812fe4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  812fe8:	e0fffe17 	ldw	r3,-8(fp)
  812fec:	e0bfff17 	ldw	r2,-4(fp)
  812ff0:	18bff51e 	bne	r3,r2,812fc8 <__alt_mem_onchip_mem+0xff80afc8>
    {
      *to++ = *from++;
    }
  }
}
  812ff4:	0001883a 	nop
  812ff8:	e037883a 	mov	sp,fp
  812ffc:	df000017 	ldw	fp,0(sp)
  813000:	dec00104 	addi	sp,sp,4
  813004:	f800283a 	ret

00813008 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  813008:	defffe04 	addi	sp,sp,-8
  81300c:	dfc00115 	stw	ra,4(sp)
  813010:	df000015 	stw	fp,0(sp)
  813014:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  813018:	018020b4 	movhi	r6,130
  81301c:	31a4cb04 	addi	r6,r6,-27860
  813020:	01402074 	movhi	r5,129
  813024:	295d9204 	addi	r5,r5,30280
  813028:	010020b4 	movhi	r4,130
  81302c:	2124cb04 	addi	r4,r4,-27860
  813030:	0812fa00 	call	812fa0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  813034:	01802034 	movhi	r6,128
  813038:	31809104 	addi	r6,r6,580
  81303c:	01402034 	movhi	r5,128
  813040:	29400804 	addi	r5,r5,32
  813044:	01002034 	movhi	r4,128
  813048:	21000804 	addi	r4,r4,32
  81304c:	0812fa00 	call	812fa0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  813050:	01802074 	movhi	r6,129
  813054:	319d9204 	addi	r6,r6,30280
  813058:	01402074 	movhi	r5,129
  81305c:	295bbb04 	addi	r5,r5,28396
  813060:	01002074 	movhi	r4,129
  813064:	211bbb04 	addi	r4,r4,28396
  813068:	0812fa00 	call	812fa0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  81306c:	0815ea40 	call	815ea4 <alt_dcache_flush_all>
  alt_icache_flush_all();
  813070:	08162c80 	call	8162c8 <alt_icache_flush_all>
}
  813074:	0001883a 	nop
  813078:	e037883a 	mov	sp,fp
  81307c:	dfc00117 	ldw	ra,4(sp)
  813080:	df000017 	ldw	fp,0(sp)
  813084:	dec00204 	addi	sp,sp,8
  813088:	f800283a 	ret

0081308c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81308c:	defffe04 	addi	sp,sp,-8
  813090:	dfc00115 	stw	ra,4(sp)
  813094:	df000015 	stw	fp,0(sp)
  813098:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81309c:	d0a00e17 	ldw	r2,-32712(gp)
  8130a0:	10000326 	beq	r2,zero,8130b0 <alt_get_errno+0x24>
  8130a4:	d0a00e17 	ldw	r2,-32712(gp)
  8130a8:	103ee83a 	callr	r2
  8130ac:	00000106 	br	8130b4 <alt_get_errno+0x28>
  8130b0:	d0a75504 	addi	r2,gp,-25260
}
  8130b4:	e037883a 	mov	sp,fp
  8130b8:	dfc00117 	ldw	ra,4(sp)
  8130bc:	df000017 	ldw	fp,0(sp)
  8130c0:	dec00204 	addi	sp,sp,8
  8130c4:	f800283a 	ret

008130c8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  8130c8:	defff904 	addi	sp,sp,-28
  8130cc:	dfc00615 	stw	ra,24(sp)
  8130d0:	df000515 	stw	fp,20(sp)
  8130d4:	df000504 	addi	fp,sp,20
  8130d8:	e13ffd15 	stw	r4,-12(fp)
  8130dc:	e17ffe15 	stw	r5,-8(fp)
  8130e0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  8130e4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8130e8:	e0bffd17 	ldw	r2,-12(fp)
  8130ec:	10000616 	blt	r2,zero,813108 <lseek+0x40>
  8130f0:	e0bffd17 	ldw	r2,-12(fp)
  8130f4:	10c00324 	muli	r3,r2,12
  8130f8:	00802074 	movhi	r2,129
  8130fc:	109fc504 	addi	r2,r2,32532
  813100:	1885883a 	add	r2,r3,r2
  813104:	00000106 	br	81310c <lseek+0x44>
  813108:	0005883a 	mov	r2,zero
  81310c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  813110:	e0bffc17 	ldw	r2,-16(fp)
  813114:	10001026 	beq	r2,zero,813158 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  813118:	e0bffc17 	ldw	r2,-16(fp)
  81311c:	10800017 	ldw	r2,0(r2)
  813120:	10800717 	ldw	r2,28(r2)
  813124:	10000926 	beq	r2,zero,81314c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  813128:	e0bffc17 	ldw	r2,-16(fp)
  81312c:	10800017 	ldw	r2,0(r2)
  813130:	10800717 	ldw	r2,28(r2)
  813134:	e1bfff17 	ldw	r6,-4(fp)
  813138:	e17ffe17 	ldw	r5,-8(fp)
  81313c:	e13ffc17 	ldw	r4,-16(fp)
  813140:	103ee83a 	callr	r2
  813144:	e0bffb15 	stw	r2,-20(fp)
  813148:	00000506 	br	813160 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  81314c:	00bfde84 	movi	r2,-134
  813150:	e0bffb15 	stw	r2,-20(fp)
  813154:	00000206 	br	813160 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  813158:	00bfebc4 	movi	r2,-81
  81315c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  813160:	e0bffb17 	ldw	r2,-20(fp)
  813164:	1000070e 	bge	r2,zero,813184 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  813168:	081308c0 	call	81308c <alt_get_errno>
  81316c:	1007883a 	mov	r3,r2
  813170:	e0bffb17 	ldw	r2,-20(fp)
  813174:	0085c83a 	sub	r2,zero,r2
  813178:	18800015 	stw	r2,0(r3)
    rc = -1;
  81317c:	00bfffc4 	movi	r2,-1
  813180:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  813184:	e0bffb17 	ldw	r2,-20(fp)
}
  813188:	e037883a 	mov	sp,fp
  81318c:	dfc00117 	ldw	ra,4(sp)
  813190:	df000017 	ldw	fp,0(sp)
  813194:	dec00204 	addi	sp,sp,8
  813198:	f800283a 	ret

0081319c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  81319c:	defffd04 	addi	sp,sp,-12
  8131a0:	dfc00215 	stw	ra,8(sp)
  8131a4:	df000115 	stw	fp,4(sp)
  8131a8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8131ac:	0009883a 	mov	r4,zero
  8131b0:	08138680 	call	813868 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  8131b4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8131b8:	08138a00 	call	8138a0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8131bc:	01802074 	movhi	r6,129
  8131c0:	319ce404 	addi	r6,r6,29584
  8131c4:	01402074 	movhi	r5,129
  8131c8:	295ce404 	addi	r5,r5,29584
  8131cc:	01002074 	movhi	r4,129
  8131d0:	211ce404 	addi	r4,r4,29584
  8131d4:	08166600 	call	816660 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8131d8:	0815fcc0 	call	815fcc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8131dc:	01002074 	movhi	r4,129
  8131e0:	21180b04 	addi	r4,r4,24620
  8131e4:	0816b580 	call	816b58 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8131e8:	d0a75917 	ldw	r2,-25244(gp)
  8131ec:	d0e75a17 	ldw	r3,-25240(gp)
  8131f0:	d1275b17 	ldw	r4,-25236(gp)
  8131f4:	200d883a 	mov	r6,r4
  8131f8:	180b883a 	mov	r5,r3
  8131fc:	1009883a 	mov	r4,r2
  813200:	0805f1c0 	call	805f1c <main>
  813204:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  813208:	01000044 	movi	r4,1
  81320c:	0812cd80 	call	812cd8 <close>
  exit (result);
  813210:	e13fff17 	ldw	r4,-4(fp)
  813214:	0816b6c0 	call	816b6c <exit>

00813218 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  813218:	defffe04 	addi	sp,sp,-8
  81321c:	df000115 	stw	fp,4(sp)
  813220:	df000104 	addi	fp,sp,4
  813224:	e13fff15 	stw	r4,-4(fp)
}
  813228:	0001883a 	nop
  81322c:	e037883a 	mov	sp,fp
  813230:	df000017 	ldw	fp,0(sp)
  813234:	dec00104 	addi	sp,sp,4
  813238:	f800283a 	ret

0081323c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  81323c:	defffe04 	addi	sp,sp,-8
  813240:	df000115 	stw	fp,4(sp)
  813244:	df000104 	addi	fp,sp,4
  813248:	e13fff15 	stw	r4,-4(fp)
}
  81324c:	0001883a 	nop
  813250:	e037883a 	mov	sp,fp
  813254:	df000017 	ldw	fp,0(sp)
  813258:	dec00104 	addi	sp,sp,4
  81325c:	f800283a 	ret

00813260 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813260:	defffe04 	addi	sp,sp,-8
  813264:	dfc00115 	stw	ra,4(sp)
  813268:	df000015 	stw	fp,0(sp)
  81326c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813270:	d0a00e17 	ldw	r2,-32712(gp)
  813274:	10000326 	beq	r2,zero,813284 <alt_get_errno+0x24>
  813278:	d0a00e17 	ldw	r2,-32712(gp)
  81327c:	103ee83a 	callr	r2
  813280:	00000106 	br	813288 <alt_get_errno+0x28>
  813284:	d0a75504 	addi	r2,gp,-25260
}
  813288:	e037883a 	mov	sp,fp
  81328c:	dfc00117 	ldw	ra,4(sp)
  813290:	df000017 	ldw	fp,0(sp)
  813294:	dec00204 	addi	sp,sp,8
  813298:	f800283a 	ret

0081329c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  81329c:	defffd04 	addi	sp,sp,-12
  8132a0:	df000215 	stw	fp,8(sp)
  8132a4:	df000204 	addi	fp,sp,8
  8132a8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8132ac:	e0bfff17 	ldw	r2,-4(fp)
  8132b0:	10800217 	ldw	r2,8(r2)
  8132b4:	10d00034 	orhi	r3,r2,16384
  8132b8:	e0bfff17 	ldw	r2,-4(fp)
  8132bc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8132c0:	e03ffe15 	stw	zero,-8(fp)
  8132c4:	00001d06 	br	81333c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8132c8:	00802074 	movhi	r2,129
  8132cc:	109fc504 	addi	r2,r2,32532
  8132d0:	e0fffe17 	ldw	r3,-8(fp)
  8132d4:	18c00324 	muli	r3,r3,12
  8132d8:	10c5883a 	add	r2,r2,r3
  8132dc:	10c00017 	ldw	r3,0(r2)
  8132e0:	e0bfff17 	ldw	r2,-4(fp)
  8132e4:	10800017 	ldw	r2,0(r2)
  8132e8:	1880111e 	bne	r3,r2,813330 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8132ec:	00802074 	movhi	r2,129
  8132f0:	109fc504 	addi	r2,r2,32532
  8132f4:	e0fffe17 	ldw	r3,-8(fp)
  8132f8:	18c00324 	muli	r3,r3,12
  8132fc:	10c5883a 	add	r2,r2,r3
  813300:	10800204 	addi	r2,r2,8
  813304:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  813308:	1000090e 	bge	r2,zero,813330 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  81330c:	e0bffe17 	ldw	r2,-8(fp)
  813310:	10c00324 	muli	r3,r2,12
  813314:	00802074 	movhi	r2,129
  813318:	109fc504 	addi	r2,r2,32532
  81331c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  813320:	e0bfff17 	ldw	r2,-4(fp)
  813324:	18800226 	beq	r3,r2,813330 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  813328:	00bffcc4 	movi	r2,-13
  81332c:	00000806 	br	813350 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  813330:	e0bffe17 	ldw	r2,-8(fp)
  813334:	10800044 	addi	r2,r2,1
  813338:	e0bffe15 	stw	r2,-8(fp)
  81333c:	d0a00d17 	ldw	r2,-32716(gp)
  813340:	1007883a 	mov	r3,r2
  813344:	e0bffe17 	ldw	r2,-8(fp)
  813348:	18bfdf2e 	bgeu	r3,r2,8132c8 <__alt_mem_onchip_mem+0xff80b2c8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  81334c:	0005883a 	mov	r2,zero
}
  813350:	e037883a 	mov	sp,fp
  813354:	df000017 	ldw	fp,0(sp)
  813358:	dec00104 	addi	sp,sp,4
  81335c:	f800283a 	ret

00813360 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  813360:	defff604 	addi	sp,sp,-40
  813364:	dfc00915 	stw	ra,36(sp)
  813368:	df000815 	stw	fp,32(sp)
  81336c:	df000804 	addi	fp,sp,32
  813370:	e13ffd15 	stw	r4,-12(fp)
  813374:	e17ffe15 	stw	r5,-8(fp)
  813378:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  81337c:	00bfffc4 	movi	r2,-1
  813380:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  813384:	00bffb44 	movi	r2,-19
  813388:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  81338c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  813390:	d1600b04 	addi	r5,gp,-32724
  813394:	e13ffd17 	ldw	r4,-12(fp)
  813398:	081608c0 	call	81608c <alt_find_dev>
  81339c:	e0bff815 	stw	r2,-32(fp)
  8133a0:	e0bff817 	ldw	r2,-32(fp)
  8133a4:	1000051e 	bne	r2,zero,8133bc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8133a8:	e13ffd17 	ldw	r4,-12(fp)
  8133ac:	081611c0 	call	81611c <alt_find_file>
  8133b0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  8133b4:	00800044 	movi	r2,1
  8133b8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8133bc:	e0bff817 	ldw	r2,-32(fp)
  8133c0:	10002926 	beq	r2,zero,813468 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  8133c4:	e13ff817 	ldw	r4,-32(fp)
  8133c8:	08162240 	call	816224 <alt_get_fd>
  8133cc:	e0bff915 	stw	r2,-28(fp)
  8133d0:	e0bff917 	ldw	r2,-28(fp)
  8133d4:	1000030e 	bge	r2,zero,8133e4 <open+0x84>
    {
      status = index;
  8133d8:	e0bff917 	ldw	r2,-28(fp)
  8133dc:	e0bffa15 	stw	r2,-24(fp)
  8133e0:	00002306 	br	813470 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  8133e4:	e0bff917 	ldw	r2,-28(fp)
  8133e8:	10c00324 	muli	r3,r2,12
  8133ec:	00802074 	movhi	r2,129
  8133f0:	109fc504 	addi	r2,r2,32532
  8133f4:	1885883a 	add	r2,r3,r2
  8133f8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8133fc:	e0fffe17 	ldw	r3,-8(fp)
  813400:	00900034 	movhi	r2,16384
  813404:	10bfffc4 	addi	r2,r2,-1
  813408:	1886703a 	and	r3,r3,r2
  81340c:	e0bffc17 	ldw	r2,-16(fp)
  813410:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  813414:	e0bffb17 	ldw	r2,-20(fp)
  813418:	1000051e 	bne	r2,zero,813430 <open+0xd0>
  81341c:	e13ffc17 	ldw	r4,-16(fp)
  813420:	081329c0 	call	81329c <alt_file_locked>
  813424:	e0bffa15 	stw	r2,-24(fp)
  813428:	e0bffa17 	ldw	r2,-24(fp)
  81342c:	10001016 	blt	r2,zero,813470 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  813430:	e0bff817 	ldw	r2,-32(fp)
  813434:	10800317 	ldw	r2,12(r2)
  813438:	10000826 	beq	r2,zero,81345c <open+0xfc>
  81343c:	e0bff817 	ldw	r2,-32(fp)
  813440:	10800317 	ldw	r2,12(r2)
  813444:	e1ffff17 	ldw	r7,-4(fp)
  813448:	e1bffe17 	ldw	r6,-8(fp)
  81344c:	e17ffd17 	ldw	r5,-12(fp)
  813450:	e13ffc17 	ldw	r4,-16(fp)
  813454:	103ee83a 	callr	r2
  813458:	00000106 	br	813460 <open+0x100>
  81345c:	0005883a 	mov	r2,zero
  813460:	e0bffa15 	stw	r2,-24(fp)
  813464:	00000206 	br	813470 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  813468:	00bffb44 	movi	r2,-19
  81346c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  813470:	e0bffa17 	ldw	r2,-24(fp)
  813474:	1000090e 	bge	r2,zero,81349c <open+0x13c>
  {
    alt_release_fd (index);  
  813478:	e13ff917 	ldw	r4,-28(fp)
  81347c:	08135ec0 	call	8135ec <alt_release_fd>
    ALT_ERRNO = -status;
  813480:	08132600 	call	813260 <alt_get_errno>
  813484:	1007883a 	mov	r3,r2
  813488:	e0bffa17 	ldw	r2,-24(fp)
  81348c:	0085c83a 	sub	r2,zero,r2
  813490:	18800015 	stw	r2,0(r3)
    return -1;
  813494:	00bfffc4 	movi	r2,-1
  813498:	00000106 	br	8134a0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  81349c:	e0bff917 	ldw	r2,-28(fp)
}
  8134a0:	e037883a 	mov	sp,fp
  8134a4:	dfc00117 	ldw	ra,4(sp)
  8134a8:	df000017 	ldw	fp,0(sp)
  8134ac:	dec00204 	addi	sp,sp,8
  8134b0:	f800283a 	ret

008134b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8134b4:	defffe04 	addi	sp,sp,-8
  8134b8:	dfc00115 	stw	ra,4(sp)
  8134bc:	df000015 	stw	fp,0(sp)
  8134c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8134c4:	d0a00e17 	ldw	r2,-32712(gp)
  8134c8:	10000326 	beq	r2,zero,8134d8 <alt_get_errno+0x24>
  8134cc:	d0a00e17 	ldw	r2,-32712(gp)
  8134d0:	103ee83a 	callr	r2
  8134d4:	00000106 	br	8134dc <alt_get_errno+0x28>
  8134d8:	d0a75504 	addi	r2,gp,-25260
}
  8134dc:	e037883a 	mov	sp,fp
  8134e0:	dfc00117 	ldw	ra,4(sp)
  8134e4:	df000017 	ldw	fp,0(sp)
  8134e8:	dec00204 	addi	sp,sp,8
  8134ec:	f800283a 	ret

008134f0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8134f0:	defff904 	addi	sp,sp,-28
  8134f4:	dfc00615 	stw	ra,24(sp)
  8134f8:	df000515 	stw	fp,20(sp)
  8134fc:	df000504 	addi	fp,sp,20
  813500:	e13ffd15 	stw	r4,-12(fp)
  813504:	e17ffe15 	stw	r5,-8(fp)
  813508:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81350c:	e0bffd17 	ldw	r2,-12(fp)
  813510:	10000616 	blt	r2,zero,81352c <read+0x3c>
  813514:	e0bffd17 	ldw	r2,-12(fp)
  813518:	10c00324 	muli	r3,r2,12
  81351c:	00802074 	movhi	r2,129
  813520:	109fc504 	addi	r2,r2,32532
  813524:	1885883a 	add	r2,r3,r2
  813528:	00000106 	br	813530 <read+0x40>
  81352c:	0005883a 	mov	r2,zero
  813530:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  813534:	e0bffb17 	ldw	r2,-20(fp)
  813538:	10002226 	beq	r2,zero,8135c4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  81353c:	e0bffb17 	ldw	r2,-20(fp)
  813540:	10800217 	ldw	r2,8(r2)
  813544:	108000cc 	andi	r2,r2,3
  813548:	10800060 	cmpeqi	r2,r2,1
  81354c:	1000181e 	bne	r2,zero,8135b0 <read+0xc0>
        (fd->dev->read))
  813550:	e0bffb17 	ldw	r2,-20(fp)
  813554:	10800017 	ldw	r2,0(r2)
  813558:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  81355c:	10001426 	beq	r2,zero,8135b0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  813560:	e0bffb17 	ldw	r2,-20(fp)
  813564:	10800017 	ldw	r2,0(r2)
  813568:	10800517 	ldw	r2,20(r2)
  81356c:	e0ffff17 	ldw	r3,-4(fp)
  813570:	180d883a 	mov	r6,r3
  813574:	e17ffe17 	ldw	r5,-8(fp)
  813578:	e13ffb17 	ldw	r4,-20(fp)
  81357c:	103ee83a 	callr	r2
  813580:	e0bffc15 	stw	r2,-16(fp)
  813584:	e0bffc17 	ldw	r2,-16(fp)
  813588:	1000070e 	bge	r2,zero,8135a8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  81358c:	08134b40 	call	8134b4 <alt_get_errno>
  813590:	1007883a 	mov	r3,r2
  813594:	e0bffc17 	ldw	r2,-16(fp)
  813598:	0085c83a 	sub	r2,zero,r2
  81359c:	18800015 	stw	r2,0(r3)
          return -1;
  8135a0:	00bfffc4 	movi	r2,-1
  8135a4:	00000c06 	br	8135d8 <read+0xe8>
        }
        return rval;
  8135a8:	e0bffc17 	ldw	r2,-16(fp)
  8135ac:	00000a06 	br	8135d8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  8135b0:	08134b40 	call	8134b4 <alt_get_errno>
  8135b4:	1007883a 	mov	r3,r2
  8135b8:	00800344 	movi	r2,13
  8135bc:	18800015 	stw	r2,0(r3)
  8135c0:	00000406 	br	8135d4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8135c4:	08134b40 	call	8134b4 <alt_get_errno>
  8135c8:	1007883a 	mov	r3,r2
  8135cc:	00801444 	movi	r2,81
  8135d0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8135d4:	00bfffc4 	movi	r2,-1
}
  8135d8:	e037883a 	mov	sp,fp
  8135dc:	dfc00117 	ldw	ra,4(sp)
  8135e0:	df000017 	ldw	fp,0(sp)
  8135e4:	dec00204 	addi	sp,sp,8
  8135e8:	f800283a 	ret

008135ec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8135ec:	defffe04 	addi	sp,sp,-8
  8135f0:	df000115 	stw	fp,4(sp)
  8135f4:	df000104 	addi	fp,sp,4
  8135f8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8135fc:	e0bfff17 	ldw	r2,-4(fp)
  813600:	108000d0 	cmplti	r2,r2,3
  813604:	10000d1e 	bne	r2,zero,81363c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  813608:	00802074 	movhi	r2,129
  81360c:	109fc504 	addi	r2,r2,32532
  813610:	e0ffff17 	ldw	r3,-4(fp)
  813614:	18c00324 	muli	r3,r3,12
  813618:	10c5883a 	add	r2,r2,r3
  81361c:	10800204 	addi	r2,r2,8
  813620:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  813624:	00802074 	movhi	r2,129
  813628:	109fc504 	addi	r2,r2,32532
  81362c:	e0ffff17 	ldw	r3,-4(fp)
  813630:	18c00324 	muli	r3,r3,12
  813634:	10c5883a 	add	r2,r2,r3
  813638:	10000015 	stw	zero,0(r2)
  }
}
  81363c:	0001883a 	nop
  813640:	e037883a 	mov	sp,fp
  813644:	df000017 	ldw	fp,0(sp)
  813648:	dec00104 	addi	sp,sp,4
  81364c:	f800283a 	ret

00813650 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  813650:	defff904 	addi	sp,sp,-28
  813654:	df000615 	stw	fp,24(sp)
  813658:	df000604 	addi	fp,sp,24
  81365c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813660:	0005303a 	rdctl	r2,status
  813664:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813668:	e0fffe17 	ldw	r3,-8(fp)
  81366c:	00bfff84 	movi	r2,-2
  813670:	1884703a 	and	r2,r3,r2
  813674:	1001703a 	wrctl	status,r2
  
  return context;
  813678:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  81367c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  813680:	d0a00f17 	ldw	r2,-32708(gp)
  813684:	10c000c4 	addi	r3,r2,3
  813688:	00bfff04 	movi	r2,-4
  81368c:	1884703a 	and	r2,r3,r2
  813690:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  813694:	d0e00f17 	ldw	r3,-32708(gp)
  813698:	e0bfff17 	ldw	r2,-4(fp)
  81369c:	1887883a 	add	r3,r3,r2
  8136a0:	00804034 	movhi	r2,256
  8136a4:	10800004 	addi	r2,r2,0
  8136a8:	10c0062e 	bgeu	r2,r3,8136c4 <sbrk+0x74>
  8136ac:	e0bffb17 	ldw	r2,-20(fp)
  8136b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8136b4:	e0bffa17 	ldw	r2,-24(fp)
  8136b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  8136bc:	00bfffc4 	movi	r2,-1
  8136c0:	00000b06 	br	8136f0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  8136c4:	d0a00f17 	ldw	r2,-32708(gp)
  8136c8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  8136cc:	d0e00f17 	ldw	r3,-32708(gp)
  8136d0:	e0bfff17 	ldw	r2,-4(fp)
  8136d4:	1885883a 	add	r2,r3,r2
  8136d8:	d0a00f15 	stw	r2,-32708(gp)
  8136dc:	e0bffb17 	ldw	r2,-20(fp)
  8136e0:	e0bffc15 	stw	r2,-16(fp)
  8136e4:	e0bffc17 	ldw	r2,-16(fp)
  8136e8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8136ec:	e0bffd17 	ldw	r2,-12(fp)
} 
  8136f0:	e037883a 	mov	sp,fp
  8136f4:	df000017 	ldw	fp,0(sp)
  8136f8:	dec00104 	addi	sp,sp,4
  8136fc:	f800283a 	ret

00813700 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813700:	defffe04 	addi	sp,sp,-8
  813704:	dfc00115 	stw	ra,4(sp)
  813708:	df000015 	stw	fp,0(sp)
  81370c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813710:	d0a00e17 	ldw	r2,-32712(gp)
  813714:	10000326 	beq	r2,zero,813724 <alt_get_errno+0x24>
  813718:	d0a00e17 	ldw	r2,-32712(gp)
  81371c:	103ee83a 	callr	r2
  813720:	00000106 	br	813728 <alt_get_errno+0x28>
  813724:	d0a75504 	addi	r2,gp,-25260
}
  813728:	e037883a 	mov	sp,fp
  81372c:	dfc00117 	ldw	ra,4(sp)
  813730:	df000017 	ldw	fp,0(sp)
  813734:	dec00204 	addi	sp,sp,8
  813738:	f800283a 	ret

0081373c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  81373c:	defff904 	addi	sp,sp,-28
  813740:	dfc00615 	stw	ra,24(sp)
  813744:	df000515 	stw	fp,20(sp)
  813748:	df000504 	addi	fp,sp,20
  81374c:	e13ffd15 	stw	r4,-12(fp)
  813750:	e17ffe15 	stw	r5,-8(fp)
  813754:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  813758:	e0bffd17 	ldw	r2,-12(fp)
  81375c:	10000616 	blt	r2,zero,813778 <write+0x3c>
  813760:	e0bffd17 	ldw	r2,-12(fp)
  813764:	10c00324 	muli	r3,r2,12
  813768:	00802074 	movhi	r2,129
  81376c:	109fc504 	addi	r2,r2,32532
  813770:	1885883a 	add	r2,r3,r2
  813774:	00000106 	br	81377c <write+0x40>
  813778:	0005883a 	mov	r2,zero
  81377c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  813780:	e0bffb17 	ldw	r2,-20(fp)
  813784:	10002126 	beq	r2,zero,81380c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  813788:	e0bffb17 	ldw	r2,-20(fp)
  81378c:	10800217 	ldw	r2,8(r2)
  813790:	108000cc 	andi	r2,r2,3
  813794:	10001826 	beq	r2,zero,8137f8 <write+0xbc>
  813798:	e0bffb17 	ldw	r2,-20(fp)
  81379c:	10800017 	ldw	r2,0(r2)
  8137a0:	10800617 	ldw	r2,24(r2)
  8137a4:	10001426 	beq	r2,zero,8137f8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  8137a8:	e0bffb17 	ldw	r2,-20(fp)
  8137ac:	10800017 	ldw	r2,0(r2)
  8137b0:	10800617 	ldw	r2,24(r2)
  8137b4:	e0ffff17 	ldw	r3,-4(fp)
  8137b8:	180d883a 	mov	r6,r3
  8137bc:	e17ffe17 	ldw	r5,-8(fp)
  8137c0:	e13ffb17 	ldw	r4,-20(fp)
  8137c4:	103ee83a 	callr	r2
  8137c8:	e0bffc15 	stw	r2,-16(fp)
  8137cc:	e0bffc17 	ldw	r2,-16(fp)
  8137d0:	1000070e 	bge	r2,zero,8137f0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  8137d4:	08137000 	call	813700 <alt_get_errno>
  8137d8:	1007883a 	mov	r3,r2
  8137dc:	e0bffc17 	ldw	r2,-16(fp)
  8137e0:	0085c83a 	sub	r2,zero,r2
  8137e4:	18800015 	stw	r2,0(r3)
        return -1;
  8137e8:	00bfffc4 	movi	r2,-1
  8137ec:	00000c06 	br	813820 <write+0xe4>
      }
      return rval;
  8137f0:	e0bffc17 	ldw	r2,-16(fp)
  8137f4:	00000a06 	br	813820 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8137f8:	08137000 	call	813700 <alt_get_errno>
  8137fc:	1007883a 	mov	r3,r2
  813800:	00800344 	movi	r2,13
  813804:	18800015 	stw	r2,0(r3)
  813808:	00000406 	br	81381c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  81380c:	08137000 	call	813700 <alt_get_errno>
  813810:	1007883a 	mov	r3,r2
  813814:	00801444 	movi	r2,81
  813818:	18800015 	stw	r2,0(r3)
  }
  return -1;
  81381c:	00bfffc4 	movi	r2,-1
}
  813820:	e037883a 	mov	sp,fp
  813824:	dfc00117 	ldw	ra,4(sp)
  813828:	df000017 	ldw	fp,0(sp)
  81382c:	dec00204 	addi	sp,sp,8
  813830:	f800283a 	ret

00813834 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  813834:	defffd04 	addi	sp,sp,-12
  813838:	dfc00215 	stw	ra,8(sp)
  81383c:	df000115 	stw	fp,4(sp)
  813840:	df000104 	addi	fp,sp,4
  813844:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  813848:	d1600b04 	addi	r5,gp,-32724
  81384c:	e13fff17 	ldw	r4,-4(fp)
  813850:	0815f280 	call	815f28 <alt_dev_llist_insert>
}
  813854:	e037883a 	mov	sp,fp
  813858:	dfc00117 	ldw	ra,4(sp)
  81385c:	df000017 	ldw	fp,0(sp)
  813860:	dec00204 	addi	sp,sp,8
  813864:	f800283a 	ret

00813868 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  813868:	defffd04 	addi	sp,sp,-12
  81386c:	dfc00215 	stw	ra,8(sp)
  813870:	df000115 	stw	fp,4(sp)
  813874:	df000104 	addi	fp,sp,4
  813878:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  81387c:	08168b00 	call	8168b0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  813880:	00800044 	movi	r2,1
  813884:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  813888:	0001883a 	nop
  81388c:	e037883a 	mov	sp,fp
  813890:	dfc00117 	ldw	ra,4(sp)
  813894:	df000017 	ldw	fp,0(sp)
  813898:	dec00204 	addi	sp,sp,8
  81389c:	f800283a 	ret

008138a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8138a0:	defffe04 	addi	sp,sp,-8
  8138a4:	dfc00115 	stw	ra,4(sp)
  8138a8:	df000015 	stw	fp,0(sp)
  8138ac:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  8138b0:	01c0fa04 	movi	r7,1000
  8138b4:	01800084 	movi	r6,2
  8138b8:	000b883a 	mov	r5,zero
  8138bc:	01004074 	movhi	r4,257
  8138c0:	21040804 	addi	r4,r4,4128
  8138c4:	081530c0 	call	81530c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
  8138c8:	00804074 	movhi	r2,257
  8138cc:	10840004 	addi	r2,r2,4096
  8138d0:	d0a75c15 	stw	r2,-25232(gp)
  8138d4:	0080bef4 	movhi	r2,763
  8138d8:	10bc2004 	addi	r2,r2,-3968
  8138dc:	d0a75d15 	stw	r2,-25228(gp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  8138e0:	01800044 	movi	r6,1
  8138e4:	000b883a 	mov	r5,zero
  8138e8:	010020b4 	movhi	r4,130
  8138ec:	21202f04 	addi	r4,r4,-32580
  8138f0:	0813ab40 	call	813ab4 <altera_avalon_jtag_uart_init>
  8138f4:	010020b4 	movhi	r4,130
  8138f8:	21202504 	addi	r4,r4,-32620
  8138fc:	08138340 	call	813834 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  813900:	010020b4 	movhi	r4,130
  813904:	21244704 	addi	r4,r4,-28388
  813908:	08151000 	call	815100 <altera_avalon_lcd_16207_init>
  81390c:	010020b4 	movhi	r4,130
  813910:	21243d04 	addi	r4,r4,-28428
  813914:	08138340 	call	813834 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART, uart);
  813918:	000d883a 	mov	r6,zero
  81391c:	000b883a 	mov	r5,zero
  813920:	010020b4 	movhi	r4,130
  813924:	21248f04 	addi	r4,r4,-28100
  813928:	08155b00 	call	8155b0 <altera_avalon_uart_init>
  81392c:	010020b4 	movhi	r4,130
  813930:	21248504 	addi	r4,r4,-28140
  813934:	08138340 	call	813834 <alt_dev_reg>
}
  813938:	0001883a 	nop
  81393c:	e037883a 	mov	sp,fp
  813940:	dfc00117 	ldw	ra,4(sp)
  813944:	df000017 	ldw	fp,0(sp)
  813948:	dec00204 	addi	sp,sp,8
  81394c:	f800283a 	ret

00813950 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  813950:	defffa04 	addi	sp,sp,-24
  813954:	dfc00515 	stw	ra,20(sp)
  813958:	df000415 	stw	fp,16(sp)
  81395c:	df000404 	addi	fp,sp,16
  813960:	e13ffd15 	stw	r4,-12(fp)
  813964:	e17ffe15 	stw	r5,-8(fp)
  813968:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81396c:	e0bffd17 	ldw	r2,-12(fp)
  813970:	10800017 	ldw	r2,0(r2)
  813974:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  813978:	e0bffc17 	ldw	r2,-16(fp)
  81397c:	10c00a04 	addi	r3,r2,40
  813980:	e0bffd17 	ldw	r2,-12(fp)
  813984:	10800217 	ldw	r2,8(r2)
  813988:	100f883a 	mov	r7,r2
  81398c:	e1bfff17 	ldw	r6,-4(fp)
  813990:	e17ffe17 	ldw	r5,-8(fp)
  813994:	1809883a 	mov	r4,r3
  813998:	0813f780 	call	813f78 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  81399c:	e037883a 	mov	sp,fp
  8139a0:	dfc00117 	ldw	ra,4(sp)
  8139a4:	df000017 	ldw	fp,0(sp)
  8139a8:	dec00204 	addi	sp,sp,8
  8139ac:	f800283a 	ret

008139b0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8139b0:	defffa04 	addi	sp,sp,-24
  8139b4:	dfc00515 	stw	ra,20(sp)
  8139b8:	df000415 	stw	fp,16(sp)
  8139bc:	df000404 	addi	fp,sp,16
  8139c0:	e13ffd15 	stw	r4,-12(fp)
  8139c4:	e17ffe15 	stw	r5,-8(fp)
  8139c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8139cc:	e0bffd17 	ldw	r2,-12(fp)
  8139d0:	10800017 	ldw	r2,0(r2)
  8139d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8139d8:	e0bffc17 	ldw	r2,-16(fp)
  8139dc:	10c00a04 	addi	r3,r2,40
  8139e0:	e0bffd17 	ldw	r2,-12(fp)
  8139e4:	10800217 	ldw	r2,8(r2)
  8139e8:	100f883a 	mov	r7,r2
  8139ec:	e1bfff17 	ldw	r6,-4(fp)
  8139f0:	e17ffe17 	ldw	r5,-8(fp)
  8139f4:	1809883a 	mov	r4,r3
  8139f8:	08141940 	call	814194 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  8139fc:	e037883a 	mov	sp,fp
  813a00:	dfc00117 	ldw	ra,4(sp)
  813a04:	df000017 	ldw	fp,0(sp)
  813a08:	dec00204 	addi	sp,sp,8
  813a0c:	f800283a 	ret

00813a10 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  813a10:	defffc04 	addi	sp,sp,-16
  813a14:	dfc00315 	stw	ra,12(sp)
  813a18:	df000215 	stw	fp,8(sp)
  813a1c:	df000204 	addi	fp,sp,8
  813a20:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  813a24:	e0bfff17 	ldw	r2,-4(fp)
  813a28:	10800017 	ldw	r2,0(r2)
  813a2c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  813a30:	e0bffe17 	ldw	r2,-8(fp)
  813a34:	10c00a04 	addi	r3,r2,40
  813a38:	e0bfff17 	ldw	r2,-4(fp)
  813a3c:	10800217 	ldw	r2,8(r2)
  813a40:	100b883a 	mov	r5,r2
  813a44:	1809883a 	mov	r4,r3
  813a48:	0813e200 	call	813e20 <altera_avalon_jtag_uart_close>
}
  813a4c:	e037883a 	mov	sp,fp
  813a50:	dfc00117 	ldw	ra,4(sp)
  813a54:	df000017 	ldw	fp,0(sp)
  813a58:	dec00204 	addi	sp,sp,8
  813a5c:	f800283a 	ret

00813a60 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  813a60:	defffa04 	addi	sp,sp,-24
  813a64:	dfc00515 	stw	ra,20(sp)
  813a68:	df000415 	stw	fp,16(sp)
  813a6c:	df000404 	addi	fp,sp,16
  813a70:	e13ffd15 	stw	r4,-12(fp)
  813a74:	e17ffe15 	stw	r5,-8(fp)
  813a78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  813a7c:	e0bffd17 	ldw	r2,-12(fp)
  813a80:	10800017 	ldw	r2,0(r2)
  813a84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  813a88:	e0bffc17 	ldw	r2,-16(fp)
  813a8c:	10800a04 	addi	r2,r2,40
  813a90:	e1bfff17 	ldw	r6,-4(fp)
  813a94:	e17ffe17 	ldw	r5,-8(fp)
  813a98:	1009883a 	mov	r4,r2
  813a9c:	0813e880 	call	813e88 <altera_avalon_jtag_uart_ioctl>
}
  813aa0:	e037883a 	mov	sp,fp
  813aa4:	dfc00117 	ldw	ra,4(sp)
  813aa8:	df000017 	ldw	fp,0(sp)
  813aac:	dec00204 	addi	sp,sp,8
  813ab0:	f800283a 	ret

00813ab4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  813ab4:	defffa04 	addi	sp,sp,-24
  813ab8:	dfc00515 	stw	ra,20(sp)
  813abc:	df000415 	stw	fp,16(sp)
  813ac0:	df000404 	addi	fp,sp,16
  813ac4:	e13ffd15 	stw	r4,-12(fp)
  813ac8:	e17ffe15 	stw	r5,-8(fp)
  813acc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  813ad0:	e0bffd17 	ldw	r2,-12(fp)
  813ad4:	00c00044 	movi	r3,1
  813ad8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  813adc:	e0bffd17 	ldw	r2,-12(fp)
  813ae0:	10800017 	ldw	r2,0(r2)
  813ae4:	10800104 	addi	r2,r2,4
  813ae8:	1007883a 	mov	r3,r2
  813aec:	e0bffd17 	ldw	r2,-12(fp)
  813af0:	10800817 	ldw	r2,32(r2)
  813af4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  813af8:	e0bffe17 	ldw	r2,-8(fp)
  813afc:	e0ffff17 	ldw	r3,-4(fp)
  813b00:	d8000015 	stw	zero,0(sp)
  813b04:	e1fffd17 	ldw	r7,-12(fp)
  813b08:	01802074 	movhi	r6,129
  813b0c:	318edd04 	addi	r6,r6,15220
  813b10:	180b883a 	mov	r5,r3
  813b14:	1009883a 	mov	r4,r2
  813b18:	08162fc0 	call	8162fc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  813b1c:	e0bffd17 	ldw	r2,-12(fp)
  813b20:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  813b24:	e0bffd17 	ldw	r2,-12(fp)
  813b28:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  813b2c:	d0e75f17 	ldw	r3,-25220(gp)
  813b30:	e1fffd17 	ldw	r7,-12(fp)
  813b34:	01802074 	movhi	r6,129
  813b38:	318f6004 	addi	r6,r6,15744
  813b3c:	180b883a 	mov	r5,r3
  813b40:	1009883a 	mov	r4,r2
  813b44:	0815d780 	call	815d78 <alt_alarm_start>
  813b48:	1000040e 	bge	r2,zero,813b5c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  813b4c:	e0fffd17 	ldw	r3,-12(fp)
  813b50:	00a00034 	movhi	r2,32768
  813b54:	10bfffc4 	addi	r2,r2,-1
  813b58:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  813b5c:	0001883a 	nop
  813b60:	e037883a 	mov	sp,fp
  813b64:	dfc00117 	ldw	ra,4(sp)
  813b68:	df000017 	ldw	fp,0(sp)
  813b6c:	dec00204 	addi	sp,sp,8
  813b70:	f800283a 	ret

00813b74 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  813b74:	defff804 	addi	sp,sp,-32
  813b78:	df000715 	stw	fp,28(sp)
  813b7c:	df000704 	addi	fp,sp,28
  813b80:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  813b84:	e0bfff17 	ldw	r2,-4(fp)
  813b88:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  813b8c:	e0bffb17 	ldw	r2,-20(fp)
  813b90:	10800017 	ldw	r2,0(r2)
  813b94:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813b98:	e0bffc17 	ldw	r2,-16(fp)
  813b9c:	10800104 	addi	r2,r2,4
  813ba0:	10800037 	ldwio	r2,0(r2)
  813ba4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  813ba8:	e0bffd17 	ldw	r2,-12(fp)
  813bac:	1080c00c 	andi	r2,r2,768
  813bb0:	10006d26 	beq	r2,zero,813d68 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  813bb4:	e0bffd17 	ldw	r2,-12(fp)
  813bb8:	1080400c 	andi	r2,r2,256
  813bbc:	10003526 	beq	r2,zero,813c94 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  813bc0:	00800074 	movhi	r2,1
  813bc4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813bc8:	e0bffb17 	ldw	r2,-20(fp)
  813bcc:	10800a17 	ldw	r2,40(r2)
  813bd0:	10800044 	addi	r2,r2,1
  813bd4:	1081ffcc 	andi	r2,r2,2047
  813bd8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  813bdc:	e0bffb17 	ldw	r2,-20(fp)
  813be0:	10c00b17 	ldw	r3,44(r2)
  813be4:	e0bffe17 	ldw	r2,-8(fp)
  813be8:	18801526 	beq	r3,r2,813c40 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  813bec:	e0bffc17 	ldw	r2,-16(fp)
  813bf0:	10800037 	ldwio	r2,0(r2)
  813bf4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  813bf8:	e0bff917 	ldw	r2,-28(fp)
  813bfc:	10a0000c 	andi	r2,r2,32768
  813c00:	10001126 	beq	r2,zero,813c48 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  813c04:	e0bffb17 	ldw	r2,-20(fp)
  813c08:	10800a17 	ldw	r2,40(r2)
  813c0c:	e0fff917 	ldw	r3,-28(fp)
  813c10:	1809883a 	mov	r4,r3
  813c14:	e0fffb17 	ldw	r3,-20(fp)
  813c18:	1885883a 	add	r2,r3,r2
  813c1c:	10800e04 	addi	r2,r2,56
  813c20:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813c24:	e0bffb17 	ldw	r2,-20(fp)
  813c28:	10800a17 	ldw	r2,40(r2)
  813c2c:	10800044 	addi	r2,r2,1
  813c30:	10c1ffcc 	andi	r3,r2,2047
  813c34:	e0bffb17 	ldw	r2,-20(fp)
  813c38:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  813c3c:	003fe206 	br	813bc8 <__alt_mem_onchip_mem+0xff80bbc8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  813c40:	0001883a 	nop
  813c44:	00000106 	br	813c4c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  813c48:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  813c4c:	e0bff917 	ldw	r2,-28(fp)
  813c50:	10bfffec 	andhi	r2,r2,65535
  813c54:	10000f26 	beq	r2,zero,813c94 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  813c58:	e0bffb17 	ldw	r2,-20(fp)
  813c5c:	10c00817 	ldw	r3,32(r2)
  813c60:	00bfff84 	movi	r2,-2
  813c64:	1886703a 	and	r3,r3,r2
  813c68:	e0bffb17 	ldw	r2,-20(fp)
  813c6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  813c70:	e0bffc17 	ldw	r2,-16(fp)
  813c74:	10800104 	addi	r2,r2,4
  813c78:	1007883a 	mov	r3,r2
  813c7c:	e0bffb17 	ldw	r2,-20(fp)
  813c80:	10800817 	ldw	r2,32(r2)
  813c84:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813c88:	e0bffc17 	ldw	r2,-16(fp)
  813c8c:	10800104 	addi	r2,r2,4
  813c90:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  813c94:	e0bffd17 	ldw	r2,-12(fp)
  813c98:	1080800c 	andi	r2,r2,512
  813c9c:	103fbe26 	beq	r2,zero,813b98 <__alt_mem_onchip_mem+0xff80bb98>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  813ca0:	e0bffd17 	ldw	r2,-12(fp)
  813ca4:	1004d43a 	srli	r2,r2,16
  813ca8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  813cac:	00001406 	br	813d00 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  813cb0:	e0bffc17 	ldw	r2,-16(fp)
  813cb4:	e0fffb17 	ldw	r3,-20(fp)
  813cb8:	18c00d17 	ldw	r3,52(r3)
  813cbc:	e13ffb17 	ldw	r4,-20(fp)
  813cc0:	20c7883a 	add	r3,r4,r3
  813cc4:	18c20e04 	addi	r3,r3,2104
  813cc8:	18c00003 	ldbu	r3,0(r3)
  813ccc:	18c03fcc 	andi	r3,r3,255
  813cd0:	18c0201c 	xori	r3,r3,128
  813cd4:	18ffe004 	addi	r3,r3,-128
  813cd8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813cdc:	e0bffb17 	ldw	r2,-20(fp)
  813ce0:	10800d17 	ldw	r2,52(r2)
  813ce4:	10800044 	addi	r2,r2,1
  813ce8:	10c1ffcc 	andi	r3,r2,2047
  813cec:	e0bffb17 	ldw	r2,-20(fp)
  813cf0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  813cf4:	e0bffa17 	ldw	r2,-24(fp)
  813cf8:	10bfffc4 	addi	r2,r2,-1
  813cfc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  813d00:	e0bffa17 	ldw	r2,-24(fp)
  813d04:	10000526 	beq	r2,zero,813d1c <altera_avalon_jtag_uart_irq+0x1a8>
  813d08:	e0bffb17 	ldw	r2,-20(fp)
  813d0c:	10c00d17 	ldw	r3,52(r2)
  813d10:	e0bffb17 	ldw	r2,-20(fp)
  813d14:	10800c17 	ldw	r2,48(r2)
  813d18:	18bfe51e 	bne	r3,r2,813cb0 <__alt_mem_onchip_mem+0xff80bcb0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  813d1c:	e0bffa17 	ldw	r2,-24(fp)
  813d20:	103f9d26 	beq	r2,zero,813b98 <__alt_mem_onchip_mem+0xff80bb98>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  813d24:	e0bffb17 	ldw	r2,-20(fp)
  813d28:	10c00817 	ldw	r3,32(r2)
  813d2c:	00bfff44 	movi	r2,-3
  813d30:	1886703a 	and	r3,r3,r2
  813d34:	e0bffb17 	ldw	r2,-20(fp)
  813d38:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  813d3c:	e0bffb17 	ldw	r2,-20(fp)
  813d40:	10800017 	ldw	r2,0(r2)
  813d44:	10800104 	addi	r2,r2,4
  813d48:	1007883a 	mov	r3,r2
  813d4c:	e0bffb17 	ldw	r2,-20(fp)
  813d50:	10800817 	ldw	r2,32(r2)
  813d54:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813d58:	e0bffc17 	ldw	r2,-16(fp)
  813d5c:	10800104 	addi	r2,r2,4
  813d60:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  813d64:	003f8c06 	br	813b98 <__alt_mem_onchip_mem+0xff80bb98>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  813d68:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  813d6c:	0001883a 	nop
  813d70:	e037883a 	mov	sp,fp
  813d74:	df000017 	ldw	fp,0(sp)
  813d78:	dec00104 	addi	sp,sp,4
  813d7c:	f800283a 	ret

00813d80 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  813d80:	defff804 	addi	sp,sp,-32
  813d84:	df000715 	stw	fp,28(sp)
  813d88:	df000704 	addi	fp,sp,28
  813d8c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  813d90:	e0bffb17 	ldw	r2,-20(fp)
  813d94:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  813d98:	e0bff917 	ldw	r2,-28(fp)
  813d9c:	10800017 	ldw	r2,0(r2)
  813da0:	10800104 	addi	r2,r2,4
  813da4:	10800037 	ldwio	r2,0(r2)
  813da8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  813dac:	e0bffa17 	ldw	r2,-24(fp)
  813db0:	1081000c 	andi	r2,r2,1024
  813db4:	10000b26 	beq	r2,zero,813de4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  813db8:	e0bff917 	ldw	r2,-28(fp)
  813dbc:	10800017 	ldw	r2,0(r2)
  813dc0:	10800104 	addi	r2,r2,4
  813dc4:	1007883a 	mov	r3,r2
  813dc8:	e0bff917 	ldw	r2,-28(fp)
  813dcc:	10800817 	ldw	r2,32(r2)
  813dd0:	10810014 	ori	r2,r2,1024
  813dd4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  813dd8:	e0bff917 	ldw	r2,-28(fp)
  813ddc:	10000915 	stw	zero,36(r2)
  813de0:	00000a06 	br	813e0c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  813de4:	e0bff917 	ldw	r2,-28(fp)
  813de8:	10c00917 	ldw	r3,36(r2)
  813dec:	00a00034 	movhi	r2,32768
  813df0:	10bfff04 	addi	r2,r2,-4
  813df4:	10c00536 	bltu	r2,r3,813e0c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  813df8:	e0bff917 	ldw	r2,-28(fp)
  813dfc:	10800917 	ldw	r2,36(r2)
  813e00:	10c00044 	addi	r3,r2,1
  813e04:	e0bff917 	ldw	r2,-28(fp)
  813e08:	10c00915 	stw	r3,36(r2)
  813e0c:	d0a75f17 	ldw	r2,-25220(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  813e10:	e037883a 	mov	sp,fp
  813e14:	df000017 	ldw	fp,0(sp)
  813e18:	dec00104 	addi	sp,sp,4
  813e1c:	f800283a 	ret

00813e20 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  813e20:	defffd04 	addi	sp,sp,-12
  813e24:	df000215 	stw	fp,8(sp)
  813e28:	df000204 	addi	fp,sp,8
  813e2c:	e13ffe15 	stw	r4,-8(fp)
  813e30:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  813e34:	00000506 	br	813e4c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  813e38:	e0bfff17 	ldw	r2,-4(fp)
  813e3c:	1090000c 	andi	r2,r2,16384
  813e40:	10000226 	beq	r2,zero,813e4c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  813e44:	00bffd44 	movi	r2,-11
  813e48:	00000b06 	br	813e78 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  813e4c:	e0bffe17 	ldw	r2,-8(fp)
  813e50:	10c00d17 	ldw	r3,52(r2)
  813e54:	e0bffe17 	ldw	r2,-8(fp)
  813e58:	10800c17 	ldw	r2,48(r2)
  813e5c:	18800526 	beq	r3,r2,813e74 <altera_avalon_jtag_uart_close+0x54>
  813e60:	e0bffe17 	ldw	r2,-8(fp)
  813e64:	10c00917 	ldw	r3,36(r2)
  813e68:	e0bffe17 	ldw	r2,-8(fp)
  813e6c:	10800117 	ldw	r2,4(r2)
  813e70:	18bff136 	bltu	r3,r2,813e38 <__alt_mem_onchip_mem+0xff80be38>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  813e74:	0005883a 	mov	r2,zero
}
  813e78:	e037883a 	mov	sp,fp
  813e7c:	df000017 	ldw	fp,0(sp)
  813e80:	dec00104 	addi	sp,sp,4
  813e84:	f800283a 	ret

00813e88 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  813e88:	defffa04 	addi	sp,sp,-24
  813e8c:	df000515 	stw	fp,20(sp)
  813e90:	df000504 	addi	fp,sp,20
  813e94:	e13ffd15 	stw	r4,-12(fp)
  813e98:	e17ffe15 	stw	r5,-8(fp)
  813e9c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  813ea0:	00bff9c4 	movi	r2,-25
  813ea4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  813ea8:	e0bffe17 	ldw	r2,-8(fp)
  813eac:	10da8060 	cmpeqi	r3,r2,27137
  813eb0:	1800031e 	bne	r3,zero,813ec0 <altera_avalon_jtag_uart_ioctl+0x38>
  813eb4:	109a80a0 	cmpeqi	r2,r2,27138
  813eb8:	1000181e 	bne	r2,zero,813f1c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  813ebc:	00002906 	br	813f64 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  813ec0:	e0bffd17 	ldw	r2,-12(fp)
  813ec4:	10c00117 	ldw	r3,4(r2)
  813ec8:	00a00034 	movhi	r2,32768
  813ecc:	10bfffc4 	addi	r2,r2,-1
  813ed0:	18802126 	beq	r3,r2,813f58 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  813ed4:	e0bfff17 	ldw	r2,-4(fp)
  813ed8:	10800017 	ldw	r2,0(r2)
  813edc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  813ee0:	e0bffc17 	ldw	r2,-16(fp)
  813ee4:	10800090 	cmplti	r2,r2,2
  813ee8:	1000061e 	bne	r2,zero,813f04 <altera_avalon_jtag_uart_ioctl+0x7c>
  813eec:	e0fffc17 	ldw	r3,-16(fp)
  813ef0:	00a00034 	movhi	r2,32768
  813ef4:	10bfffc4 	addi	r2,r2,-1
  813ef8:	18800226 	beq	r3,r2,813f04 <altera_avalon_jtag_uart_ioctl+0x7c>
  813efc:	e0bffc17 	ldw	r2,-16(fp)
  813f00:	00000206 	br	813f0c <altera_avalon_jtag_uart_ioctl+0x84>
  813f04:	00a00034 	movhi	r2,32768
  813f08:	10bfff84 	addi	r2,r2,-2
  813f0c:	e0fffd17 	ldw	r3,-12(fp)
  813f10:	18800115 	stw	r2,4(r3)
      rc = 0;
  813f14:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  813f18:	00000f06 	br	813f58 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  813f1c:	e0bffd17 	ldw	r2,-12(fp)
  813f20:	10c00117 	ldw	r3,4(r2)
  813f24:	00a00034 	movhi	r2,32768
  813f28:	10bfffc4 	addi	r2,r2,-1
  813f2c:	18800c26 	beq	r3,r2,813f60 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  813f30:	e0bffd17 	ldw	r2,-12(fp)
  813f34:	10c00917 	ldw	r3,36(r2)
  813f38:	e0bffd17 	ldw	r2,-12(fp)
  813f3c:	10800117 	ldw	r2,4(r2)
  813f40:	1885803a 	cmpltu	r2,r3,r2
  813f44:	10c03fcc 	andi	r3,r2,255
  813f48:	e0bfff17 	ldw	r2,-4(fp)
  813f4c:	10c00015 	stw	r3,0(r2)
      rc = 0;
  813f50:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  813f54:	00000206 	br	813f60 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  813f58:	0001883a 	nop
  813f5c:	00000106 	br	813f64 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  813f60:	0001883a 	nop

  default:
    break;
  }

  return rc;
  813f64:	e0bffb17 	ldw	r2,-20(fp)
}
  813f68:	e037883a 	mov	sp,fp
  813f6c:	df000017 	ldw	fp,0(sp)
  813f70:	dec00104 	addi	sp,sp,4
  813f74:	f800283a 	ret

00813f78 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  813f78:	defff304 	addi	sp,sp,-52
  813f7c:	dfc00c15 	stw	ra,48(sp)
  813f80:	df000b15 	stw	fp,44(sp)
  813f84:	df000b04 	addi	fp,sp,44
  813f88:	e13ffc15 	stw	r4,-16(fp)
  813f8c:	e17ffd15 	stw	r5,-12(fp)
  813f90:	e1bffe15 	stw	r6,-8(fp)
  813f94:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  813f98:	e0bffd17 	ldw	r2,-12(fp)
  813f9c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  813fa0:	00004706 	br	8140c0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  813fa4:	e0bffc17 	ldw	r2,-16(fp)
  813fa8:	10800a17 	ldw	r2,40(r2)
  813fac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  813fb0:	e0bffc17 	ldw	r2,-16(fp)
  813fb4:	10800b17 	ldw	r2,44(r2)
  813fb8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  813fbc:	e0fff717 	ldw	r3,-36(fp)
  813fc0:	e0bff817 	ldw	r2,-32(fp)
  813fc4:	18800536 	bltu	r3,r2,813fdc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  813fc8:	e0fff717 	ldw	r3,-36(fp)
  813fcc:	e0bff817 	ldw	r2,-32(fp)
  813fd0:	1885c83a 	sub	r2,r3,r2
  813fd4:	e0bff615 	stw	r2,-40(fp)
  813fd8:	00000406 	br	813fec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  813fdc:	00c20004 	movi	r3,2048
  813fe0:	e0bff817 	ldw	r2,-32(fp)
  813fe4:	1885c83a 	sub	r2,r3,r2
  813fe8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  813fec:	e0bff617 	ldw	r2,-40(fp)
  813ff0:	10001e26 	beq	r2,zero,81406c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  813ff4:	e0fffe17 	ldw	r3,-8(fp)
  813ff8:	e0bff617 	ldw	r2,-40(fp)
  813ffc:	1880022e 	bgeu	r3,r2,814008 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  814000:	e0bffe17 	ldw	r2,-8(fp)
  814004:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  814008:	e0bffc17 	ldw	r2,-16(fp)
  81400c:	10c00e04 	addi	r3,r2,56
  814010:	e0bff817 	ldw	r2,-32(fp)
  814014:	1885883a 	add	r2,r3,r2
  814018:	e1bff617 	ldw	r6,-40(fp)
  81401c:	100b883a 	mov	r5,r2
  814020:	e13ff517 	ldw	r4,-44(fp)
  814024:	080efa40 	call	80efa4 <memcpy>
      ptr   += n;
  814028:	e0fff517 	ldw	r3,-44(fp)
  81402c:	e0bff617 	ldw	r2,-40(fp)
  814030:	1885883a 	add	r2,r3,r2
  814034:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  814038:	e0fffe17 	ldw	r3,-8(fp)
  81403c:	e0bff617 	ldw	r2,-40(fp)
  814040:	1885c83a 	sub	r2,r3,r2
  814044:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  814048:	e0fff817 	ldw	r3,-32(fp)
  81404c:	e0bff617 	ldw	r2,-40(fp)
  814050:	1885883a 	add	r2,r3,r2
  814054:	10c1ffcc 	andi	r3,r2,2047
  814058:	e0bffc17 	ldw	r2,-16(fp)
  81405c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  814060:	e0bffe17 	ldw	r2,-8(fp)
  814064:	00bfcf16 	blt	zero,r2,813fa4 <__alt_mem_onchip_mem+0xff80bfa4>
  814068:	00000106 	br	814070 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  81406c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  814070:	e0fff517 	ldw	r3,-44(fp)
  814074:	e0bffd17 	ldw	r2,-12(fp)
  814078:	1880141e 	bne	r3,r2,8140cc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  81407c:	e0bfff17 	ldw	r2,-4(fp)
  814080:	1090000c 	andi	r2,r2,16384
  814084:	1000131e 	bne	r2,zero,8140d4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  814088:	0001883a 	nop
  81408c:	e0bffc17 	ldw	r2,-16(fp)
  814090:	10c00a17 	ldw	r3,40(r2)
  814094:	e0bff717 	ldw	r2,-36(fp)
  814098:	1880051e 	bne	r3,r2,8140b0 <altera_avalon_jtag_uart_read+0x138>
  81409c:	e0bffc17 	ldw	r2,-16(fp)
  8140a0:	10c00917 	ldw	r3,36(r2)
  8140a4:	e0bffc17 	ldw	r2,-16(fp)
  8140a8:	10800117 	ldw	r2,4(r2)
  8140ac:	18bff736 	bltu	r3,r2,81408c <__alt_mem_onchip_mem+0xff80c08c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  8140b0:	e0bffc17 	ldw	r2,-16(fp)
  8140b4:	10c00a17 	ldw	r3,40(r2)
  8140b8:	e0bff717 	ldw	r2,-36(fp)
  8140bc:	18800726 	beq	r3,r2,8140dc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8140c0:	e0bffe17 	ldw	r2,-8(fp)
  8140c4:	00bfb716 	blt	zero,r2,813fa4 <__alt_mem_onchip_mem+0xff80bfa4>
  8140c8:	00000506 	br	8140e0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  8140cc:	0001883a 	nop
  8140d0:	00000306 	br	8140e0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  8140d4:	0001883a 	nop
  8140d8:	00000106 	br	8140e0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  8140dc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  8140e0:	e0fff517 	ldw	r3,-44(fp)
  8140e4:	e0bffd17 	ldw	r2,-12(fp)
  8140e8:	18801826 	beq	r3,r2,81414c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8140ec:	0005303a 	rdctl	r2,status
  8140f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8140f4:	e0fffb17 	ldw	r3,-20(fp)
  8140f8:	00bfff84 	movi	r2,-2
  8140fc:	1884703a 	and	r2,r3,r2
  814100:	1001703a 	wrctl	status,r2
  
  return context;
  814104:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  814108:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81410c:	e0bffc17 	ldw	r2,-16(fp)
  814110:	10800817 	ldw	r2,32(r2)
  814114:	10c00054 	ori	r3,r2,1
  814118:	e0bffc17 	ldw	r2,-16(fp)
  81411c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  814120:	e0bffc17 	ldw	r2,-16(fp)
  814124:	10800017 	ldw	r2,0(r2)
  814128:	10800104 	addi	r2,r2,4
  81412c:	1007883a 	mov	r3,r2
  814130:	e0bffc17 	ldw	r2,-16(fp)
  814134:	10800817 	ldw	r2,32(r2)
  814138:	18800035 	stwio	r2,0(r3)
  81413c:	e0bffa17 	ldw	r2,-24(fp)
  814140:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814144:	e0bff917 	ldw	r2,-28(fp)
  814148:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  81414c:	e0fff517 	ldw	r3,-44(fp)
  814150:	e0bffd17 	ldw	r2,-12(fp)
  814154:	18800426 	beq	r3,r2,814168 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  814158:	e0fff517 	ldw	r3,-44(fp)
  81415c:	e0bffd17 	ldw	r2,-12(fp)
  814160:	1885c83a 	sub	r2,r3,r2
  814164:	00000606 	br	814180 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  814168:	e0bfff17 	ldw	r2,-4(fp)
  81416c:	1090000c 	andi	r2,r2,16384
  814170:	10000226 	beq	r2,zero,81417c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  814174:	00bffd44 	movi	r2,-11
  814178:	00000106 	br	814180 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  81417c:	00bffec4 	movi	r2,-5
}
  814180:	e037883a 	mov	sp,fp
  814184:	dfc00117 	ldw	ra,4(sp)
  814188:	df000017 	ldw	fp,0(sp)
  81418c:	dec00204 	addi	sp,sp,8
  814190:	f800283a 	ret

00814194 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  814194:	defff304 	addi	sp,sp,-52
  814198:	dfc00c15 	stw	ra,48(sp)
  81419c:	df000b15 	stw	fp,44(sp)
  8141a0:	df000b04 	addi	fp,sp,44
  8141a4:	e13ffc15 	stw	r4,-16(fp)
  8141a8:	e17ffd15 	stw	r5,-12(fp)
  8141ac:	e1bffe15 	stw	r6,-8(fp)
  8141b0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  8141b4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  8141b8:	e0bffd17 	ldw	r2,-12(fp)
  8141bc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8141c0:	00003706 	br	8142a0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  8141c4:	e0bffc17 	ldw	r2,-16(fp)
  8141c8:	10800c17 	ldw	r2,48(r2)
  8141cc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  8141d0:	e0bffc17 	ldw	r2,-16(fp)
  8141d4:	10800d17 	ldw	r2,52(r2)
  8141d8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  8141dc:	e0fff917 	ldw	r3,-28(fp)
  8141e0:	e0bff517 	ldw	r2,-44(fp)
  8141e4:	1880062e 	bgeu	r3,r2,814200 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  8141e8:	e0fff517 	ldw	r3,-44(fp)
  8141ec:	e0bff917 	ldw	r2,-28(fp)
  8141f0:	1885c83a 	sub	r2,r3,r2
  8141f4:	10bfffc4 	addi	r2,r2,-1
  8141f8:	e0bff615 	stw	r2,-40(fp)
  8141fc:	00000b06 	br	81422c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  814200:	e0bff517 	ldw	r2,-44(fp)
  814204:	10000526 	beq	r2,zero,81421c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  814208:	00c20004 	movi	r3,2048
  81420c:	e0bff917 	ldw	r2,-28(fp)
  814210:	1885c83a 	sub	r2,r3,r2
  814214:	e0bff615 	stw	r2,-40(fp)
  814218:	00000406 	br	81422c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  81421c:	00c1ffc4 	movi	r3,2047
  814220:	e0bff917 	ldw	r2,-28(fp)
  814224:	1885c83a 	sub	r2,r3,r2
  814228:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  81422c:	e0bff617 	ldw	r2,-40(fp)
  814230:	10001e26 	beq	r2,zero,8142ac <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  814234:	e0fffe17 	ldw	r3,-8(fp)
  814238:	e0bff617 	ldw	r2,-40(fp)
  81423c:	1880022e 	bgeu	r3,r2,814248 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  814240:	e0bffe17 	ldw	r2,-8(fp)
  814244:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  814248:	e0bffc17 	ldw	r2,-16(fp)
  81424c:	10c20e04 	addi	r3,r2,2104
  814250:	e0bff917 	ldw	r2,-28(fp)
  814254:	1885883a 	add	r2,r3,r2
  814258:	e1bff617 	ldw	r6,-40(fp)
  81425c:	e17ffd17 	ldw	r5,-12(fp)
  814260:	1009883a 	mov	r4,r2
  814264:	080efa40 	call	80efa4 <memcpy>
      ptr   += n;
  814268:	e0fffd17 	ldw	r3,-12(fp)
  81426c:	e0bff617 	ldw	r2,-40(fp)
  814270:	1885883a 	add	r2,r3,r2
  814274:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  814278:	e0fffe17 	ldw	r3,-8(fp)
  81427c:	e0bff617 	ldw	r2,-40(fp)
  814280:	1885c83a 	sub	r2,r3,r2
  814284:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  814288:	e0fff917 	ldw	r3,-28(fp)
  81428c:	e0bff617 	ldw	r2,-40(fp)
  814290:	1885883a 	add	r2,r3,r2
  814294:	10c1ffcc 	andi	r3,r2,2047
  814298:	e0bffc17 	ldw	r2,-16(fp)
  81429c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8142a0:	e0bffe17 	ldw	r2,-8(fp)
  8142a4:	00bfc716 	blt	zero,r2,8141c4 <__alt_mem_onchip_mem+0xff80c1c4>
  8142a8:	00000106 	br	8142b0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  8142ac:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8142b0:	0005303a 	rdctl	r2,status
  8142b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8142b8:	e0fffb17 	ldw	r3,-20(fp)
  8142bc:	00bfff84 	movi	r2,-2
  8142c0:	1884703a 	and	r2,r3,r2
  8142c4:	1001703a 	wrctl	status,r2
  
  return context;
  8142c8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8142cc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8142d0:	e0bffc17 	ldw	r2,-16(fp)
  8142d4:	10800817 	ldw	r2,32(r2)
  8142d8:	10c00094 	ori	r3,r2,2
  8142dc:	e0bffc17 	ldw	r2,-16(fp)
  8142e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8142e4:	e0bffc17 	ldw	r2,-16(fp)
  8142e8:	10800017 	ldw	r2,0(r2)
  8142ec:	10800104 	addi	r2,r2,4
  8142f0:	1007883a 	mov	r3,r2
  8142f4:	e0bffc17 	ldw	r2,-16(fp)
  8142f8:	10800817 	ldw	r2,32(r2)
  8142fc:	18800035 	stwio	r2,0(r3)
  814300:	e0bffa17 	ldw	r2,-24(fp)
  814304:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814308:	e0bff817 	ldw	r2,-32(fp)
  81430c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  814310:	e0bffe17 	ldw	r2,-8(fp)
  814314:	0080100e 	bge	zero,r2,814358 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  814318:	e0bfff17 	ldw	r2,-4(fp)
  81431c:	1090000c 	andi	r2,r2,16384
  814320:	1000101e 	bne	r2,zero,814364 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  814324:	0001883a 	nop
  814328:	e0bffc17 	ldw	r2,-16(fp)
  81432c:	10c00d17 	ldw	r3,52(r2)
  814330:	e0bff517 	ldw	r2,-44(fp)
  814334:	1880051e 	bne	r3,r2,81434c <altera_avalon_jtag_uart_write+0x1b8>
  814338:	e0bffc17 	ldw	r2,-16(fp)
  81433c:	10c00917 	ldw	r3,36(r2)
  814340:	e0bffc17 	ldw	r2,-16(fp)
  814344:	10800117 	ldw	r2,4(r2)
  814348:	18bff736 	bltu	r3,r2,814328 <__alt_mem_onchip_mem+0xff80c328>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  81434c:	e0bffc17 	ldw	r2,-16(fp)
  814350:	10800917 	ldw	r2,36(r2)
  814354:	1000051e 	bne	r2,zero,81436c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  814358:	e0bffe17 	ldw	r2,-8(fp)
  81435c:	00bfd016 	blt	zero,r2,8142a0 <__alt_mem_onchip_mem+0xff80c2a0>
  814360:	00000306 	br	814370 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  814364:	0001883a 	nop
  814368:	00000106 	br	814370 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  81436c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  814370:	e0fffd17 	ldw	r3,-12(fp)
  814374:	e0bff717 	ldw	r2,-36(fp)
  814378:	18800426 	beq	r3,r2,81438c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  81437c:	e0fffd17 	ldw	r3,-12(fp)
  814380:	e0bff717 	ldw	r2,-36(fp)
  814384:	1885c83a 	sub	r2,r3,r2
  814388:	00000606 	br	8143a4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  81438c:	e0bfff17 	ldw	r2,-4(fp)
  814390:	1090000c 	andi	r2,r2,16384
  814394:	10000226 	beq	r2,zero,8143a0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  814398:	00bffd44 	movi	r2,-11
  81439c:	00000106 	br	8143a4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  8143a0:	00bffec4 	movi	r2,-5
}
  8143a4:	e037883a 	mov	sp,fp
  8143a8:	dfc00117 	ldw	ra,4(sp)
  8143ac:	df000017 	ldw	fp,0(sp)
  8143b0:	dec00204 	addi	sp,sp,8
  8143b4:	f800283a 	ret

008143b8 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  8143b8:	defffa04 	addi	sp,sp,-24
  8143bc:	dfc00515 	stw	ra,20(sp)
  8143c0:	df000415 	stw	fp,16(sp)
  8143c4:	df000404 	addi	fp,sp,16
  8143c8:	e13ffe15 	stw	r4,-8(fp)
  8143cc:	2805883a 	mov	r2,r5
  8143d0:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8143d4:	e0bffe17 	ldw	r2,-8(fp)
  8143d8:	10800017 	ldw	r2,0(r2)
  8143dc:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8143e0:	008003f4 	movhi	r2,15
  8143e4:	10909004 	addi	r2,r2,16960
  8143e8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8143ec:	e0bffe17 	ldw	r2,-8(fp)
  8143f0:	10800803 	ldbu	r2,32(r2)
  8143f4:	10803fcc 	andi	r2,r2,255
  8143f8:	1080201c 	xori	r2,r2,128
  8143fc:	10bfe004 	addi	r2,r2,-128
  814400:	1000151e 	bne	r2,zero,814458 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  814404:	00000906 	br	81442c <lcd_write_command+0x74>
    if (--i == 0)
  814408:	e0bffc17 	ldw	r2,-16(fp)
  81440c:	10bfffc4 	addi	r2,r2,-1
  814410:	e0bffc15 	stw	r2,-16(fp)
  814414:	e0bffc17 	ldw	r2,-16(fp)
  814418:	1000041e 	bne	r2,zero,81442c <lcd_write_command+0x74>
    {
      sp->broken = 1;
  81441c:	e0bffe17 	ldw	r2,-8(fp)
  814420:	00c00044 	movi	r3,1
  814424:	10c00805 	stb	r3,32(r2)
      return;
  814428:	00000c06 	br	81445c <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81442c:	e0bffd17 	ldw	r2,-12(fp)
  814430:	10800104 	addi	r2,r2,4
  814434:	10800037 	ldwio	r2,0(r2)
  814438:	1080200c 	andi	r2,r2,128
  81443c:	103ff21e 	bne	r2,zero,814408 <__alt_mem_onchip_mem+0xff80c408>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  814440:	01001904 	movi	r4,100
  814444:	08168800 	call	816880 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  814448:	e0bffd17 	ldw	r2,-12(fp)
  81444c:	e0ffff03 	ldbu	r3,-4(fp)
  814450:	10c00035 	stwio	r3,0(r2)
  814454:	00000106 	br	81445c <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  814458:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  81445c:	e037883a 	mov	sp,fp
  814460:	dfc00117 	ldw	ra,4(sp)
  814464:	df000017 	ldw	fp,0(sp)
  814468:	dec00204 	addi	sp,sp,8
  81446c:	f800283a 	ret

00814470 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  814470:	defffa04 	addi	sp,sp,-24
  814474:	dfc00515 	stw	ra,20(sp)
  814478:	df000415 	stw	fp,16(sp)
  81447c:	df000404 	addi	fp,sp,16
  814480:	e13ffe15 	stw	r4,-8(fp)
  814484:	2805883a 	mov	r2,r5
  814488:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  81448c:	e0bffe17 	ldw	r2,-8(fp)
  814490:	10800017 	ldw	r2,0(r2)
  814494:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  814498:	008003f4 	movhi	r2,15
  81449c:	10909004 	addi	r2,r2,16960
  8144a0:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8144a4:	e0bffe17 	ldw	r2,-8(fp)
  8144a8:	10800803 	ldbu	r2,32(r2)
  8144ac:	10803fcc 	andi	r2,r2,255
  8144b0:	1080201c 	xori	r2,r2,128
  8144b4:	10bfe004 	addi	r2,r2,-128
  8144b8:	10001d1e 	bne	r2,zero,814530 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8144bc:	00000906 	br	8144e4 <lcd_write_data+0x74>
    if (--i == 0)
  8144c0:	e0bffc17 	ldw	r2,-16(fp)
  8144c4:	10bfffc4 	addi	r2,r2,-1
  8144c8:	e0bffc15 	stw	r2,-16(fp)
  8144cc:	e0bffc17 	ldw	r2,-16(fp)
  8144d0:	1000041e 	bne	r2,zero,8144e4 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  8144d4:	e0bffe17 	ldw	r2,-8(fp)
  8144d8:	00c00044 	movi	r3,1
  8144dc:	10c00805 	stb	r3,32(r2)
      return;
  8144e0:	00001406 	br	814534 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8144e4:	e0bffd17 	ldw	r2,-12(fp)
  8144e8:	10800104 	addi	r2,r2,4
  8144ec:	10800037 	ldwio	r2,0(r2)
  8144f0:	1080200c 	andi	r2,r2,128
  8144f4:	103ff21e 	bne	r2,zero,8144c0 <__alt_mem_onchip_mem+0xff80c4c0>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8144f8:	01001904 	movi	r4,100
  8144fc:	08168800 	call	816880 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  814500:	e0bffd17 	ldw	r2,-12(fp)
  814504:	10800204 	addi	r2,r2,8
  814508:	1007883a 	mov	r3,r2
  81450c:	e0bfff03 	ldbu	r2,-4(fp)
  814510:	18800035 	stwio	r2,0(r3)

  sp->address++;
  814514:	e0bffe17 	ldw	r2,-8(fp)
  814518:	108008c3 	ldbu	r2,35(r2)
  81451c:	10800044 	addi	r2,r2,1
  814520:	1007883a 	mov	r3,r2
  814524:	e0bffe17 	ldw	r2,-8(fp)
  814528:	10c008c5 	stb	r3,35(r2)
  81452c:	00000106 	br	814534 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  814530:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  814534:	e037883a 	mov	sp,fp
  814538:	dfc00117 	ldw	ra,4(sp)
  81453c:	df000017 	ldw	fp,0(sp)
  814540:	dec00204 	addi	sp,sp,8
  814544:	f800283a 	ret

00814548 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  814548:	defffc04 	addi	sp,sp,-16
  81454c:	dfc00315 	stw	ra,12(sp)
  814550:	df000215 	stw	fp,8(sp)
  814554:	df000204 	addi	fp,sp,8
  814558:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  81455c:	01400044 	movi	r5,1
  814560:	e13fff17 	ldw	r4,-4(fp)
  814564:	08143b80 	call	8143b8 <lcd_write_command>

  sp->x = 0;
  814568:	e0bfff17 	ldw	r2,-4(fp)
  81456c:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  814570:	e0bfff17 	ldw	r2,-4(fp)
  814574:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  814578:	e0bfff17 	ldw	r2,-4(fp)
  81457c:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814580:	e03ffe15 	stw	zero,-8(fp)
  814584:	00001b06 	br	8145f4 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  814588:	e0bffe17 	ldw	r2,-8(fp)
  81458c:	108018e4 	muli	r2,r2,99
  814590:	10801004 	addi	r2,r2,64
  814594:	e0ffff17 	ldw	r3,-4(fp)
  814598:	1885883a 	add	r2,r3,r2
  81459c:	01801444 	movi	r6,81
  8145a0:	01400804 	movi	r5,32
  8145a4:	1009883a 	mov	r4,r2
  8145a8:	080a4180 	call	80a418 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  8145ac:	e0bffe17 	ldw	r2,-8(fp)
  8145b0:	108018e4 	muli	r2,r2,99
  8145b4:	10800c04 	addi	r2,r2,48
  8145b8:	e0ffff17 	ldw	r3,-4(fp)
  8145bc:	1885883a 	add	r2,r3,r2
  8145c0:	01800404 	movi	r6,16
  8145c4:	01400804 	movi	r5,32
  8145c8:	1009883a 	mov	r4,r2
  8145cc:	080a4180 	call	80a418 <memset>
    sp->line[y].width = 0;
  8145d0:	e0ffff17 	ldw	r3,-4(fp)
  8145d4:	e0bffe17 	ldw	r2,-8(fp)
  8145d8:	108018e4 	muli	r2,r2,99
  8145dc:	1885883a 	add	r2,r3,r2
  8145e0:	10802444 	addi	r2,r2,145
  8145e4:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8145e8:	e0bffe17 	ldw	r2,-8(fp)
  8145ec:	10800044 	addi	r2,r2,1
  8145f0:	e0bffe15 	stw	r2,-8(fp)
  8145f4:	e0bffe17 	ldw	r2,-8(fp)
  8145f8:	10800090 	cmplti	r2,r2,2
  8145fc:	103fe21e 	bne	r2,zero,814588 <__alt_mem_onchip_mem+0xff80c588>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  814600:	0001883a 	nop
  814604:	e037883a 	mov	sp,fp
  814608:	dfc00117 	ldw	ra,4(sp)
  81460c:	df000017 	ldw	fp,0(sp)
  814610:	dec00204 	addi	sp,sp,8
  814614:	f800283a 	ret

00814618 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  814618:	defff704 	addi	sp,sp,-36
  81461c:	dfc00815 	stw	ra,32(sp)
  814620:	df000715 	stw	fp,28(sp)
  814624:	df000704 	addi	fp,sp,28
  814628:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  81462c:	e0bfff17 	ldw	r2,-4(fp)
  814630:	10800943 	ldbu	r2,37(r2)
  814634:	10803fcc 	andi	r2,r2,255
  814638:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81463c:	e03ff915 	stw	zero,-28(fp)
  814640:	00006706 	br	8147e0 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  814644:	e0ffff17 	ldw	r3,-4(fp)
  814648:	e0bff917 	ldw	r2,-28(fp)
  81464c:	108018e4 	muli	r2,r2,99
  814650:	1885883a 	add	r2,r3,r2
  814654:	10802444 	addi	r2,r2,145
  814658:	10800003 	ldbu	r2,0(r2)
  81465c:	10803fcc 	andi	r2,r2,255
  814660:	1080201c 	xori	r2,r2,128
  814664:	10bfe004 	addi	r2,r2,-128
  814668:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  81466c:	e0ffff17 	ldw	r3,-4(fp)
  814670:	e0bff917 	ldw	r2,-28(fp)
  814674:	108018e4 	muli	r2,r2,99
  814678:	1885883a 	add	r2,r3,r2
  81467c:	10802484 	addi	r2,r2,146
  814680:	10800003 	ldbu	r2,0(r2)
  814684:	10c03fcc 	andi	r3,r2,255
  814688:	e0bffc17 	ldw	r2,-16(fp)
  81468c:	1885383a 	mul	r2,r3,r2
  814690:	1005d23a 	srai	r2,r2,8
  814694:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  814698:	e0fffb17 	ldw	r3,-20(fp)
  81469c:	e0bffd17 	ldw	r2,-12(fp)
  8146a0:	18800116 	blt	r3,r2,8146a8 <lcd_repaint_screen+0x90>
      offset = 0;
  8146a4:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8146a8:	e03ffa15 	stw	zero,-24(fp)
  8146ac:	00004606 	br	8147c8 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  8146b0:	e0fffa17 	ldw	r3,-24(fp)
  8146b4:	e0bffb17 	ldw	r2,-20(fp)
  8146b8:	1885883a 	add	r2,r3,r2
  8146bc:	e17ffd17 	ldw	r5,-12(fp)
  8146c0:	1009883a 	mov	r4,r2
  8146c4:	08069780 	call	806978 <__modsi3>
  8146c8:	1009883a 	mov	r4,r2
  8146cc:	e0ffff17 	ldw	r3,-4(fp)
  8146d0:	e0bff917 	ldw	r2,-28(fp)
  8146d4:	108018e4 	muli	r2,r2,99
  8146d8:	1885883a 	add	r2,r3,r2
  8146dc:	1105883a 	add	r2,r2,r4
  8146e0:	10801004 	addi	r2,r2,64
  8146e4:	10800003 	ldbu	r2,0(r2)
  8146e8:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  8146ec:	e0ffff17 	ldw	r3,-4(fp)
  8146f0:	e0bff917 	ldw	r2,-28(fp)
  8146f4:	108018e4 	muli	r2,r2,99
  8146f8:	1887883a 	add	r3,r3,r2
  8146fc:	e0bffa17 	ldw	r2,-24(fp)
  814700:	1885883a 	add	r2,r3,r2
  814704:	10800c04 	addi	r2,r2,48
  814708:	10800003 	ldbu	r2,0(r2)
  81470c:	10c03fcc 	andi	r3,r2,255
  814710:	18c0201c 	xori	r3,r3,128
  814714:	18ffe004 	addi	r3,r3,-128
  814718:	e0bffe07 	ldb	r2,-8(fp)
  81471c:	18802726 	beq	r3,r2,8147bc <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  814720:	e0fff917 	ldw	r3,-28(fp)
  814724:	d0a01004 	addi	r2,gp,-32704
  814728:	1885883a 	add	r2,r3,r2
  81472c:	10800003 	ldbu	r2,0(r2)
  814730:	1007883a 	mov	r3,r2
  814734:	e0bffa17 	ldw	r2,-24(fp)
  814738:	1885883a 	add	r2,r3,r2
  81473c:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  814740:	e0fffe43 	ldbu	r3,-7(fp)
  814744:	e0bfff17 	ldw	r2,-4(fp)
  814748:	108008c3 	ldbu	r2,35(r2)
  81474c:	10803fcc 	andi	r2,r2,255
  814750:	1080201c 	xori	r2,r2,128
  814754:	10bfe004 	addi	r2,r2,-128
  814758:	18800a26 	beq	r3,r2,814784 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  81475c:	e0fffe43 	ldbu	r3,-7(fp)
  814760:	00bfe004 	movi	r2,-128
  814764:	1884b03a 	or	r2,r3,r2
  814768:	10803fcc 	andi	r2,r2,255
  81476c:	100b883a 	mov	r5,r2
  814770:	e13fff17 	ldw	r4,-4(fp)
  814774:	08143b80 	call	8143b8 <lcd_write_command>
          sp->address = address;
  814778:	e0fffe43 	ldbu	r3,-7(fp)
  81477c:	e0bfff17 	ldw	r2,-4(fp)
  814780:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  814784:	e0bffe03 	ldbu	r2,-8(fp)
  814788:	10803fcc 	andi	r2,r2,255
  81478c:	100b883a 	mov	r5,r2
  814790:	e13fff17 	ldw	r4,-4(fp)
  814794:	08144700 	call	814470 <lcd_write_data>
        sp->line[y].visible[x] = c;
  814798:	e0ffff17 	ldw	r3,-4(fp)
  81479c:	e0bff917 	ldw	r2,-28(fp)
  8147a0:	108018e4 	muli	r2,r2,99
  8147a4:	1887883a 	add	r3,r3,r2
  8147a8:	e0bffa17 	ldw	r2,-24(fp)
  8147ac:	1885883a 	add	r2,r3,r2
  8147b0:	10800c04 	addi	r2,r2,48
  8147b4:	e0fffe03 	ldbu	r3,-8(fp)
  8147b8:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8147bc:	e0bffa17 	ldw	r2,-24(fp)
  8147c0:	10800044 	addi	r2,r2,1
  8147c4:	e0bffa15 	stw	r2,-24(fp)
  8147c8:	e0bffa17 	ldw	r2,-24(fp)
  8147cc:	10800410 	cmplti	r2,r2,16
  8147d0:	103fb71e 	bne	r2,zero,8146b0 <__alt_mem_onchip_mem+0xff80c6b0>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8147d4:	e0bff917 	ldw	r2,-28(fp)
  8147d8:	10800044 	addi	r2,r2,1
  8147dc:	e0bff915 	stw	r2,-28(fp)
  8147e0:	e0bff917 	ldw	r2,-28(fp)
  8147e4:	10800090 	cmplti	r2,r2,2
  8147e8:	103f961e 	bne	r2,zero,814644 <__alt_mem_onchip_mem+0xff80c644>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  8147ec:	0001883a 	nop
  8147f0:	e037883a 	mov	sp,fp
  8147f4:	dfc00117 	ldw	ra,4(sp)
  8147f8:	df000017 	ldw	fp,0(sp)
  8147fc:	dec00204 	addi	sp,sp,8
  814800:	f800283a 	ret

00814804 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  814804:	defffc04 	addi	sp,sp,-16
  814808:	dfc00315 	stw	ra,12(sp)
  81480c:	df000215 	stw	fp,8(sp)
  814810:	df000204 	addi	fp,sp,8
  814814:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814818:	e03ffe15 	stw	zero,-8(fp)
  81481c:	00001d06 	br	814894 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  814820:	e0bffe17 	ldw	r2,-8(fp)
  814824:	00800f16 	blt	zero,r2,814864 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  814828:	e0bffe17 	ldw	r2,-8(fp)
  81482c:	108018e4 	muli	r2,r2,99
  814830:	10801004 	addi	r2,r2,64
  814834:	e0ffff17 	ldw	r3,-4(fp)
  814838:	1889883a 	add	r4,r3,r2
  81483c:	e0bffe17 	ldw	r2,-8(fp)
  814840:	10800044 	addi	r2,r2,1
  814844:	108018e4 	muli	r2,r2,99
  814848:	10801004 	addi	r2,r2,64
  81484c:	e0ffff17 	ldw	r3,-4(fp)
  814850:	1885883a 	add	r2,r3,r2
  814854:	01801404 	movi	r6,80
  814858:	100b883a 	mov	r5,r2
  81485c:	080efa40 	call	80efa4 <memcpy>
  814860:	00000906 	br	814888 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  814864:	e0bffe17 	ldw	r2,-8(fp)
  814868:	108018e4 	muli	r2,r2,99
  81486c:	10801004 	addi	r2,r2,64
  814870:	e0ffff17 	ldw	r3,-4(fp)
  814874:	1885883a 	add	r2,r3,r2
  814878:	01801404 	movi	r6,80
  81487c:	01400804 	movi	r5,32
  814880:	1009883a 	mov	r4,r2
  814884:	080a4180 	call	80a418 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814888:	e0bffe17 	ldw	r2,-8(fp)
  81488c:	10800044 	addi	r2,r2,1
  814890:	e0bffe15 	stw	r2,-8(fp)
  814894:	e0bffe17 	ldw	r2,-8(fp)
  814898:	10800090 	cmplti	r2,r2,2
  81489c:	103fe01e 	bne	r2,zero,814820 <__alt_mem_onchip_mem+0xff80c820>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  8148a0:	e0bfff17 	ldw	r2,-4(fp)
  8148a4:	10800883 	ldbu	r2,34(r2)
  8148a8:	10bfffc4 	addi	r2,r2,-1
  8148ac:	1007883a 	mov	r3,r2
  8148b0:	e0bfff17 	ldw	r2,-4(fp)
  8148b4:	10c00885 	stb	r3,34(r2)
}
  8148b8:	0001883a 	nop
  8148bc:	e037883a 	mov	sp,fp
  8148c0:	dfc00117 	ldw	ra,4(sp)
  8148c4:	df000017 	ldw	fp,0(sp)
  8148c8:	dec00204 	addi	sp,sp,8
  8148cc:	f800283a 	ret

008148d0 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  8148d0:	defff904 	addi	sp,sp,-28
  8148d4:	dfc00615 	stw	ra,24(sp)
  8148d8:	df000515 	stw	fp,20(sp)
  8148dc:	df000504 	addi	fp,sp,20
  8148e0:	e13ffe15 	stw	r4,-8(fp)
  8148e4:	2805883a 	mov	r2,r5
  8148e8:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  8148ec:	e03ffb15 	stw	zero,-20(fp)
  8148f0:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  8148f4:	e0bffe17 	ldw	r2,-8(fp)
  8148f8:	10800a03 	ldbu	r2,40(r2)
  8148fc:	10803fcc 	andi	r2,r2,255
  814900:	1080201c 	xori	r2,r2,128
  814904:	10bfe004 	addi	r2,r2,-128
  814908:	108016d8 	cmpnei	r2,r2,91
  81490c:	1000411e 	bne	r2,zero,814a14 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  814910:	e0bffe17 	ldw	r2,-8(fp)
  814914:	10800a04 	addi	r2,r2,40
  814918:	10800044 	addi	r2,r2,1
  81491c:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  814920:	00000c06 	br	814954 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  814924:	e0bffb17 	ldw	r2,-20(fp)
  814928:	10c002a4 	muli	r3,r2,10
  81492c:	e0bffd17 	ldw	r2,-12(fp)
  814930:	11000044 	addi	r4,r2,1
  814934:	e13ffd15 	stw	r4,-12(fp)
  814938:	10800003 	ldbu	r2,0(r2)
  81493c:	10803fcc 	andi	r2,r2,255
  814940:	1080201c 	xori	r2,r2,128
  814944:	10bfe004 	addi	r2,r2,-128
  814948:	10bff404 	addi	r2,r2,-48
  81494c:	1885883a 	add	r2,r3,r2
  814950:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  814954:	d0e01417 	ldw	r3,-32688(gp)
  814958:	e0bffd17 	ldw	r2,-12(fp)
  81495c:	10800003 	ldbu	r2,0(r2)
  814960:	10803fcc 	andi	r2,r2,255
  814964:	1080201c 	xori	r2,r2,128
  814968:	10bfe004 	addi	r2,r2,-128
  81496c:	10800044 	addi	r2,r2,1
  814970:	1885883a 	add	r2,r3,r2
  814974:	10800003 	ldbu	r2,0(r2)
  814978:	10803fcc 	andi	r2,r2,255
  81497c:	1080010c 	andi	r2,r2,4
  814980:	103fe81e 	bne	r2,zero,814924 <__alt_mem_onchip_mem+0xff80c924>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  814984:	e0bffd17 	ldw	r2,-12(fp)
  814988:	10800003 	ldbu	r2,0(r2)
  81498c:	10803fcc 	andi	r2,r2,255
  814990:	1080201c 	xori	r2,r2,128
  814994:	10bfe004 	addi	r2,r2,-128
  814998:	10800ed8 	cmpnei	r2,r2,59
  81499c:	10001f1e 	bne	r2,zero,814a1c <lcd_handle_escape+0x14c>
    {
      ptr++;
  8149a0:	e0bffd17 	ldw	r2,-12(fp)
  8149a4:	10800044 	addi	r2,r2,1
  8149a8:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  8149ac:	00000c06 	br	8149e0 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  8149b0:	e0bffc17 	ldw	r2,-16(fp)
  8149b4:	10c002a4 	muli	r3,r2,10
  8149b8:	e0bffd17 	ldw	r2,-12(fp)
  8149bc:	11000044 	addi	r4,r2,1
  8149c0:	e13ffd15 	stw	r4,-12(fp)
  8149c4:	10800003 	ldbu	r2,0(r2)
  8149c8:	10803fcc 	andi	r2,r2,255
  8149cc:	1080201c 	xori	r2,r2,128
  8149d0:	10bfe004 	addi	r2,r2,-128
  8149d4:	10bff404 	addi	r2,r2,-48
  8149d8:	1885883a 	add	r2,r3,r2
  8149dc:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  8149e0:	d0e01417 	ldw	r3,-32688(gp)
  8149e4:	e0bffd17 	ldw	r2,-12(fp)
  8149e8:	10800003 	ldbu	r2,0(r2)
  8149ec:	10803fcc 	andi	r2,r2,255
  8149f0:	1080201c 	xori	r2,r2,128
  8149f4:	10bfe004 	addi	r2,r2,-128
  8149f8:	10800044 	addi	r2,r2,1
  8149fc:	1885883a 	add	r2,r3,r2
  814a00:	10800003 	ldbu	r2,0(r2)
  814a04:	10803fcc 	andi	r2,r2,255
  814a08:	1080010c 	andi	r2,r2,4
  814a0c:	103fe81e 	bne	r2,zero,8149b0 <__alt_mem_onchip_mem+0xff80c9b0>
  814a10:	00000206 	br	814a1c <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  814a14:	00bfffc4 	movi	r2,-1
  814a18:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  814a1c:	e0bfff07 	ldb	r2,-4(fp)
  814a20:	10c012a0 	cmpeqi	r3,r2,74
  814a24:	1800291e 	bne	r3,zero,814acc <lcd_handle_escape+0x1fc>
  814a28:	10c012c8 	cmpgei	r3,r2,75
  814a2c:	1800031e 	bne	r3,zero,814a3c <lcd_handle_escape+0x16c>
  814a30:	10801220 	cmpeqi	r2,r2,72
  814a34:	1000061e 	bne	r2,zero,814a50 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  814a38:	00004a06 	br	814b64 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  814a3c:	10c012e0 	cmpeqi	r3,r2,75
  814a40:	1800281e 	bne	r3,zero,814ae4 <lcd_handle_escape+0x214>
  814a44:	108019a0 	cmpeqi	r2,r2,102
  814a48:	1000011e 	bne	r2,zero,814a50 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  814a4c:	00004506 	br	814b64 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  814a50:	e0bffc17 	ldw	r2,-16(fp)
  814a54:	0080050e 	bge	zero,r2,814a6c <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  814a58:	e0bffc17 	ldw	r2,-16(fp)
  814a5c:	10bfffc4 	addi	r2,r2,-1
  814a60:	1007883a 	mov	r3,r2
  814a64:	e0bffe17 	ldw	r2,-8(fp)
  814a68:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  814a6c:	e0bffb17 	ldw	r2,-20(fp)
  814a70:	0080370e 	bge	zero,r2,814b50 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  814a74:	e0bffb17 	ldw	r2,-20(fp)
  814a78:	10bfffc4 	addi	r2,r2,-1
  814a7c:	1007883a 	mov	r3,r2
  814a80:	e0bffe17 	ldw	r2,-8(fp)
  814a84:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  814a88:	e0bffe17 	ldw	r2,-8(fp)
  814a8c:	10800883 	ldbu	r2,34(r2)
  814a90:	10803fcc 	andi	r2,r2,255
  814a94:	10800170 	cmpltui	r2,r2,5
  814a98:	1000061e 	bne	r2,zero,814ab4 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  814a9c:	e0bffe17 	ldw	r2,-8(fp)
  814aa0:	00c00104 	movi	r3,4
  814aa4:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  814aa8:	00000206 	br	814ab4 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  814aac:	e13ffe17 	ldw	r4,-8(fp)
  814ab0:	08148040 	call	814804 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  814ab4:	e0bffe17 	ldw	r2,-8(fp)
  814ab8:	10800883 	ldbu	r2,34(r2)
  814abc:	10803fcc 	andi	r2,r2,255
  814ac0:	108000e8 	cmpgeui	r2,r2,3
  814ac4:	103ff91e 	bne	r2,zero,814aac <__alt_mem_onchip_mem+0xff80caac>
        lcd_scroll_up(sp);
    }
    break;
  814ac8:	00002106 	br	814b50 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  814acc:	e0bffb17 	ldw	r2,-20(fp)
  814ad0:	10800098 	cmpnei	r2,r2,2
  814ad4:	1000201e 	bne	r2,zero,814b58 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  814ad8:	e13ffe17 	ldw	r4,-8(fp)
  814adc:	08145480 	call	814548 <lcd_clear_screen>
    break;
  814ae0:	00001d06 	br	814b58 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  814ae4:	e0bffb17 	ldw	r2,-20(fp)
  814ae8:	00801d16 	blt	zero,r2,814b60 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  814aec:	e0bffe17 	ldw	r2,-8(fp)
  814af0:	10800843 	ldbu	r2,33(r2)
  814af4:	10803fcc 	andi	r2,r2,255
  814af8:	10801428 	cmpgeui	r2,r2,80
  814afc:	1000181e 	bne	r2,zero,814b60 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  814b00:	e0bffe17 	ldw	r2,-8(fp)
  814b04:	10800883 	ldbu	r2,34(r2)
  814b08:	10803fcc 	andi	r2,r2,255
  814b0c:	108018e4 	muli	r2,r2,99
  814b10:	10801004 	addi	r2,r2,64
  814b14:	e0fffe17 	ldw	r3,-8(fp)
  814b18:	1887883a 	add	r3,r3,r2
  814b1c:	e0bffe17 	ldw	r2,-8(fp)
  814b20:	10800843 	ldbu	r2,33(r2)
  814b24:	10803fcc 	andi	r2,r2,255
  814b28:	1889883a 	add	r4,r3,r2
  814b2c:	e0bffe17 	ldw	r2,-8(fp)
  814b30:	10800843 	ldbu	r2,33(r2)
  814b34:	10803fcc 	andi	r2,r2,255
  814b38:	00c01404 	movi	r3,80
  814b3c:	1885c83a 	sub	r2,r3,r2
  814b40:	100d883a 	mov	r6,r2
  814b44:	01400804 	movi	r5,32
  814b48:	080a4180 	call	80a418 <memset>
    }
    break;
  814b4c:	00000406 	br	814b60 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  814b50:	0001883a 	nop
  814b54:	00000306 	br	814b64 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  814b58:	0001883a 	nop
  814b5c:	00000106 	br	814b64 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  814b60:	0001883a 	nop
  }
}
  814b64:	0001883a 	nop
  814b68:	e037883a 	mov	sp,fp
  814b6c:	dfc00117 	ldw	ra,4(sp)
  814b70:	df000017 	ldw	fp,0(sp)
  814b74:	dec00204 	addi	sp,sp,8
  814b78:	f800283a 	ret

00814b7c <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  814b7c:	defff304 	addi	sp,sp,-52
  814b80:	dfc00c15 	stw	ra,48(sp)
  814b84:	df000b15 	stw	fp,44(sp)
  814b88:	df000b04 	addi	fp,sp,44
  814b8c:	e13ffc15 	stw	r4,-16(fp)
  814b90:	e17ffd15 	stw	r5,-12(fp)
  814b94:	e1bffe15 	stw	r6,-8(fp)
  814b98:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  814b9c:	e0bffe17 	ldw	r2,-8(fp)
  814ba0:	e0fffd17 	ldw	r3,-12(fp)
  814ba4:	1885883a 	add	r2,r3,r2
  814ba8:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  814bac:	e0bffc17 	ldw	r2,-16(fp)
  814bb0:	00c00044 	movi	r3,1
  814bb4:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  814bb8:	00009906 	br	814e20 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  814bbc:	e0bffd17 	ldw	r2,-12(fp)
  814bc0:	10800003 	ldbu	r2,0(r2)
  814bc4:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  814bc8:	e0bffc17 	ldw	r2,-16(fp)
  814bcc:	10800903 	ldbu	r2,36(r2)
  814bd0:	10803fcc 	andi	r2,r2,255
  814bd4:	1080201c 	xori	r2,r2,128
  814bd8:	10bfe004 	addi	r2,r2,-128
  814bdc:	10003716 	blt	r2,zero,814cbc <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  814be0:	e0bffc17 	ldw	r2,-16(fp)
  814be4:	10800903 	ldbu	r2,36(r2)
  814be8:	10803fcc 	andi	r2,r2,255
  814bec:	1080201c 	xori	r2,r2,128
  814bf0:	10bfe004 	addi	r2,r2,-128
  814bf4:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  814bf8:	e0bffa17 	ldw	r2,-24(fp)
  814bfc:	1000031e 	bne	r2,zero,814c0c <altera_avalon_lcd_16207_write+0x90>
  814c00:	e0bff907 	ldb	r2,-28(fp)
  814c04:	108016d8 	cmpnei	r2,r2,91
  814c08:	10000d1e 	bne	r2,zero,814c40 <altera_avalon_lcd_16207_write+0xc4>
  814c0c:	e0bffa17 	ldw	r2,-24(fp)
  814c10:	10001826 	beq	r2,zero,814c74 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  814c14:	d0e01417 	ldw	r3,-32688(gp)
  814c18:	e0bff907 	ldb	r2,-28(fp)
  814c1c:	10800044 	addi	r2,r2,1
  814c20:	1885883a 	add	r2,r3,r2
  814c24:	10800003 	ldbu	r2,0(r2)
  814c28:	10803fcc 	andi	r2,r2,255
  814c2c:	1080010c 	andi	r2,r2,4
  814c30:	1000101e 	bne	r2,zero,814c74 <altera_avalon_lcd_16207_write+0xf8>
  814c34:	e0bff907 	ldb	r2,-28(fp)
  814c38:	10800ee0 	cmpeqi	r2,r2,59
  814c3c:	10000d1e 	bne	r2,zero,814c74 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  814c40:	e0fffc17 	ldw	r3,-16(fp)
  814c44:	e0bffa17 	ldw	r2,-24(fp)
  814c48:	1885883a 	add	r2,r3,r2
  814c4c:	10800a04 	addi	r2,r2,40
  814c50:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  814c54:	e0bff907 	ldb	r2,-28(fp)
  814c58:	100b883a 	mov	r5,r2
  814c5c:	e13ffc17 	ldw	r4,-16(fp)
  814c60:	08148d00 	call	8148d0 <lcd_handle_escape>

        sp->esccount = -1;
  814c64:	e0bffc17 	ldw	r2,-16(fp)
  814c68:	00ffffc4 	movi	r3,-1
  814c6c:	10c00905 	stb	r3,36(r2)
  814c70:	00006806 	br	814e14 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  814c74:	e0bffc17 	ldw	r2,-16(fp)
  814c78:	10800903 	ldbu	r2,36(r2)
  814c7c:	10803fcc 	andi	r2,r2,255
  814c80:	108001e8 	cmpgeui	r2,r2,7
  814c84:	1000631e 	bne	r2,zero,814e14 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  814c88:	e0fffc17 	ldw	r3,-16(fp)
  814c8c:	e0bffa17 	ldw	r2,-24(fp)
  814c90:	1885883a 	add	r2,r3,r2
  814c94:	10800a04 	addi	r2,r2,40
  814c98:	e0fff903 	ldbu	r3,-28(fp)
  814c9c:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  814ca0:	e0bffc17 	ldw	r2,-16(fp)
  814ca4:	10800903 	ldbu	r2,36(r2)
  814ca8:	10800044 	addi	r2,r2,1
  814cac:	1007883a 	mov	r3,r2
  814cb0:	e0bffc17 	ldw	r2,-16(fp)
  814cb4:	10c00905 	stb	r3,36(r2)
  814cb8:	00005606 	br	814e14 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  814cbc:	e0bff907 	ldb	r2,-28(fp)
  814cc0:	108006d8 	cmpnei	r2,r2,27
  814cc4:	1000031e 	bne	r2,zero,814cd4 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  814cc8:	e0bffc17 	ldw	r2,-16(fp)
  814ccc:	10000905 	stb	zero,36(r2)
  814cd0:	00005006 	br	814e14 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  814cd4:	e0bff907 	ldb	r2,-28(fp)
  814cd8:	10800358 	cmpnei	r2,r2,13
  814cdc:	1000031e 	bne	r2,zero,814cec <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  814ce0:	e0bffc17 	ldw	r2,-16(fp)
  814ce4:	10000845 	stb	zero,33(r2)
  814ce8:	00004a06 	br	814e14 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  814cec:	e0bff907 	ldb	r2,-28(fp)
  814cf0:	10800298 	cmpnei	r2,r2,10
  814cf4:	1000101e 	bne	r2,zero,814d38 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  814cf8:	e0bffc17 	ldw	r2,-16(fp)
  814cfc:	10000845 	stb	zero,33(r2)
      sp->y++;
  814d00:	e0bffc17 	ldw	r2,-16(fp)
  814d04:	10800883 	ldbu	r2,34(r2)
  814d08:	10800044 	addi	r2,r2,1
  814d0c:	1007883a 	mov	r3,r2
  814d10:	e0bffc17 	ldw	r2,-16(fp)
  814d14:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  814d18:	e0bffc17 	ldw	r2,-16(fp)
  814d1c:	10800883 	ldbu	r2,34(r2)
  814d20:	10803fcc 	andi	r2,r2,255
  814d24:	108000f0 	cmpltui	r2,r2,3
  814d28:	10003a1e 	bne	r2,zero,814e14 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  814d2c:	e13ffc17 	ldw	r4,-16(fp)
  814d30:	08148040 	call	814804 <lcd_scroll_up>
  814d34:	00003706 	br	814e14 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  814d38:	e0bff907 	ldb	r2,-28(fp)
  814d3c:	10800218 	cmpnei	r2,r2,8
  814d40:	10000b1e 	bne	r2,zero,814d70 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  814d44:	e0bffc17 	ldw	r2,-16(fp)
  814d48:	10800843 	ldbu	r2,33(r2)
  814d4c:	10803fcc 	andi	r2,r2,255
  814d50:	10003026 	beq	r2,zero,814e14 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  814d54:	e0bffc17 	ldw	r2,-16(fp)
  814d58:	10800843 	ldbu	r2,33(r2)
  814d5c:	10bfffc4 	addi	r2,r2,-1
  814d60:	1007883a 	mov	r3,r2
  814d64:	e0bffc17 	ldw	r2,-16(fp)
  814d68:	10c00845 	stb	r3,33(r2)
  814d6c:	00002906 	br	814e14 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  814d70:	d0e01417 	ldw	r3,-32688(gp)
  814d74:	e0bff907 	ldb	r2,-28(fp)
  814d78:	10800044 	addi	r2,r2,1
  814d7c:	1885883a 	add	r2,r3,r2
  814d80:	10800003 	ldbu	r2,0(r2)
  814d84:	10803fcc 	andi	r2,r2,255
  814d88:	1080201c 	xori	r2,r2,128
  814d8c:	10bfe004 	addi	r2,r2,-128
  814d90:	108025cc 	andi	r2,r2,151
  814d94:	10001f26 	beq	r2,zero,814e14 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  814d98:	e0bffc17 	ldw	r2,-16(fp)
  814d9c:	10800883 	ldbu	r2,34(r2)
  814da0:	10803fcc 	andi	r2,r2,255
  814da4:	108000b0 	cmpltui	r2,r2,2
  814da8:	1000021e 	bne	r2,zero,814db4 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  814dac:	e13ffc17 	ldw	r4,-16(fp)
  814db0:	08148040 	call	814804 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  814db4:	e0bffc17 	ldw	r2,-16(fp)
  814db8:	10800843 	ldbu	r2,33(r2)
  814dbc:	10803fcc 	andi	r2,r2,255
  814dc0:	10801428 	cmpgeui	r2,r2,80
  814dc4:	10000d1e 	bne	r2,zero,814dfc <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  814dc8:	e0bffc17 	ldw	r2,-16(fp)
  814dcc:	10800883 	ldbu	r2,34(r2)
  814dd0:	10c03fcc 	andi	r3,r2,255
  814dd4:	e0bffc17 	ldw	r2,-16(fp)
  814dd8:	10800843 	ldbu	r2,33(r2)
  814ddc:	10803fcc 	andi	r2,r2,255
  814de0:	e13ffc17 	ldw	r4,-16(fp)
  814de4:	18c018e4 	muli	r3,r3,99
  814de8:	20c7883a 	add	r3,r4,r3
  814dec:	1885883a 	add	r2,r3,r2
  814df0:	10801004 	addi	r2,r2,64
  814df4:	e0fff903 	ldbu	r3,-28(fp)
  814df8:	10c00005 	stb	r3,0(r2)

      sp->x++;
  814dfc:	e0bffc17 	ldw	r2,-16(fp)
  814e00:	10800843 	ldbu	r2,33(r2)
  814e04:	10800044 	addi	r2,r2,1
  814e08:	1007883a 	mov	r3,r2
  814e0c:	e0bffc17 	ldw	r2,-16(fp)
  814e10:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  814e14:	e0bffd17 	ldw	r2,-12(fp)
  814e18:	10800044 	addi	r2,r2,1
  814e1c:	e0bffd15 	stw	r2,-12(fp)
  814e20:	e0fffd17 	ldw	r3,-12(fp)
  814e24:	e0bff817 	ldw	r2,-32(fp)
  814e28:	18bf6436 	bltu	r3,r2,814bbc <__alt_mem_onchip_mem+0xff80cbbc>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  814e2c:	00800404 	movi	r2,16
  814e30:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814e34:	e03ff515 	stw	zero,-44(fp)
  814e38:	00003706 	br	814f18 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  814e3c:	00801404 	movi	r2,80
  814e40:	e0bff715 	stw	r2,-36(fp)
  814e44:	00001106 	br	814e8c <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  814e48:	e0bff717 	ldw	r2,-36(fp)
  814e4c:	10bfffc4 	addi	r2,r2,-1
  814e50:	e13ffc17 	ldw	r4,-16(fp)
  814e54:	e0fff517 	ldw	r3,-44(fp)
  814e58:	18c018e4 	muli	r3,r3,99
  814e5c:	20c7883a 	add	r3,r4,r3
  814e60:	1885883a 	add	r2,r3,r2
  814e64:	10801004 	addi	r2,r2,64
  814e68:	10800003 	ldbu	r2,0(r2)
  814e6c:	10803fcc 	andi	r2,r2,255
  814e70:	1080201c 	xori	r2,r2,128
  814e74:	10bfe004 	addi	r2,r2,-128
  814e78:	10800820 	cmpeqi	r2,r2,32
  814e7c:	10000626 	beq	r2,zero,814e98 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  814e80:	e0bff717 	ldw	r2,-36(fp)
  814e84:	10bfffc4 	addi	r2,r2,-1
  814e88:	e0bff715 	stw	r2,-36(fp)
  814e8c:	e0bff717 	ldw	r2,-36(fp)
  814e90:	00bfed16 	blt	zero,r2,814e48 <__alt_mem_onchip_mem+0xff80ce48>
  814e94:	00000106 	br	814e9c <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  814e98:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  814e9c:	e0bff717 	ldw	r2,-36(fp)
  814ea0:	10800448 	cmpgei	r2,r2,17
  814ea4:	1000031e 	bne	r2,zero,814eb4 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  814ea8:	00800404 	movi	r2,16
  814eac:	e0bff715 	stw	r2,-36(fp)
  814eb0:	00000306 	br	814ec0 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  814eb4:	e0bff717 	ldw	r2,-36(fp)
  814eb8:	10800044 	addi	r2,r2,1
  814ebc:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  814ec0:	e0bff717 	ldw	r2,-36(fp)
  814ec4:	1009883a 	mov	r4,r2
  814ec8:	e0fffc17 	ldw	r3,-16(fp)
  814ecc:	e0bff517 	ldw	r2,-44(fp)
  814ed0:	108018e4 	muli	r2,r2,99
  814ed4:	1885883a 	add	r2,r3,r2
  814ed8:	10802444 	addi	r2,r2,145
  814edc:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  814ee0:	e0fff617 	ldw	r3,-40(fp)
  814ee4:	e0bff717 	ldw	r2,-36(fp)
  814ee8:	1880020e 	bge	r3,r2,814ef4 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  814eec:	e0bff717 	ldw	r2,-36(fp)
  814ef0:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  814ef4:	e0fffc17 	ldw	r3,-16(fp)
  814ef8:	e0bff517 	ldw	r2,-44(fp)
  814efc:	108018e4 	muli	r2,r2,99
  814f00:	1885883a 	add	r2,r3,r2
  814f04:	10802484 	addi	r2,r2,146
  814f08:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814f0c:	e0bff517 	ldw	r2,-44(fp)
  814f10:	10800044 	addi	r2,r2,1
  814f14:	e0bff515 	stw	r2,-44(fp)
  814f18:	e0bff517 	ldw	r2,-44(fp)
  814f1c:	10800090 	cmplti	r2,r2,2
  814f20:	103fc61e 	bne	r2,zero,814e3c <__alt_mem_onchip_mem+0xff80ce3c>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  814f24:	e0bff617 	ldw	r2,-40(fp)
  814f28:	10800448 	cmpgei	r2,r2,17
  814f2c:	1000031e 	bne	r2,zero,814f3c <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  814f30:	e0bffc17 	ldw	r2,-16(fp)
  814f34:	10000985 	stb	zero,38(r2)
  814f38:	00002e06 	br	814ff4 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  814f3c:	e0bff617 	ldw	r2,-40(fp)
  814f40:	1085883a 	add	r2,r2,r2
  814f44:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  814f48:	e0bff617 	ldw	r2,-40(fp)
  814f4c:	1007883a 	mov	r3,r2
  814f50:	e0bffc17 	ldw	r2,-16(fp)
  814f54:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814f58:	e03ff515 	stw	zero,-44(fp)
  814f5c:	00002206 	br	814fe8 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  814f60:	e0fffc17 	ldw	r3,-16(fp)
  814f64:	e0bff517 	ldw	r2,-44(fp)
  814f68:	108018e4 	muli	r2,r2,99
  814f6c:	1885883a 	add	r2,r3,r2
  814f70:	10802444 	addi	r2,r2,145
  814f74:	10800003 	ldbu	r2,0(r2)
  814f78:	10803fcc 	andi	r2,r2,255
  814f7c:	1080201c 	xori	r2,r2,128
  814f80:	10bfe004 	addi	r2,r2,-128
  814f84:	10800450 	cmplti	r2,r2,17
  814f88:	1000141e 	bne	r2,zero,814fdc <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  814f8c:	e0fffc17 	ldw	r3,-16(fp)
  814f90:	e0bff517 	ldw	r2,-44(fp)
  814f94:	108018e4 	muli	r2,r2,99
  814f98:	1885883a 	add	r2,r3,r2
  814f9c:	10802444 	addi	r2,r2,145
  814fa0:	10800003 	ldbu	r2,0(r2)
  814fa4:	10803fcc 	andi	r2,r2,255
  814fa8:	1080201c 	xori	r2,r2,128
  814fac:	10bfe004 	addi	r2,r2,-128
  814fb0:	1004923a 	slli	r2,r2,8
  814fb4:	e17ff617 	ldw	r5,-40(fp)
  814fb8:	1009883a 	mov	r4,r2
  814fbc:	08068f40 	call	8068f4 <__divsi3>
  814fc0:	1009883a 	mov	r4,r2
  814fc4:	e0fffc17 	ldw	r3,-16(fp)
  814fc8:	e0bff517 	ldw	r2,-44(fp)
  814fcc:	108018e4 	muli	r2,r2,99
  814fd0:	1885883a 	add	r2,r3,r2
  814fd4:	10802484 	addi	r2,r2,146
  814fd8:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  814fdc:	e0bff517 	ldw	r2,-44(fp)
  814fe0:	10800044 	addi	r2,r2,1
  814fe4:	e0bff515 	stw	r2,-44(fp)
  814fe8:	e0bff517 	ldw	r2,-44(fp)
  814fec:	10800090 	cmplti	r2,r2,2
  814ff0:	103fdb1e 	bne	r2,zero,814f60 <__alt_mem_onchip_mem+0xff80cf60>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  814ff4:	e0bffc17 	ldw	r2,-16(fp)
  814ff8:	10800943 	ldbu	r2,37(r2)
  814ffc:	10803fcc 	andi	r2,r2,255
  815000:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  815004:	e13ffc17 	ldw	r4,-16(fp)
  815008:	08146180 	call	814618 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  81500c:	e0bffc17 	ldw	r2,-16(fp)
  815010:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  815014:	e0bffc17 	ldw	r2,-16(fp)
  815018:	10800943 	ldbu	r2,37(r2)
  81501c:	10c03fcc 	andi	r3,r2,255
  815020:	e0bffb17 	ldw	r2,-20(fp)
  815024:	18800426 	beq	r3,r2,815038 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  815028:	e0bffc17 	ldw	r2,-16(fp)
  81502c:	00c00044 	movi	r3,1
  815030:	10c009c5 	stb	r3,39(r2)
  }
  815034:	003fef06 	br	814ff4 <__alt_mem_onchip_mem+0xff80cff4>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  815038:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  81503c:	e0bffe17 	ldw	r2,-8(fp)
}
  815040:	e037883a 	mov	sp,fp
  815044:	dfc00117 	ldw	ra,4(sp)
  815048:	df000017 	ldw	fp,0(sp)
  81504c:	dec00204 	addi	sp,sp,8
  815050:	f800283a 	ret

00815054 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  815054:	defffc04 	addi	sp,sp,-16
  815058:	dfc00315 	stw	ra,12(sp)
  81505c:	df000215 	stw	fp,8(sp)
  815060:	df000204 	addi	fp,sp,8
  815064:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  815068:	e0bfff17 	ldw	r2,-4(fp)
  81506c:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  815070:	e0bffe17 	ldw	r2,-8(fp)
  815074:	10800943 	ldbu	r2,37(r2)
  815078:	10803fcc 	andi	r2,r2,255
  81507c:	10c00044 	addi	r3,r2,1
  815080:	e0bffe17 	ldw	r2,-8(fp)
  815084:	10800983 	ldbu	r2,38(r2)
  815088:	10803fcc 	andi	r2,r2,255
  81508c:	18800316 	blt	r3,r2,81509c <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  815090:	e0bffe17 	ldw	r2,-8(fp)
  815094:	10000945 	stb	zero,37(r2)
  815098:	00000606 	br	8150b4 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  81509c:	e0bffe17 	ldw	r2,-8(fp)
  8150a0:	10800943 	ldbu	r2,37(r2)
  8150a4:	10800044 	addi	r2,r2,1
  8150a8:	1007883a 	mov	r3,r2
  8150ac:	e0bffe17 	ldw	r2,-8(fp)
  8150b0:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  8150b4:	e0bffe17 	ldw	r2,-8(fp)
  8150b8:	10800983 	ldbu	r2,38(r2)
  8150bc:	10803fcc 	andi	r2,r2,255
  8150c0:	10000826 	beq	r2,zero,8150e4 <alt_lcd_16207_timeout+0x90>
  8150c4:	e0bffe17 	ldw	r2,-8(fp)
  8150c8:	108009c3 	ldbu	r2,39(r2)
  8150cc:	10803fcc 	andi	r2,r2,255
  8150d0:	1080201c 	xori	r2,r2,128
  8150d4:	10bfe004 	addi	r2,r2,-128
  8150d8:	1000021e 	bne	r2,zero,8150e4 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  8150dc:	e13ffe17 	ldw	r4,-8(fp)
  8150e0:	08146180 	call	814618 <lcd_repaint_screen>

  return sp->period;
  8150e4:	e0bffe17 	ldw	r2,-8(fp)
  8150e8:	10800717 	ldw	r2,28(r2)
}
  8150ec:	e037883a 	mov	sp,fp
  8150f0:	dfc00117 	ldw	ra,4(sp)
  8150f4:	df000017 	ldw	fp,0(sp)
  8150f8:	dec00204 	addi	sp,sp,8
  8150fc:	f800283a 	ret

00815100 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  815100:	defffc04 	addi	sp,sp,-16
  815104:	dfc00315 	stw	ra,12(sp)
  815108:	df000215 	stw	fp,8(sp)
  81510c:	df000204 	addi	fp,sp,8
  815110:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  815114:	e0bfff17 	ldw	r2,-4(fp)
  815118:	10800017 	ldw	r2,0(r2)
  81511c:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  815120:	e0bfff17 	ldw	r2,-4(fp)
  815124:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  815128:	010ea604 	movi	r4,15000
  81512c:	08168800 	call	816880 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  815130:	e0bffe17 	ldw	r2,-8(fp)
  815134:	00c00c04 	movi	r3,48
  815138:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  81513c:	01040104 	movi	r4,4100
  815140:	08168800 	call	816880 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  815144:	e0bffe17 	ldw	r2,-8(fp)
  815148:	00c00c04 	movi	r3,48
  81514c:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  815150:	0100fa04 	movi	r4,1000
  815154:	08168800 	call	816880 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  815158:	e0bffe17 	ldw	r2,-8(fp)
  81515c:	00c00c04 	movi	r3,48
  815160:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  815164:	01400e04 	movi	r5,56
  815168:	e13fff17 	ldw	r4,-4(fp)
  81516c:	08143b80 	call	8143b8 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  815170:	01400204 	movi	r5,8
  815174:	e13fff17 	ldw	r4,-4(fp)
  815178:	08143b80 	call	8143b8 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  81517c:	e13fff17 	ldw	r4,-4(fp)
  815180:	08145480 	call	814548 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  815184:	01400184 	movi	r5,6
  815188:	e13fff17 	ldw	r4,-4(fp)
  81518c:	08143b80 	call	8143b8 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  815190:	01400304 	movi	r5,12
  815194:	e13fff17 	ldw	r4,-4(fp)
  815198:	08143b80 	call	8143b8 <lcd_write_command>

  sp->esccount = -1;
  81519c:	e0bfff17 	ldw	r2,-4(fp)
  8151a0:	00ffffc4 	movi	r3,-1
  8151a4:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  8151a8:	e0bfff17 	ldw	r2,-4(fp)
  8151ac:	10800a04 	addi	r2,r2,40
  8151b0:	01800204 	movi	r6,8
  8151b4:	000b883a 	mov	r5,zero
  8151b8:	1009883a 	mov	r4,r2
  8151bc:	080a4180 	call	80a418 <memset>

  sp->scrollpos = 0;
  8151c0:	e0bfff17 	ldw	r2,-4(fp)
  8151c4:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  8151c8:	e0bfff17 	ldw	r2,-4(fp)
  8151cc:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  8151d0:	e0bfff17 	ldw	r2,-4(fp)
  8151d4:	100009c5 	stb	zero,39(r2)
  8151d8:	d0a75f17 	ldw	r2,-25220(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  8151dc:	01400284 	movi	r5,10
  8151e0:	1009883a 	mov	r4,r2
  8151e4:	08069ec0 	call	8069ec <__udivsi3>
  8151e8:	1007883a 	mov	r3,r2
  8151ec:	e0bfff17 	ldw	r2,-4(fp)
  8151f0:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  8151f4:	e0bfff17 	ldw	r2,-4(fp)
  8151f8:	10c00104 	addi	r3,r2,4
  8151fc:	e0bfff17 	ldw	r2,-4(fp)
  815200:	10800717 	ldw	r2,28(r2)
  815204:	e1ffff17 	ldw	r7,-4(fp)
  815208:	01802074 	movhi	r6,129
  81520c:	31941504 	addi	r6,r6,20564
  815210:	100b883a 	mov	r5,r2
  815214:	1809883a 	mov	r4,r3
  815218:	0815d780 	call	815d78 <alt_alarm_start>
}
  81521c:	0001883a 	nop
  815220:	e037883a 	mov	sp,fp
  815224:	dfc00117 	ldw	ra,4(sp)
  815228:	df000017 	ldw	fp,0(sp)
  81522c:	dec00204 	addi	sp,sp,8
  815230:	f800283a 	ret

00815234 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  815234:	defffa04 	addi	sp,sp,-24
  815238:	dfc00515 	stw	ra,20(sp)
  81523c:	df000415 	stw	fp,16(sp)
  815240:	df000404 	addi	fp,sp,16
  815244:	e13ffd15 	stw	r4,-12(fp)
  815248:	e17ffe15 	stw	r5,-8(fp)
  81524c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  815250:	e0bffd17 	ldw	r2,-12(fp)
  815254:	10800017 	ldw	r2,0(r2)
  815258:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  81525c:	e0bffc17 	ldw	r2,-16(fp)
  815260:	10c00a04 	addi	r3,r2,40
  815264:	e0bffd17 	ldw	r2,-12(fp)
  815268:	10800217 	ldw	r2,8(r2)
  81526c:	100f883a 	mov	r7,r2
  815270:	e1bfff17 	ldw	r6,-4(fp)
  815274:	e17ffe17 	ldw	r5,-8(fp)
  815278:	1809883a 	mov	r4,r3
  81527c:	0814b7c0 	call	814b7c <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  815280:	e037883a 	mov	sp,fp
  815284:	dfc00117 	ldw	ra,4(sp)
  815288:	df000017 	ldw	fp,0(sp)
  81528c:	dec00204 	addi	sp,sp,8
  815290:	f800283a 	ret

00815294 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  815294:	defffa04 	addi	sp,sp,-24
  815298:	dfc00515 	stw	ra,20(sp)
  81529c:	df000415 	stw	fp,16(sp)
  8152a0:	df000404 	addi	fp,sp,16
  8152a4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8152a8:	0007883a 	mov	r3,zero
  8152ac:	e0bfff17 	ldw	r2,-4(fp)
  8152b0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8152b4:	e0bfff17 	ldw	r2,-4(fp)
  8152b8:	10800104 	addi	r2,r2,4
  8152bc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8152c0:	0005303a 	rdctl	r2,status
  8152c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8152c8:	e0fffd17 	ldw	r3,-12(fp)
  8152cc:	00bfff84 	movi	r2,-2
  8152d0:	1884703a 	and	r2,r3,r2
  8152d4:	1001703a 	wrctl	status,r2
  
  return context;
  8152d8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8152dc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  8152e0:	08167780 	call	816778 <alt_tick>
  8152e4:	e0bffc17 	ldw	r2,-16(fp)
  8152e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8152ec:	e0bffe17 	ldw	r2,-8(fp)
  8152f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8152f4:	0001883a 	nop
  8152f8:	e037883a 	mov	sp,fp
  8152fc:	dfc00117 	ldw	ra,4(sp)
  815300:	df000017 	ldw	fp,0(sp)
  815304:	dec00204 	addi	sp,sp,8
  815308:	f800283a 	ret

0081530c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  81530c:	defff804 	addi	sp,sp,-32
  815310:	dfc00715 	stw	ra,28(sp)
  815314:	df000615 	stw	fp,24(sp)
  815318:	df000604 	addi	fp,sp,24
  81531c:	e13ffc15 	stw	r4,-16(fp)
  815320:	e17ffd15 	stw	r5,-12(fp)
  815324:	e1bffe15 	stw	r6,-8(fp)
  815328:	e1ffff15 	stw	r7,-4(fp)
  81532c:	e0bfff17 	ldw	r2,-4(fp)
  815330:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  815334:	d0a75f17 	ldw	r2,-25220(gp)
  815338:	1000021e 	bne	r2,zero,815344 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  81533c:	e0bffb17 	ldw	r2,-20(fp)
  815340:	d0a75f15 	stw	r2,-25220(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  815344:	e0bffc17 	ldw	r2,-16(fp)
  815348:	10800104 	addi	r2,r2,4
  81534c:	00c001c4 	movi	r3,7
  815350:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  815354:	d8000015 	stw	zero,0(sp)
  815358:	e1fffc17 	ldw	r7,-16(fp)
  81535c:	01802074 	movhi	r6,129
  815360:	3194a504 	addi	r6,r6,21140
  815364:	e17ffe17 	ldw	r5,-8(fp)
  815368:	e13ffd17 	ldw	r4,-12(fp)
  81536c:	08162fc0 	call	8162fc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  815370:	0001883a 	nop
  815374:	e037883a 	mov	sp,fp
  815378:	dfc00117 	ldw	ra,4(sp)
  81537c:	df000017 	ldw	fp,0(sp)
  815380:	dec00204 	addi	sp,sp,8
  815384:	f800283a 	ret

00815388 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  815388:	defffe04 	addi	sp,sp,-8
  81538c:	df000115 	stw	fp,4(sp)
  815390:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
  815394:	d0a75c17 	ldw	r2,-25232(gp)
  815398:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
  81539c:	d0a75d17 	ldw	r2,-25228(gp)
  8153a0:	1000021e 	bne	r2,zero,8153ac <alt_timestamp_start+0x24>
  {
    return -1;
  8153a4:	00bfffc4 	movi	r2,-1
  8153a8:	00001106 	br	8153f0 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
  8153ac:	e0bfff17 	ldw	r2,-4(fp)
  8153b0:	10800104 	addi	r2,r2,4
  8153b4:	00c00204 	movi	r3,8
  8153b8:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
  8153bc:	e0bfff17 	ldw	r2,-4(fp)
  8153c0:	10800204 	addi	r2,r2,8
  8153c4:	00ffffd4 	movui	r3,65535
  8153c8:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
  8153cc:	e0bfff17 	ldw	r2,-4(fp)
  8153d0:	10800304 	addi	r2,r2,12
  8153d4:	00ffffd4 	movui	r3,65535
  8153d8:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
  8153dc:	e0bfff17 	ldw	r2,-4(fp)
  8153e0:	10800104 	addi	r2,r2,4
  8153e4:	00c00104 	movi	r3,4
  8153e8:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
  8153ec:	0005883a 	mov	r2,zero
}
  8153f0:	e037883a 	mov	sp,fp
  8153f4:	df000017 	ldw	fp,0(sp)
  8153f8:	dec00104 	addi	sp,sp,4
  8153fc:	f800283a 	ret

00815400 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
  815400:	defffc04 	addi	sp,sp,-16
  815404:	df000315 	stw	fp,12(sp)
  815408:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
  81540c:	d0a75c17 	ldw	r2,-25232(gp)
  815410:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
  815414:	d0a75d17 	ldw	r2,-25228(gp)
  815418:	1000021e 	bne	r2,zero,815424 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
  81541c:	00bfffc4 	movi	r2,-1
  815420:	00001306 	br	815470 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
  815424:	e0bffd17 	ldw	r2,-12(fp)
  815428:	10800404 	addi	r2,r2,16
  81542c:	0007883a 	mov	r3,zero
  815430:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
  815434:	e0bffd17 	ldw	r2,-12(fp)
  815438:	10800404 	addi	r2,r2,16
  81543c:	10800037 	ldwio	r2,0(r2)
  815440:	10bfffcc 	andi	r2,r2,65535
  815444:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
  815448:	e0bffd17 	ldw	r2,-12(fp)
  81544c:	10800504 	addi	r2,r2,20
  815450:	10800037 	ldwio	r2,0(r2)
  815454:	10bfffcc 	andi	r2,r2,65535
  815458:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
  81545c:	e0bfff17 	ldw	r2,-4(fp)
  815460:	1006943a 	slli	r3,r2,16
  815464:	e0bffe17 	ldw	r2,-8(fp)
  815468:	1884b03a 	or	r2,r3,r2
  81546c:	0084303a 	nor	r2,zero,r2
#endif
  }
}
  815470:	e037883a 	mov	sp,fp
  815474:	df000017 	ldw	fp,0(sp)
  815478:	dec00104 	addi	sp,sp,4
  81547c:	f800283a 	ret

00815480 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
  815480:	deffff04 	addi	sp,sp,-4
  815484:	df000015 	stw	fp,0(sp)
  815488:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
  81548c:	d0a75d17 	ldw	r2,-25228(gp)
}
  815490:	e037883a 	mov	sp,fp
  815494:	df000017 	ldw	fp,0(sp)
  815498:	dec00104 	addi	sp,sp,4
  81549c:	f800283a 	ret

008154a0 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8154a0:	defffa04 	addi	sp,sp,-24
  8154a4:	dfc00515 	stw	ra,20(sp)
  8154a8:	df000415 	stw	fp,16(sp)
  8154ac:	df000404 	addi	fp,sp,16
  8154b0:	e13ffd15 	stw	r4,-12(fp)
  8154b4:	e17ffe15 	stw	r5,-8(fp)
  8154b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8154bc:	e0bffd17 	ldw	r2,-12(fp)
  8154c0:	10800017 	ldw	r2,0(r2)
  8154c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  8154c8:	e0bffc17 	ldw	r2,-16(fp)
  8154cc:	10c00a04 	addi	r3,r2,40
  8154d0:	e0bffd17 	ldw	r2,-12(fp)
  8154d4:	10800217 	ldw	r2,8(r2)
  8154d8:	100f883a 	mov	r7,r2
  8154dc:	e1bfff17 	ldw	r6,-4(fp)
  8154e0:	e17ffe17 	ldw	r5,-8(fp)
  8154e4:	1809883a 	mov	r4,r3
  8154e8:	08159b40 	call	8159b4 <altera_avalon_uart_read>
      fd->fd_flags);
}
  8154ec:	e037883a 	mov	sp,fp
  8154f0:	dfc00117 	ldw	ra,4(sp)
  8154f4:	df000017 	ldw	fp,0(sp)
  8154f8:	dec00204 	addi	sp,sp,8
  8154fc:	f800283a 	ret

00815500 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  815500:	defffa04 	addi	sp,sp,-24
  815504:	dfc00515 	stw	ra,20(sp)
  815508:	df000415 	stw	fp,16(sp)
  81550c:	df000404 	addi	fp,sp,16
  815510:	e13ffd15 	stw	r4,-12(fp)
  815514:	e17ffe15 	stw	r5,-8(fp)
  815518:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  81551c:	e0bffd17 	ldw	r2,-12(fp)
  815520:	10800017 	ldw	r2,0(r2)
  815524:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  815528:	e0bffc17 	ldw	r2,-16(fp)
  81552c:	10c00a04 	addi	r3,r2,40
  815530:	e0bffd17 	ldw	r2,-12(fp)
  815534:	10800217 	ldw	r2,8(r2)
  815538:	100f883a 	mov	r7,r2
  81553c:	e1bfff17 	ldw	r6,-4(fp)
  815540:	e17ffe17 	ldw	r5,-8(fp)
  815544:	1809883a 	mov	r4,r3
  815548:	0815bcc0 	call	815bcc <altera_avalon_uart_write>
      fd->fd_flags);
}
  81554c:	e037883a 	mov	sp,fp
  815550:	dfc00117 	ldw	ra,4(sp)
  815554:	df000017 	ldw	fp,0(sp)
  815558:	dec00204 	addi	sp,sp,8
  81555c:	f800283a 	ret

00815560 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  815560:	defffc04 	addi	sp,sp,-16
  815564:	dfc00315 	stw	ra,12(sp)
  815568:	df000215 	stw	fp,8(sp)
  81556c:	df000204 	addi	fp,sp,8
  815570:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  815574:	e0bfff17 	ldw	r2,-4(fp)
  815578:	10800017 	ldw	r2,0(r2)
  81557c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  815580:	e0bffe17 	ldw	r2,-8(fp)
  815584:	10c00a04 	addi	r3,r2,40
  815588:	e0bfff17 	ldw	r2,-4(fp)
  81558c:	10800217 	ldw	r2,8(r2)
  815590:	100b883a 	mov	r5,r2
  815594:	1809883a 	mov	r4,r3
  815598:	08159240 	call	815924 <altera_avalon_uart_close>
}
  81559c:	e037883a 	mov	sp,fp
  8155a0:	dfc00117 	ldw	ra,4(sp)
  8155a4:	df000017 	ldw	fp,0(sp)
  8155a8:	dec00204 	addi	sp,sp,8
  8155ac:	f800283a 	ret

008155b0 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  8155b0:	defff804 	addi	sp,sp,-32
  8155b4:	dfc00715 	stw	ra,28(sp)
  8155b8:	df000615 	stw	fp,24(sp)
  8155bc:	df000604 	addi	fp,sp,24
  8155c0:	e13ffd15 	stw	r4,-12(fp)
  8155c4:	e17ffe15 	stw	r5,-8(fp)
  8155c8:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  8155cc:	e0bffd17 	ldw	r2,-12(fp)
  8155d0:	10800017 	ldw	r2,0(r2)
  8155d4:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  8155d8:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8155dc:	1000041e 	bne	r2,zero,8155f0 <altera_avalon_uart_init+0x40>
  8155e0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8155e4:	1000021e 	bne	r2,zero,8155f0 <altera_avalon_uart_init+0x40>
  8155e8:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8155ec:	10000226 	beq	r2,zero,8155f8 <altera_avalon_uart_init+0x48>
  8155f0:	00800044 	movi	r2,1
  8155f4:	00000106 	br	8155fc <altera_avalon_uart_init+0x4c>
  8155f8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8155fc:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  815600:	e0bffc17 	ldw	r2,-16(fp)
  815604:	10000f1e 	bne	r2,zero,815644 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  815608:	e0bffd17 	ldw	r2,-12(fp)
  81560c:	00c32004 	movi	r3,3200
  815610:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  815614:	e0bffb17 	ldw	r2,-20(fp)
  815618:	10800304 	addi	r2,r2,12
  81561c:	e0fffd17 	ldw	r3,-12(fp)
  815620:	18c00117 	ldw	r3,4(r3)
  815624:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  815628:	d8000015 	stw	zero,0(sp)
  81562c:	e1fffd17 	ldw	r7,-12(fp)
  815630:	01802074 	movhi	r6,129
  815634:	31959704 	addi	r6,r6,22108
  815638:	e17fff17 	ldw	r5,-4(fp)
  81563c:	e13ffe17 	ldw	r4,-8(fp)
  815640:	08162fc0 	call	8162fc <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  815644:	0001883a 	nop
  815648:	e037883a 	mov	sp,fp
  81564c:	dfc00117 	ldw	ra,4(sp)
  815650:	df000017 	ldw	fp,0(sp)
  815654:	dec00204 	addi	sp,sp,8
  815658:	f800283a 	ret

0081565c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  81565c:	defffa04 	addi	sp,sp,-24
  815660:	dfc00515 	stw	ra,20(sp)
  815664:	df000415 	stw	fp,16(sp)
  815668:	df000404 	addi	fp,sp,16
  81566c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  815670:	e0bfff17 	ldw	r2,-4(fp)
  815674:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  815678:	e0bffc17 	ldw	r2,-16(fp)
  81567c:	10800017 	ldw	r2,0(r2)
  815680:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  815684:	e0bffd17 	ldw	r2,-12(fp)
  815688:	10800204 	addi	r2,r2,8
  81568c:	10800037 	ldwio	r2,0(r2)
  815690:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  815694:	e0bffd17 	ldw	r2,-12(fp)
  815698:	10800204 	addi	r2,r2,8
  81569c:	0007883a 	mov	r3,zero
  8156a0:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  8156a4:	e0bffd17 	ldw	r2,-12(fp)
  8156a8:	10800204 	addi	r2,r2,8
  8156ac:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  8156b0:	e0bffe17 	ldw	r2,-8(fp)
  8156b4:	1080200c 	andi	r2,r2,128
  8156b8:	10000326 	beq	r2,zero,8156c8 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  8156bc:	e17ffe17 	ldw	r5,-8(fp)
  8156c0:	e13ffc17 	ldw	r4,-16(fp)
  8156c4:	08156f80 	call	8156f8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  8156c8:	e0bffe17 	ldw	r2,-8(fp)
  8156cc:	1081100c 	andi	r2,r2,1088
  8156d0:	10000326 	beq	r2,zero,8156e0 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  8156d4:	e17ffe17 	ldw	r5,-8(fp)
  8156d8:	e13ffc17 	ldw	r4,-16(fp)
  8156dc:	08157dc0 	call	8157dc <altera_avalon_uart_txirq>
  }
  

}
  8156e0:	0001883a 	nop
  8156e4:	e037883a 	mov	sp,fp
  8156e8:	dfc00117 	ldw	ra,4(sp)
  8156ec:	df000017 	ldw	fp,0(sp)
  8156f0:	dec00204 	addi	sp,sp,8
  8156f4:	f800283a 	ret

008156f8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8156f8:	defffc04 	addi	sp,sp,-16
  8156fc:	df000315 	stw	fp,12(sp)
  815700:	df000304 	addi	fp,sp,12
  815704:	e13ffe15 	stw	r4,-8(fp)
  815708:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  81570c:	e0bfff17 	ldw	r2,-4(fp)
  815710:	108000cc 	andi	r2,r2,3
  815714:	10002c1e 	bne	r2,zero,8157c8 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  815718:	e0bffe17 	ldw	r2,-8(fp)
  81571c:	10800317 	ldw	r2,12(r2)
  815720:	e0bffe17 	ldw	r2,-8(fp)
  815724:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  815728:	e0bffe17 	ldw	r2,-8(fp)
  81572c:	10800317 	ldw	r2,12(r2)
  815730:	10800044 	addi	r2,r2,1
  815734:	10800fcc 	andi	r2,r2,63
  815738:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  81573c:	e0bffe17 	ldw	r2,-8(fp)
  815740:	10800317 	ldw	r2,12(r2)
  815744:	e0fffe17 	ldw	r3,-8(fp)
  815748:	18c00017 	ldw	r3,0(r3)
  81574c:	18c00037 	ldwio	r3,0(r3)
  815750:	1809883a 	mov	r4,r3
  815754:	e0fffe17 	ldw	r3,-8(fp)
  815758:	1885883a 	add	r2,r3,r2
  81575c:	10800704 	addi	r2,r2,28
  815760:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  815764:	e0bffe17 	ldw	r2,-8(fp)
  815768:	e0fffd17 	ldw	r3,-12(fp)
  81576c:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  815770:	e0bffe17 	ldw	r2,-8(fp)
  815774:	10800317 	ldw	r2,12(r2)
  815778:	10800044 	addi	r2,r2,1
  81577c:	10800fcc 	andi	r2,r2,63
  815780:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  815784:	e0bffe17 	ldw	r2,-8(fp)
  815788:	10c00217 	ldw	r3,8(r2)
  81578c:	e0bffd17 	ldw	r2,-12(fp)
  815790:	18800e1e 	bne	r3,r2,8157cc <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  815794:	e0bffe17 	ldw	r2,-8(fp)
  815798:	10c00117 	ldw	r3,4(r2)
  81579c:	00bfdfc4 	movi	r2,-129
  8157a0:	1886703a 	and	r3,r3,r2
  8157a4:	e0bffe17 	ldw	r2,-8(fp)
  8157a8:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  8157ac:	e0bffe17 	ldw	r2,-8(fp)
  8157b0:	10800017 	ldw	r2,0(r2)
  8157b4:	10800304 	addi	r2,r2,12
  8157b8:	e0fffe17 	ldw	r3,-8(fp)
  8157bc:	18c00117 	ldw	r3,4(r3)
  8157c0:	10c00035 	stwio	r3,0(r2)
  8157c4:	00000106 	br	8157cc <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  8157c8:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  8157cc:	e037883a 	mov	sp,fp
  8157d0:	df000017 	ldw	fp,0(sp)
  8157d4:	dec00104 	addi	sp,sp,4
  8157d8:	f800283a 	ret

008157dc <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8157dc:	defffb04 	addi	sp,sp,-20
  8157e0:	df000415 	stw	fp,16(sp)
  8157e4:	df000404 	addi	fp,sp,16
  8157e8:	e13ffc15 	stw	r4,-16(fp)
  8157ec:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  8157f0:	e0bffc17 	ldw	r2,-16(fp)
  8157f4:	10c00417 	ldw	r3,16(r2)
  8157f8:	e0bffc17 	ldw	r2,-16(fp)
  8157fc:	10800517 	ldw	r2,20(r2)
  815800:	18803226 	beq	r3,r2,8158cc <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  815804:	e0bffc17 	ldw	r2,-16(fp)
  815808:	10800617 	ldw	r2,24(r2)
  81580c:	1080008c 	andi	r2,r2,2
  815810:	10000326 	beq	r2,zero,815820 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  815814:	e0bffd17 	ldw	r2,-12(fp)
  815818:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  81581c:	10001d26 	beq	r2,zero,815894 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  815820:	e0bffc17 	ldw	r2,-16(fp)
  815824:	10800417 	ldw	r2,16(r2)
  815828:	e0bffc17 	ldw	r2,-16(fp)
  81582c:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  815830:	e0bffc17 	ldw	r2,-16(fp)
  815834:	10800017 	ldw	r2,0(r2)
  815838:	10800104 	addi	r2,r2,4
  81583c:	e0fffc17 	ldw	r3,-16(fp)
  815840:	18c00417 	ldw	r3,16(r3)
  815844:	e13ffc17 	ldw	r4,-16(fp)
  815848:	20c7883a 	add	r3,r4,r3
  81584c:	18c01704 	addi	r3,r3,92
  815850:	18c00003 	ldbu	r3,0(r3)
  815854:	18c03fcc 	andi	r3,r3,255
  815858:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  81585c:	e0bffc17 	ldw	r2,-16(fp)
  815860:	10800417 	ldw	r2,16(r2)
  815864:	10800044 	addi	r2,r2,1
  815868:	e0fffc17 	ldw	r3,-16(fp)
  81586c:	18800415 	stw	r2,16(r3)
  815870:	10c00fcc 	andi	r3,r2,63
  815874:	e0bffc17 	ldw	r2,-16(fp)
  815878:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  81587c:	e0bffc17 	ldw	r2,-16(fp)
  815880:	10800117 	ldw	r2,4(r2)
  815884:	10c01014 	ori	r3,r2,64
  815888:	e0bffc17 	ldw	r2,-16(fp)
  81588c:	10c00115 	stw	r3,4(r2)
  815890:	00000e06 	br	8158cc <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  815894:	e0bffc17 	ldw	r2,-16(fp)
  815898:	10800017 	ldw	r2,0(r2)
  81589c:	10800204 	addi	r2,r2,8
  8158a0:	10800037 	ldwio	r2,0(r2)
  8158a4:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8158a8:	e0bffd17 	ldw	r2,-12(fp)
  8158ac:	1082000c 	andi	r2,r2,2048
  8158b0:	1000061e 	bne	r2,zero,8158cc <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8158b4:	e0bffc17 	ldw	r2,-16(fp)
  8158b8:	10c00117 	ldw	r3,4(r2)
  8158bc:	00bfefc4 	movi	r2,-65
  8158c0:	1886703a 	and	r3,r3,r2
  8158c4:	e0bffc17 	ldw	r2,-16(fp)
  8158c8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  8158cc:	e0bffc17 	ldw	r2,-16(fp)
  8158d0:	10c00417 	ldw	r3,16(r2)
  8158d4:	e0bffc17 	ldw	r2,-16(fp)
  8158d8:	10800517 	ldw	r2,20(r2)
  8158dc:	1880061e 	bne	r3,r2,8158f8 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8158e0:	e0bffc17 	ldw	r2,-16(fp)
  8158e4:	10c00117 	ldw	r3,4(r2)
  8158e8:	00beefc4 	movi	r2,-1089
  8158ec:	1886703a 	and	r3,r3,r2
  8158f0:	e0bffc17 	ldw	r2,-16(fp)
  8158f4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8158f8:	e0bffc17 	ldw	r2,-16(fp)
  8158fc:	10800017 	ldw	r2,0(r2)
  815900:	10800304 	addi	r2,r2,12
  815904:	e0fffc17 	ldw	r3,-16(fp)
  815908:	18c00117 	ldw	r3,4(r3)
  81590c:	10c00035 	stwio	r3,0(r2)
}
  815910:	0001883a 	nop
  815914:	e037883a 	mov	sp,fp
  815918:	df000017 	ldw	fp,0(sp)
  81591c:	dec00104 	addi	sp,sp,4
  815920:	f800283a 	ret

00815924 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  815924:	defffd04 	addi	sp,sp,-12
  815928:	df000215 	stw	fp,8(sp)
  81592c:	df000204 	addi	fp,sp,8
  815930:	e13ffe15 	stw	r4,-8(fp)
  815934:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  815938:	00000506 	br	815950 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  81593c:	e0bfff17 	ldw	r2,-4(fp)
  815940:	1090000c 	andi	r2,r2,16384
  815944:	10000226 	beq	r2,zero,815950 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  815948:	00bffd44 	movi	r2,-11
  81594c:	00000606 	br	815968 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  815950:	e0bffe17 	ldw	r2,-8(fp)
  815954:	10c00417 	ldw	r3,16(r2)
  815958:	e0bffe17 	ldw	r2,-8(fp)
  81595c:	10800517 	ldw	r2,20(r2)
  815960:	18bff61e 	bne	r3,r2,81593c <__alt_mem_onchip_mem+0xff80d93c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  815964:	0005883a 	mov	r2,zero
}
  815968:	e037883a 	mov	sp,fp
  81596c:	df000017 	ldw	fp,0(sp)
  815970:	dec00104 	addi	sp,sp,4
  815974:	f800283a 	ret

00815978 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  815978:	defffe04 	addi	sp,sp,-8
  81597c:	dfc00115 	stw	ra,4(sp)
  815980:	df000015 	stw	fp,0(sp)
  815984:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  815988:	d0a00e17 	ldw	r2,-32712(gp)
  81598c:	10000326 	beq	r2,zero,81599c <alt_get_errno+0x24>
  815990:	d0a00e17 	ldw	r2,-32712(gp)
  815994:	103ee83a 	callr	r2
  815998:	00000106 	br	8159a0 <alt_get_errno+0x28>
  81599c:	d0a75504 	addi	r2,gp,-25260
}
  8159a0:	e037883a 	mov	sp,fp
  8159a4:	dfc00117 	ldw	ra,4(sp)
  8159a8:	df000017 	ldw	fp,0(sp)
  8159ac:	dec00204 	addi	sp,sp,8
  8159b0:	f800283a 	ret

008159b4 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  8159b4:	defff204 	addi	sp,sp,-56
  8159b8:	dfc00d15 	stw	ra,52(sp)
  8159bc:	df000c15 	stw	fp,48(sp)
  8159c0:	df000c04 	addi	fp,sp,48
  8159c4:	e13ffc15 	stw	r4,-16(fp)
  8159c8:	e17ffd15 	stw	r5,-12(fp)
  8159cc:	e1bffe15 	stw	r6,-8(fp)
  8159d0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  8159d4:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  8159d8:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  8159dc:	e0bfff17 	ldw	r2,-4(fp)
  8159e0:	1090000c 	andi	r2,r2,16384
  8159e4:	1005003a 	cmpeq	r2,r2,zero
  8159e8:	10803fcc 	andi	r2,r2,255
  8159ec:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8159f0:	00001306 	br	815a40 <altera_avalon_uart_read+0x8c>
    {
      count++;
  8159f4:	e0bff517 	ldw	r2,-44(fp)
  8159f8:	10800044 	addi	r2,r2,1
  8159fc:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  815a00:	e0bffd17 	ldw	r2,-12(fp)
  815a04:	10c00044 	addi	r3,r2,1
  815a08:	e0fffd15 	stw	r3,-12(fp)
  815a0c:	e0fffc17 	ldw	r3,-16(fp)
  815a10:	18c00217 	ldw	r3,8(r3)
  815a14:	e13ffc17 	ldw	r4,-16(fp)
  815a18:	20c7883a 	add	r3,r4,r3
  815a1c:	18c00704 	addi	r3,r3,28
  815a20:	18c00003 	ldbu	r3,0(r3)
  815a24:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  815a28:	e0bffc17 	ldw	r2,-16(fp)
  815a2c:	10800217 	ldw	r2,8(r2)
  815a30:	10800044 	addi	r2,r2,1
  815a34:	10c00fcc 	andi	r3,r2,63
  815a38:	e0bffc17 	ldw	r2,-16(fp)
  815a3c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  815a40:	e0fff517 	ldw	r3,-44(fp)
  815a44:	e0bffe17 	ldw	r2,-8(fp)
  815a48:	1880050e 	bge	r3,r2,815a60 <altera_avalon_uart_read+0xac>
  815a4c:	e0bffc17 	ldw	r2,-16(fp)
  815a50:	10c00217 	ldw	r3,8(r2)
  815a54:	e0bffc17 	ldw	r2,-16(fp)
  815a58:	10800317 	ldw	r2,12(r2)
  815a5c:	18bfe51e 	bne	r3,r2,8159f4 <__alt_mem_onchip_mem+0xff80d9f4>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  815a60:	e0bff517 	ldw	r2,-44(fp)
  815a64:	1000251e 	bne	r2,zero,815afc <altera_avalon_uart_read+0x148>
  815a68:	e0bffc17 	ldw	r2,-16(fp)
  815a6c:	10c00217 	ldw	r3,8(r2)
  815a70:	e0bffc17 	ldw	r2,-16(fp)
  815a74:	10800317 	ldw	r2,12(r2)
  815a78:	1880201e 	bne	r3,r2,815afc <altera_avalon_uart_read+0x148>
    {
      if (!block)
  815a7c:	e0bff617 	ldw	r2,-40(fp)
  815a80:	1000071e 	bne	r2,zero,815aa0 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  815a84:	08159780 	call	815978 <alt_get_errno>
  815a88:	1007883a 	mov	r3,r2
  815a8c:	008002c4 	movi	r2,11
  815a90:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  815a94:	00800044 	movi	r2,1
  815a98:	e0bff405 	stb	r2,-48(fp)
        break;
  815a9c:	00001b06 	br	815b0c <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815aa0:	0005303a 	rdctl	r2,status
  815aa4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815aa8:	e0fff917 	ldw	r3,-28(fp)
  815aac:	00bfff84 	movi	r2,-2
  815ab0:	1884703a 	and	r2,r3,r2
  815ab4:	1001703a 	wrctl	status,r2
  
  return context;
  815ab8:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  815abc:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  815ac0:	e0bffc17 	ldw	r2,-16(fp)
  815ac4:	10800117 	ldw	r2,4(r2)
  815ac8:	10c02014 	ori	r3,r2,128
  815acc:	e0bffc17 	ldw	r2,-16(fp)
  815ad0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  815ad4:	e0bffc17 	ldw	r2,-16(fp)
  815ad8:	10800017 	ldw	r2,0(r2)
  815adc:	10800304 	addi	r2,r2,12
  815ae0:	e0fffc17 	ldw	r3,-16(fp)
  815ae4:	18c00117 	ldw	r3,4(r3)
  815ae8:	10c00035 	stwio	r3,0(r2)
  815aec:	e0bff817 	ldw	r2,-32(fp)
  815af0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815af4:	e0bffa17 	ldw	r2,-24(fp)
  815af8:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  815afc:	e0bff517 	ldw	r2,-44(fp)
  815b00:	1000021e 	bne	r2,zero,815b0c <altera_avalon_uart_read+0x158>
  815b04:	e0bffe17 	ldw	r2,-8(fp)
  815b08:	103fcd1e 	bne	r2,zero,815a40 <__alt_mem_onchip_mem+0xff80da40>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815b0c:	0005303a 	rdctl	r2,status
  815b10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815b14:	e0fffb17 	ldw	r3,-20(fp)
  815b18:	00bfff84 	movi	r2,-2
  815b1c:	1884703a 	and	r2,r3,r2
  815b20:	1001703a 	wrctl	status,r2
  
  return context;
  815b24:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  815b28:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  815b2c:	e0bffc17 	ldw	r2,-16(fp)
  815b30:	10800117 	ldw	r2,4(r2)
  815b34:	10c02014 	ori	r3,r2,128
  815b38:	e0bffc17 	ldw	r2,-16(fp)
  815b3c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  815b40:	e0bffc17 	ldw	r2,-16(fp)
  815b44:	10800017 	ldw	r2,0(r2)
  815b48:	10800304 	addi	r2,r2,12
  815b4c:	e0fffc17 	ldw	r3,-16(fp)
  815b50:	18c00117 	ldw	r3,4(r3)
  815b54:	10c00035 	stwio	r3,0(r2)
  815b58:	e0bff817 	ldw	r2,-32(fp)
  815b5c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815b60:	e0bff717 	ldw	r2,-36(fp)
  815b64:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  815b68:	e0bff403 	ldbu	r2,-48(fp)
  815b6c:	10000226 	beq	r2,zero,815b78 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  815b70:	00bffd44 	movi	r2,-11
  815b74:	00000106 	br	815b7c <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  815b78:	e0bff517 	ldw	r2,-44(fp)
  }
}
  815b7c:	e037883a 	mov	sp,fp
  815b80:	dfc00117 	ldw	ra,4(sp)
  815b84:	df000017 	ldw	fp,0(sp)
  815b88:	dec00204 	addi	sp,sp,8
  815b8c:	f800283a 	ret

00815b90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  815b90:	defffe04 	addi	sp,sp,-8
  815b94:	dfc00115 	stw	ra,4(sp)
  815b98:	df000015 	stw	fp,0(sp)
  815b9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  815ba0:	d0a00e17 	ldw	r2,-32712(gp)
  815ba4:	10000326 	beq	r2,zero,815bb4 <alt_get_errno+0x24>
  815ba8:	d0a00e17 	ldw	r2,-32712(gp)
  815bac:	103ee83a 	callr	r2
  815bb0:	00000106 	br	815bb8 <alt_get_errno+0x28>
  815bb4:	d0a75504 	addi	r2,gp,-25260
}
  815bb8:	e037883a 	mov	sp,fp
  815bbc:	dfc00117 	ldw	ra,4(sp)
  815bc0:	df000017 	ldw	fp,0(sp)
  815bc4:	dec00204 	addi	sp,sp,8
  815bc8:	f800283a 	ret

00815bcc <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  815bcc:	defff204 	addi	sp,sp,-56
  815bd0:	dfc00d15 	stw	ra,52(sp)
  815bd4:	df000c15 	stw	fp,48(sp)
  815bd8:	df000c04 	addi	fp,sp,48
  815bdc:	e13ffc15 	stw	r4,-16(fp)
  815be0:	e17ffd15 	stw	r5,-12(fp)
  815be4:	e1bffe15 	stw	r6,-8(fp)
  815be8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  815bec:	e0bffe17 	ldw	r2,-8(fp)
  815bf0:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  815bf4:	e0bfff17 	ldw	r2,-4(fp)
  815bf8:	1090000c 	andi	r2,r2,16384
  815bfc:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  815c00:	00003c06 	br	815cf4 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  815c04:	e0bffc17 	ldw	r2,-16(fp)
  815c08:	10800517 	ldw	r2,20(r2)
  815c0c:	10800044 	addi	r2,r2,1
  815c10:	10800fcc 	andi	r2,r2,63
  815c14:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  815c18:	e0bffc17 	ldw	r2,-16(fp)
  815c1c:	10c00417 	ldw	r3,16(r2)
  815c20:	e0bff717 	ldw	r2,-36(fp)
  815c24:	1880221e 	bne	r3,r2,815cb0 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  815c28:	e0bff517 	ldw	r2,-44(fp)
  815c2c:	10000526 	beq	r2,zero,815c44 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  815c30:	0815b900 	call	815b90 <alt_get_errno>
  815c34:	1007883a 	mov	r3,r2
  815c38:	008002c4 	movi	r2,11
  815c3c:	18800015 	stw	r2,0(r3)
        break;
  815c40:	00002e06 	br	815cfc <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815c44:	0005303a 	rdctl	r2,status
  815c48:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815c4c:	e0fff917 	ldw	r3,-28(fp)
  815c50:	00bfff84 	movi	r2,-2
  815c54:	1884703a 	and	r2,r3,r2
  815c58:	1001703a 	wrctl	status,r2
  
  return context;
  815c5c:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  815c60:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  815c64:	e0bffc17 	ldw	r2,-16(fp)
  815c68:	10800117 	ldw	r2,4(r2)
  815c6c:	10c11014 	ori	r3,r2,1088
  815c70:	e0bffc17 	ldw	r2,-16(fp)
  815c74:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  815c78:	e0bffc17 	ldw	r2,-16(fp)
  815c7c:	10800017 	ldw	r2,0(r2)
  815c80:	10800304 	addi	r2,r2,12
  815c84:	e0fffc17 	ldw	r3,-16(fp)
  815c88:	18c00117 	ldw	r3,4(r3)
  815c8c:	10c00035 	stwio	r3,0(r2)
  815c90:	e0bff817 	ldw	r2,-32(fp)
  815c94:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815c98:	e0bff617 	ldw	r2,-40(fp)
  815c9c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  815ca0:	e0bffc17 	ldw	r2,-16(fp)
  815ca4:	10c00417 	ldw	r3,16(r2)
  815ca8:	e0bff717 	ldw	r2,-36(fp)
  815cac:	18bffc26 	beq	r3,r2,815ca0 <__alt_mem_onchip_mem+0xff80dca0>
      }
    }

    count--;
  815cb0:	e0bff417 	ldw	r2,-48(fp)
  815cb4:	10bfffc4 	addi	r2,r2,-1
  815cb8:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  815cbc:	e0bffc17 	ldw	r2,-16(fp)
  815cc0:	10c00517 	ldw	r3,20(r2)
  815cc4:	e0bffd17 	ldw	r2,-12(fp)
  815cc8:	11000044 	addi	r4,r2,1
  815ccc:	e13ffd15 	stw	r4,-12(fp)
  815cd0:	10800003 	ldbu	r2,0(r2)
  815cd4:	1009883a 	mov	r4,r2
  815cd8:	e0bffc17 	ldw	r2,-16(fp)
  815cdc:	10c5883a 	add	r2,r2,r3
  815ce0:	10801704 	addi	r2,r2,92
  815ce4:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  815ce8:	e0bffc17 	ldw	r2,-16(fp)
  815cec:	e0fff717 	ldw	r3,-36(fp)
  815cf0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  815cf4:	e0bff417 	ldw	r2,-48(fp)
  815cf8:	103fc21e 	bne	r2,zero,815c04 <__alt_mem_onchip_mem+0xff80dc04>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815cfc:	0005303a 	rdctl	r2,status
  815d00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815d04:	e0fffb17 	ldw	r3,-20(fp)
  815d08:	00bfff84 	movi	r2,-2
  815d0c:	1884703a 	and	r2,r3,r2
  815d10:	1001703a 	wrctl	status,r2
  
  return context;
  815d14:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  815d18:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  815d1c:	e0bffc17 	ldw	r2,-16(fp)
  815d20:	10800117 	ldw	r2,4(r2)
  815d24:	10c11014 	ori	r3,r2,1088
  815d28:	e0bffc17 	ldw	r2,-16(fp)
  815d2c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  815d30:	e0bffc17 	ldw	r2,-16(fp)
  815d34:	10800017 	ldw	r2,0(r2)
  815d38:	10800304 	addi	r2,r2,12
  815d3c:	e0fffc17 	ldw	r3,-16(fp)
  815d40:	18c00117 	ldw	r3,4(r3)
  815d44:	10c00035 	stwio	r3,0(r2)
  815d48:	e0bff817 	ldw	r2,-32(fp)
  815d4c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815d50:	e0bffa17 	ldw	r2,-24(fp)
  815d54:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  815d58:	e0fffe17 	ldw	r3,-8(fp)
  815d5c:	e0bff417 	ldw	r2,-48(fp)
  815d60:	1885c83a 	sub	r2,r3,r2
}
  815d64:	e037883a 	mov	sp,fp
  815d68:	dfc00117 	ldw	ra,4(sp)
  815d6c:	df000017 	ldw	fp,0(sp)
  815d70:	dec00204 	addi	sp,sp,8
  815d74:	f800283a 	ret

00815d78 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  815d78:	defff504 	addi	sp,sp,-44
  815d7c:	df000a15 	stw	fp,40(sp)
  815d80:	df000a04 	addi	fp,sp,40
  815d84:	e13ffc15 	stw	r4,-16(fp)
  815d88:	e17ffd15 	stw	r5,-12(fp)
  815d8c:	e1bffe15 	stw	r6,-8(fp)
  815d90:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  815d94:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  815d98:	d0a75f17 	ldw	r2,-25220(gp)
  
  if (alt_ticks_per_second ())
  815d9c:	10003c26 	beq	r2,zero,815e90 <alt_alarm_start+0x118>
  {
    if (alarm)
  815da0:	e0bffc17 	ldw	r2,-16(fp)
  815da4:	10003826 	beq	r2,zero,815e88 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  815da8:	e0bffc17 	ldw	r2,-16(fp)
  815dac:	e0fffe17 	ldw	r3,-8(fp)
  815db0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  815db4:	e0bffc17 	ldw	r2,-16(fp)
  815db8:	e0ffff17 	ldw	r3,-4(fp)
  815dbc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815dc0:	0005303a 	rdctl	r2,status
  815dc4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815dc8:	e0fff917 	ldw	r3,-28(fp)
  815dcc:	00bfff84 	movi	r2,-2
  815dd0:	1884703a 	and	r2,r3,r2
  815dd4:	1001703a 	wrctl	status,r2
  
  return context;
  815dd8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  815ddc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  815de0:	d0a76017 	ldw	r2,-25216(gp)
      
      current_nticks = alt_nticks();
  815de4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  815de8:	e0fffd17 	ldw	r3,-12(fp)
  815dec:	e0bff617 	ldw	r2,-40(fp)
  815df0:	1885883a 	add	r2,r3,r2
  815df4:	10c00044 	addi	r3,r2,1
  815df8:	e0bffc17 	ldw	r2,-16(fp)
  815dfc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  815e00:	e0bffc17 	ldw	r2,-16(fp)
  815e04:	10c00217 	ldw	r3,8(r2)
  815e08:	e0bff617 	ldw	r2,-40(fp)
  815e0c:	1880042e 	bgeu	r3,r2,815e20 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  815e10:	e0bffc17 	ldw	r2,-16(fp)
  815e14:	00c00044 	movi	r3,1
  815e18:	10c00405 	stb	r3,16(r2)
  815e1c:	00000206 	br	815e28 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  815e20:	e0bffc17 	ldw	r2,-16(fp)
  815e24:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  815e28:	e0bffc17 	ldw	r2,-16(fp)
  815e2c:	d0e01204 	addi	r3,gp,-32696
  815e30:	e0fffa15 	stw	r3,-24(fp)
  815e34:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  815e38:	e0bffb17 	ldw	r2,-20(fp)
  815e3c:	e0fffa17 	ldw	r3,-24(fp)
  815e40:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  815e44:	e0bffa17 	ldw	r2,-24(fp)
  815e48:	10c00017 	ldw	r3,0(r2)
  815e4c:	e0bffb17 	ldw	r2,-20(fp)
  815e50:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  815e54:	e0bffa17 	ldw	r2,-24(fp)
  815e58:	10800017 	ldw	r2,0(r2)
  815e5c:	e0fffb17 	ldw	r3,-20(fp)
  815e60:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  815e64:	e0bffa17 	ldw	r2,-24(fp)
  815e68:	e0fffb17 	ldw	r3,-20(fp)
  815e6c:	10c00015 	stw	r3,0(r2)
  815e70:	e0bff817 	ldw	r2,-32(fp)
  815e74:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815e78:	e0bff717 	ldw	r2,-36(fp)
  815e7c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  815e80:	0005883a 	mov	r2,zero
  815e84:	00000306 	br	815e94 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  815e88:	00bffa84 	movi	r2,-22
  815e8c:	00000106 	br	815e94 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  815e90:	00bfde84 	movi	r2,-134
  }
}
  815e94:	e037883a 	mov	sp,fp
  815e98:	df000017 	ldw	fp,0(sp)
  815e9c:	dec00104 	addi	sp,sp,4
  815ea0:	f800283a 	ret

00815ea4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  815ea4:	defffe04 	addi	sp,sp,-8
  815ea8:	df000115 	stw	fp,4(sp)
  815eac:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  815eb0:	e03fff15 	stw	zero,-4(fp)
  815eb4:	00000506 	br	815ecc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  815eb8:	e0bfff17 	ldw	r2,-4(fp)
  815ebc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  815ec0:	e0bfff17 	ldw	r2,-4(fp)
  815ec4:	10800804 	addi	r2,r2,32
  815ec8:	e0bfff15 	stw	r2,-4(fp)
  815ecc:	e0bfff17 	ldw	r2,-4(fp)
  815ed0:	10820030 	cmpltui	r2,r2,2048
  815ed4:	103ff81e 	bne	r2,zero,815eb8 <__alt_mem_onchip_mem+0xff80deb8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  815ed8:	0001883a 	nop
  815edc:	e037883a 	mov	sp,fp
  815ee0:	df000017 	ldw	fp,0(sp)
  815ee4:	dec00104 	addi	sp,sp,4
  815ee8:	f800283a 	ret

00815eec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  815eec:	defffe04 	addi	sp,sp,-8
  815ef0:	dfc00115 	stw	ra,4(sp)
  815ef4:	df000015 	stw	fp,0(sp)
  815ef8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  815efc:	d0a00e17 	ldw	r2,-32712(gp)
  815f00:	10000326 	beq	r2,zero,815f10 <alt_get_errno+0x24>
  815f04:	d0a00e17 	ldw	r2,-32712(gp)
  815f08:	103ee83a 	callr	r2
  815f0c:	00000106 	br	815f14 <alt_get_errno+0x28>
  815f10:	d0a75504 	addi	r2,gp,-25260
}
  815f14:	e037883a 	mov	sp,fp
  815f18:	dfc00117 	ldw	ra,4(sp)
  815f1c:	df000017 	ldw	fp,0(sp)
  815f20:	dec00204 	addi	sp,sp,8
  815f24:	f800283a 	ret

00815f28 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  815f28:	defffa04 	addi	sp,sp,-24
  815f2c:	dfc00515 	stw	ra,20(sp)
  815f30:	df000415 	stw	fp,16(sp)
  815f34:	df000404 	addi	fp,sp,16
  815f38:	e13ffe15 	stw	r4,-8(fp)
  815f3c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  815f40:	e0bffe17 	ldw	r2,-8(fp)
  815f44:	10000326 	beq	r2,zero,815f54 <alt_dev_llist_insert+0x2c>
  815f48:	e0bffe17 	ldw	r2,-8(fp)
  815f4c:	10800217 	ldw	r2,8(r2)
  815f50:	1000061e 	bne	r2,zero,815f6c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  815f54:	0815eec0 	call	815eec <alt_get_errno>
  815f58:	1007883a 	mov	r3,r2
  815f5c:	00800584 	movi	r2,22
  815f60:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  815f64:	00bffa84 	movi	r2,-22
  815f68:	00001306 	br	815fb8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  815f6c:	e0bffe17 	ldw	r2,-8(fp)
  815f70:	e0ffff17 	ldw	r3,-4(fp)
  815f74:	e0fffc15 	stw	r3,-16(fp)
  815f78:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  815f7c:	e0bffd17 	ldw	r2,-12(fp)
  815f80:	e0fffc17 	ldw	r3,-16(fp)
  815f84:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  815f88:	e0bffc17 	ldw	r2,-16(fp)
  815f8c:	10c00017 	ldw	r3,0(r2)
  815f90:	e0bffd17 	ldw	r2,-12(fp)
  815f94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  815f98:	e0bffc17 	ldw	r2,-16(fp)
  815f9c:	10800017 	ldw	r2,0(r2)
  815fa0:	e0fffd17 	ldw	r3,-12(fp)
  815fa4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  815fa8:	e0bffc17 	ldw	r2,-16(fp)
  815fac:	e0fffd17 	ldw	r3,-12(fp)
  815fb0:	10c00015 	stw	r3,0(r2)

  return 0;  
  815fb4:	0005883a 	mov	r2,zero
}
  815fb8:	e037883a 	mov	sp,fp
  815fbc:	dfc00117 	ldw	ra,4(sp)
  815fc0:	df000017 	ldw	fp,0(sp)
  815fc4:	dec00204 	addi	sp,sp,8
  815fc8:	f800283a 	ret

00815fcc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  815fcc:	defffd04 	addi	sp,sp,-12
  815fd0:	dfc00215 	stw	ra,8(sp)
  815fd4:	df000115 	stw	fp,4(sp)
  815fd8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  815fdc:	00802074 	movhi	r2,129
  815fe0:	109bba04 	addi	r2,r2,28392
  815fe4:	e0bfff15 	stw	r2,-4(fp)
  815fe8:	00000606 	br	816004 <_do_ctors+0x38>
        (*ctor) (); 
  815fec:	e0bfff17 	ldw	r2,-4(fp)
  815ff0:	10800017 	ldw	r2,0(r2)
  815ff4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  815ff8:	e0bfff17 	ldw	r2,-4(fp)
  815ffc:	10bfff04 	addi	r2,r2,-4
  816000:	e0bfff15 	stw	r2,-4(fp)
  816004:	e0ffff17 	ldw	r3,-4(fp)
  816008:	00802074 	movhi	r2,129
  81600c:	109bbb04 	addi	r2,r2,28396
  816010:	18bff62e 	bgeu	r3,r2,815fec <__alt_mem_onchip_mem+0xff80dfec>
        (*ctor) (); 
}
  816014:	0001883a 	nop
  816018:	e037883a 	mov	sp,fp
  81601c:	dfc00117 	ldw	ra,4(sp)
  816020:	df000017 	ldw	fp,0(sp)
  816024:	dec00204 	addi	sp,sp,8
  816028:	f800283a 	ret

0081602c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  81602c:	defffd04 	addi	sp,sp,-12
  816030:	dfc00215 	stw	ra,8(sp)
  816034:	df000115 	stw	fp,4(sp)
  816038:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81603c:	00802074 	movhi	r2,129
  816040:	109bba04 	addi	r2,r2,28392
  816044:	e0bfff15 	stw	r2,-4(fp)
  816048:	00000606 	br	816064 <_do_dtors+0x38>
        (*dtor) (); 
  81604c:	e0bfff17 	ldw	r2,-4(fp)
  816050:	10800017 	ldw	r2,0(r2)
  816054:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  816058:	e0bfff17 	ldw	r2,-4(fp)
  81605c:	10bfff04 	addi	r2,r2,-4
  816060:	e0bfff15 	stw	r2,-4(fp)
  816064:	e0ffff17 	ldw	r3,-4(fp)
  816068:	00802074 	movhi	r2,129
  81606c:	109bbb04 	addi	r2,r2,28396
  816070:	18bff62e 	bgeu	r3,r2,81604c <__alt_mem_onchip_mem+0xff80e04c>
        (*dtor) (); 
}
  816074:	0001883a 	nop
  816078:	e037883a 	mov	sp,fp
  81607c:	dfc00117 	ldw	ra,4(sp)
  816080:	df000017 	ldw	fp,0(sp)
  816084:	dec00204 	addi	sp,sp,8
  816088:	f800283a 	ret

0081608c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  81608c:	defffa04 	addi	sp,sp,-24
  816090:	dfc00515 	stw	ra,20(sp)
  816094:	df000415 	stw	fp,16(sp)
  816098:	df000404 	addi	fp,sp,16
  81609c:	e13ffe15 	stw	r4,-8(fp)
  8160a0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8160a4:	e0bfff17 	ldw	r2,-4(fp)
  8160a8:	10800017 	ldw	r2,0(r2)
  8160ac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8160b0:	e13ffe17 	ldw	r4,-8(fp)
  8160b4:	080a8100 	call	80a810 <strlen>
  8160b8:	10800044 	addi	r2,r2,1
  8160bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8160c0:	00000d06 	br	8160f8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8160c4:	e0bffc17 	ldw	r2,-16(fp)
  8160c8:	10800217 	ldw	r2,8(r2)
  8160cc:	e0fffd17 	ldw	r3,-12(fp)
  8160d0:	180d883a 	mov	r6,r3
  8160d4:	e17ffe17 	ldw	r5,-8(fp)
  8160d8:	1009883a 	mov	r4,r2
  8160dc:	0816ba40 	call	816ba4 <memcmp>
  8160e0:	1000021e 	bne	r2,zero,8160ec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8160e4:	e0bffc17 	ldw	r2,-16(fp)
  8160e8:	00000706 	br	816108 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8160ec:	e0bffc17 	ldw	r2,-16(fp)
  8160f0:	10800017 	ldw	r2,0(r2)
  8160f4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8160f8:	e0fffc17 	ldw	r3,-16(fp)
  8160fc:	e0bfff17 	ldw	r2,-4(fp)
  816100:	18bff01e 	bne	r3,r2,8160c4 <__alt_mem_onchip_mem+0xff80e0c4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  816104:	0005883a 	mov	r2,zero
}
  816108:	e037883a 	mov	sp,fp
  81610c:	dfc00117 	ldw	ra,4(sp)
  816110:	df000017 	ldw	fp,0(sp)
  816114:	dec00204 	addi	sp,sp,8
  816118:	f800283a 	ret

0081611c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81611c:	defffb04 	addi	sp,sp,-20
  816120:	dfc00415 	stw	ra,16(sp)
  816124:	df000315 	stw	fp,12(sp)
  816128:	df000304 	addi	fp,sp,12
  81612c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  816130:	d0a00917 	ldw	r2,-32732(gp)
  816134:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  816138:	00003106 	br	816200 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  81613c:	e0bffd17 	ldw	r2,-12(fp)
  816140:	10800217 	ldw	r2,8(r2)
  816144:	1009883a 	mov	r4,r2
  816148:	080a8100 	call	80a810 <strlen>
  81614c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  816150:	e0bffd17 	ldw	r2,-12(fp)
  816154:	10c00217 	ldw	r3,8(r2)
  816158:	e0bffe17 	ldw	r2,-8(fp)
  81615c:	10bfffc4 	addi	r2,r2,-1
  816160:	1885883a 	add	r2,r3,r2
  816164:	10800003 	ldbu	r2,0(r2)
  816168:	10803fcc 	andi	r2,r2,255
  81616c:	1080201c 	xori	r2,r2,128
  816170:	10bfe004 	addi	r2,r2,-128
  816174:	10800bd8 	cmpnei	r2,r2,47
  816178:	1000031e 	bne	r2,zero,816188 <alt_find_file+0x6c>
    {
      len -= 1;
  81617c:	e0bffe17 	ldw	r2,-8(fp)
  816180:	10bfffc4 	addi	r2,r2,-1
  816184:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  816188:	e0bffe17 	ldw	r2,-8(fp)
  81618c:	e0ffff17 	ldw	r3,-4(fp)
  816190:	1885883a 	add	r2,r3,r2
  816194:	10800003 	ldbu	r2,0(r2)
  816198:	10803fcc 	andi	r2,r2,255
  81619c:	1080201c 	xori	r2,r2,128
  8161a0:	10bfe004 	addi	r2,r2,-128
  8161a4:	10800be0 	cmpeqi	r2,r2,47
  8161a8:	1000081e 	bne	r2,zero,8161cc <alt_find_file+0xb0>
  8161ac:	e0bffe17 	ldw	r2,-8(fp)
  8161b0:	e0ffff17 	ldw	r3,-4(fp)
  8161b4:	1885883a 	add	r2,r3,r2
  8161b8:	10800003 	ldbu	r2,0(r2)
  8161bc:	10803fcc 	andi	r2,r2,255
  8161c0:	1080201c 	xori	r2,r2,128
  8161c4:	10bfe004 	addi	r2,r2,-128
  8161c8:	10000a1e 	bne	r2,zero,8161f4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  8161cc:	e0bffd17 	ldw	r2,-12(fp)
  8161d0:	10800217 	ldw	r2,8(r2)
  8161d4:	e0fffe17 	ldw	r3,-8(fp)
  8161d8:	180d883a 	mov	r6,r3
  8161dc:	e17fff17 	ldw	r5,-4(fp)
  8161e0:	1009883a 	mov	r4,r2
  8161e4:	0816ba40 	call	816ba4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8161e8:	1000021e 	bne	r2,zero,8161f4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8161ec:	e0bffd17 	ldw	r2,-12(fp)
  8161f0:	00000706 	br	816210 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  8161f4:	e0bffd17 	ldw	r2,-12(fp)
  8161f8:	10800017 	ldw	r2,0(r2)
  8161fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  816200:	e0fffd17 	ldw	r3,-12(fp)
  816204:	d0a00904 	addi	r2,gp,-32732
  816208:	18bfcc1e 	bne	r3,r2,81613c <__alt_mem_onchip_mem+0xff80e13c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  81620c:	0005883a 	mov	r2,zero
}
  816210:	e037883a 	mov	sp,fp
  816214:	dfc00117 	ldw	ra,4(sp)
  816218:	df000017 	ldw	fp,0(sp)
  81621c:	dec00204 	addi	sp,sp,8
  816220:	f800283a 	ret

00816224 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  816224:	defffc04 	addi	sp,sp,-16
  816228:	df000315 	stw	fp,12(sp)
  81622c:	df000304 	addi	fp,sp,12
  816230:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  816234:	00bffa04 	movi	r2,-24
  816238:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81623c:	e03ffd15 	stw	zero,-12(fp)
  816240:	00001906 	br	8162a8 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  816244:	00802074 	movhi	r2,129
  816248:	109fc504 	addi	r2,r2,32532
  81624c:	e0fffd17 	ldw	r3,-12(fp)
  816250:	18c00324 	muli	r3,r3,12
  816254:	10c5883a 	add	r2,r2,r3
  816258:	10800017 	ldw	r2,0(r2)
  81625c:	10000f1e 	bne	r2,zero,81629c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  816260:	00802074 	movhi	r2,129
  816264:	109fc504 	addi	r2,r2,32532
  816268:	e0fffd17 	ldw	r3,-12(fp)
  81626c:	18c00324 	muli	r3,r3,12
  816270:	10c5883a 	add	r2,r2,r3
  816274:	e0ffff17 	ldw	r3,-4(fp)
  816278:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  81627c:	d0e00d17 	ldw	r3,-32716(gp)
  816280:	e0bffd17 	ldw	r2,-12(fp)
  816284:	1880020e 	bge	r3,r2,816290 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  816288:	e0bffd17 	ldw	r2,-12(fp)
  81628c:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
  816290:	e0bffd17 	ldw	r2,-12(fp)
  816294:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  816298:	00000606 	br	8162b4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81629c:	e0bffd17 	ldw	r2,-12(fp)
  8162a0:	10800044 	addi	r2,r2,1
  8162a4:	e0bffd15 	stw	r2,-12(fp)
  8162a8:	e0bffd17 	ldw	r2,-12(fp)
  8162ac:	10800810 	cmplti	r2,r2,32
  8162b0:	103fe41e 	bne	r2,zero,816244 <__alt_mem_onchip_mem+0xff80e244>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8162b4:	e0bffe17 	ldw	r2,-8(fp)
}
  8162b8:	e037883a 	mov	sp,fp
  8162bc:	df000017 	ldw	fp,0(sp)
  8162c0:	dec00104 	addi	sp,sp,4
  8162c4:	f800283a 	ret

008162c8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8162c8:	defffe04 	addi	sp,sp,-8
  8162cc:	dfc00115 	stw	ra,4(sp)
  8162d0:	df000015 	stw	fp,0(sp)
  8162d4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8162d8:	01440004 	movi	r5,4096
  8162dc:	0009883a 	mov	r4,zero
  8162e0:	0816a2c0 	call	816a2c <alt_icache_flush>
#endif
}
  8162e4:	0001883a 	nop
  8162e8:	e037883a 	mov	sp,fp
  8162ec:	dfc00117 	ldw	ra,4(sp)
  8162f0:	df000017 	ldw	fp,0(sp)
  8162f4:	dec00204 	addi	sp,sp,8
  8162f8:	f800283a 	ret

008162fc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8162fc:	defff904 	addi	sp,sp,-28
  816300:	dfc00615 	stw	ra,24(sp)
  816304:	df000515 	stw	fp,20(sp)
  816308:	df000504 	addi	fp,sp,20
  81630c:	e13ffc15 	stw	r4,-16(fp)
  816310:	e17ffd15 	stw	r5,-12(fp)
  816314:	e1bffe15 	stw	r6,-8(fp)
  816318:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  81631c:	e0800217 	ldw	r2,8(fp)
  816320:	d8800015 	stw	r2,0(sp)
  816324:	e1ffff17 	ldw	r7,-4(fp)
  816328:	e1bffe17 	ldw	r6,-8(fp)
  81632c:	e17ffd17 	ldw	r5,-12(fp)
  816330:	e13ffc17 	ldw	r4,-16(fp)
  816334:	08164ac0 	call	8164ac <alt_iic_isr_register>
}  
  816338:	e037883a 	mov	sp,fp
  81633c:	dfc00117 	ldw	ra,4(sp)
  816340:	df000017 	ldw	fp,0(sp)
  816344:	dec00204 	addi	sp,sp,8
  816348:	f800283a 	ret

0081634c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  81634c:	defff904 	addi	sp,sp,-28
  816350:	df000615 	stw	fp,24(sp)
  816354:	df000604 	addi	fp,sp,24
  816358:	e13ffe15 	stw	r4,-8(fp)
  81635c:	e17fff15 	stw	r5,-4(fp)
  816360:	e0bfff17 	ldw	r2,-4(fp)
  816364:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816368:	0005303a 	rdctl	r2,status
  81636c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816370:	e0fffb17 	ldw	r3,-20(fp)
  816374:	00bfff84 	movi	r2,-2
  816378:	1884703a 	and	r2,r3,r2
  81637c:	1001703a 	wrctl	status,r2
  
  return context;
  816380:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  816384:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  816388:	00c00044 	movi	r3,1
  81638c:	e0bffa17 	ldw	r2,-24(fp)
  816390:	1884983a 	sll	r2,r3,r2
  816394:	1007883a 	mov	r3,r2
  816398:	d0a75e17 	ldw	r2,-25224(gp)
  81639c:	1884b03a 	or	r2,r3,r2
  8163a0:	d0a75e15 	stw	r2,-25224(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8163a4:	d0a75e17 	ldw	r2,-25224(gp)
  8163a8:	100170fa 	wrctl	ienable,r2
  8163ac:	e0bffc17 	ldw	r2,-16(fp)
  8163b0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8163b4:	e0bffd17 	ldw	r2,-12(fp)
  8163b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8163bc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  8163c0:	0001883a 	nop
}
  8163c4:	e037883a 	mov	sp,fp
  8163c8:	df000017 	ldw	fp,0(sp)
  8163cc:	dec00104 	addi	sp,sp,4
  8163d0:	f800283a 	ret

008163d4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  8163d4:	defff904 	addi	sp,sp,-28
  8163d8:	df000615 	stw	fp,24(sp)
  8163dc:	df000604 	addi	fp,sp,24
  8163e0:	e13ffe15 	stw	r4,-8(fp)
  8163e4:	e17fff15 	stw	r5,-4(fp)
  8163e8:	e0bfff17 	ldw	r2,-4(fp)
  8163ec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8163f0:	0005303a 	rdctl	r2,status
  8163f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8163f8:	e0fffb17 	ldw	r3,-20(fp)
  8163fc:	00bfff84 	movi	r2,-2
  816400:	1884703a 	and	r2,r3,r2
  816404:	1001703a 	wrctl	status,r2
  
  return context;
  816408:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81640c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  816410:	00c00044 	movi	r3,1
  816414:	e0bffa17 	ldw	r2,-24(fp)
  816418:	1884983a 	sll	r2,r3,r2
  81641c:	0084303a 	nor	r2,zero,r2
  816420:	1007883a 	mov	r3,r2
  816424:	d0a75e17 	ldw	r2,-25224(gp)
  816428:	1884703a 	and	r2,r3,r2
  81642c:	d0a75e15 	stw	r2,-25224(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  816430:	d0a75e17 	ldw	r2,-25224(gp)
  816434:	100170fa 	wrctl	ienable,r2
  816438:	e0bffc17 	ldw	r2,-16(fp)
  81643c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816440:	e0bffd17 	ldw	r2,-12(fp)
  816444:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  816448:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  81644c:	0001883a 	nop
}
  816450:	e037883a 	mov	sp,fp
  816454:	df000017 	ldw	fp,0(sp)
  816458:	dec00104 	addi	sp,sp,4
  81645c:	f800283a 	ret

00816460 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  816460:	defffc04 	addi	sp,sp,-16
  816464:	df000315 	stw	fp,12(sp)
  816468:	df000304 	addi	fp,sp,12
  81646c:	e13ffe15 	stw	r4,-8(fp)
  816470:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  816474:	000530fa 	rdctl	r2,ienable
  816478:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  81647c:	00c00044 	movi	r3,1
  816480:	e0bfff17 	ldw	r2,-4(fp)
  816484:	1884983a 	sll	r2,r3,r2
  816488:	1007883a 	mov	r3,r2
  81648c:	e0bffd17 	ldw	r2,-12(fp)
  816490:	1884703a 	and	r2,r3,r2
  816494:	1004c03a 	cmpne	r2,r2,zero
  816498:	10803fcc 	andi	r2,r2,255
}
  81649c:	e037883a 	mov	sp,fp
  8164a0:	df000017 	ldw	fp,0(sp)
  8164a4:	dec00104 	addi	sp,sp,4
  8164a8:	f800283a 	ret

008164ac <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8164ac:	defff504 	addi	sp,sp,-44
  8164b0:	dfc00a15 	stw	ra,40(sp)
  8164b4:	df000915 	stw	fp,36(sp)
  8164b8:	df000904 	addi	fp,sp,36
  8164bc:	e13ffc15 	stw	r4,-16(fp)
  8164c0:	e17ffd15 	stw	r5,-12(fp)
  8164c4:	e1bffe15 	stw	r6,-8(fp)
  8164c8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  8164cc:	00bffa84 	movi	r2,-22
  8164d0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  8164d4:	e0bffd17 	ldw	r2,-12(fp)
  8164d8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8164dc:	e0bff817 	ldw	r2,-32(fp)
  8164e0:	10800808 	cmpgei	r2,r2,32
  8164e4:	1000271e 	bne	r2,zero,816584 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8164e8:	0005303a 	rdctl	r2,status
  8164ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8164f0:	e0fffb17 	ldw	r3,-20(fp)
  8164f4:	00bfff84 	movi	r2,-2
  8164f8:	1884703a 	and	r2,r3,r2
  8164fc:	1001703a 	wrctl	status,r2
  
  return context;
  816500:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  816504:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  816508:	008020b4 	movhi	r2,130
  81650c:	10ac9604 	addi	r2,r2,-19880
  816510:	e0fff817 	ldw	r3,-32(fp)
  816514:	180690fa 	slli	r3,r3,3
  816518:	10c5883a 	add	r2,r2,r3
  81651c:	e0fffe17 	ldw	r3,-8(fp)
  816520:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  816524:	008020b4 	movhi	r2,130
  816528:	10ac9604 	addi	r2,r2,-19880
  81652c:	e0fff817 	ldw	r3,-32(fp)
  816530:	180690fa 	slli	r3,r3,3
  816534:	10c5883a 	add	r2,r2,r3
  816538:	10800104 	addi	r2,r2,4
  81653c:	e0ffff17 	ldw	r3,-4(fp)
  816540:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  816544:	e0bffe17 	ldw	r2,-8(fp)
  816548:	10000526 	beq	r2,zero,816560 <alt_iic_isr_register+0xb4>
  81654c:	e0bff817 	ldw	r2,-32(fp)
  816550:	100b883a 	mov	r5,r2
  816554:	e13ffc17 	ldw	r4,-16(fp)
  816558:	081634c0 	call	81634c <alt_ic_irq_enable>
  81655c:	00000406 	br	816570 <alt_iic_isr_register+0xc4>
  816560:	e0bff817 	ldw	r2,-32(fp)
  816564:	100b883a 	mov	r5,r2
  816568:	e13ffc17 	ldw	r4,-16(fp)
  81656c:	08163d40 	call	8163d4 <alt_ic_irq_disable>
  816570:	e0bff715 	stw	r2,-36(fp)
  816574:	e0bffa17 	ldw	r2,-24(fp)
  816578:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81657c:	e0bff917 	ldw	r2,-28(fp)
  816580:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  816584:	e0bff717 	ldw	r2,-36(fp)
}
  816588:	e037883a 	mov	sp,fp
  81658c:	dfc00117 	ldw	ra,4(sp)
  816590:	df000017 	ldw	fp,0(sp)
  816594:	dec00204 	addi	sp,sp,8
  816598:	f800283a 	ret

0081659c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  81659c:	defff904 	addi	sp,sp,-28
  8165a0:	dfc00615 	stw	ra,24(sp)
  8165a4:	df000515 	stw	fp,20(sp)
  8165a8:	df000504 	addi	fp,sp,20
  8165ac:	e13ffc15 	stw	r4,-16(fp)
  8165b0:	e17ffd15 	stw	r5,-12(fp)
  8165b4:	e1bffe15 	stw	r6,-8(fp)
  8165b8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  8165bc:	e1bfff17 	ldw	r6,-4(fp)
  8165c0:	e17ffe17 	ldw	r5,-8(fp)
  8165c4:	e13ffd17 	ldw	r4,-12(fp)
  8165c8:	08133600 	call	813360 <open>
  8165cc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  8165d0:	e0bffb17 	ldw	r2,-20(fp)
  8165d4:	10001c16 	blt	r2,zero,816648 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  8165d8:	00802074 	movhi	r2,129
  8165dc:	109fc504 	addi	r2,r2,32532
  8165e0:	e0fffb17 	ldw	r3,-20(fp)
  8165e4:	18c00324 	muli	r3,r3,12
  8165e8:	10c5883a 	add	r2,r2,r3
  8165ec:	10c00017 	ldw	r3,0(r2)
  8165f0:	e0bffc17 	ldw	r2,-16(fp)
  8165f4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  8165f8:	00802074 	movhi	r2,129
  8165fc:	109fc504 	addi	r2,r2,32532
  816600:	e0fffb17 	ldw	r3,-20(fp)
  816604:	18c00324 	muli	r3,r3,12
  816608:	10c5883a 	add	r2,r2,r3
  81660c:	10800104 	addi	r2,r2,4
  816610:	10c00017 	ldw	r3,0(r2)
  816614:	e0bffc17 	ldw	r2,-16(fp)
  816618:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81661c:	00802074 	movhi	r2,129
  816620:	109fc504 	addi	r2,r2,32532
  816624:	e0fffb17 	ldw	r3,-20(fp)
  816628:	18c00324 	muli	r3,r3,12
  81662c:	10c5883a 	add	r2,r2,r3
  816630:	10800204 	addi	r2,r2,8
  816634:	10c00017 	ldw	r3,0(r2)
  816638:	e0bffc17 	ldw	r2,-16(fp)
  81663c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  816640:	e13ffb17 	ldw	r4,-20(fp)
  816644:	08135ec0 	call	8135ec <alt_release_fd>
  }
} 
  816648:	0001883a 	nop
  81664c:	e037883a 	mov	sp,fp
  816650:	dfc00117 	ldw	ra,4(sp)
  816654:	df000017 	ldw	fp,0(sp)
  816658:	dec00204 	addi	sp,sp,8
  81665c:	f800283a 	ret

00816660 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  816660:	defffb04 	addi	sp,sp,-20
  816664:	dfc00415 	stw	ra,16(sp)
  816668:	df000315 	stw	fp,12(sp)
  81666c:	df000304 	addi	fp,sp,12
  816670:	e13ffd15 	stw	r4,-12(fp)
  816674:	e17ffe15 	stw	r5,-8(fp)
  816678:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81667c:	01c07fc4 	movi	r7,511
  816680:	01800044 	movi	r6,1
  816684:	e17ffd17 	ldw	r5,-12(fp)
  816688:	01002074 	movhi	r4,129
  81668c:	211fc804 	addi	r4,r4,32544
  816690:	081659c0 	call	81659c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  816694:	01c07fc4 	movi	r7,511
  816698:	000d883a 	mov	r6,zero
  81669c:	e17ffe17 	ldw	r5,-8(fp)
  8166a0:	01002074 	movhi	r4,129
  8166a4:	211fc504 	addi	r4,r4,32532
  8166a8:	081659c0 	call	81659c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8166ac:	01c07fc4 	movi	r7,511
  8166b0:	01800044 	movi	r6,1
  8166b4:	e17fff17 	ldw	r5,-4(fp)
  8166b8:	01002074 	movhi	r4,129
  8166bc:	211fcb04 	addi	r4,r4,32556
  8166c0:	081659c0 	call	81659c <alt_open_fd>
}  
  8166c4:	0001883a 	nop
  8166c8:	e037883a 	mov	sp,fp
  8166cc:	dfc00117 	ldw	ra,4(sp)
  8166d0:	df000017 	ldw	fp,0(sp)
  8166d4:	dec00204 	addi	sp,sp,8
  8166d8:	f800283a 	ret

008166dc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8166dc:	defffa04 	addi	sp,sp,-24
  8166e0:	df000515 	stw	fp,20(sp)
  8166e4:	df000504 	addi	fp,sp,20
  8166e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8166ec:	0005303a 	rdctl	r2,status
  8166f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8166f4:	e0fffc17 	ldw	r3,-16(fp)
  8166f8:	00bfff84 	movi	r2,-2
  8166fc:	1884703a 	and	r2,r3,r2
  816700:	1001703a 	wrctl	status,r2
  
  return context;
  816704:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  816708:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  81670c:	e0bfff17 	ldw	r2,-4(fp)
  816710:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  816714:	e0bffd17 	ldw	r2,-12(fp)
  816718:	10800017 	ldw	r2,0(r2)
  81671c:	e0fffd17 	ldw	r3,-12(fp)
  816720:	18c00117 	ldw	r3,4(r3)
  816724:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  816728:	e0bffd17 	ldw	r2,-12(fp)
  81672c:	10800117 	ldw	r2,4(r2)
  816730:	e0fffd17 	ldw	r3,-12(fp)
  816734:	18c00017 	ldw	r3,0(r3)
  816738:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  81673c:	e0bffd17 	ldw	r2,-12(fp)
  816740:	e0fffd17 	ldw	r3,-12(fp)
  816744:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  816748:	e0bffd17 	ldw	r2,-12(fp)
  81674c:	e0fffd17 	ldw	r3,-12(fp)
  816750:	10c00015 	stw	r3,0(r2)
  816754:	e0bffb17 	ldw	r2,-20(fp)
  816758:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81675c:	e0bffe17 	ldw	r2,-8(fp)
  816760:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  816764:	0001883a 	nop
  816768:	e037883a 	mov	sp,fp
  81676c:	df000017 	ldw	fp,0(sp)
  816770:	dec00104 	addi	sp,sp,4
  816774:	f800283a 	ret

00816778 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  816778:	defffb04 	addi	sp,sp,-20
  81677c:	dfc00415 	stw	ra,16(sp)
  816780:	df000315 	stw	fp,12(sp)
  816784:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  816788:	d0a01217 	ldw	r2,-32696(gp)
  81678c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  816790:	d0a76017 	ldw	r2,-25216(gp)
  816794:	10800044 	addi	r2,r2,1
  816798:	d0a76015 	stw	r2,-25216(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81679c:	00002e06 	br	816858 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  8167a0:	e0bffd17 	ldw	r2,-12(fp)
  8167a4:	10800017 	ldw	r2,0(r2)
  8167a8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8167ac:	e0bffd17 	ldw	r2,-12(fp)
  8167b0:	10800403 	ldbu	r2,16(r2)
  8167b4:	10803fcc 	andi	r2,r2,255
  8167b8:	10000426 	beq	r2,zero,8167cc <alt_tick+0x54>
  8167bc:	d0a76017 	ldw	r2,-25216(gp)
  8167c0:	1000021e 	bne	r2,zero,8167cc <alt_tick+0x54>
    {
      alarm->rollover = 0;
  8167c4:	e0bffd17 	ldw	r2,-12(fp)
  8167c8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8167cc:	e0bffd17 	ldw	r2,-12(fp)
  8167d0:	10800217 	ldw	r2,8(r2)
  8167d4:	d0e76017 	ldw	r3,-25216(gp)
  8167d8:	18801d36 	bltu	r3,r2,816850 <alt_tick+0xd8>
  8167dc:	e0bffd17 	ldw	r2,-12(fp)
  8167e0:	10800403 	ldbu	r2,16(r2)
  8167e4:	10803fcc 	andi	r2,r2,255
  8167e8:	1000191e 	bne	r2,zero,816850 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  8167ec:	e0bffd17 	ldw	r2,-12(fp)
  8167f0:	10800317 	ldw	r2,12(r2)
  8167f4:	e0fffd17 	ldw	r3,-12(fp)
  8167f8:	18c00517 	ldw	r3,20(r3)
  8167fc:	1809883a 	mov	r4,r3
  816800:	103ee83a 	callr	r2
  816804:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  816808:	e0bfff17 	ldw	r2,-4(fp)
  81680c:	1000031e 	bne	r2,zero,81681c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  816810:	e13ffd17 	ldw	r4,-12(fp)
  816814:	08166dc0 	call	8166dc <alt_alarm_stop>
  816818:	00000d06 	br	816850 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  81681c:	e0bffd17 	ldw	r2,-12(fp)
  816820:	10c00217 	ldw	r3,8(r2)
  816824:	e0bfff17 	ldw	r2,-4(fp)
  816828:	1887883a 	add	r3,r3,r2
  81682c:	e0bffd17 	ldw	r2,-12(fp)
  816830:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  816834:	e0bffd17 	ldw	r2,-12(fp)
  816838:	10c00217 	ldw	r3,8(r2)
  81683c:	d0a76017 	ldw	r2,-25216(gp)
  816840:	1880032e 	bgeu	r3,r2,816850 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  816844:	e0bffd17 	ldw	r2,-12(fp)
  816848:	00c00044 	movi	r3,1
  81684c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  816850:	e0bffe17 	ldw	r2,-8(fp)
  816854:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  816858:	e0fffd17 	ldw	r3,-12(fp)
  81685c:	d0a01204 	addi	r2,gp,-32696
  816860:	18bfcf1e 	bne	r3,r2,8167a0 <__alt_mem_onchip_mem+0xff80e7a0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  816864:	0001883a 	nop
}
  816868:	0001883a 	nop
  81686c:	e037883a 	mov	sp,fp
  816870:	dfc00117 	ldw	ra,4(sp)
  816874:	df000017 	ldw	fp,0(sp)
  816878:	dec00204 	addi	sp,sp,8
  81687c:	f800283a 	ret

00816880 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  816880:	defffd04 	addi	sp,sp,-12
  816884:	dfc00215 	stw	ra,8(sp)
  816888:	df000115 	stw	fp,4(sp)
  81688c:	df000104 	addi	fp,sp,4
  816890:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  816894:	e13fff17 	ldw	r4,-4(fp)
  816898:	08168d40 	call	8168d4 <alt_busy_sleep>
}
  81689c:	e037883a 	mov	sp,fp
  8168a0:	dfc00117 	ldw	ra,4(sp)
  8168a4:	df000017 	ldw	fp,0(sp)
  8168a8:	dec00204 	addi	sp,sp,8
  8168ac:	f800283a 	ret

008168b0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  8168b0:	deffff04 	addi	sp,sp,-4
  8168b4:	df000015 	stw	fp,0(sp)
  8168b8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8168bc:	000170fa 	wrctl	ienable,zero
}
  8168c0:	0001883a 	nop
  8168c4:	e037883a 	mov	sp,fp
  8168c8:	df000017 	ldw	fp,0(sp)
  8168cc:	dec00104 	addi	sp,sp,4
  8168d0:	f800283a 	ret

008168d4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  8168d4:	defffa04 	addi	sp,sp,-24
  8168d8:	dfc00515 	stw	ra,20(sp)
  8168dc:	df000415 	stw	fp,16(sp)
  8168e0:	df000404 	addi	fp,sp,16
  8168e4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  8168e8:	008000c4 	movi	r2,3
  8168ec:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  8168f0:	e0fffd17 	ldw	r3,-12(fp)
  8168f4:	008003f4 	movhi	r2,15
  8168f8:	10909004 	addi	r2,r2,16960
  8168fc:	1885383a 	mul	r2,r3,r2
  816900:	100b883a 	mov	r5,r2
  816904:	0100bef4 	movhi	r4,763
  816908:	213c2004 	addi	r4,r4,-3968
  81690c:	08069ec0 	call	8069ec <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  816910:	100b883a 	mov	r5,r2
  816914:	01200034 	movhi	r4,32768
  816918:	213fffc4 	addi	r4,r4,-1
  81691c:	08069ec0 	call	8069ec <__udivsi3>
  816920:	100b883a 	mov	r5,r2
  816924:	e13fff17 	ldw	r4,-4(fp)
  816928:	08069ec0 	call	8069ec <__udivsi3>
  81692c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  816930:	e0bffe17 	ldw	r2,-8(fp)
  816934:	10002a26 	beq	r2,zero,8169e0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  816938:	e03ffc15 	stw	zero,-16(fp)
  81693c:	00001706 	br	81699c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  816940:	00a00034 	movhi	r2,32768
  816944:	10bfffc4 	addi	r2,r2,-1
  816948:	10bfffc4 	addi	r2,r2,-1
  81694c:	103ffe1e 	bne	r2,zero,816948 <__alt_mem_onchip_mem+0xff80e948>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  816950:	e0fffd17 	ldw	r3,-12(fp)
  816954:	008003f4 	movhi	r2,15
  816958:	10909004 	addi	r2,r2,16960
  81695c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  816960:	100b883a 	mov	r5,r2
  816964:	0100bef4 	movhi	r4,763
  816968:	213c2004 	addi	r4,r4,-3968
  81696c:	08069ec0 	call	8069ec <__udivsi3>
  816970:	100b883a 	mov	r5,r2
  816974:	01200034 	movhi	r4,32768
  816978:	213fffc4 	addi	r4,r4,-1
  81697c:	08069ec0 	call	8069ec <__udivsi3>
  816980:	1007883a 	mov	r3,r2
  816984:	e0bfff17 	ldw	r2,-4(fp)
  816988:	10c5c83a 	sub	r2,r2,r3
  81698c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  816990:	e0bffc17 	ldw	r2,-16(fp)
  816994:	10800044 	addi	r2,r2,1
  816998:	e0bffc15 	stw	r2,-16(fp)
  81699c:	e0fffc17 	ldw	r3,-16(fp)
  8169a0:	e0bffe17 	ldw	r2,-8(fp)
  8169a4:	18bfe616 	blt	r3,r2,816940 <__alt_mem_onchip_mem+0xff80e940>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8169a8:	e0fffd17 	ldw	r3,-12(fp)
  8169ac:	008003f4 	movhi	r2,15
  8169b0:	10909004 	addi	r2,r2,16960
  8169b4:	1885383a 	mul	r2,r3,r2
  8169b8:	100b883a 	mov	r5,r2
  8169bc:	0100bef4 	movhi	r4,763
  8169c0:	213c2004 	addi	r4,r4,-3968
  8169c4:	08069ec0 	call	8069ec <__udivsi3>
  8169c8:	1007883a 	mov	r3,r2
  8169cc:	e0bfff17 	ldw	r2,-4(fp)
  8169d0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8169d4:	10bfffc4 	addi	r2,r2,-1
  8169d8:	103ffe1e 	bne	r2,zero,8169d4 <__alt_mem_onchip_mem+0xff80e9d4>
  8169dc:	00000d06 	br	816a14 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8169e0:	e0fffd17 	ldw	r3,-12(fp)
  8169e4:	008003f4 	movhi	r2,15
  8169e8:	10909004 	addi	r2,r2,16960
  8169ec:	1885383a 	mul	r2,r3,r2
  8169f0:	100b883a 	mov	r5,r2
  8169f4:	0100bef4 	movhi	r4,763
  8169f8:	213c2004 	addi	r4,r4,-3968
  8169fc:	08069ec0 	call	8069ec <__udivsi3>
  816a00:	1007883a 	mov	r3,r2
  816a04:	e0bfff17 	ldw	r2,-4(fp)
  816a08:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  816a0c:	10bfffc4 	addi	r2,r2,-1
  816a10:	00bffe16 	blt	zero,r2,816a0c <__alt_mem_onchip_mem+0xff80ea0c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  816a14:	0005883a 	mov	r2,zero
}
  816a18:	e037883a 	mov	sp,fp
  816a1c:	dfc00117 	ldw	ra,4(sp)
  816a20:	df000017 	ldw	fp,0(sp)
  816a24:	dec00204 	addi	sp,sp,8
  816a28:	f800283a 	ret

00816a2c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  816a2c:	defffb04 	addi	sp,sp,-20
  816a30:	df000415 	stw	fp,16(sp)
  816a34:	df000404 	addi	fp,sp,16
  816a38:	e13ffe15 	stw	r4,-8(fp)
  816a3c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  816a40:	e0bfff17 	ldw	r2,-4(fp)
  816a44:	10840070 	cmpltui	r2,r2,4097
  816a48:	1000021e 	bne	r2,zero,816a54 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  816a4c:	00840004 	movi	r2,4096
  816a50:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  816a54:	e0fffe17 	ldw	r3,-8(fp)
  816a58:	e0bfff17 	ldw	r2,-4(fp)
  816a5c:	1885883a 	add	r2,r3,r2
  816a60:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  816a64:	e0bffe17 	ldw	r2,-8(fp)
  816a68:	e0bffc15 	stw	r2,-16(fp)
  816a6c:	00000506 	br	816a84 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  816a70:	e0bffc17 	ldw	r2,-16(fp)
  816a74:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  816a78:	e0bffc17 	ldw	r2,-16(fp)
  816a7c:	10800804 	addi	r2,r2,32
  816a80:	e0bffc15 	stw	r2,-16(fp)
  816a84:	e0fffc17 	ldw	r3,-16(fp)
  816a88:	e0bffd17 	ldw	r2,-12(fp)
  816a8c:	18bff836 	bltu	r3,r2,816a70 <__alt_mem_onchip_mem+0xff80ea70>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  816a90:	e0bffe17 	ldw	r2,-8(fp)
  816a94:	108007cc 	andi	r2,r2,31
  816a98:	10000226 	beq	r2,zero,816aa4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  816a9c:	e0bffc17 	ldw	r2,-16(fp)
  816aa0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  816aa4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  816aa8:	0001883a 	nop
  816aac:	e037883a 	mov	sp,fp
  816ab0:	df000017 	ldw	fp,0(sp)
  816ab4:	dec00104 	addi	sp,sp,4
  816ab8:	f800283a 	ret

00816abc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  816abc:	defffe04 	addi	sp,sp,-8
  816ac0:	df000115 	stw	fp,4(sp)
  816ac4:	df000104 	addi	fp,sp,4
  816ac8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  816acc:	e0bfff17 	ldw	r2,-4(fp)
  816ad0:	10bffe84 	addi	r2,r2,-6
  816ad4:	10c00428 	cmpgeui	r3,r2,16
  816ad8:	18001a1e 	bne	r3,zero,816b44 <alt_exception_cause_generated_bad_addr+0x88>
  816adc:	100690ba 	slli	r3,r2,2
  816ae0:	00802074 	movhi	r2,129
  816ae4:	109abd04 	addi	r2,r2,27380
  816ae8:	1885883a 	add	r2,r3,r2
  816aec:	10800017 	ldw	r2,0(r2)
  816af0:	1000683a 	jmp	r2
  816af4:	00816b34 	movhi	r2,1452
  816af8:	00816b34 	movhi	r2,1452
  816afc:	00816b44 	movi	r2,1453
  816b00:	00816b44 	movi	r2,1453
  816b04:	00816b44 	movi	r2,1453
  816b08:	00816b34 	movhi	r2,1452
  816b0c:	00816b3c 	xorhi	r2,zero,1452
  816b10:	00816b44 	movi	r2,1453
  816b14:	00816b34 	movhi	r2,1452
  816b18:	00816b34 	movhi	r2,1452
  816b1c:	00816b44 	movi	r2,1453
  816b20:	00816b34 	movhi	r2,1452
  816b24:	00816b3c 	xorhi	r2,zero,1452
  816b28:	00816b44 	movi	r2,1453
  816b2c:	00816b44 	movi	r2,1453
  816b30:	00816b34 	movhi	r2,1452
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  816b34:	00800044 	movi	r2,1
  816b38:	00000306 	br	816b48 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  816b3c:	0005883a 	mov	r2,zero
  816b40:	00000106 	br	816b48 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  816b44:	0005883a 	mov	r2,zero
  }
}
  816b48:	e037883a 	mov	sp,fp
  816b4c:	df000017 	ldw	fp,0(sp)
  816b50:	dec00104 	addi	sp,sp,4
  816b54:	f800283a 	ret

00816b58 <atexit>:
  816b58:	200b883a 	mov	r5,r4
  816b5c:	000f883a 	mov	r7,zero
  816b60:	000d883a 	mov	r6,zero
  816b64:	0009883a 	mov	r4,zero
  816b68:	0816c201 	jmpi	816c20 <__register_exitproc>

00816b6c <exit>:
  816b6c:	defffe04 	addi	sp,sp,-8
  816b70:	000b883a 	mov	r5,zero
  816b74:	dc000015 	stw	r16,0(sp)
  816b78:	dfc00115 	stw	ra,4(sp)
  816b7c:	2021883a 	mov	r16,r4
  816b80:	0816d380 	call	816d38 <__call_exitprocs>
  816b84:	008020b4 	movhi	r2,130
  816b88:	10a4b904 	addi	r2,r2,-27932
  816b8c:	11000017 	ldw	r4,0(r2)
  816b90:	20800f17 	ldw	r2,60(r4)
  816b94:	10000126 	beq	r2,zero,816b9c <exit+0x30>
  816b98:	103ee83a 	callr	r2
  816b9c:	8009883a 	mov	r4,r16
  816ba0:	0816eb80 	call	816eb8 <_exit>

00816ba4 <memcmp>:
  816ba4:	01c000c4 	movi	r7,3
  816ba8:	3980192e 	bgeu	r7,r6,816c10 <memcmp+0x6c>
  816bac:	2144b03a 	or	r2,r4,r5
  816bb0:	11c4703a 	and	r2,r2,r7
  816bb4:	10000f26 	beq	r2,zero,816bf4 <memcmp+0x50>
  816bb8:	20800003 	ldbu	r2,0(r4)
  816bbc:	28c00003 	ldbu	r3,0(r5)
  816bc0:	10c0151e 	bne	r2,r3,816c18 <memcmp+0x74>
  816bc4:	31bfff84 	addi	r6,r6,-2
  816bc8:	01ffffc4 	movi	r7,-1
  816bcc:	00000406 	br	816be0 <memcmp+0x3c>
  816bd0:	20800003 	ldbu	r2,0(r4)
  816bd4:	28c00003 	ldbu	r3,0(r5)
  816bd8:	31bfffc4 	addi	r6,r6,-1
  816bdc:	10c00e1e 	bne	r2,r3,816c18 <memcmp+0x74>
  816be0:	21000044 	addi	r4,r4,1
  816be4:	29400044 	addi	r5,r5,1
  816be8:	31fff91e 	bne	r6,r7,816bd0 <__alt_mem_onchip_mem+0xff80ebd0>
  816bec:	0005883a 	mov	r2,zero
  816bf0:	f800283a 	ret
  816bf4:	20c00017 	ldw	r3,0(r4)
  816bf8:	28800017 	ldw	r2,0(r5)
  816bfc:	18bfee1e 	bne	r3,r2,816bb8 <__alt_mem_onchip_mem+0xff80ebb8>
  816c00:	31bfff04 	addi	r6,r6,-4
  816c04:	21000104 	addi	r4,r4,4
  816c08:	29400104 	addi	r5,r5,4
  816c0c:	39bff936 	bltu	r7,r6,816bf4 <__alt_mem_onchip_mem+0xff80ebf4>
  816c10:	303fe91e 	bne	r6,zero,816bb8 <__alt_mem_onchip_mem+0xff80ebb8>
  816c14:	003ff506 	br	816bec <__alt_mem_onchip_mem+0xff80ebec>
  816c18:	10c5c83a 	sub	r2,r2,r3
  816c1c:	f800283a 	ret

00816c20 <__register_exitproc>:
  816c20:	defffa04 	addi	sp,sp,-24
  816c24:	dc000315 	stw	r16,12(sp)
  816c28:	040020b4 	movhi	r16,130
  816c2c:	8424b904 	addi	r16,r16,-27932
  816c30:	80c00017 	ldw	r3,0(r16)
  816c34:	dc400415 	stw	r17,16(sp)
  816c38:	dfc00515 	stw	ra,20(sp)
  816c3c:	18805217 	ldw	r2,328(r3)
  816c40:	2023883a 	mov	r17,r4
  816c44:	10003726 	beq	r2,zero,816d24 <__register_exitproc+0x104>
  816c48:	10c00117 	ldw	r3,4(r2)
  816c4c:	010007c4 	movi	r4,31
  816c50:	20c00e16 	blt	r4,r3,816c8c <__register_exitproc+0x6c>
  816c54:	1a000044 	addi	r8,r3,1
  816c58:	8800221e 	bne	r17,zero,816ce4 <__register_exitproc+0xc4>
  816c5c:	18c00084 	addi	r3,r3,2
  816c60:	18c7883a 	add	r3,r3,r3
  816c64:	18c7883a 	add	r3,r3,r3
  816c68:	12000115 	stw	r8,4(r2)
  816c6c:	10c7883a 	add	r3,r2,r3
  816c70:	19400015 	stw	r5,0(r3)
  816c74:	0005883a 	mov	r2,zero
  816c78:	dfc00517 	ldw	ra,20(sp)
  816c7c:	dc400417 	ldw	r17,16(sp)
  816c80:	dc000317 	ldw	r16,12(sp)
  816c84:	dec00604 	addi	sp,sp,24
  816c88:	f800283a 	ret
  816c8c:	00800034 	movhi	r2,0
  816c90:	10800004 	addi	r2,r2,0
  816c94:	10002626 	beq	r2,zero,816d30 <__register_exitproc+0x110>
  816c98:	01006404 	movi	r4,400
  816c9c:	d9400015 	stw	r5,0(sp)
  816ca0:	d9800115 	stw	r6,4(sp)
  816ca4:	d9c00215 	stw	r7,8(sp)
  816ca8:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  816cac:	d9400017 	ldw	r5,0(sp)
  816cb0:	d9800117 	ldw	r6,4(sp)
  816cb4:	d9c00217 	ldw	r7,8(sp)
  816cb8:	10001d26 	beq	r2,zero,816d30 <__register_exitproc+0x110>
  816cbc:	81000017 	ldw	r4,0(r16)
  816cc0:	10000115 	stw	zero,4(r2)
  816cc4:	02000044 	movi	r8,1
  816cc8:	22405217 	ldw	r9,328(r4)
  816ccc:	0007883a 	mov	r3,zero
  816cd0:	12400015 	stw	r9,0(r2)
  816cd4:	20805215 	stw	r2,328(r4)
  816cd8:	10006215 	stw	zero,392(r2)
  816cdc:	10006315 	stw	zero,396(r2)
  816ce0:	883fde26 	beq	r17,zero,816c5c <__alt_mem_onchip_mem+0xff80ec5c>
  816ce4:	18c9883a 	add	r4,r3,r3
  816ce8:	2109883a 	add	r4,r4,r4
  816cec:	1109883a 	add	r4,r2,r4
  816cf0:	21802215 	stw	r6,136(r4)
  816cf4:	01800044 	movi	r6,1
  816cf8:	12406217 	ldw	r9,392(r2)
  816cfc:	30cc983a 	sll	r6,r6,r3
  816d00:	4992b03a 	or	r9,r9,r6
  816d04:	12406215 	stw	r9,392(r2)
  816d08:	21c04215 	stw	r7,264(r4)
  816d0c:	01000084 	movi	r4,2
  816d10:	893fd21e 	bne	r17,r4,816c5c <__alt_mem_onchip_mem+0xff80ec5c>
  816d14:	11006317 	ldw	r4,396(r2)
  816d18:	218cb03a 	or	r6,r4,r6
  816d1c:	11806315 	stw	r6,396(r2)
  816d20:	003fce06 	br	816c5c <__alt_mem_onchip_mem+0xff80ec5c>
  816d24:	18805304 	addi	r2,r3,332
  816d28:	18805215 	stw	r2,328(r3)
  816d2c:	003fc606 	br	816c48 <__alt_mem_onchip_mem+0xff80ec48>
  816d30:	00bfffc4 	movi	r2,-1
  816d34:	003fd006 	br	816c78 <__alt_mem_onchip_mem+0xff80ec78>

00816d38 <__call_exitprocs>:
  816d38:	defff504 	addi	sp,sp,-44
  816d3c:	df000915 	stw	fp,36(sp)
  816d40:	dd400615 	stw	r21,24(sp)
  816d44:	dc800315 	stw	r18,12(sp)
  816d48:	dfc00a15 	stw	ra,40(sp)
  816d4c:	ddc00815 	stw	r23,32(sp)
  816d50:	dd800715 	stw	r22,28(sp)
  816d54:	dd000515 	stw	r20,20(sp)
  816d58:	dcc00415 	stw	r19,16(sp)
  816d5c:	dc400215 	stw	r17,8(sp)
  816d60:	dc000115 	stw	r16,4(sp)
  816d64:	d9000015 	stw	r4,0(sp)
  816d68:	2839883a 	mov	fp,r5
  816d6c:	04800044 	movi	r18,1
  816d70:	057fffc4 	movi	r21,-1
  816d74:	008020b4 	movhi	r2,130
  816d78:	10a4b904 	addi	r2,r2,-27932
  816d7c:	12000017 	ldw	r8,0(r2)
  816d80:	45005217 	ldw	r20,328(r8)
  816d84:	44c05204 	addi	r19,r8,328
  816d88:	a0001c26 	beq	r20,zero,816dfc <__call_exitprocs+0xc4>
  816d8c:	a0800117 	ldw	r2,4(r20)
  816d90:	15ffffc4 	addi	r23,r2,-1
  816d94:	b8000d16 	blt	r23,zero,816dcc <__call_exitprocs+0x94>
  816d98:	14000044 	addi	r16,r2,1
  816d9c:	8421883a 	add	r16,r16,r16
  816da0:	8421883a 	add	r16,r16,r16
  816da4:	84402004 	addi	r17,r16,128
  816da8:	a463883a 	add	r17,r20,r17
  816dac:	a421883a 	add	r16,r20,r16
  816db0:	e0001e26 	beq	fp,zero,816e2c <__call_exitprocs+0xf4>
  816db4:	80804017 	ldw	r2,256(r16)
  816db8:	e0801c26 	beq	fp,r2,816e2c <__call_exitprocs+0xf4>
  816dbc:	bdffffc4 	addi	r23,r23,-1
  816dc0:	843fff04 	addi	r16,r16,-4
  816dc4:	8c7fff04 	addi	r17,r17,-4
  816dc8:	bd7ff91e 	bne	r23,r21,816db0 <__alt_mem_onchip_mem+0xff80edb0>
  816dcc:	00800034 	movhi	r2,0
  816dd0:	10800004 	addi	r2,r2,0
  816dd4:	10000926 	beq	r2,zero,816dfc <__call_exitprocs+0xc4>
  816dd8:	a0800117 	ldw	r2,4(r20)
  816ddc:	1000301e 	bne	r2,zero,816ea0 <__call_exitprocs+0x168>
  816de0:	a0800017 	ldw	r2,0(r20)
  816de4:	10003226 	beq	r2,zero,816eb0 <__call_exitprocs+0x178>
  816de8:	a009883a 	mov	r4,r20
  816dec:	98800015 	stw	r2,0(r19)
  816df0:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  816df4:	9d000017 	ldw	r20,0(r19)
  816df8:	a03fe41e 	bne	r20,zero,816d8c <__alt_mem_onchip_mem+0xff80ed8c>
  816dfc:	dfc00a17 	ldw	ra,40(sp)
  816e00:	df000917 	ldw	fp,36(sp)
  816e04:	ddc00817 	ldw	r23,32(sp)
  816e08:	dd800717 	ldw	r22,28(sp)
  816e0c:	dd400617 	ldw	r21,24(sp)
  816e10:	dd000517 	ldw	r20,20(sp)
  816e14:	dcc00417 	ldw	r19,16(sp)
  816e18:	dc800317 	ldw	r18,12(sp)
  816e1c:	dc400217 	ldw	r17,8(sp)
  816e20:	dc000117 	ldw	r16,4(sp)
  816e24:	dec00b04 	addi	sp,sp,44
  816e28:	f800283a 	ret
  816e2c:	a0800117 	ldw	r2,4(r20)
  816e30:	80c00017 	ldw	r3,0(r16)
  816e34:	10bfffc4 	addi	r2,r2,-1
  816e38:	15c01426 	beq	r2,r23,816e8c <__call_exitprocs+0x154>
  816e3c:	80000015 	stw	zero,0(r16)
  816e40:	183fde26 	beq	r3,zero,816dbc <__alt_mem_onchip_mem+0xff80edbc>
  816e44:	95c8983a 	sll	r4,r18,r23
  816e48:	a0806217 	ldw	r2,392(r20)
  816e4c:	a5800117 	ldw	r22,4(r20)
  816e50:	2084703a 	and	r2,r4,r2
  816e54:	10000b26 	beq	r2,zero,816e84 <__call_exitprocs+0x14c>
  816e58:	a0806317 	ldw	r2,396(r20)
  816e5c:	2088703a 	and	r4,r4,r2
  816e60:	20000c1e 	bne	r4,zero,816e94 <__call_exitprocs+0x15c>
  816e64:	89400017 	ldw	r5,0(r17)
  816e68:	d9000017 	ldw	r4,0(sp)
  816e6c:	183ee83a 	callr	r3
  816e70:	a0800117 	ldw	r2,4(r20)
  816e74:	15bfbf1e 	bne	r2,r22,816d74 <__alt_mem_onchip_mem+0xff80ed74>
  816e78:	98800017 	ldw	r2,0(r19)
  816e7c:	153fcf26 	beq	r2,r20,816dbc <__alt_mem_onchip_mem+0xff80edbc>
  816e80:	003fbc06 	br	816d74 <__alt_mem_onchip_mem+0xff80ed74>
  816e84:	183ee83a 	callr	r3
  816e88:	003ff906 	br	816e70 <__alt_mem_onchip_mem+0xff80ee70>
  816e8c:	a5c00115 	stw	r23,4(r20)
  816e90:	003feb06 	br	816e40 <__alt_mem_onchip_mem+0xff80ee40>
  816e94:	89000017 	ldw	r4,0(r17)
  816e98:	183ee83a 	callr	r3
  816e9c:	003ff406 	br	816e70 <__alt_mem_onchip_mem+0xff80ee70>
  816ea0:	a0800017 	ldw	r2,0(r20)
  816ea4:	a027883a 	mov	r19,r20
  816ea8:	1029883a 	mov	r20,r2
  816eac:	003fb606 	br	816d88 <__alt_mem_onchip_mem+0xff80ed88>
  816eb0:	0005883a 	mov	r2,zero
  816eb4:	003ffb06 	br	816ea4 <__alt_mem_onchip_mem+0xff80eea4>

00816eb8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  816eb8:	defffd04 	addi	sp,sp,-12
  816ebc:	df000215 	stw	fp,8(sp)
  816ec0:	df000204 	addi	fp,sp,8
  816ec4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  816ec8:	0001883a 	nop
  816ecc:	e0bfff17 	ldw	r2,-4(fp)
  816ed0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  816ed4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  816ed8:	10000226 	beq	r2,zero,816ee4 <_exit+0x2c>
    ALT_SIM_FAIL();
  816edc:	002af070 	cmpltui	zero,zero,43969
  816ee0:	00000106 	br	816ee8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  816ee4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  816ee8:	003fff06 	br	816ee8 <__alt_mem_onchip_mem+0xff80eee8>
