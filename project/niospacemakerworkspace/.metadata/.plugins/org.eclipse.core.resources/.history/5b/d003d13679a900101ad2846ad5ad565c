// replace this include (or leave it, it's harmless)
// #include <sys/alt_timestamp.h> // for timer stuff
#include "sys/alt_alarm.h"       // for ticks

// ...

int main(void)
{
    // init TickData struct with default values
    reset(&pacemaker_data);

    // UART open (use whatever *_NAME macro your system.h has)
#ifndef UART_NAME
#  ifdef UART_0_NAME
#    define UART_NAME UART_0_NAME
#  endif
#endif
    uart_fd = open(UART_NAME, O_RDWR | O_NONBLOCK);
    if (uart_fd < 0) {
        printf("Error: Failed to open UART device %s\n", UART_NAME);
    } else {
        printf("Successfully opened UART device %s\n", UART_NAME);
    }

    // --- REPLACE all timestamp usage with HAL ticks ---
    alt_u32 last_ticks = alt_nticks();

    while (1)
    {
        alt_u32 switches = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
        IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, (switches & 0x03));

        int sccharts_mode = !(switches & 0x01);
        int button_mode   = !(switches & 0x02);

        if (sccharts_mode) {
            if (button_mode) {
                // buttons
                alt_u32 keys = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
                pacemaker_data.AS = !(keys & 0x02);
                pacemaker_data.VS = !(keys & 0x01);

                // deltaT in milliseconds using HAL ticks
                alt_u32 now_ticks     = alt_nticks();
                alt_u32 elapsed_ticks = now_ticks - last_ticks;
                last_ticks            = now_ticks;
                pacemaker_data.deltaT =
                    (double)elapsed_ticks * 1000.0 / (double)alt_ticks_per_second();

                tick(&pacemaker_data);

                alt_u32 green_leds = 0;
                if (pacemaker_data.AP) green_leds |= 0x02;
                if (pacemaker_data.VP) green_leds |= 0x01;
                IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, green_leds);

                pacemaker_data.AS = 0;
                pacemaker_data.VS = 0;
            } else {
                // UART path unchanged
                char received_char;
                int bytes_read = read(uart_fd, &received_char, 1);
                if (bytes_read > 0) {
                    if (received_char == 'A') pacemaker_data.AS = 1;
                    else if (received_char == 'V') pacemaker_data.VS = 1;
                }
                tick(&pacemaker_data);
                if (pacemaker_data.AP) write(uart_fd, "A", 1);
                if (pacemaker_data.VP) write(uart_fd, "V", 1);
            }
        } else {
            if (button_mode) {
                // TODO: your C-timer path
            } else {
                // TODO: your C-UART path
            }
        }
    }
}
